{"version":3,"file":"dx-grid-core.umd.js","sources":["../src/plugins/integrated-grouping/constants.ts","../src/plugins/grid-core/computeds.ts","../src/plugins/sorting-state/reducers.ts","../src/plugins/sorting-state/helpers.ts","../src/utils/merge-sort.ts","../src/utils/hierarchical-data.ts","../src/plugins/integrated-sorting/computeds.ts","../src/plugins/filtering-state/reducers.ts","../src/plugins/filtering-state/helpers.ts","../src/plugins/filtering-state/computeds.ts","../src/plugins/integrated-filtering/computeds.ts","../src/plugins/grouping-state/constants.ts","../src/plugins/grouping-state/reducers.ts","../src/plugins/grouping-state/helpers.ts","../src/plugins/integrated-grouping/computeds.ts","../src/plugins/custom-grouping/computeds.ts","../src/plugins/grouping-panel/helpers.ts","../src/plugins/paging-state/reducers.ts","../src/plugins/integrated-paging/helpers.ts","../src/plugins/integrated-paging/computeds.ts","../src/plugins/paging-panel/helpers.ts","../src/utils/common-reducers.ts","../src/plugins/selection-state/reducers.ts","../src/plugins/integrated-selection/computeds.ts","../src/plugins/editing-state/reducers.ts","../src/plugins/editing-state/computeds.ts","../src/plugins/editing-state/helpers.ts","../src/plugins/table-column-reordering/constants.ts","../src/plugins/table-column-reordering/reducers.ts","../src/plugins/table/constants.ts","../src/plugins/table-column-reordering/computeds.ts","../src/plugins/table-column-resizing/helpers.ts","../src/plugins/table-column-resizing/computeds.ts","../src/plugins/table-column-resizing/reducers.ts","../src/plugins/table-edit-column/constants.ts","../src/plugins/table-edit-row/constants.ts","../src/plugins/table-header-row/constants.ts","../src/plugins/table-edit-column/helpers.ts","../src/plugins/table-edit-column/computeds.ts","../src/plugins/table-edit-row/helpers.ts","../src/plugins/table-edit-row/computeds.ts","../src/plugins/table-inline-cell-editing/computeds.ts","../src/plugins/table-filter-row/constants.ts","../src/plugins/table-filter-row/helpers.ts","../src/plugins/table-filter-row/computeds.ts","../src/plugins/table-group-row/constants.ts","../src/plugins/table-group-row/computeds.ts","../src/plugins/table-header-row/helpers.ts","../src/plugins/table-header-row/computeds.ts","../src/plugins/table-band-header/constants.ts","../src/plugins/table-band-header/helpers.ts","../src/plugins/virtual-table-state/helpers.ts","../src/plugins/virtual-table-state/utils.ts","../src/plugins/table-band-header/computeds.ts","../src/plugins/row-detail-state/reducers.ts","../src/plugins/table-row-detail/constants.ts","../src/plugins/table-row-detail/helpers.ts","../src/plugins/table-row-detail/computeds.ts","../src/plugins/table-selection/constants.ts","../src/plugins/table-selection/helpers.ts","../src/plugins/table-selection/computeds.ts","../src/plugins/table/helpers.ts","../src/utils/column-extension.ts","../src/plugins/table/computeds.ts","../src/plugins/table-column-visibility/computeds.ts","../src/plugins/table-column-visibility/helpers.ts","../src/plugins/column-chooser/computeds.ts","../src/plugins/column-chooser/reducers.ts","../src/plugins/tree-data-state/reducers.ts","../src/plugins/custom-tree-data/constants.ts","../src/plugins/custom-tree-data/computeds.ts","../src/plugins/table-tree-column/helpers.ts","../src/plugins/search-state/reducers.ts","../src/plugins/search-state/computeds.ts","../src/plugins/data-type-provider/computeds.ts","../src/plugins/table-fixed-columns/constants.ts","../src/plugins/table-fixed-columns/helpers.ts","../src/plugins/table-fixed-columns/computeds.ts","../src/plugins/integrated-summary/computeds.ts","../src/plugins/table-summary-row/constants.ts","../src/plugins/table-summary-row/helpers.ts","../src/plugins/table-summary-row/computeds.ts","../src/plugins/summary-state/helpers.ts","../src/utils/column-geometries.ts","../src/utils/table.ts","../src/utils/group-panel.ts","../src/plugins/virtual-table/utils.ts","../src/plugins/virtual-table/constants.ts","../src/plugins/virtual-table/helpers.ts","../src/plugins/virtual-table-state/computeds.ts","../src/plugins/grid-exporter/constants.ts","../src/plugins/grid-exporter/helpers.ts","../src/plugins/grid-exporter/computeds.ts","../src/utils/virtual-table.ts","../src/plugins/table-group-row/helpers.ts"],"sourcesContent":["export const GRID_GROUP_TYPE = Symbol('group');\nexport const GRID_GROUP_CHECK = Symbol(`${GRID_GROUP_TYPE.toString()}_check`);\nexport const GRID_GROUP_LEVEL_KEY = Symbol(`${GRID_GROUP_TYPE.toString()}_levelKey`);\nexport const GRID_GROUP_COLLAPSED_ROWS = Symbol(`${GRID_GROUP_TYPE.toString()}_collapsedRows`);\n","import { GRID_GROUP_CHECK } from '../integrated-grouping/constants';\nimport { GetRowIdFn, Row, RowId, GetCellValueFn, Column } from '../../types';\nimport { PureComputed } from '@devexpress/dx-core';\n\nconst warnIfRowIdUndefined: PureComputed<[GetRowIdFn]> = getRowId => (row) => {\n  const result = getRowId(row);\n  if (!row[GRID_GROUP_CHECK] && result === undefined) {\n    // tslint:disable-next-line: no-console\n    console.warn('The row id is undefined. Check the getRowId function. The row is', row);\n  }\n  return result;\n};\n\nexport const rowIdGetter: PureComputed<[GetRowIdFn, Row[]]> = (getRowId, rows) => {\n  if (!getRowId) {\n    const map = new Map(rows.map((row, rowIndex) => [row, rowIndex]) as [any, number]);\n    return (row: Row) => map.get(row) as RowId;\n  }\n  return warnIfRowIdUndefined(getRowId);\n};\n\nconst defaultGetCellValue: GetCellValueFn = (row, columnName) => row[columnName];\n\nexport const cellValueGetter: PureComputed<[GetCellValueFn, Column[]]> = (\n  getCellValue = defaultGetCellValue, columns,\n) => {\n  let useFastAccessor = true;\n  const map = columns.reduce((acc, column) => {\n    if (column.getCellValue) {\n      useFastAccessor = false;\n      acc[column.name] = column.getCellValue;\n    }\n    return acc;\n  }, {});\n\n  if (useFastAccessor) {\n    return getCellValue;\n  }\n\n  return (row, columnName) => (map[columnName]\n    ? map[columnName](row, columnName)\n    : getCellValue(row, columnName));\n};\n","import { ColumnSortingState, ChangeSortingPayload, Sorting } from '../../types';\nimport { PureReducer, slice } from '@devexpress/dx-core';\n\nexport const changeColumnSorting: PureReducer<ColumnSortingState, ChangeSortingPayload> = (\n  state, {\n  columnName, direction, keepOther, sortIndex,\n}) => {\n  const { sorting } = state;\n\n  let nextSorting: any[] = [];\n  if (keepOther === true) {\n    nextSorting = sorting as Sorting[];\n  }\n  if (Array.isArray(keepOther)) {\n    nextSorting = slice(sorting)\n      .filter(s =>\n        keepOther.indexOf(s.columnName) > -1);\n  }\n\n  const columnSortingIndex = sorting.findIndex(s => s.columnName === columnName);\n  const columnSorting = sorting[columnSortingIndex];\n  const newColumnSorting = {\n    columnName,\n    direction: direction\n      || (!columnSorting || columnSorting.direction === 'desc' ? 'asc' : 'desc'),\n  };\n\n  if (columnSortingIndex > -1) {\n    nextSorting = slice(nextSorting);\n    nextSorting.splice(columnSortingIndex, 1);\n  }\n\n  if (direction !== null) {\n    const newIndexFallback = columnSortingIndex > -1 ? columnSortingIndex : nextSorting.length;\n    const newIndex = sortIndex !== undefined ? sortIndex : newIndexFallback;\n    nextSorting = slice(nextSorting);\n    nextSorting.splice(newIndex, 0, newColumnSorting);\n  }\n\n  return {\n    sorting: nextSorting,\n  };\n};\n","import {\n  KeepOtherSorting, GetColumnSortingDirectionFn, GetPersistentSortedColumnsFn,\n  CalculateKeepOtherFn,\n} from '../../types';\n\nconst unique = (arr: any[]) => [...Array.from(new Set(arr))];\n\nexport const getColumnSortingDirection: GetColumnSortingDirectionFn = (\n  sorting, columnName,\n) => {\n  const columnSorting = sorting.filter(s => s.columnName === columnName)[0];\n  return columnSorting ? columnSorting.direction : null;\n};\n\nexport const getPersistentSortedColumns: GetPersistentSortedColumnsFn = (\n  sorting, columnExtensions = [],\n) => columnExtensions.reduce((acc, { columnName, sortingEnabled }) => {\n  if (sortingEnabled === false) {\n    if (sorting.findIndex(sortItem => sortItem.columnName === columnName) > -1) {\n      acc.push(columnName);\n    }\n  }\n  return acc;\n}, [] as string[]);\n\nexport const calculateKeepOther: CalculateKeepOtherFn = (\n  sorting, keepOther, persistentSortedColumns = [],\n) => {\n  if (!persistentSortedColumns.length) return keepOther as KeepOtherSorting;\n  if (!keepOther) return persistentSortedColumns as KeepOtherSorting;\n\n  return Array.isArray(keepOther)\n    ? unique([...keepOther, ...persistentSortedColumns])\n    : unique([...sorting.map(item => item.columnName), ...persistentSortedColumns]);\n};\n","import { slice } from '@devexpress/dx-core';\nimport { MergeFn, SortArrayToAuxiliaryFn, CompareFn } from '../types';\n\n/* eslint-disable no-plusplus, no-param-reassign, no-use-before-define, no-constant-condition */\n/* tslint:disable no-increment-decrement */\n\nconst merge: MergeFn = (array, auxiliary, lo, mid, hi, compare) => {\n  let i = lo;\n  let j = mid + 1;\n  let k = lo;\n  while (true) {\n    const cmp = compare(array[i], array[j]);\n    if (cmp <= 0) {\n      auxiliary[k++] = array[i++];\n      if (i > mid) {\n        do {\n          auxiliary[k++] = array[j++];\n        } while (j <= hi);\n        break;\n      }\n    } else {\n      auxiliary[k++] = array[j++];\n      if (j > hi) {\n        do {\n          auxiliary[k++] = array[i++];\n        } while (i <= mid);\n        break;\n      }\n    }\n  }\n};\n\nconst sortArrayToAuxiliary: SortArrayToAuxiliaryFn = (array, auxiliary, lo, hi, compare) => {\n  if (hi < lo) return;\n  if (hi === lo) {\n    auxiliary[lo] = array[lo];\n    return;\n  }\n  const mid = Math.floor(lo + ((hi - lo) / 2));\n  sortAuxiliaryToArray(array, auxiliary, lo, mid, compare);\n  sortAuxiliaryToArray(array, auxiliary, mid + 1, hi, compare);\n  merge(array, auxiliary, lo, mid, hi, compare);\n};\n\nconst sortAuxiliaryToArray: SortArrayToAuxiliaryFn = (array, auxiliary, lo, hi, compare) => {\n  if (hi <= lo) return;\n  const mid = Math.floor(lo + ((hi - lo) / 2));\n  sortArrayToAuxiliary(array, auxiliary, lo, mid, compare);\n  sortArrayToAuxiliary(array, auxiliary, mid + 1, hi, compare);\n  merge(auxiliary, array, lo, mid, hi, compare);\n};\n\nexport default (\n  array: any[] | ReadonlyArray<any>,\n  compare: CompareFn = (a, b): number => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  },\n) => {\n  const result = slice(array);\n  const auxiliary = slice(array);\n  sortAuxiliaryToArray(result, auxiliary, 0, result.length - 1, compare);\n  return result;\n};\n","import { RowsToTreeFn, TreeToRowsFn, TreeNode } from '../types';\n\nexport const NODE_CHECK = Symbol('node');\n\nexport const rowsToTree: RowsToTreeFn = (rows, getRowLevelKey) => {\n  if (!rows.length) return rows;\n\n  const levels: any[] = [{ children: [] }];\n\n  rows.forEach((row) => {\n    const levelKey = getRowLevelKey(row);\n    if (levelKey) {\n      const levelIndex = levels.slice(1)\n        .findIndex(level => getRowLevelKey(level.root) === levelKey) + 1;\n      if (levelIndex > 0) {\n        levels.splice(levelIndex, levels.length - levelIndex);\n      }\n      const node = { [NODE_CHECK]: true, root: row, children: [] };\n      levels[levels.length - 1].children.push(node);\n      levels.push(node);\n    } else {\n      levels[levels.length - 1].children.push(row);\n    }\n  });\n\n  return levels[0].children;\n};\n\nexport const treeToRows: TreeToRowsFn = (tree, rows = []) => {\n  if (!tree.length) return tree;\n  return tree.reduce(\n    (acc, node) => {\n      if (node[NODE_CHECK]) {\n        acc.push(node.root);\n        treeToRows(node.children, rows);\n      } else {\n        acc.push(node);\n      }\n      return acc;\n    },\n    rows as TreeNode[],\n  );\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport mergeSort from '../../utils/merge-sort';\nimport { NODE_CHECK, rowsToTree, treeToRows } from '../../utils/hierarchical-data';\nimport {\n  Row, GetRowLevelKeyFn, CompareFn, CreateCompareFn, SortedRowsFn, TreeNode,\n} from '../../types';\n\nconst defaultCompare = (a: any, b: any) => {\n  if (a === b) return 0;\n\n  if (a === null) {\n    return b === undefined ? -1 : 1;\n  }\n  if (a === undefined) {\n    return 1;\n  }\n  if (b === null || b === undefined) {\n    return -1;\n  }\n  return a < b ? -1 : 1;\n};\n\nconst createCompare: CreateCompareFn = (\n  sorting, getColumnCompare, getComparableValue,\n) => sorting.reduceRight((prevCompare, columnSorting) => {\n  const { columnName } = columnSorting;\n  const inverse = columnSorting.direction === 'desc';\n  const columnCompare = (getColumnCompare && getColumnCompare(columnName)) || defaultCompare;\n\n  return (aRow: Row, bRow: Row) => {\n    const a = getComparableValue(aRow, columnName);\n    const b = getComparableValue(bRow, columnName);\n    const result = columnCompare(a, b);\n\n    if (result !== 0) {\n      return inverse ? -result : result;\n    }\n    return prevCompare(aRow, bRow);\n  };\n}, (...args: any[]) => 0);\n\nconst sortTree: PureComputed<[TreeNode[], CompareFn]> = (tree, compare) => {\n  const sortedTree = tree.map((node) => {\n    if (node[NODE_CHECK]) {\n      return {\n        ...node,\n        children: sortTree(node.children, compare),\n      };\n    }\n    return node;\n  });\n\n  return mergeSort(\n    sortedTree, (a, b) => compare(a[NODE_CHECK] ? a.root : a, b[NODE_CHECK] ? b.root : b),\n  );\n};\n\nconst sortHierarchicalRows: PureComputed<[Row[], CompareFn, GetRowLevelKeyFn]> = (\n  rows, compare, getRowLevelKey,\n) => {\n  const tree = rowsToTree(rows, getRowLevelKey);\n\n  const sortedTree = sortTree(tree, compare);\n\n  return treeToRows(sortedTree);\n};\n\nexport const sortedRows: SortedRowsFn = (\n  rows, sorting, getCellValue, getColumnCompare, isGroupRow, getRowLevelKey,\n) => {\n  if (!sorting.length || !rows.length) return rows;\n\n  let compare;\n  if (!getRowLevelKey) {\n    compare = createCompare(sorting, getColumnCompare, getCellValue);\n    return mergeSort(rows.slice(), compare);\n  }\n\n  compare = createCompare(sorting, getColumnCompare, (row, columnName) => {\n    if (isGroupRow && isGroupRow(row)) {\n      if (row.groupedBy === columnName) {\n        return row.value;\n      }\n      return undefined;\n    }\n    return getCellValue(row, columnName);\n  });\n  return sortHierarchicalRows(\n    rows,\n    compare,\n    getRowLevelKey,\n  );\n};\n","import { Filter, ChangeFilterPayload } from '../../types';\nimport { PureReducer, slice } from '@devexpress/dx-core';\n\nexport const changeColumnFilter: PureReducer<Filter[], ChangeFilterPayload> = (\n  filters, { columnName, config },\n) => {\n  const filterIndex = filters.findIndex(f => f.columnName === columnName);\n  const nextState = slice(filters);\n\n  if (config) {\n    const filter = { columnName, ...config };\n    if (filterIndex > -1) {\n      nextState.splice(filterIndex, 1, filter);\n    } else {\n      nextState.push(filter);\n    }\n  } else if (filterIndex > -1) {\n    nextState.splice(filterIndex, 1);\n  }\n\n  return nextState;\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport { Filter } from '../../types';\n\nexport const getColumnFilterConfig: PureComputed<\n  [Filter[], string], Filter | null\n> = (filters, columnName) => (\n  filters.length && filters.filter(s => s.columnName === columnName)[0] || null\n);\n","import { FilterExpression, Filter } from '../../types';\nimport { PureComputed } from '@devexpress/dx-core';\n\nexport const filterExpression: PureComputed<\n  [Filter[], FilterExpression?], FilterExpression\n> = (filters, expression) => {\n  // tslint:disable-next-line: no-object-literal-type-assertion\n  const selfFilterExpr = { filters, operator: 'and' as 'and' } as FilterExpression;\n  if (!expression) {\n    return selfFilterExpr;\n  }\n  return {\n    operator: 'and' as 'and',\n    filters: [expression, selfFilterExpr] as FilterExpression[],\n  };\n};\n","import { NODE_CHECK, rowsToTree, treeToRows } from '../../utils/hierarchical-data';\nimport { PureComputed } from '@devexpress/dx-core';\nimport {\n  Row, Filter, FilterPredicate,\n  FilterExpression, GetCellValueFn, RowsWithCollapsedRowsMetaMap,\n  UnwrapRowsComputed, FilteredRowsFn, FilterHierarchicalRowsFn,\n  CompiledPredicate, GetColumnPredicateFn, FilteredCollapsedRowsGetterFn, TreeNode,\n} from '../../types';\n\nconst operators = {\n  or: (predicates: CompiledPredicate[]) => (row: Row) => (\n    predicates.reduce((acc, predicate) => acc || predicate(row), false)\n  ),\n  and: (predicates: CompiledPredicate[]) => (row: Row) => (\n    predicates.reduce((acc, predicate) => acc && predicate(row), true)\n  ),\n};\n\nconst toLowerCase = (value: any) => String(value).toLowerCase();\n\nconst operationPredicates: { [key: string]: FilterPredicate } = {\n  contains: (value, filter) => toLowerCase(value)\n    .indexOf(toLowerCase(filter.value)) > -1,\n\n  notContains: (value, filter) => toLowerCase(value)\n    .indexOf(toLowerCase(filter.value)) === -1,\n\n  startsWith: (value, filter) => toLowerCase(value)\n    .startsWith(toLowerCase(filter.value)),\n\n  endsWith: (value, filter) => toLowerCase(value)\n    .endsWith(toLowerCase(filter.value)),\n\n  equal: (value, filter) => String(value) === String(filter.value),\n  notEqual: (value, filter) => String(value) !== String(filter.value),\n\n  greaterThan: (value, filter) => value > filter.value!,\n  greaterThanOrEqual: (value, filter) => value >= filter.value!,\n  lessThan: (value, filter) => value < filter.value!,\n  lessThanOrEqual: (value, filter) => value <= filter.value!,\n};\n\nexport const defaultFilterPredicate: FilterPredicate = (value, filter) => {\n  const operation = filter.operation || 'contains';\n  return operationPredicates[operation](value, filter);\n};\n\nconst filterTree: PureComputed<[TreeNode[], CompiledPredicate]> = (tree, predicate) => tree.reduce(\n  (acc, node) => {\n    if (node[NODE_CHECK]) {\n      const filteredChildren = filterTree(node.children, predicate) as TreeNode[];\n      if (filteredChildren.length > 0) {\n        acc.push({\n          ...node,\n          children: filteredChildren,\n        });\n        return acc;\n      }\n      if (predicate(node.root, true)) {\n        acc.push(node.root);\n        return acc;\n      }\n      return acc;\n    }\n\n    if (predicate(node)) {\n      acc.push(node);\n      return acc;\n    }\n\n    return acc;\n  },\n  [] as TreeNode[],\n);\n\nconst filterHierarchicalRows: FilterHierarchicalRowsFn = (\n  rows, predicate, getRowLevelKey, getCollapsedRows,\n) => {\n  const tree = rowsToTree(rows, getRowLevelKey);\n  const collapsedRowsMeta: any[] = [];\n\n  const filteredTree = filterTree(tree, (row, isNode) => {\n    if (isNode) {\n      const collapsedRows = getCollapsedRows && getCollapsedRows(row);\n      if (collapsedRows && collapsedRows.length) {\n        const filteredCollapsedRows = collapsedRows.filter(predicate);\n        collapsedRowsMeta.push([row, filteredCollapsedRows]);\n        return !!filteredCollapsedRows.length || predicate(row);\n      }\n      if (predicate(row)) {\n        collapsedRowsMeta.push([row, []]);\n        return true;\n      }\n      return false;\n    }\n    return predicate(row);\n  });\n\n  return { rows: treeToRows(filteredTree), collapsedRowsMeta: new Map(collapsedRowsMeta) };\n};\n\nconst buildPredicate: PureComputed<\n  [FilterExpression, GetCellValueFn, GetColumnPredicateFn],\n  CompiledPredicate\n> = (\n  initialFilterExpression, getCellValue, getColumnPredicate,\n) => {\n  const getSimplePredicate = (filter: Filter) => {\n    const { columnName } = filter;\n    const customPredicate = getColumnPredicate && getColumnPredicate(columnName);\n    const predicate = customPredicate || defaultFilterPredicate;\n    return (row: Row) => predicate(getCellValue(row, columnName), filter, row);\n  };\n\n  const getOperatorPredicate: any = (filterExpression: FilterExpression) => {\n    const build = operators[toLowerCase(filterExpression.operator)];\n    return build && build(filterExpression.filters.map(getPredicate));\n  };\n\n  const getPredicate = (filterExpression: any) => (\n    getOperatorPredicate(filterExpression)\n    || getSimplePredicate(filterExpression)\n  );\n\n  return getPredicate(initialFilterExpression);\n};\n\nexport const filteredRows: FilteredRowsFn = (\n  rows, filterExpression, getCellValue, getColumnPredicate, getRowLevelKey, getCollapsedRows,\n) => {\n  if (!(filterExpression && Object.keys(filterExpression).length && rows.length)) {\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    return { rows } as Partial<RowsWithCollapsedRowsMetaMap>;\n  }\n\n  const predicate = buildPredicate(\n    filterExpression,\n    getCellValue,\n    getColumnPredicate,\n  );\n\n  return getRowLevelKey\n    ? filterHierarchicalRows(rows, predicate, getRowLevelKey, getCollapsedRows)\n    : { rows: rows.filter(predicate) };\n};\n\nexport const filteredCollapsedRowsGetter: FilteredCollapsedRowsGetterFn = (\n  { collapsedRowsMeta },\n) => row => collapsedRowsMeta && collapsedRowsMeta.get(row);\n\nexport const unwrappedFilteredRows: UnwrapRowsComputed = ({ rows }) => rows;\n","export const GROUP_KEY_SEPARATOR = '|';\n","import { PureReducer, slice } from '@devexpress/dx-core';\nimport { Getters } from '@devexpress/dx-react-core';\nimport { GROUP_KEY_SEPARATOR } from './constants';\nimport {\n  Grouping, ColumnGroupingState, ChangeGroupingPayload, ToggleGroupPayload, DraftGroupingState,\n} from '../../types';\n\nconst applyColumnGrouping: PureReducer<Grouping[], ChangeGroupingPayload> = (\n  grouping, { columnName, groupIndex },\n) => {\n  let nextGrouping = grouping;\n  const groupingIndex = nextGrouping.findIndex(g => g.columnName === columnName);\n  let targetIndex = groupIndex;\n\n  if (groupingIndex > -1) {\n    nextGrouping = slice(grouping);\n    (nextGrouping as Grouping[]).splice(groupingIndex, 1);\n  } else if (groupIndex === undefined) {\n    targetIndex = nextGrouping.length;\n  }\n\n  if (targetIndex > -1) {\n    nextGrouping = slice(nextGrouping);\n    (nextGrouping as Grouping[]).splice(targetIndex, 0, {\n      columnName,\n    });\n  }\n\n  return nextGrouping;\n};\n\nexport const changeColumnGrouping: PureReducer<ColumnGroupingState, ChangeGroupingPayload> = (\n  { grouping, expandedGroups }, { columnName, groupIndex },\n) => {\n  const nextGrouping = applyColumnGrouping(grouping!, { columnName, groupIndex });\n\n  const ungroupedColumnIndex = grouping!.findIndex(\n    (group, index) => !nextGrouping[index] || group.columnName !== nextGrouping[index].columnName,\n  );\n  if (ungroupedColumnIndex === -1) {\n    return {\n      grouping: nextGrouping,\n    };\n  }\n\n  const filteredExpandedGroups = expandedGroups!.filter(\n    group => group.split(GROUP_KEY_SEPARATOR).length <= ungroupedColumnIndex,\n  );\n  if (filteredExpandedGroups.length === expandedGroups!.length) {\n    return {\n      grouping: nextGrouping,\n    };\n  }\n\n  return {\n    grouping: nextGrouping,\n    expandedGroups: filteredExpandedGroups,\n  };\n};\n\nexport const toggleExpandedGroups: PureReducer<ColumnGroupingState, ToggleGroupPayload> = (\n  state, { groupKey },\n) => {\n  const expandedGroups = slice(state.expandedGroups);\n  const groupKeyIndex = expandedGroups.indexOf(groupKey);\n\n  if (groupKeyIndex > -1) {\n    expandedGroups.splice(groupKeyIndex, 1);\n  } else {\n    expandedGroups.push(groupKey);\n  }\n\n  return {\n    expandedGroups,\n  };\n};\n\nexport const draftColumnGrouping: PureReducer<\n  Getters, ChangeGroupingPayload, DraftGroupingState\n> = (\n  { grouping, draftGrouping },\n  { columnName, groupIndex },\n) => ({\n  draftGrouping: applyColumnGrouping(draftGrouping || grouping, { columnName, groupIndex }),\n});\n\nexport const cancelColumnGroupingDraft = () => ({\n  draftGrouping: null,\n});\n","import { PureComputed } from '@devexpress/dx-core';\nimport { Grouping, Sorting, GroupIndex } from '../../types';\n\nexport const adjustSortIndex: PureComputed<[GroupIndex, Grouping[], Sorting[]]> = (\n  groupingIndex, grouping, sorting,\n) => Math.max(\n  grouping.slice(0, groupingIndex).reduce(\n    (acc, columnGrouping) => {\n      const columnSortingIndex = sorting.findIndex(\n        columnSorting => columnSorting.columnName === columnGrouping.columnName,\n      );\n      return (columnSortingIndex === -1 ? acc - 1 : acc);\n    },\n    groupingIndex,\n  ),\n  0,\n);\n","import { PureComputed } from '@devexpress/dx-core';\nimport { GROUP_KEY_SEPARATOR } from '../grouping-state/constants';\nimport {\n  GRID_GROUP_TYPE,\n  GRID_GROUP_CHECK,\n  GRID_GROUP_LEVEL_KEY,\n  GRID_GROUP_COLLAPSED_ROWS,\n} from './constants';\nimport {\n  Grouping, GroupKey, Row, GetCollapsedRowsFn, IsSpecificRowFn, GroupedRowsFn,\n} from '../../types';\n\nexport const groupRowChecker: IsSpecificRowFn = row => row[GRID_GROUP_CHECK];\n\nexport const groupRowLevelKeyGetter = (row: Row) => (row ? row[GRID_GROUP_LEVEL_KEY] : undefined);\n\nconst defaultColumnCriteria = (value: any) => ({\n  value,\n  key: String(value),\n});\n\nexport const groupedRows: GroupedRowsFn = (\n  rows, grouping, getCellValue, getColumnCriteria, keyPrefix = '',\n) => {\n  if (!grouping.length) return rows;\n\n  const { columnName } = grouping[0];\n  const groupCriteria = (getColumnCriteria && getColumnCriteria(columnName))\n    || defaultColumnCriteria;\n\n  const groups = new Map();\n  rows.forEach((row) => {\n    const rawValue = getCellValue(row, columnName);\n    const { key, value } = groupCriteria(rawValue, row);\n    const sameKeyItems = groups.get(key);\n\n    if (!sameKeyItems) {\n      const groupingValue = value === rawValue ? value : value || key;\n      groups.set(key, [groupingValue, key, [row]]);\n    } else {\n      sameKeyItems[2].push(row);\n    }\n  });\n\n  const groupedBy = grouping[0].columnName;\n  const nestedGrouping = grouping.slice(1);\n  return [...groups.values()]\n    .reduce((acc, [value, key, items]) => {\n      const compoundKey = `${keyPrefix}${key}`;\n      acc.push({\n        groupedBy,\n        compoundKey,\n        key,\n        value,\n        [GRID_GROUP_CHECK]: true,\n        [GRID_GROUP_LEVEL_KEY]: `${GRID_GROUP_TYPE.toString()}_${groupedBy}`,\n      });\n      acc.push(...groupedRows(\n        items,\n        nestedGrouping,\n        getCellValue,\n        getColumnCriteria,\n        `${compoundKey}${GROUP_KEY_SEPARATOR}`,\n      ));\n      return acc;\n    }, []);\n};\n\nexport const expandedGroupRows: PureComputed<[Row[], Grouping[], GroupKey[], boolean]> = (\n  rows,\n  grouping,\n  expandedGroups,\n  isExporting,\n) => {\n  if (!grouping.length) return rows;\n\n  const groupingColumnNames = grouping.map(columnGrouping => columnGrouping.columnName);\n  const expandedGroupsSet = new Set(expandedGroups);\n  let currentGroupExpanded = true;\n  let currentGroupLevel = 0;\n\n  return rows.reduce((acc, row) => {\n    if (!row[GRID_GROUP_CHECK]) {\n      if (currentGroupExpanded) {\n        acc.push(row);\n      } else {\n        acc[acc.length - 1][GRID_GROUP_COLLAPSED_ROWS].push(row);\n      }\n      return acc;\n    }\n\n    const groupLevel = groupingColumnNames.indexOf(row.groupedBy);\n    if (groupLevel > currentGroupLevel && !currentGroupExpanded) {\n      return acc;\n    }\n\n    currentGroupExpanded = expandedGroupsSet.has(row.compoundKey) || isExporting;\n    currentGroupLevel = groupLevel;\n\n    if (currentGroupExpanded) {\n      acc.push(row);\n    } else {\n      acc.push({\n        ...row,\n        [GRID_GROUP_COLLAPSED_ROWS]: [],\n      });\n    }\n\n    return acc;\n  }, []);\n};\n\nexport const groupCollapsedRowsGetter: PureComputed<[GetCollapsedRowsFn]> =\n  getCollapsedRows => row => (\n  row[GRID_GROUP_COLLAPSED_ROWS] || (getCollapsedRows && getCollapsedRows(row))\n);\n","import { PureComputed } from '@devexpress/dx-core';\nimport { GROUP_KEY_SEPARATOR } from '../grouping-state/constants';\nimport {\n  GRID_GROUP_TYPE,\n  GRID_GROUP_CHECK,\n  GRID_GROUP_LEVEL_KEY,\n} from '../integrated-grouping/constants';\nimport { GetRowIdFn, Row, RowId, CustomGroupedRowsFn } from '../../types';\n\nexport const customGroupedRows: CustomGroupedRowsFn = (\n  currentRows, grouping, getChildGroups, rootRows = currentRows, keyPrefix = '',\n) => {\n  if (!currentRows || !currentRows.length) return [];\n  if (!grouping.length) return currentRows;\n\n  const groupedBy = grouping[0].columnName;\n  const nestedGrouping = grouping.slice(1);\n  return getChildGroups(currentRows as any[], grouping[0], rootRows as any[])\n    .reduce((acc, { key, value = key, childRows }) => {\n      const compoundKey = `${keyPrefix}${key}`;\n      acc.push({\n        groupedBy,\n        compoundKey,\n        key,\n        value,\n        [GRID_GROUP_CHECK]: true,\n        [GRID_GROUP_LEVEL_KEY]: `${GRID_GROUP_TYPE.toString()}_${groupedBy}`,\n      });\n      acc.push(...customGroupedRows(\n        childRows!,\n        nestedGrouping,\n        getChildGroups,\n        rootRows,\n        `${compoundKey}${GROUP_KEY_SEPARATOR}`,\n      ));\n      return acc;\n    }, [] as Row[]);\n};\n\nexport const customGroupingRowIdGetter: PureComputed<[GetRowIdFn, Row[]]> = (getRowId, rows) => {\n  const firstRow = rows.find(row => !row[GRID_GROUP_CHECK]);\n  if (!firstRow || getRowId(firstRow) !== undefined) {\n    return getRowId;\n  }\n\n  const map = new Map<Row, RowId>(rows\n    .filter(row => !row[GRID_GROUP_CHECK])\n    .map((row, rowIndex) => [row, rowIndex]) as [Row, RowId]);\n\n  return row => map.get(row)!;\n};\n","import { GroupingPanelItemsFn } from '../../types/';\n\nexport const groupingPanelItems: GroupingPanelItemsFn = (\n  columns, grouping, draftGrouping,\n) => {\n  const items = draftGrouping.map(({ columnName }) => ({\n    column: columns.find(c => c.name === columnName)!,\n    draft: !grouping.some(columnGrouping => columnGrouping.columnName === columnName),\n  }));\n\n  grouping.forEach(({ columnName }, index) => {\n    if (draftGrouping.some(columnGrouping => columnGrouping.columnName === columnName)) return;\n    items.splice(index, 0, {\n      column: columns.find(c => c.name === columnName)!,\n      draft: true,\n    });\n  });\n\n  return items;\n};\n","export const setCurrentPage = (prevPage: number, page: number) => page;\nexport const setPageSize = (prevPageSize: number, size: number) => size;\n","import { PureComputed } from '@devexpress/dx-core';\n\nexport const clamp: PureComputed<[number, number]> = (value, max) => (\n  Math.max(Math.min(value, max), 0)\n);\n","import { clamp } from './helpers';\nimport { Row, GetRowLevelKeyFn, CurrentPageFn } from '../../types';\nimport { PureComputed } from '@devexpress/dx-core';\n\n// tslint:disable-next-line:max-line-length\nconst PAGE_HEADERS_OVERFLOW_ERROR = 'Max row level exceeds the page size. Consider increasing the page size.';\n\nexport const paginatedRows: PureComputed<[Row[], number, number]> = (rows, pageSize, page) => (\n  pageSize\n    ? rows.slice(pageSize * page, pageSize * (page + 1))\n    : rows as Row[]\n);\n\nexport const rowsWithPageHeaders: PureComputed<[Row[], number, GetRowLevelKeyFn]> = (\n  rows, pageSize, getRowLevelKey,\n) => {\n  if (!pageSize || !getRowLevelKey) return rows as Row[];\n\n  let result = rows.slice();\n\n  let headerRows: any[] = [];\n  let currentIndex = 0;\n  while (result.length > currentIndex) {\n    const row = result[currentIndex];\n    const levelKey = getRowLevelKey(row);\n    if (levelKey) {\n      const headerIndex = headerRows.findIndex(headerRow => getRowLevelKey(headerRow) === levelKey);\n      // tslint:disable-next-line:prefer-conditional-expression\n      if (headerIndex === -1) {\n        headerRows = [...headerRows, row];\n      } else {\n        headerRows = [...headerRows.slice(0, headerIndex), row];\n      }\n      if (headerRows.length >= pageSize) {\n        throw new Error(PAGE_HEADERS_OVERFLOW_ERROR);\n      }\n    }\n    const indexInPage = currentIndex % pageSize;\n    if (indexInPage < headerRows.length && row !== headerRows[indexInPage]) {\n      result = [\n        ...result.slice(0, currentIndex),\n        headerRows[indexInPage],\n        ...result.slice(currentIndex),\n      ];\n    }\n    currentIndex += 1;\n  }\n\n  return result;\n};\n\nexport const rowCount = (rows: Row[]) => rows.length;\n\nexport const pageCount: PureComputed<[number, number]> = (count, pageSize) => (\n  pageSize ? Math.ceil(count / pageSize) : 1\n);\n\nexport const currentPage: CurrentPageFn = (\n  page, totalCount, pageSize, setCurrentPage,\n) => {\n  const totalPages = pageCount(totalCount, pageSize);\n  const adjustedCurrentPage = clamp(page, totalPages - 1);\n  if (page !== adjustedCurrentPage) {\n    setTimeout(() => setCurrentPage(adjustedCurrentPage));\n  }\n  return adjustedCurrentPage;\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport { NthRowOnPageFn } from '../../types';\n\nexport const firstRowOnPage: NthRowOnPageFn = (currentPage, pageSize, totalCount) => {\n  if (totalCount === 0) {\n    return 0;\n  }\n  return pageSize ? (currentPage * pageSize) + 1 : 1;\n};\n\nexport const lastRowOnPage: NthRowOnPageFn = (currentPage, pageSize, totalRowCount) => {\n  let result = totalRowCount;\n  if (pageSize) {\n    const index = (currentPage + 1) * pageSize;\n    result = index > totalRowCount ? totalRowCount : index;\n  }\n\n  return result;\n};\n\nexport const calculateStartPage: PureComputed<[number, number, number]> = (\n  currentPage, maxButtonCount, totalPageCount,\n) => (\n  Math.max(\n    Math.min(\n    currentPage - Math.floor(maxButtonCount / 2),\n      (totalPageCount - maxButtonCount) + 1,\n    ),\n    1,\n  )\n);\n","import { PureComputed } from '@devexpress/dx-core';\nimport { RowId } from '../types';\n\nexport const toggle: PureComputed<[RowId[], RowId[], boolean?]> = (\n  source, items, state?,\n) => {\n  const itemsSet = new Set(items);\n\n  let sourceState: any = state;\n  if (sourceState === undefined) {\n    const availableSelection = source.filter(item => itemsSet.has(item));\n    sourceState = availableSelection.length !== itemsSet.size;\n  }\n\n  if (sourceState) {\n    const sourceSet = new Set(source);\n    return [\n      ...source,\n      ...items.filter(item => !sourceSet.has(item)),\n    ];\n  }\n\n  return source.filter(item => !itemsSet.has(item));\n};\n","import { toggle } from '../../utils/common-reducers';\nimport { ToggleRowsFieldReducer } from '../../types';\n\nexport const toggleSelection: ToggleRowsFieldReducer = (\n  selection, { rowIds, state },\n) => toggle(selection, rowIds, state);\n","import { PureComputed } from '@devexpress/dx-core';\nimport {\n  RowsWithSelection, UnwrapRowsComputed, RowId, RowsWithAvailableToSelectFn,\n} from '../../types';\n\ntype RowsSelectedFn = PureComputed<[RowsWithSelection, RowId[]], boolean>;\n\nexport const rowsWithAvailableToSelect: RowsWithAvailableToSelectFn = (\n  rows, getRowId, isGroupRow,\n) => {\n  let dataRows = rows;\n  if (isGroupRow) {\n    dataRows = dataRows.filter(row => !isGroupRow(row));\n  }\n  return { rows, availableToSelect: dataRows.map(row => getRowId(row)) };\n};\n\nexport const someSelected: RowsSelectedFn = ({ availableToSelect }, selection) => {\n  const selectionSet = new Set(selection);\n\n  return availableToSelect.length !== 0 && selectionSet.size !== 0\n    && availableToSelect.some(elem => selectionSet.has(elem))\n    && availableToSelect.some(elem => !selectionSet.has(elem));\n};\n\nexport const allSelected: RowsSelectedFn = ({ availableToSelect }, selection) => {\n  const selectionSet = new Set(selection);\n\n  return selectionSet.size !== 0 && availableToSelect.length !== 0\n    && !availableToSelect.some(elem => !selectionSet.has(elem));\n};\n\nexport const unwrapSelectedRows: UnwrapRowsComputed = ({ rows }) => rows;\n","import { PureReducer } from '@devexpress/dx-core';\nimport { RowId, Row, RowIdsPayload, RowPayload, RowChangePayload,\n  RowChanges, EditingCell, EditingCellsPayload,\n} from '../../types';\n\nexport const startEditRows: PureReducer<RowId[], RowIdsPayload> = (\n  prevEditingRowIds, { rowIds },\n) => [...prevEditingRowIds, ...rowIds];\n\nexport const stopEditRows: PureReducer<RowId[], RowIdsPayload> = (\n  prevEditingRowIds, { rowIds },\n) => {\n  const rowIdSet = new Set(rowIds);\n  return prevEditingRowIds.filter(id => !rowIdSet.has(id));\n};\n\nexport const startEditCells: PureReducer<EditingCell[], EditingCellsPayload> = (\n  prevEditingCells, { editingCells },\n) => [...prevEditingCells, ...editingCells];\n\nexport const stopEditCells: PureReducer<EditingCell[], EditingCellsPayload> = (\n  prevEditingCells, { editingCells },\n) => {\n  return prevEditingCells.filter(({ rowId, columnName }) => (\n    !editingCells.some(({ rowId: currentRowId, columnName: currentColumnName }) => (\n      currentRowId === rowId && currentColumnName === columnName\n    ))\n  ));\n};\n\nexport const addRow: PureReducer<Row[], RowPayload> = (\n  addedRows, { row } = { row: {} },\n) => [...addedRows, row];\n\nexport const changeAddedRow: PureReducer<Row[], RowChangePayload> = (\n  addedRows, { rowId, change },\n) => {\n  const result = addedRows.slice();\n  result[rowId] = { ...result[rowId], ...change };\n  return result;\n};\n\nexport const cancelAddedRows: PureReducer<Row[], RowIdsPayload> = (addedRows, { rowIds }) => {\n  const result: Row[] = [];\n  const indexSet = new Set(rowIds);\n  addedRows.forEach((row, index) => {\n    if (!indexSet.has(index)) {\n      result.push(row);\n    }\n  });\n  return result;\n};\n\nexport const changeRow: PureReducer<RowChanges, RowChangePayload> = (\n  prevRowChanges, { rowId, change },\n) => {\n  const prevChange = prevRowChanges[rowId] || {};\n  return {\n    ...prevRowChanges,\n    [rowId]: {\n      ...prevChange,\n      ...change,\n    },\n  };\n};\n\nexport const cancelChanges: PureReducer<RowChanges, RowIdsPayload> = (\n  prevRowChanges, { rowIds },\n) => {\n  const result = { ...prevRowChanges };\n  rowIds.forEach((rowId) => {\n    delete result[rowId];\n  });\n  return result;\n};\n\nexport const deleteRows: PureReducer<RowId[], RowIdsPayload> = (deletedRowIds, { rowIds }) => [\n  ...deletedRowIds, ...rowIds,\n];\n\nexport const cancelDeletedRows: PureReducer<RowId[], RowIdsPayload> = (\n  deletedRowIds, { rowIds },\n) => {\n  const rowIdSet = new Set(rowIds);\n  return deletedRowIds.filter(rowId => !rowIdSet.has(rowId));\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport {\n  EditingColumnExtension, CreateRowChangeFn, Row, RowId, RowChanges,\n} from '../../types';\n\nexport const changedRowsByIds: PureComputed<\n  [any, RowId[]], RowChanges\n> = (changes, rowIds) => {\n  const result = {};\n  rowIds.forEach((rowId) => {\n    result[rowId] = changes[rowId];\n  });\n  return result;\n};\n\nexport const addedRowsByIds: PureComputed<[Row[], RowId[]]> = (addedRows, rowIds) => {\n  const rowIdSet = new Set(rowIds);\n  const result: Row[] = [];\n  addedRows.forEach((row, index) => {\n    if (rowIdSet.has(index)) {\n      result.push(row);\n    }\n  });\n  return result;\n};\n\nconst defaultCreateRowChange: CreateRowChangeFn = (row, value, columnName) => (\n  { [columnName]: value }\n);\nexport const createRowChangeGetter: PureComputed<\n  [CreateRowChangeFn?, EditingColumnExtension[]?], CreateRowChangeFn\n> = (\n  createRowChange = defaultCreateRowChange,\n  columnExtensions = [],\n) => {\n  const map = columnExtensions.reduce((acc, columnExtension) => {\n    if (columnExtension.createRowChange) {\n      acc[columnExtension.columnName] = columnExtension.createRowChange;\n    }\n    return acc;\n  }, {});\n\n  return (row, value, columnName) => {\n    if (map[columnName]) {\n      return map[columnName](row, value, columnName);\n    }\n    return createRowChange(row, value, columnName);\n  };\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport { RowId, RowChanges } from '../../types';\n\nexport const getRowChange: PureComputed<[RowChanges, RowId], any> = (\n  rowChanges, rowId,\n) => rowChanges[rowId] || {};\n","export const TABLE_REORDERING_TYPE = Symbol('reordering');\n","import { PureReducer, slice } from '@devexpress/dx-core';\nimport { ColumnOrder, ChangeColumnOrderPayload } from '../../types';\n\nexport const changeColumnOrder: PureReducer<ColumnOrder, ChangeColumnOrderPayload> = (\n  order, { sourceColumnName, targetColumnName },\n) => {\n  const sourceColumnIndex = order.indexOf(sourceColumnName);\n  const targetColumnIndex = order.indexOf(targetColumnName);\n  const newOrder = slice(order);\n\n  newOrder.splice(sourceColumnIndex, 1);\n  newOrder.splice(targetColumnIndex, 0, sourceColumnName);\n  return newOrder;\n};\n","export const TABLE_DATA_TYPE = Symbol('data');\nexport const TABLE_NODATA_TYPE = Symbol('nodata');\nexport const TABLE_FLEX_TYPE = Symbol('flex');\n","import { PureComputed, slice } from '@devexpress/dx-core';\nimport mergeSort from '../../utils/merge-sort';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_REORDERING_TYPE } from './constants';\nimport { OrderedColumnsComputed, DraftOrderComputed, TableRow } from '../../types';\n\nexport const orderedColumns: OrderedColumnsComputed = (\n  tableColumns = [], order,\n) => mergeSort(tableColumns, (a, b) => {\n  if (a.type !== TABLE_DATA_TYPE || b.type !== TABLE_DATA_TYPE) return 0;\n\n  const aPos = order.indexOf(a.column.name);\n  const bPos = order.indexOf(b.column.name);\n  return aPos - bPos;\n});\n\nexport const tableHeaderRowsWithReordering: PureComputed<[TableRow[]]> = tableHeaderRows => [\n  ...tableHeaderRows,\n  {\n    key: TABLE_REORDERING_TYPE.toString(),\n    type: TABLE_REORDERING_TYPE,\n    height: 0,\n  },\n];\n\nexport const draftOrder: DraftOrderComputed = (order, sourceColumnIndex, targetColumnIndex) => {\n  if (sourceColumnIndex === -1\n    || targetColumnIndex === -1\n    || sourceColumnIndex === targetColumnIndex) {\n    return order;\n  }\n\n  const result = slice(order);\n  const sourceColumn = order[sourceColumnIndex];\n  result.splice(sourceColumnIndex, 1);\n  result.splice(targetColumnIndex, 0, sourceColumn);\n\n  return result;\n};\n","import { ColumnSizesFn, ValidValueFn, ConvertWidthFn, ColumnWidthFn } from '../../types';\n\nconst getColumnWidth: ColumnWidthFn = (\n  columnWidths, name, {\n    columnName, cachedWidths, shift, minColumnWidth, maxColumnWidth, columnExtensions = [],\n}) => {\n  const change = name === columnName ? shift : -shift;\n  const column  = columnWidths.find(elem => elem.columnName === name)!;\n  const extension = columnExtensions.find(elem => elem.columnName === name);\n  const width = typeof column.width === 'number'\n    ? column.width\n    : cachedWidths[name];\n  const minWidth = extension && extension.minWidth! >= 0\n    ? extension.minWidth\n    : minColumnWidth;\n  const maxWidth = extension && extension.maxWidth! >= 0\n    ? extension.maxWidth\n    : maxColumnWidth;\n  const size = Math.max(\n    minWidth!,\n    Math.min(width + change, maxWidth!),\n  );\n\n  return ({ width, size });\n};\n\nexport const getColumnSizes: ColumnSizesFn = (\n  columnWidths, payload) => {\n  const { columnName, nextColumnName, resizingMode, shift } = payload;\n  const { width, size } = getColumnWidth(columnWidths, columnName, payload);\n\n  if (resizingMode === 'nextColumn') {\n    const { width: nextWidth, size: nextSize } = getColumnWidth(\n      columnWidths, nextColumnName, payload,\n    );\n\n    if (size + nextSize !== width + nextWidth) {\n      const moreThanLimit = size + nextSize > width + nextWidth;\n      const columnExpand = shift > 0;\n      if (moreThanLimit !== columnExpand) {\n        return { size, nextSize: width + nextWidth - size };\n      }\n      return { size: width + nextWidth - nextSize, nextSize };\n    }\n    return { size, nextSize };\n  }\n\n  return { size };\n};\n\nexport const isValidValue: ValidValueFn = (value, validUnits) => {\n  const numb = parseInt(value, 10);\n  const unit = numb ? value.substr(numb.toString().length) : value;\n  const sizeIsAuto = isNaN(numb) && unit === 'auto';\n  const sizeIsValid = numb >= 0 && validUnits.some(validUnit => validUnit === unit);\n  return sizeIsAuto || sizeIsValid;\n};\n\nexport const convertWidth: ConvertWidthFn = (value) => {\n  if (typeof value === 'string') {\n    const numb = parseInt(value, 10);\n    if (value.substr(numb.toString().length).length > 0) {\n      return value;\n    }\n    return numb;\n  }\n  return value;\n};\n","import { TABLE_DATA_TYPE } from '../table/constants';\nimport { TableColumn, SpecifyWidthsFn, TableColumnsWithWidthFn, ErrorFn } from '../../types';\nimport { isValidValue, convertWidth } from './helpers';\n\nconst VALID_UNITS = ['px', '%', 'em', 'rem', 'vm', 'vh', 'vmin', 'vmax', ''];\nconst NOT_FOR_WIDGET_UNITS = ['%'];\n/* tslint:disable max-line-length */\nconst COLUMN_RESIZING_ERROR = 'The columnWidths property of the TableColumnResizing plugin is given an invalid value.';\n\nconst specifyWidths: SpecifyWidthsFn = (tableColumns, widths, resizingMode, onError) => {\n  if (resizingMode !== 'widget' && resizingMode !== 'nextColumn') {\n    onError();\n  }\n  if (!widths.length) return tableColumns;\n  return tableColumns\n    .reduce((acc, tableColumn) => {\n      if (tableColumn.type === TABLE_DATA_TYPE) {\n        const columnName = tableColumn.column!.name;\n        const column = widths.find(el => el.columnName === columnName);\n        const width = column && column.width;\n        if (typeof width !== 'number') {\n          if (width === undefined) {\n            onError();\n          } else if (!isValidValue(width, VALID_UNITS)) {\n            onError();\n          } else if (resizingMode === 'widget' && isValidValue(width, NOT_FOR_WIDGET_UNITS)) {\n            onError();\n          }\n        } else if (width < 0) {\n          onError();\n        }\n        if (width === undefined) {\n          acc.push(tableColumn);\n        } else {\n          acc.push({ ...tableColumn, width: convertWidth(width) });\n        }\n      } else {\n        acc.push(tableColumn);\n      }\n      return acc;\n    }, [] as TableColumn[]);\n};\n\nexport const tableColumnsWithWidths: TableColumnsWithWidthFn = (\n  tableColumns, columnWidths, resizingMode,\n) => specifyWidths(tableColumns, columnWidths, resizingMode, throwError);\n\nexport const tableColumnsWithDraftWidths: TableColumnsWithWidthFn = (\n  tableColumns, draftColumnWidths, resizingMode,\n) => specifyWidths(tableColumns, draftColumnWidths, resizingMode, () => {});\n\nconst throwError: ErrorFn = () => {\n  throw new Error(COLUMN_RESIZING_ERROR);\n};\n","import { slice } from '@devexpress/dx-core';\nimport { ColumnWidthReducer } from '../../types';\nimport { getColumnSizes } from './helpers';\n\nexport const changeTableColumnWidth: ColumnWidthReducer = (state, payload) => {\n  const { columnWidths } = state;\n  const { columnName, nextColumnName, resizingMode } = payload;\n  const nextColumnWidth = slice(columnWidths);\n  const index = nextColumnWidth.findIndex(elem => elem.columnName === columnName);\n  const nextIndex = nextColumnWidth.findIndex(elem => elem.columnName === nextColumnName);\n  const { size, nextSize } = getColumnSizes(columnWidths, payload);\n\n  nextColumnWidth.splice(index, 1, { columnName, width: size });\n  if (resizingMode === 'nextColumn') {\n    nextColumnWidth.splice(nextIndex, 1, { columnName: nextColumnName, width: nextSize });\n  }\n  return {\n    columnWidths: nextColumnWidth,\n  };\n};\n\nexport const draftTableColumnWidth: ColumnWidthReducer = (state, payload) => {\n  const { columnWidths } = state;\n  const { columnName, nextColumnName, resizingMode } = payload;\n  const { size, nextSize } = getColumnSizes(columnWidths, payload);\n\n  if (resizingMode === 'nextColumn') {\n    return { draftColumnWidths: [\n      { columnName, width: size }, { columnName: nextColumnName, width: nextSize! },\n    ] };\n  }\n  return { draftColumnWidths: [{ columnName, width: size }] };\n};\n\nexport const cancelTableColumnWidthDraft = () => ({\n  draftColumnWidths: [],\n});\n","export const TABLE_EDIT_COMMAND_TYPE = Symbol('editCommand');\n","export const TABLE_ADDED_TYPE = Symbol('added');\nexport const TABLE_EDIT_TYPE = Symbol('edit');\n","export const TABLE_HEADING_TYPE = Symbol('heading');\n","import { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from '../table-edit-row/constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_HEADING_TYPE } from '../table-header-row/constants';\nimport { TABLE_EDIT_COMMAND_TYPE } from './constants';\nimport { IsSpecificCellFn } from '../../types';\n\nexport const isHeadingEditCommandsTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_HEADING_TYPE && tableColumn.type === TABLE_EDIT_COMMAND_TYPE;\nexport const isEditCommandsTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => (tableRow.type === TABLE_DATA_TYPE || tableRow.type === TABLE_ADDED_TYPE\n  || tableRow.type === TABLE_EDIT_TYPE) && tableColumn.type === TABLE_EDIT_COMMAND_TYPE;\n","import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_EDIT_COMMAND_TYPE } from './constants';\nimport { TableColumn } from '../../types';\nimport { convertWidth } from '../table-column-resizing/helpers';\n\nexport const tableColumnsWithEditing: PureComputed<[TableColumn[], number | string]> = (\n  tableColumns, width,\n) => [\n  { width: convertWidth(width),\n    key: TABLE_EDIT_COMMAND_TYPE.toString(), type: TABLE_EDIT_COMMAND_TYPE },\n  ...tableColumns];\n","import { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { IsSpecificRowFn, IsSpecificCellFn } from '../../types';\n\nexport const isEditTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => (tableRow.type === TABLE_ADDED_TYPE || tableRow.type === TABLE_EDIT_TYPE)\n  && tableColumn.type === TABLE_DATA_TYPE;\nexport const isAddedTableRow: IsSpecificRowFn = tableRow => tableRow.type === TABLE_ADDED_TYPE;\nexport const isEditTableRow: IsSpecificRowFn = tableRow => tableRow.type === TABLE_EDIT_TYPE;\n","import { slice } from '@devexpress/dx-core';\nimport { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TableRowsWithEditingFn } from '../../types';\n\nexport const tableRowsWithEditing: TableRowsWithEditingFn = (\n  tableRows, editingRowIds, addedRows, rowHeight,\n) => {\n  const rowIds = new Set(editingRowIds);\n  const editedTableRows = tableRows\n    .map(tableRow => (\n      tableRow.type === TABLE_DATA_TYPE && rowIds.has(tableRow.rowId!)\n        ? {\n          ...tableRow,\n          type: TABLE_EDIT_TYPE,\n          height: rowHeight,\n        }\n        : tableRow\n    ));\n\n  const addedTableRows = addedRows\n    .map((row, rowIndex) => ({\n      row,\n      key: `${TABLE_ADDED_TYPE.toString()}_${rowIndex}`,\n      type: TABLE_ADDED_TYPE,\n      rowId: rowIndex,\n      height: rowHeight,\n    }));\n\n  return [\n    ...slice(addedTableRows).reverse(),\n    ...editedTableRows,\n  ];\n};\n","import { TableRowsWithEditingCellsFn, TableColumnsWithEditingCellsFn } from '../../types';\n\nexport const rowsWithEditingCells: TableRowsWithEditingCellsFn = (\n  tableBodyRows, editingCells,\n) => tableBodyRows.map((row) => {\n  const { rowId } = row;\n  if (rowId !== undefined && editingCells.some(elem => elem.rowId === rowId)) {\n    return {\n      ...row,\n      hasEditCell: true,\n    };\n  }\n  return row;\n});\n\nexport const columnsWithEditingCells: TableColumnsWithEditingCellsFn = (\n  tableColumns, editingCells,\n) => tableColumns.map((tableColumn) => {\n  const columnName = tableColumn.column ? tableColumn.column.name : undefined;\n  if (columnName !== undefined && editingCells.some(elem => elem.columnName === columnName)) {\n    return {\n      ...tableColumn,\n      hasEditCell: true,\n    };\n  }\n  return tableColumn;\n});\n","export const TABLE_FILTER_TYPE = Symbol('filter');\nexport const DEFAULT_FILTER_OPERATIONS = [\n  'contains',\n  'notContains',\n  'startsWith',\n  'endsWith',\n  'equal',\n  'notEqual',\n];\n","import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_FILTER_TYPE, DEFAULT_FILTER_OPERATIONS } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport {\n  IsSpecificCellFn, IsSpecificRowFn, FilterOperation, GetAvailableFilterOperationsFn,\n  GetSelectedFilterOperationFn,\n} from '../../types';\n\nexport const isFilterTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_FILTER_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n\nexport const isFilterTableRow: IsSpecificRowFn = tableRow => tableRow.type === TABLE_FILTER_TYPE;\n\nexport const getColumnFilterOperations: PureComputed<\n  [GetAvailableFilterOperationsFn, string],\n  FilterOperation[]\n> = (\n  getAvailableFilterOperations, columnName,\n) => (getAvailableFilterOperations && getAvailableFilterOperations(columnName))\n  || DEFAULT_FILTER_OPERATIONS;\n\nexport const isFilterValueEmpty = (value: any) => value === undefined || !String(value).length;\n\nexport const getSelectedFilterOperation: GetSelectedFilterOperationFn = (\n  filterOperations, columnName, columnFilter, columnFilterOperations,\n) => {\n  if (columnFilter && columnFilter.operation) {\n    return columnFilter.operation;\n  }\n  if (filterOperations[columnName]) {\n    return filterOperations[columnName];\n  }\n  return columnFilterOperations[0];\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_FILTER_TYPE } from './constants';\nimport { TableRow } from '../../types';\n\nexport const tableHeaderRowsWithFilter: PureComputed<[TableRow[], number]> = (\n  headerRows, rowHeight,\n) => [\n  ...headerRows,\n  { key: TABLE_FILTER_TYPE.toString(), type: TABLE_FILTER_TYPE, height: rowHeight }];\n","export const TABLE_GROUP_TYPE = Symbol('group');\n","import { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_GROUP_TYPE } from './constants';\nimport { PureComputed } from '@devexpress/dx-core';\nimport {\n  TableColumn, TableRow, IsSpecificRowFn,\n  TableColumnsWithDraftGroupingFn,\n  TableColumnsWithGroupingFn,\n  GroupCellColSpanGetter,\n  GroupSummaryChainsFn,\n  SummaryItem,\n} from '../../types';\n\nconst tableColumnsWithDraftGrouping: TableColumnsWithDraftGroupingFn = (\n  tableColumns, grouping, draftGrouping, showColumnWhenGrouped,\n) => tableColumns\n  .reduce((acc, tableColumn) => {\n    if (tableColumn.type !== TABLE_DATA_TYPE) {\n      acc.push(tableColumn);\n      return acc;\n    }\n\n    const columnName = tableColumn.column && tableColumn.column.name || '';\n    const columnGroupingExists = grouping\n      .some(columnGrouping => columnGrouping.columnName === columnName);\n    const columnDraftGroupingExists = draftGrouping\n      .some(columnGrouping => columnGrouping.columnName === columnName);\n\n    if ((!columnGroupingExists && !columnDraftGroupingExists)\n        || showColumnWhenGrouped(columnName)) {\n      acc.push(tableColumn);\n    } else if ((!columnGroupingExists && columnDraftGroupingExists)\n        || (columnGroupingExists && !columnDraftGroupingExists)) {\n      acc.push({\n        ...tableColumn,\n        draft: true,\n      });\n    }\n    return acc;\n  // tslint:disable-next-line: prefer-array-literal\n  }, [] as Array<TableColumn & { draft?: boolean }>);\n\nexport const tableColumnsWithGrouping: TableColumnsWithGroupingFn = (\n  columns, tableColumns, grouping, draftGrouping, indentColumnWidth, showColumnWhenGrouped,\n) => [\n  ...grouping.map((columnGrouping) => {\n    const groupedColumn = columns.find(column => column.name === columnGrouping.columnName);\n    return {\n      key: `${TABLE_GROUP_TYPE.toString()}_${groupedColumn!.name}`,\n      type: TABLE_GROUP_TYPE,\n      column: groupedColumn,\n      width: indentColumnWidth,\n    };\n  }),\n  ...tableColumnsWithDraftGrouping(tableColumns, grouping, draftGrouping, showColumnWhenGrouped),\n];\n\nexport const tableRowsWithGrouping: PureComputed<[TableRow[], IsSpecificRowFn]> = (\n  tableRows, isGroupRow,\n) => tableRows.map((tableRow) => {\n  if (tableRow.type !== TABLE_DATA_TYPE || !isGroupRow(tableRow.row)) {\n    return tableRow;\n  }\n  return {\n    ...tableRow,\n    key: `${TABLE_GROUP_TYPE.toString()}_${tableRow.row.compoundKey}`,\n    type: TABLE_GROUP_TYPE,\n  };\n});\n\nconst isRowLevelSummary: PureComputed<[SummaryItem[], string], boolean> = (\n  groupSummaryItems, colName,\n) => (\n  groupSummaryItems.some((item: any) => (\n    !item.showInGroupFooter && item.alignByColumn && item.columnName === colName),\n  )\n);\n\nconst groupSummaryChains: GroupSummaryChainsFn = (tableRow, tableColumns, groupSummaryItems) => {\n  let captionStarted = false;\n  return tableColumns\n    .reduce((acc, col) => {\n      const colName = (col.column && col.column.name) as string;\n      const isStartOfGroupCaption = col.type === TABLE_GROUP_TYPE\n        && tableRow.row.groupedBy === colName;\n      const isIndentColumn = col.type === TABLE_GROUP_TYPE\n        && tableRow.row.groupedBy !== colName && !captionStarted;\n\n      if (isStartOfGroupCaption) {\n        captionStarted = true;\n      }\n\n      if (isStartOfGroupCaption || isIndentColumn) {\n        acc.push([colName]);\n      } else if (groupSummaryItems && isRowLevelSummary(groupSummaryItems, colName)) {\n        acc.push([colName]);\n        acc.push([]);\n      } else {\n        acc[acc.length - 1].push(colName);\n      }\n      return acc;\n    }, [[]] as string[][]);\n};\n\nexport const tableGroupCellColSpanGetter: GroupCellColSpanGetter = (\n  getTableCellColSpan, groupSummaryItems,\n) => (params) => {\n  const { tableRow, tableColumns, tableColumn } = params;\n\n  if (tableRow.type === TABLE_GROUP_TYPE) {\n    const chains = groupSummaryChains(tableRow, tableColumns, groupSummaryItems);\n    const chain = chains.find(ch => ch[0] === (tableColumn.column && tableColumn.column.name));\n    if (chain) {\n      return chain.length;\n    }\n  }\n  return getTableCellColSpan(params);\n};\n","import { TABLE_HEADING_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport {\n  IsSpecificCellFn, IsSpecificRowFn, HeaderColumnChain,\n  SplitHeaderColumnChainsFn, FindChainByColumnIndexFn,\n  GenerateChainsFn,\n  NextColumnNameFn,\n  GetNextColumnNameFn,\n} from '../../types';\n\nexport const isHeadingTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_HEADING_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n\nexport const isHeadingTableRow: IsSpecificRowFn = tableRow => (\n  tableRow.type === TABLE_HEADING_TYPE\n);\n\nexport const findChainByColumnIndex: FindChainByColumnIndexFn = (chains, columnIndex) => (\n  chains.find(chain => (\n    chain.start <= columnIndex && columnIndex < chain.start + chain.columns.length\n  ))!\n);\n\nexport const splitHeaderColumnChains: SplitHeaderColumnChainsFn = (\n  tableColumnChains, tableColumns, shouldSplitChain, extendChainProps,\n) => (\n  tableColumnChains.map((row, rowIndex) => row\n    .reduce((acc, chain) => {\n      let currentChain: any = null;\n      chain.columns.forEach((col) => {\n        const column = tableColumns.find(c => c.key === col.key);\n        const isNewGroup = shouldSplitChain(currentChain, column!, rowIndex);\n\n        if (isNewGroup) {\n          const start = currentChain\n            ? (currentChain.start + currentChain.columns.length)\n            : chain.start;\n\n          acc.push({\n            ...chain,\n            ...extendChainProps(column!),\n            start,\n            columns: [],\n          });\n          currentChain = acc[acc.length - 1];\n        }\n\n        currentChain.columns.push(column);\n      });\n\n      return acc;\n    }, [] as HeaderColumnChain[]))\n);\n\nexport const generateSimpleChains: GenerateChainsFn = (rows, columns) => (\n  rows.map(() => ([{\n    columns,\n    start: 0,\n  }]))\n);\n\nconst nextColumnName: NextColumnNameFn = (tableColumns , index) => {\n  const isNextColumnHasName = index < tableColumns.length - 1 && tableColumns[index + 1].column;\n  return isNextColumnHasName\n    ? tableColumns[index + 1].column!.name\n    : undefined;\n};\n\nexport const getNextColumnName: GetNextColumnNameFn = (tableColumns, columnName) => {\n  const index = tableColumns.findIndex(elem =>\n    elem.column && elem.column.name === columnName,\n  );\n  return index >= 0\n    ? nextColumnName(tableColumns, index)\n    : undefined;\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_HEADING_TYPE } from './constants';\nimport { TableRow } from '../../types';\n\nexport const tableRowsWithHeading: PureComputed<[TableRow[]]> = headerRows => [\n  { key: TABLE_HEADING_TYPE.toString(), type: TABLE_HEADING_TYPE },\n  ...headerRows];\n","export const TABLE_BAND_TYPE = Symbol('band');\nexport const BAND_GROUP_CELL = 'bandGroupCell';\nexport const BAND_HEADER_CELL = 'bandHeaderCell';\nexport const BAND_EMPTY_CELL = 'bandEmptyCell';\nexport const BAND_DUPLICATE_RENDER = 'bandDuplicateRender';\nexport const BAND_FILL_LEVEL_CELL = 'bandFillLevelCell';\n","import {\n  TABLE_BAND_TYPE, BAND_GROUP_CELL, BAND_HEADER_CELL, BAND_EMPTY_CELL,\n  BAND_DUPLICATE_RENDER, BAND_FILL_LEVEL_CELL,\n} from './constants';\nimport { TABLE_HEADING_TYPE } from '../table-header-row/constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { findChainByColumnIndex } from '../table-header-row/helpers';\nimport {\n  IsSpecificRowFn, GetColumnBandMetaFn, GetBandComponentFn,\n} from '../../types';\nimport { TABLE_STUB_TYPE } from '../../utils/virtual-table';\n\nexport const isBandedTableRow: IsSpecificRowFn = tableRow => (tableRow.type === TABLE_BAND_TYPE);\nexport const isBandedOrHeaderRow: IsSpecificRowFn = tableRow => isBandedTableRow(tableRow)\n  || tableRow.type === TABLE_HEADING_TYPE;\nexport const isNoDataColumn = (columnType: symbol) => columnType !== TABLE_DATA_TYPE;\n\nexport const getColumnMeta: GetColumnBandMetaFn = (\n  columnName, bands, tableRowLevel, key = '',\n  level = 0, title = null, result = null,\n) => bands.reduce((acc, band) => {\n  if (band.columnName === columnName) {\n    return { ...acc, title, level, key };\n  }\n  if (band.children !== undefined) {\n    const rowLevelPassed = level > tableRowLevel;\n    const bandTitle = rowLevelPassed ? title : band.title;\n    const bandKey = rowLevelPassed ? key : `${key}_${bandTitle}`;\n\n    return getColumnMeta(\n      columnName,\n      band.children,\n      tableRowLevel,\n      bandKey,\n      level + 1,\n      bandTitle,\n      acc,\n    );\n  }\n  return acc;\n}, result || { level, title, key: title });\n\n// TODO: refactor\nexport const getBandComponent: GetBandComponentFn = (\n  { tableColumn: currentTableColumn, tableRow, rowSpan },\n  tableHeaderRows, tableColumns, columnBands, tableHeaderColumnChains,\n  columnVisibleIntervals, bandLevelsVisibility,\n) => {\n  if (rowSpan) return { type: BAND_DUPLICATE_RENDER, payload: null };\n\n  const maxLevel = tableHeaderRows.filter(column => column.type === TABLE_BAND_TYPE).length + 1;\n  const { level } = tableRow;\n  const currentRowLevel = level === undefined\n    ? maxLevel - 1 : level;\n  const currentColumnMeta = currentTableColumn.type === TABLE_DATA_TYPE\n    ? getColumnMeta(currentTableColumn.column!.name, columnBands, currentRowLevel)\n    : { level: 0, title: '' };\n\n  const currentColumnIndex = tableColumns\n    .findIndex(column => column.key === currentTableColumn.key);\n\n  const levelsCount = bandLevelsVisibility.length;\n  const visibleLevelsCount = bandLevelsVisibility.filter(Boolean).length;\n\n  if (currentColumnMeta.level < currentRowLevel) {\n    const shouldFillLevel = currentRowLevel > 0 && visibleLevelsCount < levelsCount\n      && !bandLevelsVisibility[currentRowLevel] && currentTableColumn.type === TABLE_STUB_TYPE;\n\n    if (shouldFillLevel) {\n      return { type: BAND_FILL_LEVEL_CELL, payload: null };\n    }\n    return { type: BAND_EMPTY_CELL, payload: null };\n  }\n\n  const previousTableColumn = tableColumns[currentColumnIndex - 1];\n  let beforeBorder = false;\n  if (currentColumnIndex > 0 && currentTableColumn.type === TABLE_DATA_TYPE\n    && isNoDataColumn(previousTableColumn.type)) {\n    beforeBorder = true;\n  }\n\n  if (currentColumnMeta.level === currentRowLevel) {\n    if (currentTableColumn.type === TABLE_STUB_TYPE) {\n      const cellRowSpan = visibleLevelsCount < levelsCount\n        ? visibleLevelsCount || 1\n        : maxLevel;\n\n      return {\n        type: BAND_FILL_LEVEL_CELL,\n        payload: {\n          rowSpan: cellRowSpan,\n        },\n      };\n    }\n\n    return {\n      type: BAND_HEADER_CELL,\n      payload: {\n        tableRow: tableHeaderRows.find(row => row.type === TABLE_HEADING_TYPE),\n        rowSpan: maxLevel - currentRowLevel,\n        ...beforeBorder && { beforeBorder },\n      },\n    };\n  }\n\n  const currentColumnChain = findChainByColumnIndex(\n    tableHeaderColumnChains[currentRowLevel],\n    currentColumnIndex,\n  );\n\n  const columnVisibleBoundary = columnVisibleIntervals.find(([start, end]) => (\n    start <= currentColumnIndex && currentColumnIndex <= end\n  ))!;\n  const bandStart = Math.max(columnVisibleBoundary[0], currentColumnChain.start);\n  if (bandStart < currentColumnIndex) {\n    return { type: null, payload: null };\n  }\n\n  const bandEnd = Math.min(\n    columnVisibleBoundary[1] + 1,\n    currentColumnChain.start + currentColumnChain.columns.length,\n  );\n\n  return {\n    type: BAND_GROUP_CELL,\n    payload: {\n      colSpan: bandEnd - bandStart,\n      value: currentColumnMeta.title!,\n      column: currentColumnMeta,\n      ...beforeBorder && { beforeBorder },\n    },\n  };\n};\n","import { intervalUtil } from './utils';\nimport {\n  VirtualRows, Row, MergeRowsFn, CalculateRequestedRangeFn,\n  Interval, GridViewport, GetRequestMeta, CorrectRangeFn,\n} from '../../types';\nimport { PureComputed } from '@devexpress/dx-core';\n\nexport const emptyVirtualRows: VirtualRows = {\n  skip: Number.POSITIVE_INFINITY,\n  rows: [],\n};\n\nconst pluckSubarray: PureComputed<[Row[], ...number[]]> = (source, sourceStart, left, right) => (\n  source.slice(left - sourceStart, right - sourceStart)\n);\n\nexport const mergeRows: MergeRowsFn = (\n  rowsInterval, cacheInterval, rows, cacheRows, rowsStart, cacheStart,\n) => {\n  const breakpoints = [\n    rowsInterval.start, rowsInterval.end,\n    cacheInterval.start, cacheInterval.end,\n  ]\n    .filter(i => 0 <= i && i < Number.POSITIVE_INFINITY)\n    .sort((a, b) => a - b);\n\n  let result: Row[] = [];\n  if (breakpoints.length > 1) {\n    for (let i = 0; i < breakpoints.length - 1; i += 1) {\n      const left = breakpoints[i];\n      const right = breakpoints[i + 1];\n      const chunk = rowsInterval.start <= left && right <= rowsInterval.end\n        ? pluckSubarray(rows, rowsStart, left, right) // rows have higher priority\n        : pluckSubarray(cacheRows, cacheStart, left, right);\n\n      result = result.concat(chunk);\n    }\n  }\n\n  return {\n    skip: breakpoints[0],\n    rows: result,\n  };\n};\n\nconst correctRequestedRange: CorrectRangeFn = (calculatedRange, referenceIndex, pageSize) => {\n  const { start, end } = calculatedRange;\n\n  if (start - referenceIndex > pageSize / 2) {\n    return { start: start - pageSize, end: end - pageSize };\n  }\n  return { start, end };\n};\n\nexport const calculateRequestedRange: CalculateRequestedRangeFn = (\n  virtualRows, newRange, pageSize, referenceIndex, isInfiniteScroll,\n) => {\n  const loadedInterval = intervalUtil.getRowsInterval(virtualRows);\n  const isAdjacentPage = Math.abs(loadedInterval.start - newRange.start) < 2 * pageSize;\n  if (isAdjacentPage) {\n    const calculatedRange = intervalUtil.difference(newRange, loadedInterval);\n    if (isInfiniteScroll && calculatedRange !== intervalUtil.empty) {\n      return correctRequestedRange(calculatedRange, referenceIndex, pageSize);\n    }\n    return calculatedRange;\n  }\n\n  // load 3 pages at once because a missing page will be loaded anyway\n  return newRange;\n};\n\nexport const rowToPageIndex: PureComputed<[number, number]> = (\n  rowIndex, pageSize,\n) => Math.floor(rowIndex / pageSize);\n\nexport const recalculateBounds: PureComputed<[number, number, number], Interval> = (\n  middleIndex, pageSize, totalCount,\n) => {\n  const currentPageIndex = rowToPageIndex(middleIndex, pageSize);\n\n  const prevPageIndex = currentPageIndex - 1;\n  const nextPageIndex = currentPageIndex + 2;\n  const start = Math.max(0, prevPageIndex * pageSize);\n  const end = Math.min(nextPageIndex * pageSize, totalCount);\n\n  return {\n    start,\n    end,\n  };\n};\n\nexport const trimRowsToInterval: PureComputed<[VirtualRows, Interval]> = (\n  virtualRows, targetInterval,\n) => {\n  const rowsInterval = intervalUtil.getRowsInterval(virtualRows);\n  const intersection = intervalUtil.intersect(rowsInterval, targetInterval);\n  if (intervalUtil.empty === intersection) {\n    return emptyVirtualRows;\n  }\n\n  const rows = pluckSubarray(\n    virtualRows.rows, virtualRows.skip, intersection.start, intersection.end,\n  );\n\n  return {\n    rows,\n    skip: intersection.start,\n  };\n};\n\nexport const getAvailableRowCount: PureComputed<[boolean, number, number, number], number> = (\n  isInfiniteScroll, newRowCount, lastRowCount, totalRowCount,\n) => {\n  return (isInfiniteScroll\n    ? Math.min(\n        Math.max(newRowCount, lastRowCount),\n        totalRowCount)\n    : totalRowCount\n  );\n};\n\nexport const getForceReloadInterval: PureComputed<[VirtualRows, number, number], Interval> = (\n  virtualRows, pageSize, totalRowCount,\n) => {\n  const { start, end: intervalEnd } = intervalUtil.getRowsInterval(virtualRows);\n  const end = Math.min(\n    Math.max(start + pageSize * 2, intervalEnd),\n    Math.max(start + pageSize * 2, totalRowCount),\n  );\n  return {\n    start,\n    end,\n  };\n};\n\nexport const getRequestMeta: GetRequestMeta = (\n  referenceIndex, virtualRows, pageSize, totalRowCount, forceReload, isInfiniteScroll,\n) => {\n  const actualBounds = forceReload\n    ? getForceReloadInterval(virtualRows, pageSize!, totalRowCount)\n    : recalculateBounds(referenceIndex, pageSize!, totalRowCount);\n  const requestedRange = forceReload\n    ? actualBounds\n    : calculateRequestedRange(\n        virtualRows, actualBounds, pageSize!, referenceIndex, isInfiniteScroll,\n      );\n\n  return { requestedRange, actualBounds };\n};\n\nexport const needFetchMorePages: PureComputed<[VirtualRows, number, number], boolean> = (\n  virtualRows, referenceIndex,  pageSize,\n) => {\n  const { start, end } = intervalUtil.getRowsInterval(virtualRows);\n  const loadCount = end - start;\n  const topTriggerIndex = start > 0 ? start + pageSize! : 0;\n  const bottomTriggerIndex = Math.max(topTriggerIndex + pageSize, end - pageSize! * 1.5);\n\n  if (loadCount <= 0) {\n    return false;\n  }\n\n  return (referenceIndex < topTriggerIndex || bottomTriggerIndex < referenceIndex);\n};\n\nexport const getReferenceIndex: PureComputed<[GridViewport], number> = (\n  { rows: [top, bottom] },\n) => (\n  (top + bottom) / 2\n);\n\nexport const shouldSendRequest: PureComputed<[Interval, number], boolean> = (\n  { start, end }, requestedPageIndex,\n) => {\n  const newPageIndex = start;\n  const loadCount = (end - start);\n  return newPageIndex !== requestedPageIndex && loadCount > 0;\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport { emptyVirtualRows } from './helpers';\nimport { Interval, VirtualRows } from '../../types';\n\nconst empty: Interval = {\n  start: Number.POSITIVE_INFINITY,\n  end: Number.NEGATIVE_INFINITY,\n};\n\nconst getRowsInterval: PureComputed<[VirtualRows], Interval> = r => (\n  r === emptyVirtualRows\n    ? empty\n    : {\n      start: r.skip,\n      end: r.skip + r.rows.length,\n    }\n);\n\nconst getLength = (a: Interval) => a.end - a.start;\n\nconst intersect = (a: Interval, b: Interval) => {\n  if (a.end < b.start || b.end < a.start) {\n    return empty;\n  }\n\n  return {\n    start: Math.max(a.start, b.start),\n    end: Math.min(a.end, b.end),\n  };\n};\n\nconst difference = (a: Interval, b: Interval) => {\n  if (empty === intervalUtil.intersect(a, b)) {\n    return a;\n  }\n\n  if (b.end < a.end) {\n    return {\n      start: b.end,\n      end: a.end,\n    };\n  }\n  if (a.start < b.start) {\n    return {\n      start: a.start,\n      end: b.start,\n    };\n  }\n  return empty;\n};\n\nexport const intervalUtil = {\n  empty,\n\n  getRowsInterval,\n  getLength,\n\n  intersect,\n  difference,\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_BAND_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { getColumnMeta } from './helpers';\nimport { splitHeaderColumnChains, generateSimpleChains } from '../table-header-row/helpers';\nimport {\n  ColumnBands, GetHeaderColumnChainsFn, ShouldSplitChainFn,\n  GetMaxNestedLevelFn, TableRow, TableColumn, HeaderColumnChainRows,\n  BandLevels, BandColumnChainExtension, HeaderColumnChain, VisibleBoundary, GridViewport,\n} from '../../types';\nimport { intervalUtil } from '../virtual-table-state/utils';\n\nexport const tableRowsWithBands: PureComputed<\n  [TableRow[], ColumnBands[], TableColumn[]]\n> = (\n  tableHeaderRows, columnBands, tableColumns,\n) => {\n  const tableDataColumns = tableColumns.filter(column => column.type === TABLE_DATA_TYPE);\n  const getMaxNestedLevel: GetMaxNestedLevelFn = (bands, level = 0, result = null) => (\n    bands.reduce((acc, column) => {\n      if (column.children !== undefined) {\n        return getMaxNestedLevel(column.children, level + 1, acc);\n      }\n      const isDataColumn = tableDataColumns.findIndex(\n        dataColumn => !!dataColumn.column && dataColumn.column.name === column.columnName,\n      ) > -1;\n      if (level > acc.level && isDataColumn) {\n        return { ...acc, level };\n      }\n      return acc;\n    }, result || { level: 0 })\n  );\n\n  const tableBandHeaders = Array.from({\n    length: getMaxNestedLevel(columnBands as ColumnBands[], 0).level,\n  })\n    .map((row, index) => ({\n      key: `${TABLE_BAND_TYPE.toString()}_${index}`,\n      type: TABLE_BAND_TYPE,\n      level: index,\n    }));\n  return [...tableBandHeaders, ...tableHeaderRows];\n};\n\nexport const tableHeaderColumnChainsWithBands: GetHeaderColumnChainsFn<\n  TableRow[], TableColumn[], ColumnBands[]\n> = (\n  tableHeaderRows, tableColumns, bands,\n) => {\n  const chains = generateSimpleChains(tableHeaderRows, tableColumns);\n  const maxBandRowIndex = tableHeaderRows\n    .filter(row => row.type === TABLE_BAND_TYPE)\n    .length;\n  const rawBandChains = chains.slice(0, maxBandRowIndex);\n\n  let currentBand: any = null;\n  const shouldSplitChain: ShouldSplitChainFn = (chain, column, rowIndex) => {\n    if (rowIndex > maxBandRowIndex) return false;\n\n    const columnName = column.column && column.column.name || '';\n    currentBand = getColumnMeta(columnName, bands, rowIndex);\n    return !chain\n      || (chain as any).key !== currentBand.key;\n  };\n  const extendChainProps = () => ({\n    bandTitle: currentBand?.title,\n    key: currentBand?.key,\n  });\n\n  const bandChains = splitHeaderColumnChains(\n    rawBandChains,\n    tableColumns,\n    shouldSplitChain,\n    extendChainProps,\n  );\n\n  return [...bandChains, ...chains.slice(maxBandRowIndex)];\n};\n\nconst getBandLevel: PureComputed<[ColumnBands[], string, number?], number> = (\n  bands, bandTitle, level = 0,\n) => {\n  for (const band of bands) {\n    if (band.title === bandTitle) {\n      return level;\n    }\n    if (band.children !== undefined) {\n      const result = getBandLevel(band.children, bandTitle, level + 1);\n      if (result >= 0) return result;\n    }\n  }\n  return -1;\n};\n\nconst getBandLevels = (columnsBands: readonly ColumnBands[], levels = {}, level = 0) => {\n  columnsBands.forEach((band) => {\n    if (band.title) {\n      levels[band.title] = level;\n    }\n    if (band.children) {\n      getBandLevels(band.children, levels, level + 1);\n    }\n  });\n  return levels;\n};\n\nexport const columnBandLevels: PureComputed<[ColumnBands[]], BandLevels> = columnsBands => (\n  getBandLevels(columnsBands)\n);\n\nexport const bandLevelsVisibility: PureComputed<\n  [VisibleBoundary[], HeaderColumnChainRows<BandColumnChainExtension>, BandLevels],\n  boolean[]\n> = (columnIntervals, tableHeaderColumnChains, bandLevels) => {\n  const rowsWithBands = tableHeaderColumnChains\n    .filter(r => r.filter(ch => !!ch.bandTitle).length);\n\n  const visibleIntervals = columnIntervals.map(([start, end]) => ({ start, end }));\n\n  const isBandChainVisible = (chain: HeaderColumnChain) => (\n    visibleIntervals.some(interval => (\n      intervalUtil.intersect(\n        interval,\n        { start: chain.start, end: chain.start + chain.columns.length - 1 },\n      ) !== intervalUtil.empty\n    ),\n  ));\n\n  const getVisibleBandsByLevel = (level: number) => (\n    // Note: a visible band level always matches with it's row\n    rowsWithBands[level]\n    ? rowsWithBands[level].filter(chain => (\n        bandLevels[chain.bandTitle] === level && isBandChainVisible(chain)\n      ))\n    : []\n  );\n\n  return rowsWithBands.reduce((acc, _, index) => {\n    const rowBands = getVisibleBandsByLevel(index);\n    return [...acc, !!rowBands.length];\n  }, [] as boolean[]);\n};\n\nexport const columnVisibleIntervals: PureComputed<\n  [GridViewport, TableColumn[]],\n  VisibleBoundary[]\n> = (\n  viewport, tableColumns,\n) => (\n  viewport ? viewport.columns : [[0, tableColumns.length]]\n);\n","import { toggle } from '../../utils/common-reducers';\nimport { ToggleRowFieldReducer } from '../../types';\n\nexport const toggleDetailRowExpanded: ToggleRowFieldReducer = (\n  prevExpanded, { rowId, state },\n) => toggle(prevExpanded, [rowId], state);\n","export const TABLE_DETAIL_TYPE = Symbol('detail');\n","import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_DETAIL_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { IsSpecificCellFn, IsSpecificRowFn, TableColumn, RowId } from '../../types';\n\nexport const isDetailRowExpanded: PureComputed<[RowId[], RowId], boolean> = (\n  expandedDetailRowIds, rowId,\n) => expandedDetailRowIds.indexOf(rowId) > -1;\n\nexport const isDetailToggleTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableColumn.type === TABLE_DETAIL_TYPE && tableRow.type === TABLE_DATA_TYPE;\n\nexport const isDetailTableRow: IsSpecificRowFn = tableRow => tableRow.type === TABLE_DETAIL_TYPE;\n\nexport const isDetailTableCell: PureComputed<[TableColumn, TableColumn[]], boolean> = (\n  tableColumn, tableColumns,\n) => tableColumns.indexOf(tableColumn) === 0;\n","import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_DETAIL_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TableRow, TableColumn, CellColSpanGetter } from '../../types';\n\nexport const tableRowsWithExpandedDetail: PureComputed<[TableRow[], number[], number]> = (\n  tableRows, expandedDetailRowIds, rowHeight,\n) => {\n  let result = tableRows;\n  expandedDetailRowIds\n    .forEach((expandedRowId) => {\n      const rowIndex = result.findIndex(\n        tableRow => tableRow.type === TABLE_DATA_TYPE && tableRow.rowId === expandedRowId,\n      );\n      if (rowIndex === -1) return;\n      const insertIndex = rowIndex + 1;\n      const { row, rowId } = result[rowIndex];\n      result = [\n        ...result.slice(0, insertIndex),\n        {\n          rowId,\n          row,\n          key: `${TABLE_DETAIL_TYPE.toString()}_${rowId}`,\n          type: TABLE_DETAIL_TYPE,\n          height: rowHeight,\n        },\n        ...result.slice(insertIndex),\n      ];\n    });\n  return result;\n};\n\nexport const tableColumnsWithDetail: PureComputed<[TableColumn[], number]> = (\n  tableColumns, toggleColumnWidth,\n) => [\n  { key: TABLE_DETAIL_TYPE.toString(), type: TABLE_DETAIL_TYPE, width: toggleColumnWidth },\n  ...tableColumns,\n];\n\nexport const tableDetailCellColSpanGetter: CellColSpanGetter = getTableCellColSpan => (params) => {\n  const { tableRow, tableColumns, tableColumn } = params;\n  if (tableRow.type === TABLE_DETAIL_TYPE && tableColumns.indexOf(tableColumn) === 0) {\n    return tableColumns.length;\n  }\n  return getTableCellColSpan(params);\n};\n","export const TABLE_SELECT_TYPE = Symbol('select');\n","import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_SELECT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_HEADING_TYPE } from '../table-header-row/constants';\nimport { IsSpecificCellFn, TableRow } from '../../types';\n\nexport const isSelectTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableColumn.type === TABLE_SELECT_TYPE && tableRow.type === TABLE_DATA_TYPE;\nexport const isSelectAllTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableColumn.type === TABLE_SELECT_TYPE && tableRow.type === TABLE_HEADING_TYPE;\n\nexport const isRowHighlighted: PureComputed<[boolean, any[], TableRow], boolean> = (\n  highlightRow, selection, tableRow,\n) => (\n  highlightRow && selection && selection.includes(tableRow.rowId)\n);\n","import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_SELECT_TYPE } from './constants';\nimport { TableColumn } from '../../types';\n\nexport const tableColumnsWithSelection: PureComputed<[TableColumn[], number]> = (\n  tableColumns, selectionColumnWidth,\n) => [\n  { key: TABLE_SELECT_TYPE.toString(), type: TABLE_SELECT_TYPE, width: selectionColumnWidth },\n  ...tableColumns,\n];\n","import { TABLE_DATA_TYPE, TABLE_NODATA_TYPE } from './constants';\nimport {\n  IsSpecificCellFn, IsSpecificRowFn, TableRow, TableColumn, CheckColumnExtensionsFn,\n} from '../../types';\nimport { TABLE_STUB_TYPE } from '../../utils/virtual-table';\nimport { isValidValue } from '../table-column-resizing/helpers';\n\nconst VALID_UNITS = ['px', '%', 'em', 'rem', 'vm', 'vh', 'vmin', 'vmax', ''];\nconst TABLE_ERROR = 'The columnExtension property of the Table plugin is given an invalid value.';\n\nexport const isDataTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_DATA_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isHeaderStubTableCell: IsSpecificCellFn<TableRow, TableRow[]> = (\n  tableRow, headerRows,\n) => headerRows.indexOf(tableRow) > -1;\nexport const isDataTableRow: IsSpecificRowFn = tableRow => tableRow.type === TABLE_DATA_TYPE;\nexport const isNoDataTableRow: IsSpecificRowFn = tableRow => tableRow.type === TABLE_NODATA_TYPE;\nexport const isNoDataTableCell: IsSpecificCellFn<TableColumn, TableColumn[]> = (\n  tableColumn, tableColumns,\n) => tableColumns.indexOf(tableColumn as any) === 0;\nexport const isStubTableCell: IsSpecificRowFn = tableRow => (\n  tableRow.type === TABLE_STUB_TYPE\n);\n\nexport const checkTableColumnExtensions: CheckColumnExtensionsFn = (columnExtensions) => {\n  if (columnExtensions) {\n    columnExtensions.map((column) => {\n      const { width } = column;\n      if (typeof width === 'string') {\n        if (!isValidValue(width, VALID_UNITS)) {\n          throw new Error(TABLE_ERROR);\n        }\n      }\n    });\n  }\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport {\n  GridColumnExtension, GetColumnExtensionValueGetterFn,\n} from '../types';\n\nexport const getColumnExtension: PureComputed<\n  [GridColumnExtension[] | undefined, string], GridColumnExtension\n> = (columnExtensions, columnName) => {\n  if (!columnExtensions) {\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    return {} as GridColumnExtension;\n  }\n  const columnExtension = columnExtensions.find(extension => extension.columnName === columnName);\n  if (!columnExtension) {\n    // tslint:disable-next-line:no-object-literal-type-assertion\n    return {} as GridColumnExtension;\n  }\n  return columnExtension;\n};\n\nexport const getColumnExtensionValueGetter: GetColumnExtensionValueGetterFn = (\n  columnExtensions, extensionName, defaultValue,\n) => (columnName) => {\n  if (columnExtensions) {\n    const columnExtension = getColumnExtension(columnExtensions, columnName);\n    const extensionValue = columnExtension[extensionName];\n    return extensionValue !== undefined ? extensionValue : defaultValue;\n  }\n  return defaultValue;\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_DATA_TYPE, TABLE_NODATA_TYPE } from './constants';\nimport { getColumnExtension } from '../../utils/column-extension';\nimport { GridColumnExtension, GetCellColSpanFn } from './../../types/table.types';\nimport { Row, GetRowIdFn } from '../../types';\nimport { convertWidth } from '../table-column-resizing/helpers';\n\nexport const tableColumnsWithDataRows: PureComputed<[any[], GridColumnExtension[]]> = (\n  columns, columnExtensions,\n) => columns.map((column) => {\n  const { name } = column;\n  const columnExtension = getColumnExtension(columnExtensions as GridColumnExtension[], name);\n  const width = convertWidth(columnExtension.width!);\n  return {\n    column,\n    key: `${TABLE_DATA_TYPE.toString()}_${name}`,\n    type: TABLE_DATA_TYPE,\n    width,\n    align: columnExtension.align,\n    wordWrapEnabled: columnExtension.wordWrapEnabled,\n  };\n});\n\nexport const tableRowsWithDataRows: PureComputed<[Row[], GetRowIdFn, number]> = (\n  rows, getRowId, isRemoteRowsLoading,\n) => (\n  !rows.length && !isRemoteRowsLoading\n    ? [{ key: TABLE_NODATA_TYPE.toString(), type: TABLE_NODATA_TYPE }]\n    : rows.map((row, dataIndex) => {\n      const rowId = getRowId(row);\n      return {\n        row,\n        // dataIndex,\n        rowId,\n        type: TABLE_DATA_TYPE,\n        key: `${TABLE_DATA_TYPE.toString()}_${rowId}`,\n      };\n    }));\n\nexport const tableCellColSpanGetter: GetCellColSpanFn = (params) => {\n  const { tableRow, tableColumns, tableColumn } = params;\n  if (tableRow.type === TABLE_NODATA_TYPE && tableColumns.indexOf(tableColumn) === 0) {\n    return tableColumns.length;\n  }\n  return 1;\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TableColumn } from '../../types';\n\nexport const visibleTableColumns: PureComputed<[TableColumn[], string[]]> = (\n  tableColumns = [], hiddenColumnNames,\n) => tableColumns.filter(tableColumn => tableColumn.type !== TABLE_DATA_TYPE\n    || hiddenColumnNames.indexOf(tableColumn.column!.name) === -1);\n","import { TABLE_DATA_TYPE } from '../table/constants';\nimport { TableColumn } from '../../types';\n\nexport const tableDataColumnsExist = (tableColumns: TableColumn[]) => tableColumns.some(\n  column => column.type === TABLE_DATA_TYPE,\n);\n","import { PureComputed } from '@devexpress/dx-core';\nimport { Column } from '../../types/grid-core.types';\nimport { ColumnChooserItem } from '../../types';\n\nexport const columnChooserItems: PureComputed<[Column[], string[]], ColumnChooserItem[]> = (\n  columns, hiddenColumnNames,\n) => columns.map(column => ({\n  column,\n  hidden: hiddenColumnNames.indexOf(column.name) !== -1,\n}));\n","import { PureReducer } from '@devexpress/dx-core';\n\nexport const toggleColumn: PureReducer<string[], string> = (\n  hiddenColumnNames, columnName,\n) => (\n  hiddenColumnNames.indexOf(columnName) === -1\n    ? [...hiddenColumnNames, columnName]\n    : hiddenColumnNames.filter(hiddenColumn => hiddenColumn !== columnName)\n);\n","import { toggle } from '../../utils/common-reducers';\nimport { ToggleRowFieldReducer } from '../../types';\n\nexport const toggleRowExpanded: ToggleRowFieldReducer = (\n  prevExpanded, { rowId, state },\n) => toggle(prevExpanded, [rowId], state);\n","export const GRID_TREE_NODE_TYPE = Symbol('treeNode');\n","import { PureComputed } from '@devexpress/dx-core';\nimport { GRID_TREE_NODE_TYPE } from './constants';\nimport {\n  RowsWithTreeMetaMap, RowsWithCollapsedRowsMetaMap, IsSpecificTreeRowGetter, GetRowIdFn,\n  GetRowLevelKeyFn, GetCollapsedRowsFn, CustomTreeRowsWithMetaComputed, GetCustomTreeRowsFn,\n  UnwrapRowsComputed, GetTreeRowLevelGetter, ExpandedTreeRowsFn,\n} from '../../types';\n\nconst customTreeRows: GetCustomTreeRowsFn = (\n  currentRow, getChildRows, rootRows, level = 0,\n) => {\n  const childRows = getChildRows(currentRow, rootRows as any[]);\n\n  if (!childRows) return { rows: [], treeMeta: [], empty: true };\n\n  return childRows\n    .reduce((acc, row) => {\n      const nestedResult = customTreeRows(\n        row,\n        getChildRows,\n        rootRows,\n        level + 1,\n      );\n      acc.rows.push(row, ...nestedResult.rows);\n      acc.treeMeta.push([row, { level, leaf: !!nestedResult.empty }], ...nestedResult.treeMeta);\n\n      return acc;\n    }, { rows: [], treeMeta: [] });\n};\n\nexport const customTreeRowsWithMeta: CustomTreeRowsWithMetaComputed = (\n  rows, getChildRows,\n) => {\n  const result = customTreeRows(null, getChildRows, rows);\n\n  return {\n    rows: result.rows,\n    treeMeta: new Map(result.treeMeta),\n  };\n};\n\nexport const customTreeRowIdGetter: PureComputed<[GetRowIdFn, RowsWithTreeMetaMap]> = (\n  getRowId, { rows, treeMeta },\n) => {\n  const firstNestedRowIndex = rows.findIndex(row => treeMeta.get(row)!.level > 0);\n  if (firstNestedRowIndex === -1 || getRowId(rows[firstNestedRowIndex]) !== undefined) {\n    return getRowId;\n  }\n  const map = new Map(rows\n    .map((row, rowIndex) => [row, rowIndex] as [any, any]));\n  return row => map.get(row);\n};\n\nexport const customTreeRowLevelKeyGetter: PureComputed<\n  [GetRowLevelKeyFn, RowsWithTreeMetaMap]\n> = (\n  getRowLevelKey, { treeMeta },\n) => (row) => {\n  const rowMeta = treeMeta.get(row);\n  if (rowMeta !== undefined) {\n    return `${GRID_TREE_NODE_TYPE.toString()}_${rowMeta.level}`;\n  }\n  return getRowLevelKey && getRowLevelKey();\n};\n\nexport const expandedTreeRows: ExpandedTreeRowsFn = (\n  { rows, treeMeta }, getRowId, expandedRowIds,\n) => {\n  const expandedRowIdsSet = new Set(expandedRowIds);\n\n  let currentExpanded = true;\n  let currentLevel = 0;\n\n  const collapsedRowsMeta = new Map();\n  const resultRows: object[] = [];\n\n  rows.forEach((row) => {\n    const rowMeta = treeMeta.get(row);\n    const level = rowMeta && rowMeta.level;\n    if (level === undefined && currentExpanded) {\n      resultRows.push(row);\n    } else if (!currentExpanded && (level === undefined || level > currentLevel)) {\n      const lastRow = resultRows[resultRows.length - 1];\n      let collapsedItems = collapsedRowsMeta.get(lastRow);\n      if (!collapsedItems) {\n        collapsedItems = [];\n        collapsedRowsMeta.set(lastRow, collapsedItems);\n      }\n      collapsedItems.push(row);\n    } else {\n      currentExpanded = expandedRowIdsSet.has(getRowId(row));\n      currentLevel = level!;\n\n      resultRows.push(row);\n    }\n  });\n\n  return {\n    treeMeta,\n    collapsedRowsMeta,\n    rows: resultRows,\n  };\n};\n\nexport const collapsedTreeRowsGetter: PureComputed<\n  [GetCollapsedRowsFn, RowsWithCollapsedRowsMetaMap]\n> = (\n  getCollapsedRows, { collapsedRowsMeta },\n) => row => collapsedRowsMeta.get(row) || (getCollapsedRows && getCollapsedRows(row));\n\nexport const isTreeRowLeafGetter: IsSpecificTreeRowGetter = ({ treeMeta }) => (row) => {\n  const rowMeta = treeMeta.get(row);\n  return rowMeta && rowMeta.leaf;\n};\n\nexport const getTreeRowLevelGetter: GetTreeRowLevelGetter = ({ treeMeta }) => (row) => {\n  const rowMeta = treeMeta.get(row);\n  return (rowMeta && rowMeta.level) as number;\n};\n\nexport const unwrappedCustomTreeRows: UnwrapRowsComputed = ({ rows }) => rows;\n","import { TABLE_DATA_TYPE } from '../table/constants';\nimport { IsSpecificCellFn, TableRow, TableColumn } from '../../types';\n\nexport const isTreeTableCell: IsSpecificCellFn<TableRow, TableColumn, string> = (\n  tableRow, tableColumn, forColumnName,\n) => tableRow.type === TABLE_DATA_TYPE && tableColumn.type === TABLE_DATA_TYPE\n  && tableColumn.column!.name === forColumnName;\n","export const changeSearchValue = (\n  prevSearchValue: string, searchValue: string,\n) => searchValue;\n","import { SearchFilterExpressionFn, FilterExpression } from '../../types';\n\nexport const searchFilterExpression: SearchFilterExpressionFn = (\n  searchValue, columns, filterExpression,\n) => {\n  const filters = columns.map(({ name }) => ({ columnName: name, value: searchValue }));\n  const selfFilterExpression: FilterExpression = { filters, operator: 'or' };\n  if (!filterExpression) {\n    return selfFilterExpression;\n  }\n  return {\n    operator: 'and',\n    filters: [filterExpression as FilterExpression, selfFilterExpression],\n  };\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport { GetAvailableFilterOperationsFn, FilterOperation } from '../../types';\n\nexport const getAvailableFilterOperationsGetter: PureComputed<\n  [GetAvailableFilterOperationsFn, FilterOperation[], string[]]\n> = (\n  getAvailableFilterOperations,\n  availableFilterOperations,\n  columnNames,\n) => columnName => (columnNames.indexOf(columnName) > -1 && availableFilterOperations)\n// tslint:disable-next-line: max-line-length\n    || (typeof getAvailableFilterOperations === 'function' && getAvailableFilterOperations(columnName))\n    || undefined;\n","export const FIXED_COLUMN_LEFT_SIDE = 'left';\nexport const FIXED_COLUMN_RIGHT_SIDE = 'right';\nexport const TABLE_FIXED_TYPE = Symbol('fixed');\n","import { slice } from '@devexpress/dx-core';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport {\n  FIXED_COLUMN_LEFT_SIDE, TABLE_FIXED_TYPE,\n} from './constants';\nimport { findChainByColumnIndex } from '../table-header-row/helpers';\nimport {\n  GetFixedColumnKeysFn, IsSpecificRowFn, CalculatePositionFn, CalculateFixedColumnPropsFn,\n} from '../../types';\n\nexport const getFixedColumnKeys: GetFixedColumnKeysFn = (tableColumns, fixedNames) => tableColumns\n  .filter(tableColumn => (\n    (tableColumn.type === TABLE_DATA_TYPE && fixedNames.indexOf(tableColumn.column!.name) !== -1)\n    || fixedNames.indexOf(tableColumn.type) !== -1\n  ))\n  .map(({ key }) => key);\n\nexport const isFixedTableRow: IsSpecificRowFn = tableRow => tableRow.type === TABLE_FIXED_TYPE;\n\nconst calculatePosition: CalculatePositionFn = (array, index, tableColumnDimensions) => (\n  index === 0\n    ? 0\n    : array\n      .slice(0, index)\n      .reduce((acc, target) => acc + tableColumnDimensions[target] || 0, 0)\n);\n\nexport const calculateFixedColumnProps: CalculateFixedColumnPropsFn = (\n  { tableColumn },\n  { leftColumns, rightColumns },\n  tableColumns,\n  tableColumnDimensions,\n  tableHeaderColumnChains,\n) => {\n  const side = tableColumn.fixed!;\n  const targetArray = side === FIXED_COLUMN_LEFT_SIDE\n    ? getFixedColumnKeys(tableColumns, leftColumns)\n    : slice(getFixedColumnKeys(tableColumns, rightColumns)).reverse();\n\n  const index = tableColumns.findIndex(({ key }) => key === tableColumn.key);\n  const fixedIndex = targetArray.indexOf(tableColumn.key);\n  const columnChain = findChainByColumnIndex(tableHeaderColumnChains[0], index)!;\n\n  const showLeftDivider = columnChain.start === index && index !== 0;\n  const showRightDivider = columnChain.start + columnChain.columns.length - 1 === index\n    && index < tableColumns.length - 1;\n\n  const position = calculatePosition(targetArray, fixedIndex, tableColumnDimensions);\n\n  return {\n    showRightDivider,\n    showLeftDivider,\n    position,\n    side,\n  };\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { FIXED_COLUMN_LEFT_SIDE, FIXED_COLUMN_RIGHT_SIDE, TABLE_FIXED_TYPE } from './constants';\nimport { splitHeaderColumnChains, generateSimpleChains } from '../table-header-row/helpers';\nimport {\n  FixedColumnName, TableColumn, FixedColumnSide, TableRow, HeaderColumnChainRows,\n  ShouldSplitChainFn,\n} from '../../types';\n\nexport const tableColumnsWithFixed: PureComputed<\n  [TableColumn[], FixedColumnName[], FixedColumnName[]]\n> = (\n  tableColumns, leftColumns, rightColumns,\n) => tableColumns\n  .map((tableColumn) => {\n    let fixed!: FixedColumnSide;\n    if ((tableColumn.type === TABLE_DATA_TYPE\n      && leftColumns.indexOf(tableColumn.column!.name) !== -1)\n      || leftColumns.indexOf(tableColumn.type) !== -1) {\n      fixed = FIXED_COLUMN_LEFT_SIDE;\n    }\n    if ((tableColumn.type === TABLE_DATA_TYPE\n      && rightColumns.indexOf(tableColumn.column!.name) !== -1)\n      || rightColumns.indexOf(tableColumn.type) !== -1) {\n      fixed = FIXED_COLUMN_RIGHT_SIDE;\n    }\n    return fixed ? { ...tableColumn, fixed } : tableColumn;\n  });\n\nexport const tableHeaderRowsWithFixed: PureComputed<[TableRow[]]> = tableHeaderRows => [\n  ...tableHeaderRows,\n  { key: TABLE_FIXED_TYPE.toString(), type: TABLE_FIXED_TYPE, height: 0 },\n];\n\nexport const tableHeaderColumnChainsWithFixed: PureComputed<\n  [HeaderColumnChainRows, TableRow[], TableColumn[]]\n> = (\n  tableHeaderColumnChains, tableHeaderRows, tableColumns,\n) => {\n  const chains = tableHeaderColumnChains\n    || generateSimpleChains(tableHeaderRows, tableColumns);\n\n  const shouldSplitChain: ShouldSplitChainFn = (currentGroup, column) => (\n    !currentGroup || (currentGroup as any).fixed !== column.fixed\n  );\n  const extendChainProps = (column: TableColumn) => ({\n    fixed: column.fixed,\n  });\n  return splitHeaderColumnChains(\n    chains,\n    tableColumns,\n    shouldSplitChain,\n    extendChainProps,\n  );\n};\n","import {\n  SummaryValue, SummaryCalculator,\n  DefaultSummaryCalculators,\n  Row,\n  TotalSummaryValuesFn,\n  GroupSummaryValuesFn,\n  TreeSummaryValuesFn,\n  RowsSummaryValuesFn,\n  ExpandRowsFn,\n  TableRow,\n  GroupLevel,\n} from '../../types';\n\nconst defaultSummaryCalculators: DefaultSummaryCalculators = {\n  count: rows => rows.length,\n  sum: (rows, getValue) => rows.reduce((acc, row) => acc + getValue(row), 0),\n  max: (rows, getValue) => (rows.length\n    ? rows.reduce((acc, row) => Math.max(acc, getValue(row)), -Infinity)\n    : null),\n  min: (rows, getValue) => (rows.length\n    ? rows.reduce((acc, row) => Math.min(acc, getValue(row)), Infinity)\n    : null),\n  avg: (rows, getValue) => (rows.length\n    ? rows.reduce((acc, row) => acc + getValue(row), 0) / rows.length\n    : null),\n};\n\nexport const defaultSummaryCalculator: SummaryCalculator = (type, rows, getValue) => {\n  const summaryCalculator = defaultSummaryCalculators[type];\n  if (!summaryCalculator) {\n    throw new Error(`The summary type '${type}' is not defined`);\n  }\n  return summaryCalculator(rows, getValue);\n};\n\nconst rowsSummary: RowsSummaryValuesFn = (\n  rows, summaryItems, getCellValue, calculator,\n) => summaryItems\n  .reduce((acc, { type, columnName }) => {\n    const getValue = (row: Row) => getCellValue(row, columnName);\n    acc.push(calculator(type, rows as any[], getValue));\n    return acc;\n  }, [] as SummaryValue[]);\n\nconst expandRows: ExpandRowsFn = (\n  rows, getRowLevelKey, getCollapsedRows, isGroupRow, includeGroupRow = false,\n) => {\n  const shouldIncludeRow = includeGroupRow || !isGroupRow\n    ? () => true\n    : (row: TableRow) => !isGroupRow(row);\n\n  return rows\n    .reduce((acc, row) => {\n      if (getRowLevelKey && getRowLevelKey(row)) {\n        if (shouldIncludeRow(row)) {\n          acc.push(row);\n        }\n        const collapsedRows = getCollapsedRows && getCollapsedRows(row);\n        if (collapsedRows) {\n          acc.push(...collapsedRows);\n        }\n        return acc;\n      }\n      acc.push(row);\n      return acc;\n    }, [] as TableRow[]);\n};\n\nexport const totalSummaryValues: TotalSummaryValuesFn = (\n  rows,\n  summaryItems,\n  getCellValue,\n  getRowLevelKey,\n  isGroupRow,\n  getCollapsedRows,\n  calculator = defaultSummaryCalculator,\n) => {\n  const plainRows = expandRows(rows, getRowLevelKey, getCollapsedRows, isGroupRow);\n  return rowsSummary(plainRows, summaryItems, getCellValue, calculator);\n};\n\nexport const groupSummaryValues: GroupSummaryValuesFn = (\n  rows,\n  summaryItems,\n  getCellValue,\n  getRowLevelKey,\n  isGroupRow,\n  getCollapsedRows,\n  calculator = defaultSummaryCalculator,\n) => {\n  let levels: GroupLevel[] = [];\n  const getLevelIndex = (levelKey: string) => (\n    levels.findIndex(level => level.levelKey === levelKey)\n  );\n  const summaries = {};\n\n  const anyRowLevelSummaryExist = summaryItems.some(item => (\n    !(item as any).showInGroupFooter\n  ));\n  const expandedRows = anyRowLevelSummaryExist\n    ? expandRows(rows, getRowLevelKey, getCollapsedRows, isGroupRow, true)\n    : rows;\n\n  expandedRows.forEach((row) => {\n    const levelKey = getRowLevelKey(row);\n    const collapsedRows = getCollapsedRows && getCollapsedRows(row);\n    let levelIndex = getLevelIndex(levelKey);\n    if (levelIndex > -1) {\n      levels.forEach((level) => {\n        summaries[level.row.compoundKey] = rowsSummary(\n          level.rows, summaryItems, getCellValue, calculator,\n        );\n      });\n      levels = levels.slice(0, levelIndex);\n    }\n    if (isGroupRow!(row)) {\n      levels.push({\n        levelKey,\n        row,\n        rows: [],\n      });\n      levelIndex = getLevelIndex(levelKey);\n    }\n    // when row level summary exists, these rows had already been expanded earlier\n    const isCollapsedNestedGroupRow = collapsedRows && levelIndex > 0 && !anyRowLevelSummaryExist;\n    const rowsToAppend = !levelKey ? [row] : collapsedRows;\n    if (!levelKey || isCollapsedNestedGroupRow) {\n      levels.forEach((level) => {\n        level.rows.push(...rowsToAppend);\n      });\n    }\n  }, {});\n  levels.forEach((level) => {\n    summaries[level.row.compoundKey] = rowsSummary(\n      level.rows, summaryItems, getCellValue, calculator,\n    );\n  });\n  return summaries;\n};\n\nexport const treeSummaryValues: TreeSummaryValuesFn = (\n  rows,\n  summaryItems,\n  getCellValue,\n  getRowLevelKey,\n  isGroupRow,\n  getRowId,\n  calculator = defaultSummaryCalculator,\n) => {\n  let levels: any[] = [];\n  const summaries = {};\n  rows.forEach((row) => {\n    const levelKey = getRowLevelKey(row);\n    if (!levelKey) {\n      levels[levels.length - 1].rows.push(row);\n      return;\n    }\n    const levelIndex = levels.findIndex(level => level.levelKey === levelKey);\n    if (levelIndex > -1) {\n      levels.slice(levelIndex).forEach((level) => {\n        if (level.rows.length) {\n          summaries[getRowId(level.row)] = rowsSummary(\n            level.rows, summaryItems, getCellValue, calculator,\n          );\n        }\n      });\n      levels = levels.slice(0, levelIndex);\n    }\n    if (!isGroupRow || !isGroupRow(row)) {\n      if (levels.length) {\n        levels[levels.length - 1].rows.push(row);\n      }\n      levels.push({\n        levelKey,\n        row,\n        rows: [],\n      });\n    }\n  }, {});\n  levels.forEach((level) => {\n    if (level.rows.length) {\n      summaries[getRowId(level.row)] = rowsSummary(\n        level.rows, summaryItems, getCellValue, calculator,\n      );\n    }\n  });\n  return summaries;\n};\n","export const TABLE_TOTAL_SUMMARY_TYPE = Symbol('totalSummary');\nexport const TABLE_GROUP_SUMMARY_TYPE = Symbol('groupSummary');\nexport const TABLE_TREE_SUMMARY_TYPE = Symbol('treeSummary');\n\nexport const defaultFormatlessSummaries = ['count'];\n","import { PureComputed } from '@devexpress/dx-core';\nimport {\n  TABLE_TOTAL_SUMMARY_TYPE, TABLE_GROUP_SUMMARY_TYPE, TABLE_TREE_SUMMARY_TYPE,\n} from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport {\n  GetColumnSummariesFn, IsSpecificCellFn, IsSpecificRowFn, SummaryItem,\n  GetGroupInlineSummariesFn, ColumnInlineSummaries, GroupSummaryItem,\n} from '../../types';\n\nexport const isTotalSummaryTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_TOTAL_SUMMARY_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isGroupSummaryTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_GROUP_SUMMARY_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isTreeSummaryTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_TREE_SUMMARY_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isTotalSummaryTableRow: IsSpecificRowFn = tableRow => (\n  tableRow.type === TABLE_TOTAL_SUMMARY_TYPE\n);\nexport const isGroupSummaryTableRow: IsSpecificRowFn = tableRow => (\n  tableRow.type === TABLE_GROUP_SUMMARY_TYPE\n);\nexport const isTreeSummaryTableRow: IsSpecificRowFn = tableRow => (\n  tableRow.type === TABLE_TREE_SUMMARY_TYPE\n);\n\nexport const getColumnSummaries: GetColumnSummariesFn = (\n  summaryItems, columnName, summaryValues, predicate = () => true,\n) => summaryItems\n  .map((item, index) => [item, index] as [SummaryItem, number])\n  .filter(([item]) => item.columnName === columnName && predicate(item))\n  .map(([item, index]) => ({\n    type: item.type,\n    value: summaryValues[index],\n  }));\n\nexport const isFooterSummary: PureComputed<[SummaryItem], boolean> = summaryItem => (\n  (summaryItem as GroupSummaryItem).showInGroupFooter!\n);\nexport const isInlineGroupCaptionSummary: PureComputed<[SummaryItem], boolean> = summaryItem => (\n  !((summaryItem as GroupSummaryItem).showInGroupFooter ||\n  (summaryItem as GroupSummaryItem).alignByColumn)\n);\nexport const groupFooterSummaryExists: PureComputed<[GroupSummaryItem[]], boolean> =\n  groupSummaryItems => groupSummaryItems?.some(isFooterSummary);\n\nexport const getGroupInlineSummaries: GetGroupInlineSummariesFn = (\n  summaryItems, columns, summaryValues,\n) => {\n  if (!summaryItems.some(isInlineGroupCaptionSummary)) {\n    return [];\n  }\n\n  return columns.reduce((acc, column) => {\n    const colName = column.name;\n    const summaries = getColumnSummaries(\n      summaryItems, colName, summaryValues, isInlineGroupCaptionSummary,\n    );\n    if (summaries.length) {\n      acc.push({\n        column,\n        summaries,\n      });\n    }\n\n    return acc;\n  }, [] as ColumnInlineSummaries[]);\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport {\n  TABLE_TOTAL_SUMMARY_TYPE,\n  TABLE_GROUP_SUMMARY_TYPE,\n  TABLE_TREE_SUMMARY_TYPE,\n} from './constants';\nimport {\n  TableRow, RowLevel, TableRowsWithSummariesFn,\n} from '../../types';\nimport { groupFooterSummaryExists } from './helpers';\n\nexport const tableRowsWithTotalSummaries: PureComputed<[TableRow[]]> = footerRows => [\n  { key: TABLE_TOTAL_SUMMARY_TYPE.toString(), type: TABLE_TOTAL_SUMMARY_TYPE },\n  ...footerRows,\n];\n\nexport const tableRowsWithSummaries: TableRowsWithSummariesFn = (\n  tableRows, groupSummaryItems, treeSummaryItems, getRowLevelKey, isGroupRow, getRowId,\n) => {\n  if (!getRowLevelKey || !(groupSummaryItems || treeSummaryItems)) return tableRows;\n\n  const hasGroupFooterSummary = groupFooterSummaryExists(groupSummaryItems);\n  const result: TableRow[] = [];\n  const closeLevel = (level: RowLevel) => {\n    if (!level.opened) return;\n    if (hasGroupFooterSummary && isGroupRow && isGroupRow(level.row)) {\n      const { compoundKey } = level.row;\n      result.push({\n        key: `${TABLE_GROUP_SUMMARY_TYPE.toString()}_${compoundKey}`,\n        type: TABLE_GROUP_SUMMARY_TYPE,\n        row: level.row,\n      });\n    } else if (treeSummaryItems) {\n      const rowId = getRowId(level.row);\n      result.push({\n        key: `${TABLE_TREE_SUMMARY_TYPE.toString()}_${rowId}`,\n        type: TABLE_TREE_SUMMARY_TYPE,\n        row: level.row,\n      });\n    }\n  };\n\n  let levels: RowLevel[] = [];\n  tableRows.forEach((tableRow) => {\n    const { row } = tableRow;\n    const levelKey = getRowLevelKey(row);\n    if (levelKey) {\n      const levelIndex = levels.findIndex(level => level.levelKey === levelKey);\n      if (levelIndex > -1) {\n        levels.slice(levelIndex).reverse().forEach(closeLevel);\n        levels = levels.slice(0, levelIndex);\n      }\n      if (!isGroupRow || !isGroupRow(row)) {\n        levels = levels.map(level => ({\n          ...level,\n          opened: true,\n        }));\n      }\n      levels.push({\n        levelKey,\n        row,\n        opened: false,\n      });\n    } else {\n      levels = levels.map(level => ({\n        ...level,\n        opened: true,\n      }));\n    }\n    result.push(tableRow);\n  });\n  levels.slice().reverse().forEach(closeLevel);\n\n  return result;\n};\n","import { GroupSummaryItem } from '../../types';\n\nexport const prepareGroupSummaryItems = (items: GroupSummaryItem[]) => (\n  !!items\n    ? items.map(item => ({\n      ...item,\n      showInGroupFooter: (\n        item.showInGroupFooter === undefined && !item.alignByColumn\n      )\n        ? true\n        : item.showInGroupFooter,\n    }))\n    : items\n);\n","import { GetTargetColumnGeometriesFn } from '../types';\n\nexport const getTargetColumnGeometries: GetTargetColumnGeometriesFn = (\n  columnGeometries, sourceIndex,\n) => {\n  const sourceWidth = columnGeometries[sourceIndex].right - columnGeometries[sourceIndex].left;\n  const getWidthDifference = (index: number) => columnGeometries[index].right\n                                      - columnGeometries[index].left\n                                      - sourceWidth;\n\n  return columnGeometries\n    .map(({\n      top, right, bottom, left,\n    }, targetIndex) => {\n      let leftBorder = left;\n      if (targetIndex > 0 && targetIndex <= sourceIndex) {\n        leftBorder = Math.min(leftBorder, leftBorder - getWidthDifference(targetIndex - 1));\n      }\n      if (targetIndex > sourceIndex) {\n        leftBorder = Math.max(leftBorder, leftBorder + getWidthDifference(targetIndex));\n      }\n      let rightBorder = right;\n      if (targetIndex < columnGeometries.length - 1 && targetIndex >= sourceIndex) {\n        rightBorder = Math.max(rightBorder, rightBorder + getWidthDifference(targetIndex + 1));\n      }\n      if (targetIndex < sourceIndex) {\n        rightBorder = Math.min(rightBorder, rightBorder - getWidthDifference(targetIndex));\n      }\n\n      return {\n        top,\n        bottom,\n        right: rightBorder,\n        left: leftBorder,\n      };\n    });\n};\n","import { easeOutCubic } from '@devexpress/dx-core';\nimport { getTargetColumnGeometries } from './column-geometries';\nimport {\n  GetTableColumnGeometriesFn, GetTableTargetColumnIndexFn, ColumnAnimation,\n  GetColumnAnimationsFn, ColumnGeometry, FilterActiveAnimationsFn, EvalAnimationsFn,\n} from '../types';\n\nexport const getTableColumnGeometries: GetTableColumnGeometriesFn = (columns, tableWidth) => {\n  const columnWidths = columns\n    .map(column => column.width);\n\n  const freeSpace = tableWidth;\n  const restrictedSpace = columnWidths\n    .reduce(\n      (accum, width) => (accum as number)! + (typeof width === 'number' ? width : 0), 0) as number;\n  const freeSpacePortions = columnWidths\n    .reduce(\n      (accum, width) => (accum as number)! + (typeof width !== 'number' ? 1 : 0), 0) as number;\n  const freeSpacePortion = (freeSpace - restrictedSpace!) / freeSpacePortions!;\n\n  let lastRightPosition = 0;\n  return columnWidths\n    .map(width => (typeof width !== 'number' ? freeSpacePortion : width))\n    .map((width) => {\n      lastRightPosition += width;\n      return {\n        left: lastRightPosition - width,\n        right: lastRightPosition,\n      };\n    });\n};\n\nexport const getTableTargetColumnIndex: GetTableTargetColumnIndexFn = (\n  columnGeometries, sourceIndex, offset,\n) => getTargetColumnGeometries(columnGeometries, sourceIndex)\n  .findIndex(({ left, right }) => offset > left && offset < right);\n\nconst ANIMATION_DURATION = 200;\n\nconst getAnimationProgress = (animation: ColumnAnimation) => (\n  new Date().getTime() - animation.startTime) / ANIMATION_DURATION;\n\nexport const getAnimations: GetColumnAnimationsFn = (\n  prevColumns,\n  nextColumns,\n  tableWidth,\n  prevAnimations,\n) => {\n  const resizing = prevColumns.map(column => column.key).join()\n    === nextColumns.map(column => column.key).join();\n\n  const prevColumnGeometries = new Map<string, ColumnGeometry>(\n    getTableColumnGeometries(prevColumns, tableWidth)\n      .map((geometry, index) => [prevColumns[index].key, geometry] as [string, ColumnGeometry])\n      .map(([key, geometry]) => {\n        const animation = prevAnimations.get(key);\n        if (!animation) return [key, geometry];\n        const progress = easeOutCubic(getAnimationProgress(animation));\n        const { to, from } = animation.left!;\n        const left = ((to - from) * progress) + from;\n        return [key, {\n          left,\n          right: geometry.right - (geometry.left - left),\n        }];\n      // tslint:disable-next-line:array-type\n      }) as [string, ColumnGeometry][],\n    );\n\n  const nextColumnGeometries = new Map(\n    getTableColumnGeometries(nextColumns, tableWidth)\n      // tslint:disable-next-line:array-type\n      .map((geometry, index) => [nextColumns[index].key, geometry]) as [string, ColumnGeometry][],\n  );\n\n  return new Map([...nextColumnGeometries.keys()]\n    .map((key) => {\n      const prev: any = prevColumnGeometries.get(key);\n      const next: any = nextColumnGeometries.get(key);\n\n      const result: ColumnAnimation = { startTime: new Date().getTime(), style: {} };\n      const takePrevColumnIntoAccount = !!prevAnimations.get(key) || (prev && !resizing);\n      if (Math.abs((takePrevColumnIntoAccount ? prev!.left : next!.left) - next!.left) > 1) {\n        result.left = { from: prev.left, to: next.left };\n      }\n      return [key, result] as [string, ColumnAnimation];\n    })\n    .filter((animation: [string, ColumnAnimation]) => animation[1].left));\n};\n\nexport const filterActiveAnimations: FilterActiveAnimationsFn = animations => new Map(\n  [...animations.entries()]\n    .filter(([, animation]) => getAnimationProgress(animation) < 1),\n);\n\nexport const evalAnimations: EvalAnimationsFn = animations => new Map([...animations.entries()]\n  .map(([key, animation]): [string, object] => {\n    const progress = easeOutCubic(getAnimationProgress(animation));\n    const result = { ...animation.style };\n    if (animation.left) {\n      const offset = (animation.left.to - animation.left.from) * (progress - 1);\n      (result as any).transform = `translateX(${offset}px)`;\n    }\n    return [key, result];\n  }));\n","import { getTargetColumnGeometries } from './column-geometries';\nimport { TargetColumnGeometry, GetGroupCellTargetIndexFn } from '../types';\nimport { PureComputed } from '@devexpress/dx-core';\n\nconst isOnTheSameLine: PureComputed<[TargetColumnGeometry, number], boolean> = (geometry, y) => (\n  y >= geometry.top && y <= geometry.bottom\n);\n\nconst rectToObject = ({\n  top, right, bottom, left,\n}: TargetColumnGeometry) => ({\n  top, right, bottom, left,\n});\n\nconst collapseGapsBetweenItems: PureComputed<[TargetColumnGeometry[]]> = geometries => (\n  geometries.map((geometry, index) => {\n    if (index !== geometries.length - 1 && geometry.top === geometries[index + 1].top) {\n      return {\n        ...geometry,\n        right: geometries[index + 1].left,\n      };\n    }\n    return geometry;\n  }));\n\nexport const getGroupCellTargetIndex: GetGroupCellTargetIndexFn = (\n  geometries, sourceIndex, { x, y },\n) => {\n  if (geometries.length === 0) return 0;\n\n  const targetGeometries = sourceIndex !== -1\n    ? getTargetColumnGeometries(geometries, sourceIndex)\n    : geometries.map(rectToObject);\n\n  const targetIndex = collapseGapsBetweenItems(targetGeometries)\n    .findIndex((geometry, index) => {\n      const inVerticalBounds = isOnTheSameLine(geometry, y);\n      const inHorizontalBounds = x >= geometry.left && x <= geometry.right;\n      const shouldGoFirst = index === 0 && x < geometry.left;\n      const shouldGoOnLineBreak = !inVerticalBounds\n        && !!geometries[index - 1]\n        && isOnTheSameLine(geometries[index - 1], y);\n\n      return (inVerticalBounds && inHorizontalBounds)\n        || shouldGoFirst\n        || shouldGoOnLineBreak;\n    });\n\n  return targetIndex === -1 ? geometries.length : targetIndex;\n};\n","import { PureComputed } from '@devexpress/dx-core';\n\ntype CompareFn = (...args: [any, any]) => boolean;\n/** @internal */\nexport const arraysEqual: PureComputed<[any[], any[], CompareFn?], boolean> = (\n  arrA, arrB, comparator = (a, b) => a === b,\n) => {\n  if (arrA.length !== arrB.length) {\n    return false;\n  }\n  for (let i = 0; i < arrA.length; i += 1) {\n    if (!comparator(arrA[i], arrB[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n","import { GridViewport } from '../../types';\n\n/** @internal */\nexport const emptyViewport: GridViewport = {\n  columns: [[0, 0]],\n  rows: [0, 0],\n  headerRows: [0, 0],\n  footerRows: [0, 0],\n  top: 0,\n  left: 0,\n  width: 800,\n  height: 600,\n};\n\nexport const TOP_POSITION = Symbol('top');\nexport const BOTTOM_POSITION = Symbol('bottom');\n","import {\n  getRowsVisibleBoundary, getColumnBoundaries,\n} from '../../utils/virtual-table';\nimport {\n  GetViewportFn,\n  CheckTableColumnWidths,\n  TableColumn,\n  GetScrollHeightByIndex,\n  GetScrollPosition,\n  GetTopRowId,\n} from '../../types';\nimport { arraysEqual } from './utils';\nimport { TOP_POSITION, BOTTOM_POSITION } from './constants';\n\nconst VALID_UNITS = ['px', ''];\n/* tslint:disable max-line-length */\nconst VIRTUAL_TABLE_ERROR = 'The columnExtension property of the VirtualTable plugin is given an invalid value.';\n\nexport const getViewport: GetViewportFn = (\n  state, getters, estimatedRowHeight, getRowHeight, getColumnWidth,\n) => {\n  const {\n    viewportTop, viewportLeft, containerWidth, containerHeight, headerHeight, footerHeight,\n  } = state;\n  const {\n    loadedRowsStart,\n    bodyRows: tableBodyRows,\n    columns: tableColumns,\n    headerRows: tableHeaderRows = [],\n    footerRows: tableFooterRows = [],\n    isDataRemote,\n    viewport,\n  } = getters;\n\n  const rows = getRowsVisibleBoundary(\n    tableBodyRows, viewportTop, containerHeight - headerHeight - footerHeight,\n    getRowHeight, loadedRowsStart, estimatedRowHeight, isDataRemote,\n  );\n  const headerRows = getRowsVisibleBoundary(\n    tableHeaderRows, 0, headerHeight,\n    getRowHeight, 0, estimatedRowHeight, false,\n  );\n  const footerRows = getRowsVisibleBoundary(\n    tableFooterRows, 0, footerHeight,\n    getRowHeight, 0, estimatedRowHeight, false,\n  );\n  const columns = getColumnBoundaries(\n    tableColumns, viewportLeft, containerWidth, getColumnWidth,\n  );\n\n  // NOTE: prevent unnecessary updates\n  // e.g. when rows changed but bounds remain the same.\n  let result = viewport;\n  if (viewportTop !== viewport.top) {\n    result = { ...result, top: viewportTop };\n  }\n  if (viewportLeft !== viewport.left) {\n    result = { ...result, left: viewportLeft };\n  }\n  if (containerWidth !== viewport.width) {\n    result = { ...result, width: containerWidth };\n  }\n  if (containerHeight !== viewport.height) {\n    result = { ...result, height: containerHeight };\n  }\n  if (!arraysEqual(rows, viewport.rows)) {\n    result = { ...result, rows };\n  }\n  if (!arraysEqual(headerRows, viewport.headerRows)) {\n    result = { ...result, headerRows };\n  }\n  if (!arraysEqual(footerRows, viewport.footerRows)) {\n    result = { ...result, footerRows };\n  }\n  if (!arraysEqual(columns, viewport.columns, arraysEqual)) {\n    result = { ...result, columns };\n  }\n\n  return result;\n};\n\nexport const checkColumnWidths: CheckTableColumnWidths = (tableColumns) => {\n  return tableColumns.reduce((acc, tableColumn) => {\n    const { width } = tableColumn;\n    if (typeof width === 'string') {\n      const numb = parseInt(width, 10);\n      const unit = numb ? width.substr(numb.toString().length) : width;\n      const isValidUnit = VALID_UNITS.some(validUnit => validUnit === unit);\n      if (!isValidUnit) {\n        throw new Error(VIRTUAL_TABLE_ERROR);\n      }\n      acc.push({ ...tableColumn, width: numb });\n    } else {\n      acc.push(tableColumn);\n    }\n    return acc;\n  }, []  as TableColumn[]);\n};\n\nexport const calculateScrollHeight: GetScrollHeightByIndex = (rowHeight, index) =>\n  index > -1 ? rowHeight * index : undefined;\n\nexport const getScrollTop: GetScrollPosition = (rows, rowsCount, rowId, rowHeight, isDataRemote) => {\n  if (rowId === TOP_POSITION) {\n    return 0;\n  }\n  if (rowId === BOTTOM_POSITION) {\n    return rowsCount * rowHeight;\n  }\n\n  const searchIndexRequired = !isDataRemote && rowId !== undefined;\n  const indexById = searchIndexRequired\n    ? rows.findIndex(row => row.rowId === rowId)\n    : undefined;\n\n  return calculateScrollHeight(\n    rowHeight,\n    indexById!,\n  );\n};\n\nexport const getTopRowId: GetTopRowId = (viewport, tableBodyRows, isDataRemote) => {\n  const hasViewportRows = viewport && viewport.rows;\n  const hasBodyRows = tableBodyRows && tableBodyRows.length;\n  if (hasViewportRows && hasBodyRows && !isDataRemote) {\n    const index = viewport.rows[0];\n\n    return index < tableBodyRows.length ? tableBodyRows[index].rowId : undefined;\n  }\n\n  return undefined;\n};\n","import { mergeRows } from './helpers';\nimport { intervalUtil } from './utils';\nimport { VirtualRowsWithCacheFn, PlainRowsFn, LoadedRowsStartFn } from '../../types';\n\nexport const virtualRowsWithCache: VirtualRowsWithCacheFn = (skip, rows, cache) => {\n  const rowsInterval = intervalUtil.getRowsInterval({ skip, rows });\n  const cacheInterval = intervalUtil.getRowsInterval(cache);\n\n  return mergeRows(rowsInterval, cacheInterval, rows, cache.rows, skip, cache.skip);\n};\n\nexport const plainRows: PlainRowsFn = (virtualRows, availableRowCount) => {\n  return virtualRows.rows.length > availableRowCount\n    ? virtualRows.rows.slice(0, availableRowCount)\n    : virtualRows.rows;\n};\n\nexport const loadedRowsStart: LoadedRowsStartFn = virtualRows => virtualRows.skip;\n","export const ROOT_GROUP = '__root__';\nexport const DEFAULT_COLUMN_WIDTH = 150;\n","// tslint:disable-next-line: no-submodule-imports\nimport * as Excel from 'exceljs';\nimport { PureComputed } from '@devexpress/dx-core';\nimport {\n  TableColumn, FindRangesFn, ExportRowsFn,\n  CloseSheetFn,\n  ExportSummaryItemsFn,\n  RemoveEmptyGroupsFn,\n} from '../../types';\nimport { ROOT_GROUP, DEFAULT_COLUMN_WIDTH } from './constants';\n\nexport const exportHeader = (worksheet: Excel.Worksheet, columns: TableColumn[]) => {\n  const cols = columns\n    .map(({ column, width }) => ({\n      width: (width as number || DEFAULT_COLUMN_WIDTH) / 8,\n      key: column?.name,\n    }));\n  worksheet.columns = cols;\n\n  const { lastRow } = worksheet;\n  if (lastRow) {\n    worksheet.addRow({});\n  }\n\n  const headerRow = columns.reduce((acc, { column: { name, title } = {} }) => ({\n    ...acc,\n    [name!]: title,\n  }), {});\n  worksheet.addRow(headerRow);\n\n  worksheet.views.push({\n    state: 'frozen', ySplit: worksheet.lastRow!.number,\n  });\n};\n\nexport const findRanges: FindRangesFn = (groupTree, compoundKey, level, maxLevel, result = []) => {\n  if (level !== maxLevel) {\n    const ranges = (groupTree[compoundKey] as string[]).reduce((acc, groupKey) => (\n      [...acc, ...findRanges(groupTree, groupKey, level + 1, maxLevel, result)]\n    ), [] as Array<number[]>);\n    return [...result, ...ranges];\n  }\n  return [...result, groupTree[compoundKey] as number[]];\n};\n\nexport const exportRows: ExportRowsFn = (\n  worksheet, allRows, dataColumns, columns, isGroupRow, outlineLevels,\n  rowsOffset, getCellValue, getCloseGroup, customizeCell,\n) => {\n  let currentLevel = 0;\n  let openGroups: any[] = [];\n  const closeGroup = getCloseGroup(rowsOffset);\n\n  allRows.forEach((row) => {\n    let excelRow;\n\n    if (isGroupRow && isGroupRow(row)) {\n      currentLevel = outlineLevels[row.groupedBy];\n\n      // close nested groups first\n      openGroups.slice(currentLevel).reverse().forEach(closeGroup);\n\n      openGroups = openGroups.slice(0, currentLevel);\n      openGroups[currentLevel] = { groupedBy: row.groupedBy, compoundKey: row.compoundKey };\n\n      // add group row\n      const title = dataColumns.find(({ name }) => name === row.groupedBy)?.title;\n      excelRow = { [columns[0].column!.name]: `${title}: ${row.value}` };\n\n      worksheet.addRow(excelRow);\n      const lastIndex = worksheet.lastRow!.number;\n\n      // merge into single cell\n      worksheet.mergeCells(lastIndex, 1, lastIndex, columns.length);\n      worksheet.lastRow!.getCell(1).font = { bold: true };\n\n      if (currentLevel > 0) {\n        worksheet.lastRow!.outlineLevel = currentLevel;\n      }\n      currentLevel += 1;\n    } else {\n      excelRow = columns.reduce((acc, { column }) => ({\n        ...acc,\n        ...(column ? { [column.name]: getCellValue(row, column.name) } : null),\n      }), {});\n      worksheet.addRow(excelRow);\n      worksheet.lastRow!.outlineLevel = currentLevel;\n    }\n\n    worksheet.lastRow!.eachCell((cell, colNumber) => {\n      customizeCell(cell, row, columns[colNumber - 1].column!);\n    });\n  });\n\n  openGroups.reverse().forEach(closeGroup);\n};\n\nexport const closeSheet: CloseSheetFn = (\n  worksheet, groupTree, maxGroupLevel, rowsOffset, totalSummaryItems, exportSummary,\n) => {\n  exportSummaryItems(\n    worksheet, groupTree, totalSummaryItems, ROOT_GROUP, -1,\n    rowsOffset, maxGroupLevel, exportSummary,\n  );\n};\n\nexport const normalizeRanges: PureComputed<[number[][], number]> = (ranges, offset) => (\n  ranges.map(range => range.map(index => + index + offset))\n);\n\nexport const exportSummaryItems: ExportSummaryItemsFn = (\n  worksheet, groupTree, summaryItems, groupKey, groupLevel,\n  rowsOffset, maxGroupLevel, exportSummary,\n) => {\n  if (!summaryItems) return;\n\n  worksheet.addRow({});\n\n  const ranges = normalizeRanges(\n    findRanges(groupTree, groupKey, groupLevel, maxGroupLevel),\n    rowsOffset,\n  );\n\n  summaryItems.forEach((s) => {\n    exportSummary(s, ranges);\n  });\n};\n\nexport const removeEmptyGroups: RemoveEmptyGroupsFn = (rows, grouping, isGroupRow) => {\n  if (!grouping) return rows;\n\n  const groupingColumns = grouping.map(({ columnName }) => columnName);\n  const result: any[] = [];\n  let groupChain: any[] = [];\n\n  rows.forEach((row) => {\n    if (isGroupRow(row)) {\n      const level = groupingColumns.indexOf(row.groupedBy);\n      if (level === groupChain.length) {\n        groupChain.push(row);\n      } else {\n        groupChain = [...groupChain.slice(0, level), row];\n      }\n    } else {\n      if (groupChain.length > 0) {\n        result.push(...groupChain);\n        groupChain = Array.from({ length: groupChain.length });\n      }\n      result.push(row);\n    }\n  });\n\n  return result.filter(row => !!row);\n};\n","import {\n  OutlineLevelsFn, FilterSelectedRowsFn, GetRowsToExportFn, Row, BuildGroupTreeFn,\n  GetExportSummaryFn, GetCloseGroupFn, Grouping, RowId,\n} from '../../types';\nimport { PureComputed } from '@devexpress/dx-core';\nimport { ROOT_GROUP } from './constants';\nimport { exportSummaryItems, removeEmptyGroups } from './helpers';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const groupOutlineLevels: OutlineLevelsFn = grouping => (\n  grouping?.reduce((acc, { columnName }, index) => ({\n    ...acc,\n    [columnName]: index,\n  }), {}) || {}\n);\n\nconst filterSelectedRows: FilterSelectedRowsFn = (rows, selection, getRowId, isGroupRow) => {\n  const selectionSet = new Set<RowId>(selection);\n  return rows.filter(row => (\n    isGroupRow && isGroupRow(row)) || selectionSet.has(getRowId(row)),\n  );\n};\n\nexport const rowsToExport: GetRowsToExportFn = (\n  rows, selection, grouping, getCollapsedRows, getRowId, isGroupRow,\n) => {\n  const expandRows: PureComputed<[Row[]]> = collapsedRows => (\n    collapsedRows.reduce((acc, row) => (\n      [...acc, row, ...(expandRows(getCollapsedRows(row) || []))]\n    ), [])\n  );\n\n  const expandedRows = getCollapsedRows ? expandRows(rows) : rows;\n\n  if (!selection) {\n    return expandedRows;\n  }\n\n  const filteredRows = filterSelectedRows(expandedRows, selection, getRowId, isGroupRow);\n  return removeEmptyGroups(filteredRows, grouping, isGroupRow);\n};\n\nexport const buildGroupTree: BuildGroupTreeFn = (\n  rows, outlineLevels, grouping, isGroupRow, groupSummaryItems,\n) => {\n  const groupTree = { [ROOT_GROUP]: [] as any[] };\n\n  if (!grouping?.length) {\n    groupTree[ROOT_GROUP] = [0, rows.length - 1];\n    return groupTree;\n  }\n\n  const maxLevel = Object.keys(outlineLevels).length - 1;\n  const groupSummaryExists = !!groupSummaryItems;\n  const parentChain = { '-1': ROOT_GROUP };\n  let lastDataIndex = 0;\n  let openGroup = '';\n  let index = 0;\n  let level = 0;\n  let prevLevel = 0;\n\n  rows.forEach((row) => {\n    const { groupedBy, compoundKey } = row;\n    if (isGroupRow(row)) {\n      level = outlineLevels[groupedBy];\n      groupTree[compoundKey] = [];\n      parentChain[level] = compoundKey;\n      if (level <= maxLevel) {\n        groupTree[parentChain[level - 1]].push(compoundKey);\n      }\n      if (level === maxLevel) {\n        if (openGroup) {\n          // close previous group\n          groupTree[openGroup].push(lastDataIndex);\n        }\n        openGroup = compoundKey;\n        if (groupSummaryExists && lastDataIndex > 0) {\n          index += 1;\n        }\n        groupTree[compoundKey].push(index + 1); // first row index\n      } else if (groupSummaryExists && level < prevLevel) {\n        // jump over summary rows\n        index += maxLevel - level;\n      }\n      prevLevel = level;\n    } else {\n      lastDataIndex = index;\n    }\n    index += 1;\n  });\n\n  if (openGroup) {\n    groupTree[openGroup].push(lastDataIndex);\n  }\n\n  return groupTree;\n};\n\nconst operations = {\n  count: 'COUNTA',\n};\nexport const exportSummaryGetter: GetExportSummaryFn = (\n  worksheet, tableColumns, customizeSummaryCell, defaultSummaryMessages,\n) => (\n  { columnName, type }, ranges,\n) => {\n  const { column } = tableColumns.find(({ column: dataColumn, type: columnType }) => (\n    columnType === TABLE_DATA_TYPE && dataColumn && dataColumn.name === columnName\n  )) || {};\n  // NOTE: column is hidden or the grid grouped by this column\n  if (!column) {\n    return;\n  }\n\n  const row = worksheet.lastRow!;\n  const letter = worksheet.getColumn(columnName).letter;\n  const operation = operations[type] || type.toUpperCase();\n  const rangesStr = ranges.map(range => (\n    range\n      .map(r => `${letter}${r}`)\n      .filter((val, index, arr) => arr.indexOf(val) === index)\n      .join(':')\n  )).join(',');\n\n  const cell = row.getCell(columnName);\n  cell.value = {\n    formula: `${operation}(${rangesStr})`,\n    date1904: false,\n  };\n  cell.numFmt = `\"${defaultSummaryMessages[type]}:\" 0`;\n\n  const summary = {\n    type,\n    ranges,\n  };\n  customizeSummaryCell(cell, column!, summary);\n};\n\nexport const closeGroupGetter: GetCloseGroupFn = (\n  worksheet, groupTree, outlineLevels, maxGroupLevel, groupSummaryItems, exportSummary,\n) => rowsOffset => (group) => {\n  const { groupedBy, compoundKey } = group;\n\n  exportSummaryItems(\n    worksheet, groupTree, groupSummaryItems, compoundKey, outlineLevels[groupedBy],\n    rowsOffset, maxGroupLevel, exportSummary,\n  );\n};\n\nexport const maximumGroupLevel: PureComputed<[Grouping[]], number> = grouping => (\n  (grouping || []).length - 1\n);\n","import { PureComputed } from '@devexpress/dx-core';\nimport {\n  GetVisibleBoundaryWithFixedFn, VisibleBoundary, GetVisibleBoundaryFn, GetSpanBoundaryFn,\n  CollapseBoundariesFn, GetColumnsSizeFn, GetCollapsedColumnsFn, CollapsedColumn,\n  GetCollapsedAndStubRowsFn, GetCollapsedCellsFn, GetCollapsedGridFn, GetColumnWidthFn,\n  TableColumn,\n  CollapsedCell,\n  GetColumnWidthGetterFn,\n  GetCollapsedGridsFn,\n  CollapsedGrid,\n  GetSpecificRenderBoundaryFn,\n  GetRenderBoundaryFn,\n  GetRowsVisibleBoundaryFn,\n} from '../types';\nimport { TABLE_FLEX_TYPE, intervalUtil } from '..';\n\nexport const TABLE_STUB_TYPE = Symbol('stub');\n\nexport const getVisibleBoundaryWithFixed: GetVisibleBoundaryWithFixedFn = (\n  visibleBoundary, items,\n) => items.reduce((acc, item, index) => {\n  if (item.fixed && (index < visibleBoundary[0] || index > visibleBoundary[1])) {\n    acc.push([index, index]);\n  }\n  return acc;\n}, [visibleBoundary] as [VisibleBoundary]);\n\nexport const getVisibleBoundary: GetVisibleBoundaryFn = (\n  items, viewportStart, viewportSize, getItemSize, offset = 0, itemSize = 0,\n) => {\n  let start: number | null = null;\n  let end: number | null = null;\n  let index = 0;\n  let beforePosition = offset * itemSize;\n\n  const viewportEnd = viewportStart + viewportSize;\n  while (end === null && index < items.length) {\n    const item = items[index];\n    const afterPosition = beforePosition + getItemSize(item)!;\n    const isVisible = (beforePosition >= viewportStart && beforePosition < viewportEnd)\n      || (afterPosition > viewportStart && afterPosition <= viewportEnd)\n      || (beforePosition < viewportStart && afterPosition > viewportEnd);\n    if (isVisible && start === null) {\n      start = index;\n    }\n    if (!isVisible && start !== null) {\n      end = index - 1;\n      break;\n    }\n    index += 1;\n    beforePosition = afterPosition;\n  }\n  if (start !== null && end === null) {\n    end = index - 1;\n  }\n\n  start = start === null ? 0 : start;\n  end = end === null ? 0 : end;\n\n  return [start + offset, end + offset];\n};\n\nexport const getRenderBoundary: GetRenderBoundaryFn = (itemsCount, visibleBoundary, overscan) => {\n  let [start, end] = visibleBoundary;\n  start = Math.max(0, start - overscan);\n  end = Math.min(itemsCount - 1, end + overscan);\n\n  return [start, end];\n};\n\nexport const getColumnBoundaries: PureComputed<\n  [TableColumn[], number, number, GetColumnWidthFn], VisibleBoundary[]\n> = (columns, left, width, getColumnWidth) => (\n  getVisibleBoundaryWithFixed(\n    getColumnsRenderBoundary(\n      columns.length,\n      getVisibleBoundary(columns, left, width, getColumnWidth, 0),\n    ),\n    columns,\n  )\n);\nexport const getRowsVisibleBoundary: GetRowsVisibleBoundaryFn = (\n  rows, top, height, getRowHeight, offset, rowHeight, isDataRemote,\n) => {\n  const beforePosition = offset * rowHeight;\n  const noVisibleRowsLoaded = rowHeight > 0 &&\n    beforePosition + rows.length * rowHeight < top ||\n    top < beforePosition;\n\n  let boundaries;\n  if (isDataRemote && noVisibleRowsLoaded) {\n    const topIndex = Math.round(top / rowHeight);\n    boundaries = [topIndex, topIndex];\n  } else {\n    boundaries = getVisibleBoundary(rows, top, height, getRowHeight, offset, rowHeight);\n  }\n\n  return boundaries;\n};\n\nexport const getColumnsRenderBoundary: GetSpecificRenderBoundaryFn = (\n  columnCount, visibleBoundary,\n) => getRenderBoundary(columnCount, visibleBoundary, 1);\n\nexport const getRowsRenderBoundary: GetSpecificRenderBoundaryFn = (\n  rowsCount, visibleBoundary,\n) => getRenderBoundary(rowsCount, visibleBoundary, 3);\n\nexport const getSpanBoundary: GetSpanBoundaryFn = (\n  items, visibleBoundaries, getItemSpan,\n) => visibleBoundaries\n  .map((visibleBoundary) => {\n    const endIndex = Math.min(visibleBoundary[1], items.length - 1);\n    let end = endIndex;\n    let start = visibleBoundary[0] <= end ? visibleBoundary[0] : 0;\n\n    for (let index = 0; index <= endIndex; index += 1) {\n      const span = getItemSpan(items[index]);\n      if (index < visibleBoundary[0] && index + span > visibleBoundary[0]) {\n        start = index;\n      }\n      if (index + (span - 1) > visibleBoundary[1]) {\n        end = index + (span - 1);\n      }\n    }\n    return [start, end] as VisibleBoundary;\n  });\n\nexport const collapseBoundaries: CollapseBoundariesFn = (\n  itemsCount, visibleBoundaries, spanBoundaries,\n) => {\n  const breakpoints = new Set([0, itemsCount]);\n  spanBoundaries.forEach(rowBoundaries => rowBoundaries\n    .forEach((boundary) => {\n      breakpoints.add(boundary[0]);\n      // next interval starts after span end point\n      breakpoints.add(Math.min(boundary[1] + 1, itemsCount));\n    }));\n\n  visibleBoundaries\n    .filter(boundary => boundary.every(bound => 0 <= bound && bound < itemsCount))\n    .forEach((boundary) => {\n      for (let point = boundary[0]; point <= boundary[1]; point += 1) {\n        breakpoints.add(point);\n      }\n      if (boundary[1] + 1 < itemsCount) {\n        // close last visible point\n        breakpoints.add(boundary[1] + 1);\n      }\n    });\n\n  const bp = [...breakpoints].sort((a, b) => a - b);\n  const bounds: any[] = [];\n  for (let i = 0; i < bp.length - 1; i += 1) {\n    bounds.push([\n      bp[i],\n      bp[i + 1] - 1,\n    ]);\n  }\n\n  return bounds;\n};\n\nconst getColumnsSize: GetColumnsSizeFn = (columns, startIndex, endIndex, getColumnSize) => {\n  let size = 0;\n  for (let i = startIndex; i <= endIndex; i += 1) {\n    size += getColumnSize(columns[i], 0) || 0;\n  }\n  return size;\n};\n\nexport const getCollapsedColumns: GetCollapsedColumnsFn = (\n  columns, visibleBoundaries, boundaries, getColumnWidth,\n) => {\n  const collapsedColumns: CollapsedColumn[] = [];\n  boundaries.forEach((boundary) => {\n    const isVisible = visibleBoundaries.reduce((acc, visibleBoundary) => (\n      acc || (visibleBoundary[0] <= boundary[0] && boundary[1] <= visibleBoundary[1])\n    ), false);\n\n    if (isVisible) {\n      const column = columns[boundary[0]];\n      collapsedColumns.push({\n        ...column,\n        width: getColumnWidth(column) as number,\n      });\n    } else {\n      collapsedColumns.push({\n        key: `${TABLE_STUB_TYPE.toString()}_${boundary[0]}_${boundary[1]}`,\n        type: TABLE_STUB_TYPE,\n        width: getColumnsSize(columns, boundary[0], boundary[1], getColumnWidth),\n      });\n    }\n  });\n  return collapsedColumns;\n};\n\nexport const getCollapsedRows: GetCollapsedAndStubRowsFn = (\n  rows, visibleBoundary, boundaries, getRowHeight, getCells, offset,\n) => {\n  const collapsedRows: any[] = [];\n  boundaries.forEach((boundary) => {\n    const isVisible = visibleBoundary[0] <= boundary[0] && boundary[1] <= visibleBoundary[1];\n    if (isVisible) {\n      const row = rows[boundary[0] - offset];\n      collapsedRows.push({\n        row,\n        cells: getCells(row),\n      });\n    } else {\n      const row = {} as any;\n      collapsedRows.push({\n        row: {\n          key: `${TABLE_STUB_TYPE.toString()}_${boundary[0]}_${boundary[1]}`,\n          type: TABLE_STUB_TYPE,\n          height: getColumnsSize(rows, boundary[0], boundary[1], getRowHeight),\n        },\n        cells: getCells(row),\n      });\n    }\n  });\n  return collapsedRows;\n};\n\nexport const getCollapsedCells: GetCollapsedCellsFn = (\n  columns, spanBoundaries, boundaries, getColSpan,\n) => {\n  const collapsedCells: CollapsedCell[] = [];\n  let index = 0;\n  while (index < boundaries.length) {\n    const boundary = boundaries[index];\n    const isSpan = spanBoundaries.reduce((acc, spanBoundary) => (\n      acc || (spanBoundary[0] <= boundary[0] && boundary[1] <= spanBoundary[1])), false);\n    if (isSpan) {\n      const column = columns[boundary[0]];\n      const realColSpan = getColSpan(column);\n      const realColSpanEnd = (realColSpan + boundary[0]) - 1;\n      const colSpanEnd = boundaries.findIndex(\n        colSpanBoundary => colSpanBoundary[0]\n        <= realColSpanEnd && realColSpanEnd\n        <= colSpanBoundary[1],\n      );\n      collapsedCells.push({\n        column,\n        colSpan: (colSpanEnd - index) + 1,\n      });\n      index += 1;\n    } else {\n      collapsedCells.push({\n        column: {\n          key: `${TABLE_STUB_TYPE.toString()}_${boundary[0]}_${boundary[1]}`,\n          type: TABLE_STUB_TYPE,\n        },\n        colSpan: 1,\n      });\n      index += 1;\n    }\n  }\n  return collapsedCells;\n};\n\nexport const getCollapsedGrid: GetCollapsedGridFn = ({\n  rows,\n  columns,\n  rowsVisibleBoundary,\n  columnsVisibleBoundary,\n  getColumnWidth = (column: any) => column.width,\n  getRowHeight = (row: any) => row.height,\n  getColSpan = () => 1,\n  totalRowCount,\n  offset,\n}) => {\n  if (!columns.length) {\n    return {\n      columns: [],\n      rows: [],\n    };\n  }\n\n  const boundaries = rowsVisibleBoundary || [0, rows.length - 1 || 1];\n\n  const rowSpanBoundaries = rows\n    .slice(boundaries[0], boundaries[1])\n    .map(row => getSpanBoundary(\n      columns,\n      columnsVisibleBoundary,\n      column => getColSpan(row, column),\n    ));\n  const columnBoundaries = collapseBoundaries(\n    columns.length,\n    columnsVisibleBoundary,\n    rowSpanBoundaries,\n  );\n\n  const rowBoundaries = collapseBoundaries(totalRowCount!, [boundaries], []);\n\n  return {\n    columns: getCollapsedColumns(\n      columns,\n      columnsVisibleBoundary,\n      columnBoundaries,\n      getColumnWidth,\n    ),\n    rows: getCollapsedRows(\n      rows,\n      boundaries,\n      rowBoundaries,\n      getRowHeight,\n      row => getCollapsedCells(\n        columns,\n        getSpanBoundary(\n          columns,\n          columnsVisibleBoundary,\n          column => getColSpan(row, column),\n        ),\n        columnBoundaries,\n        column => getColSpan(row, column),\n      ),\n      offset,\n    ),\n  };\n};\n\nexport const getColumnWidthGetter: GetColumnWidthGetterFn = (\n  tableColumns, tableWidth, minColumnWidth,\n) => {\n  const colsHavingWidth = tableColumns.filter(col => typeof col.width === 'number');\n  const columnsWidth = colsHavingWidth.reduce((acc, col) => (acc + (col.width as number)!), 0);\n  const autoWidth = (tableWidth - columnsWidth) / (tableColumns.length - colsHavingWidth.length);\n  const autoColWidth = Math.max(autoWidth, minColumnWidth!);\n\n  return column => (column.type === TABLE_FLEX_TYPE\n    ? null\n    : typeof column.width === 'number' ? column.width : autoColWidth);\n};\n\nexport const getCollapsedGrids: GetCollapsedGridsFn = ({\n    headerRows = [],\n    bodyRows = [],\n    footerRows = [],\n    columns,\n    loadedRowsStart,\n    totalRowCount,\n    getCellColSpan,\n    viewport,\n    getRowHeight,\n    getColumnWidth,\n  },\n) => {\n  const getColSpan = (\n    tableRow: any, tableColumn: any,\n  ) => getCellColSpan!({ tableRow, tableColumn, tableColumns: columns });\n\n  const getCollapsedGridBlock: PureComputed<\n    [any[], any[]?, number?, number?], CollapsedGrid\n  > = (\n    rows, rowsVisibleBoundary, rowCount = rows.length, offset = 0,\n  ) => getCollapsedGrid({\n    rows,\n    columns,\n    rowsVisibleBoundary,\n    columnsVisibleBoundary: viewport.columns,\n    getColumnWidth,\n    getRowHeight,\n    getColSpan,\n    totalRowCount: rowCount,\n    offset,\n  });\n\n  const headerGrid = getCollapsedGridBlock(\n    headerRows, getRenderRowBounds(viewport.headerRows, headerRows.length),\n  );\n  const bodyGrid = getCollapsedGridBlock(\n    bodyRows,\n    adjustedRenderRowBounds(\n      viewport.rows, bodyRows.length, loadedRowsStart,\n    ),\n    totalRowCount || 1,\n    loadedRowsStart,\n  );\n  const footerGrid = getCollapsedGridBlock(\n    footerRows, getRenderRowBounds(viewport.footerRows, footerRows.length),\n  );\n\n  return {\n    headerGrid,\n    bodyGrid,\n    footerGrid,\n  };\n};\n\nconst getRenderRowBounds: PureComputed<[VisibleBoundary, number], number[]> = (\n  visibleBounds, rowCount,\n) => getRowsRenderBoundary(\n  rowCount,\n  visibleBounds,\n);\n\nconst adjustedRenderRowBounds: PureComputed<[VisibleBoundary, number, number], number[]> = (\n  visibleBounds, rowCount, loadedRowsStart,\n) => {\n  const renderRowBoundaries = getRenderRowBounds(\n    visibleBounds, loadedRowsStart + rowCount,\n  );\n  const adjustedInterval = intervalUtil.intersect(\n    { start: renderRowBoundaries[0], end: renderRowBoundaries[1] },\n    { start: loadedRowsStart, end: loadedRowsStart + rowCount },\n  );\n  return [adjustedInterval.start, adjustedInterval.end];\n};\n","import { PureComputed } from '@devexpress/dx-core';\nimport { TABLE_GROUP_TYPE } from './constants';\nimport { TableRow, TableColumn, IsSpecificCellFn, Grouping, GroupSummaryItem } from '../../types';\nimport { TABLE_STUB_TYPE } from '../../utils/virtual-table';\n\ntype IsGroupIndentCellFn = PureComputed<[TableRow, TableColumn, Grouping[]], boolean>;\n\nconst getGroupIndexByColumn: PureComputed<[Grouping[], TableColumn], number> = (\n  grouping, tableColumn,\n) => grouping.findIndex(\n  columnGrouping => !!tableColumn.column && columnGrouping.columnName === tableColumn.column.name,\n);\n\nconst isIndentCell: IsGroupIndentCellFn = (\n    tableRow,\n    tableColumn,\n    grouping,\n  ) => {\n  if (tableColumn.column && tableRow.row.groupedBy === tableColumn.column.name) return false;\n  const rowGroupIndex = grouping.findIndex(\n    columnGrouping => columnGrouping.columnName === tableRow.row.groupedBy,\n  );\n  const columnGroupIndex = getGroupIndexByColumn(grouping, tableColumn);\n\n  return columnGroupIndex < rowGroupIndex;\n};\n\nexport const isGroupTableCell: IsSpecificCellFn = (\n  tableRow, tableColumn,\n) => !!(tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_GROUP_TYPE\n  && tableColumn.column\n  && tableColumn.column.name === tableRow.row.groupedBy);\n\nexport const isGroupIndentTableCell: IsGroupIndentCellFn = (\n  tableRow, tableColumn, grouping,\n) => (\n  tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_GROUP_TYPE &&\n  isIndentCell(tableRow, tableColumn, grouping)\n);\n\nexport const isGroupIndentStubTableCell: IsGroupIndentCellFn = (\n  tableRow, tableColumn, grouping,\n) => (\n  (tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_STUB_TYPE &&\n    isIndentCell(tableRow, tableColumn, grouping))\n);\n\nexport const isGroupTableRow = (tableRow: TableRow) => tableRow.type === TABLE_GROUP_TYPE;\n\nexport const isGroupRowOrdinaryCell: IsSpecificCellFn = (tableRow, tableColumn) => (\n  isGroupTableRow(tableRow) && !isGroupTableCell(tableRow, tableColumn)\n);\n\nconst columnHasGroupRowSummary: PureComputed<[TableColumn, GroupSummaryItem[]], boolean> = (\n  tableColumn, groupSummaryItems,\n) => (\n  !!(groupSummaryItems && groupSummaryItems\n    .some(item => (\n      (!item.showInGroupFooter && item.alignByColumn)\n        && item.columnName === (tableColumn.column && tableColumn.column.name)\n    )))\n);\n\nexport const isRowSummaryCell: PureComputed<\n  [TableRow, TableColumn, Grouping[], GroupSummaryItem[]], boolean\n> = (\n  tableRow, tableColumn, grouping, groupSummaryItems,\n) => (\n  columnHasGroupRowSummary(tableColumn, groupSummaryItems)\n  && !isGroupIndentTableCell(tableRow, tableColumn, grouping)\n);\n\nexport const isPreviousCellContainSummary: PureComputed<\n  [TableRow, TableColumn, TableColumn[], Grouping[], GroupSummaryItem[]], boolean\n> = (\n  tableRow, tableColumn, tableColumns, grouping, groupSummaryItems,\n) => {\n  const columnIndex = tableColumns.indexOf(tableColumn);\n  return columnIndex > 0 && isRowSummaryCell(\n    tableRow, tableColumns[columnIndex - 1], grouping, groupSummaryItems,\n  );\n};\n\nexport const calculateGroupCellIndent: PureComputed<[TableColumn, Grouping[], number], number> = (\n  tableColumn, grouping, indentWidth,\n) => (\n  indentWidth * getGroupIndexByColumn(grouping, tableColumn)\n);\n"],"names":["slice","VALID_UNITS","easeOutCubic"],"mappings":";;;;;;;;;;;;;;;EAAO,IAAM,eAAe,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;EACxC,IAAM,gBAAgB,GAAG,MAAM,CAAI,eAAe,CAAC,QAAQ,EAAE,WAAQ,CAAC,CAAC;EACvE,IAAM,oBAAoB,GAAG,MAAM,CAAI,eAAe,CAAC,QAAQ,EAAE,cAAW,CAAC,CAAC;EAC9E,IAAM,yBAAyB,GAAG,MAAM,CAAI,eAAe,CAAC,QAAQ,EAAE,mBAAgB,CAAC;;ECC9F,IAAM,oBAAoB,GAA+B,UAAA,QAAQ,IAAI,OAAA,UAAC,GAAG;MACvE,IAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;MAC7B,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,IAAI,MAAM,KAAK,SAAS,EAAE;;UAElD,OAAO,CAAC,IAAI,CAAC,kEAAkE,EAAE,GAAG,CAAC,CAAC;OACvF;MACD,OAAO,MAAM,CAAC;EAChB,CAAC,GAAA,CAAC;MAEW,WAAW,GAAsC,UAAC,QAAQ,EAAE,IAAI;MAC3E,IAAI,CAAC,QAAQ,EAAE;UACb,IAAM,KAAG,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,QAAQ,IAAK,OAAA,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAA,CAAkB,CAAC,CAAC;UACnF,OAAO,UAAC,GAAQ,IAAK,OAAA,KAAG,CAAC,GAAG,CAAC,GAAG,CAAU,GAAA,CAAC;OAC5C;MACD,OAAO,oBAAoB,CAAC,QAAQ,CAAC,CAAC;EACxC,CAAC,CAAC;EAEF,IAAM,mBAAmB,GAAmB,UAAC,GAAG,EAAE,UAAU,IAAK,OAAA,GAAG,CAAC,UAAU,CAAC,GAAA,CAAC;MAEpE,eAAe,GAA6C,UACvE,YAAkC,EAAE,OAAO;MAA3C,6BAAA,EAAA,kCAAkC;MAElC,IAAI,eAAe,GAAG,IAAI,CAAC;MAC3B,IAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,MAAM;UACrC,IAAI,MAAM,CAAC,YAAY,EAAE;cACvB,eAAe,GAAG,KAAK,CAAC;cACxB,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC;WACxC;UACD,OAAO,GAAG,CAAC;OACZ,EAAE,EAAE,CAAC,CAAC;MAEP,IAAI,eAAe,EAAE;UACnB,OAAO,YAAY,CAAC;OACrB;MAED,OAAO,UAAC,GAAG,EAAE,UAAU,IAAK,QAAC,GAAG,CAAC,UAAU,CAAC;YACxC,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC;YAChC,YAAY,CAAC,GAAG,EAAE,UAAU,CAAC,IAAC,CAAC;EACrC,CAAC;;MCvCY,mBAAmB,GAA0D,UACxF,KAAK,EAAE,EAER;UADC,0BAAU,EAAE,wBAAS,EAAE,wBAAS,EAAE,wBAAS;MAEnC,IAAA,uBAAO,CAAW;MAE1B,IAAI,WAAW,GAAU,EAAE,CAAC;MAC5B,IAAI,SAAS,KAAK,IAAI,EAAE;UACtB,WAAW,GAAG,OAAoB,CAAC;OACpC;MACD,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;UAC5B,WAAW,GAAGA,YAAK,CAAC,OAAO,CAAC;eACzB,MAAM,CAAC,UAAA,CAAC;cACP,OAAA,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;WAAA,CAAC,CAAC;OAC3C;MAED,IAAM,kBAAkB,GAAG,OAAO,CAAC,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,UAAU,KAAK,UAAU,GAAA,CAAC,CAAC;MAC/E,IAAM,aAAa,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;MAClD,IAAM,gBAAgB,GAAG;UACvB,UAAU,YAAA;UACV,SAAS,EAAE,SAAS;kBACd,CAAC,aAAa,IAAI,aAAa,CAAC,SAAS,KAAK,MAAM,GAAG,KAAK,GAAG,MAAM,CAAC;OAC7E,CAAC;MAEF,IAAI,kBAAkB,GAAG,CAAC,CAAC,EAAE;UAC3B,WAAW,GAAGA,YAAK,CAAC,WAAW,CAAC,CAAC;UACjC,WAAW,CAAC,MAAM,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;OAC3C;MAED,IAAI,SAAS,KAAK,IAAI,EAAE;UACtB,IAAM,gBAAgB,GAAG,kBAAkB,GAAG,CAAC,CAAC,GAAG,kBAAkB,GAAG,WAAW,CAAC,MAAM,CAAC;UAC3F,IAAM,QAAQ,GAAG,SAAS,KAAK,SAAS,GAAG,SAAS,GAAG,gBAAgB,CAAC;UACxE,WAAW,GAAGA,YAAK,CAAC,WAAW,CAAC,CAAC;UACjC,WAAW,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAAC;OACnD;MAED,OAAO;UACL,OAAO,EAAE,WAAW;OACrB,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECrCD,IAAM,MAAM,GAAG,UAAC,GAAU,IAAK,gBAAI,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,IAAC,CAAC;MAEhD,yBAAyB,GAAgC,UACpE,OAAO,EAAE,UAAU;MAEnB,IAAM,aAAa,GAAG,OAAO,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,UAAU,KAAK,UAAU,GAAA,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1E,OAAO,aAAa,GAAG,aAAa,CAAC,SAAS,GAAG,IAAI,CAAC;EACxD,CAAC,CAAC;MAEW,0BAA0B,GAAiC,UACtE,OAAO,EAAE,gBAAqB;MAArB,iCAAA,EAAA,qBAAqB;MAC3B,OAAA,gBAAgB,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,EAA8B;cAA5B,0BAAU,EAAE,kCAAc;UAC7D,IAAI,cAAc,KAAK,KAAK,EAAE;cAC5B,IAAI,OAAO,CAAC,SAAS,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,UAAU,KAAK,UAAU,GAAA,CAAC,GAAG,CAAC,CAAC,EAAE;kBAC1E,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;eACtB;WACF;UACD,OAAO,GAAG,CAAC;OACZ,EAAE,EAAc,CAAC;EAPb,CAOa,CAAC;AAEnB,MAAa,kBAAkB,GAAyB,UACtD,OAAO,EAAE,SAAS,EAAE,uBAA4B;MAA5B,wCAAA,EAAA,4BAA4B;MAEhD,IAAI,CAAC,uBAAuB,CAAC,MAAM;UAAE,OAAO,SAA6B,CAAC;MAC1E,IAAI,CAAC,SAAS;UAAE,OAAO,uBAA2C,CAAC;MAEnE,OAAO,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC;YAC3B,MAAM,UAAK,SAAS,EAAK,uBAAuB,EAAE;YAClD,MAAM,UAAK,OAAO,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,UAAU,GAAA,CAAC,EAAK,uBAAuB,EAAE,CAAC;EACpF,CAAC;;EC/BD;EACA;EAEA,IAAM,KAAK,GAAY,UAAC,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO;MAC5D,IAAI,CAAC,GAAG,EAAE,CAAC;MACX,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;MAChB,IAAI,CAAC,GAAG,EAAE,CAAC;MACX,OAAO,IAAI,EAAE;UACX,IAAM,GAAG,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;UACxC,IAAI,GAAG,IAAI,CAAC,EAAE;cACZ,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;cAC5B,IAAI,CAAC,GAAG,GAAG,EAAE;kBACX,GAAG;sBACD,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;mBAC7B,QAAQ,CAAC,IAAI,EAAE,EAAE;kBAClB,MAAM;eACP;WACF;eAAM;cACL,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;cAC5B,IAAI,CAAC,GAAG,EAAE,EAAE;kBACV,GAAG;sBACD,SAAS,CAAC,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;mBAC7B,QAAQ,CAAC,IAAI,GAAG,EAAE;kBACnB,MAAM;eACP;WACF;OACF;EACH,CAAC,CAAC;EAEF,IAAM,oBAAoB,GAA2B,UAAC,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,OAAO;MACrF,IAAI,EAAE,GAAG,EAAE;UAAE,OAAO;MACpB,IAAI,EAAE,KAAK,EAAE,EAAE;UACb,SAAS,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC;UAC1B,OAAO;OACR;MACD,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;MAC7C,oBAAoB,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;MACzD,oBAAoB,CAAC,KAAK,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;MAC7D,KAAK,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;EAChD,CAAC,CAAC;EAEF,IAAM,oBAAoB,GAA2B,UAAC,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,EAAE,EAAE,OAAO;MACrF,IAAI,EAAE,IAAI,EAAE;UAAE,OAAO;MACrB,IAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;MAC7C,oBAAoB,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;MACzD,oBAAoB,CAAC,KAAK,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;MAC7D,KAAK,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;EAChD,CAAC,CAAC;AAEF,mBAAe,UACb,KAAiC,EACjC,OAIC;MAJD,wBAAA,EAAA,oBAAsB,CAAC,EAAE,CAAC;UACxB,IAAI,CAAC,GAAG,CAAC;cAAE,OAAO,CAAC,CAAC,CAAC;UACrB,IAAI,CAAC,GAAG,CAAC;cAAE,OAAO,CAAC,CAAC;UACpB,OAAO,CAAC,CAAC;OACV;MAED,IAAM,MAAM,GAAGA,YAAK,CAAC,KAAK,CAAC,CAAC;MAC5B,IAAM,SAAS,GAAGA,YAAK,CAAC,KAAK,CAAC,CAAC;MAC/B,oBAAoB,CAAC,MAAM,EAAE,SAAS,EAAE,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;MACvE,OAAO,MAAM,CAAC;EAChB,CAAC,EAAC;;EC9DK,IAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;AAEzC,EAAO,IAAM,UAAU,GAAiB,UAAC,IAAI,EAAE,cAAc;MAC3D,IAAI,CAAC,IAAI,CAAC,MAAM;UAAE,OAAO,IAAI,CAAC;MAE9B,IAAM,MAAM,GAAU,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;MAEzC,IAAI,CAAC,OAAO,CAAC,UAAC,GAAG;;UACf,IAAM,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;UACrC,IAAI,QAAQ,EAAE;cACZ,IAAM,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;mBAC/B,SAAS,CAAC,UAAA,KAAK,IAAI,OAAA,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,QAAQ,GAAA,CAAC,GAAG,CAAC,CAAC;cACnE,IAAI,UAAU,GAAG,CAAC,EAAE;kBAClB,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,MAAM,GAAG,UAAU,CAAC,CAAC;eACvD;cACD,IAAM,IAAI,aAAK,GAAC,UAAU,IAAG,IAAI,EAAE,OAAI,GAAE,GAAG,EAAE,WAAQ,GAAE,EAAE,KAAE,CAAC;cAC7D,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;cAC9C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;WACnB;eAAM;cACL,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;WAC9C;OACF,CAAC,CAAC;MAEH,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;EAC5B,CAAC,CAAC;AAEF,EAAO,IAAM,UAAU,GAAiB,UAAC,IAAI,EAAE,IAAS;MAAT,qBAAA,EAAA,SAAS;MACtD,IAAI,CAAC,IAAI,CAAC,MAAM;UAAE,OAAO,IAAI,CAAC;MAC9B,OAAO,IAAI,CAAC,MAAM,CAChB,UAAC,GAAG,EAAE,IAAI;UACR,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE;cACpB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;cACpB,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;WACjC;eAAM;cACL,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;WAChB;UACD,OAAO,GAAG,CAAC;OACZ,EACD,IAAkB,CACnB,CAAC;EACJ,CAAC,CAAC;;ECnCF,IAAM,cAAc,GAAG,UAAC,CAAM,EAAE,CAAM;MACpC,IAAI,CAAC,KAAK,CAAC;UAAE,OAAO,CAAC,CAAC;MAEtB,IAAI,CAAC,KAAK,IAAI,EAAE;UACd,OAAO,CAAC,KAAK,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;OACjC;MACD,IAAI,CAAC,KAAK,SAAS,EAAE;UACnB,OAAO,CAAC,CAAC;OACV;MACD,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,SAAS,EAAE;UACjC,OAAO,CAAC,CAAC,CAAC;OACX;MACD,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;EACxB,CAAC,CAAC;EAEF,IAAM,aAAa,GAAoB,UACrC,OAAO,EAAE,gBAAgB,EAAE,kBAAkB,IAC1C,OAAA,OAAO,CAAC,WAAW,CAAC,UAAC,WAAW,EAAE,aAAa;MAC1C,IAAA,qCAAU,CAAmB;MACrC,IAAM,OAAO,GAAG,aAAa,CAAC,SAAS,KAAK,MAAM,CAAC;MACnD,IAAM,aAAa,GAAG,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,UAAU,CAAC,KAAK,cAAc,CAAC;MAE3F,OAAO,UAAC,IAAS,EAAE,IAAS;UAC1B,IAAM,CAAC,GAAG,kBAAkB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;UAC/C,IAAM,CAAC,GAAG,kBAAkB,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;UAC/C,IAAM,MAAM,GAAG,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;UAEnC,IAAI,MAAM,KAAK,CAAC,EAAE;cAChB,OAAO,OAAO,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC;WACnC;UACD,OAAO,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;OAChC,CAAC;EACJ,CAAC,EAAE;MAAC,cAAc;WAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;UAAd,yBAAc;;MAAK,OAAA,CAAC;EAAD,CAAC,CAAC,GAAA,CAAC;EAE1B,IAAM,QAAQ,GAA0C,UAAC,IAAI,EAAE,OAAO;MACpE,IAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,UAAC,IAAI;UAC/B,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE;cACpB,6BACK,IAAI,KACP,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,IAC1C;WACH;UACD,OAAO,IAAI,CAAC;OACb,CAAC,CAAC;MAEH,OAAO,SAAS,CACd,UAAU,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,OAAO,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,GAAA,CACtF,CAAC;EACJ,CAAC,CAAC;EAEF,IAAM,oBAAoB,GAAuD,UAC/E,IAAI,EAAE,OAAO,EAAE,cAAc;MAE7B,IAAM,IAAI,GAAG,UAAU,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;MAE9C,IAAM,UAAU,GAAG,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;MAE3C,OAAO,UAAU,CAAC,UAAU,CAAC,CAAC;EAChC,CAAC,CAAC;MAEW,UAAU,GAAiB,UACtC,IAAI,EAAE,OAAO,EAAE,YAAY,EAAE,gBAAgB,EAAE,UAAU,EAAE,cAAc;MAEzE,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM;UAAE,OAAO,IAAI,CAAC;MAEjD,IAAI,OAAO,CAAC;MACZ,IAAI,CAAC,cAAc,EAAE;UACnB,OAAO,GAAG,aAAa,CAAC,OAAO,EAAE,gBAAgB,EAAE,YAAY,CAAC,CAAC;UACjE,OAAO,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,OAAO,CAAC,CAAC;OACzC;MAED,OAAO,GAAG,aAAa,CAAC,OAAO,EAAE,gBAAgB,EAAE,UAAC,GAAG,EAAE,UAAU;UACjE,IAAI,UAAU,IAAI,UAAU,CAAC,GAAG,CAAC,EAAE;cACjC,IAAI,GAAG,CAAC,SAAS,KAAK,UAAU,EAAE;kBAChC,OAAO,GAAG,CAAC,KAAK,CAAC;eAClB;cACD,OAAO,SAAS,CAAC;WAClB;UACD,OAAO,YAAY,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;OACtC,CAAC,CAAC;MACH,OAAO,oBAAoB,CACzB,IAAI,EACJ,OAAO,EACP,cAAc,CACf,CAAC;EACJ,CAAC;;MCzFY,kBAAkB,GAA+C,UAC5E,OAAO,EAAE,EAAsB;UAApB,0BAAU,EAAE,kBAAM;MAE7B,IAAM,WAAW,GAAG,OAAO,CAAC,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,UAAU,KAAK,UAAU,GAAA,CAAC,CAAC;MACxE,IAAM,SAAS,GAAGA,YAAK,CAAC,OAAO,CAAC,CAAC;MAEjC,IAAI,MAAM,EAAE;UACV,IAAM,MAAM,cAAK,UAAU,YAAA,IAAK,MAAM,CAAE,CAAC;UACzC,IAAI,WAAW,GAAG,CAAC,CAAC,EAAE;cACpB,SAAS,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;WAC1C;eAAM;cACL,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;WACxB;OACF;WAAM,IAAI,WAAW,GAAG,CAAC,CAAC,EAAE;UAC3B,SAAS,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;OAClC;MAED,OAAO,SAAS,CAAC;EACnB,CAAC;;MClBY,qBAAqB,GAE9B,UAAC,OAAO,EAAE,UAAU,IAAK,QAC3B,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,UAAU,KAAK,UAAU,GAAA,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,IAC9E;;MCJY,gBAAgB,GAEzB,UAAC,OAAO,EAAE,UAAU;;MAEtB,IAAM,cAAc,GAAG,EAAE,OAAO,SAAA,EAAE,QAAQ,EAAE,KAAc,EAAsB,CAAC;MACjF,IAAI,CAAC,UAAU,EAAE;UACf,OAAO,cAAc,CAAC;OACvB;MACD,OAAO;UACL,QAAQ,EAAE,KAAc;UACxB,OAAO,EAAE,CAAC,UAAU,EAAE,cAAc,CAAuB;OAC5D,CAAC;EACJ,CAAC;;ECND,IAAM,SAAS,GAAG;MAChB,EAAE,EAAE,UAAC,UAA+B,IAAK,OAAA,UAAC,GAAQ,IAAK,QACrD,UAAU,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,SAAS,IAAK,OAAA,GAAG,IAAI,SAAS,CAAC,GAAG,CAAC,GAAA,EAAE,KAAK,CAAC,IACpE,GAAA;MACD,GAAG,EAAE,UAAC,UAA+B,IAAK,OAAA,UAAC,GAAQ,IAAK,QACtD,UAAU,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,SAAS,IAAK,OAAA,GAAG,IAAI,SAAS,CAAC,GAAG,CAAC,GAAA,EAAE,IAAI,CAAC,IACnE,GAAA;GACF,CAAC;EAEF,IAAM,WAAW,GAAG,UAAC,KAAU,IAAK,OAAA,MAAM,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,GAAA,CAAC;EAEhE,IAAM,mBAAmB,GAAuC;MAC9D,QAAQ,EAAE,UAAC,KAAK,EAAE,MAAM,IAAK,OAAA,WAAW,CAAC,KAAK,CAAC;WAC5C,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,GAAA;MAE1C,WAAW,EAAE,UAAC,KAAK,EAAE,MAAM,IAAK,OAAA,WAAW,CAAC,KAAK,CAAC;WAC/C,OAAO,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,GAAA;MAE5C,UAAU,EAAE,UAAC,KAAK,EAAE,MAAM,IAAK,OAAA,WAAW,CAAC,KAAK,CAAC;WAC9C,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAA;MAExC,QAAQ,EAAE,UAAC,KAAK,EAAE,MAAM,IAAK,OAAA,WAAW,CAAC,KAAK,CAAC;WAC5C,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,GAAA;MAEtC,KAAK,EAAE,UAAC,KAAK,EAAE,MAAM,IAAK,OAAA,MAAM,CAAC,KAAK,CAAC,KAAK,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAA;MAChE,QAAQ,EAAE,UAAC,KAAK,EAAE,MAAM,IAAK,OAAA,MAAM,CAAC,KAAK,CAAC,KAAK,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,GAAA;MAEnE,WAAW,EAAE,UAAC,KAAK,EAAE,MAAM,IAAK,OAAA,KAAK,GAAG,MAAM,CAAC,KAAM,GAAA;MACrD,kBAAkB,EAAE,UAAC,KAAK,EAAE,MAAM,IAAK,OAAA,KAAK,IAAI,MAAM,CAAC,KAAM,GAAA;MAC7D,QAAQ,EAAE,UAAC,KAAK,EAAE,MAAM,IAAK,OAAA,KAAK,GAAG,MAAM,CAAC,KAAM,GAAA;MAClD,eAAe,EAAE,UAAC,KAAK,EAAE,MAAM,IAAK,OAAA,KAAK,IAAI,MAAM,CAAC,KAAM,GAAA;GAC3D,CAAC;MAEW,sBAAsB,GAAoB,UAAC,KAAK,EAAE,MAAM;MACnE,IAAM,SAAS,GAAG,MAAM,CAAC,SAAS,IAAI,UAAU,CAAC;MACjD,OAAO,mBAAmB,CAAC,SAAS,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;EACvD,CAAC,CAAC;EAEF,IAAM,UAAU,GAAkD,UAAC,IAAI,EAAE,SAAS,IAAK,OAAA,IAAI,CAAC,MAAM,CAChG,UAAC,GAAG,EAAE,IAAI;MACR,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE;UACpB,IAAM,gBAAgB,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,SAAS,CAAe,CAAC;UAC5E,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;cAC/B,GAAG,CAAC,IAAI,uBACH,IAAI,KACP,QAAQ,EAAE,gBAAgB,IAC1B,CAAC;cACH,OAAO,GAAG,CAAC;WACZ;UACD,IAAI,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE;cAC9B,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;cACpB,OAAO,GAAG,CAAC;WACZ;UACD,OAAO,GAAG,CAAC;OACZ;MAED,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;UACnB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;UACf,OAAO,GAAG,CAAC;OACZ;MAED,OAAO,GAAG,CAAC;EACb,CAAC,EACD,EAAgB,CACjB,GAAA,CAAC;EAEF,IAAM,sBAAsB,GAA6B,UACvD,IAAI,EAAE,SAAS,EAAE,cAAc,EAAE,gBAAgB;MAEjD,IAAM,IAAI,GAAG,UAAU,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;MAC9C,IAAM,iBAAiB,GAAU,EAAE,CAAC;MAEpC,IAAM,YAAY,GAAG,UAAU,CAAC,IAAI,EAAE,UAAC,GAAG,EAAE,MAAM;UAChD,IAAI,MAAM,EAAE;cACV,IAAM,aAAa,GAAG,gBAAgB,IAAI,gBAAgB,CAAC,GAAG,CAAC,CAAC;cAChE,IAAI,aAAa,IAAI,aAAa,CAAC,MAAM,EAAE;kBACzC,IAAM,qBAAqB,GAAG,aAAa,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;kBAC9D,iBAAiB,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,qBAAqB,CAAC,CAAC,CAAC;kBACrD,OAAO,CAAC,CAAC,qBAAqB,CAAC,MAAM,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC;eACzD;cACD,IAAI,SAAS,CAAC,GAAG,CAAC,EAAE;kBAClB,iBAAiB,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC;kBAClC,OAAO,IAAI,CAAC;eACb;cACD,OAAO,KAAK,CAAC;WACd;UACD,OAAO,SAAS,CAAC,GAAG,CAAC,CAAC;OACvB,CAAC,CAAC;MAEH,OAAO,EAAE,IAAI,EAAE,UAAU,CAAC,YAAY,CAAC,EAAE,iBAAiB,EAAE,IAAI,GAAG,CAAC,iBAAiB,CAAC,EAAE,CAAC;EAC3F,CAAC,CAAC;EAEF,IAAM,cAAc,GAGhB,UACF,uBAAuB,EAAE,YAAY,EAAE,kBAAkB;MAEzD,IAAM,kBAAkB,GAAG,UAAC,MAAc;UAChC,IAAA,8BAAU,CAAY;UAC9B,IAAM,eAAe,GAAG,kBAAkB,IAAI,kBAAkB,CAAC,UAAU,CAAC,CAAC;UAC7E,IAAM,SAAS,GAAG,eAAe,IAAI,sBAAsB,CAAC;UAC5D,OAAO,UAAC,GAAQ,IAAK,OAAA,SAAS,CAAC,YAAY,CAAC,GAAG,EAAE,UAAU,CAAC,EAAE,MAAM,EAAE,GAAG,CAAC,GAAA,CAAC;OAC5E,CAAC;MAEF,IAAM,oBAAoB,GAAQ,UAAC,gBAAkC;UACnE,IAAM,KAAK,GAAG,SAAS,CAAC,WAAW,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;UAChE,OAAO,KAAK,IAAI,KAAK,CAAC,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;OACnE,CAAC;MAEF,IAAM,YAAY,GAAG,UAAC,gBAAqB,IAAK,QAC9C,oBAAoB,CAAC,gBAAgB,CAAC;aACnC,kBAAkB,CAAC,gBAAgB,CAAC,IACxC,CAAC;MAEF,OAAO,YAAY,CAAC,uBAAuB,CAAC,CAAC;EAC/C,CAAC,CAAC;MAEW,YAAY,GAAmB,UAC1C,IAAI,EAAE,gBAAgB,EAAE,YAAY,EAAE,kBAAkB,EAAE,cAAc,EAAE,gBAAgB;MAE1F,IAAI,EAAE,gBAAgB,IAAI,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;;UAE9E,OAAO,EAAE,IAAI,MAAA,EAA2C,CAAC;OAC1D;MAED,IAAM,SAAS,GAAG,cAAc,CAC9B,gBAAgB,EAChB,YAAY,EACZ,kBAAkB,CACnB,CAAC;MAEF,OAAO,cAAc;YACjB,sBAAsB,CAAC,IAAI,EAAE,SAAS,EAAE,cAAc,EAAE,gBAAgB,CAAC;YACzE,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC;EACvC,CAAC,CAAC;MAEW,2BAA2B,GAAkC,UACxE,EAAqB;UAAnB,wCAAiB;MAChB,OAAA,UAAA,GAAG,IAAI,OAAA,iBAAiB,IAAI,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,GAAA;EAAtD,CAAsD,CAAC;MAE/C,qBAAqB,GAAuB,UAAC,EAAQ;UAAN,cAAI;MAAO,OAAA,IAAI;EAAJ,CAAI;;MCtJ9D,mBAAmB,GAAG,GAAG;;ECOtC,IAAM,mBAAmB,GAAmD,UAC1E,QAAQ,EAAE,EAA0B;UAAxB,0BAAU,EAAE,0BAAU;MAElC,IAAI,YAAY,GAAG,QAAQ,CAAC;MAC5B,IAAM,aAAa,GAAG,YAAY,CAAC,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,UAAU,KAAK,UAAU,GAAA,CAAC,CAAC;MAC/E,IAAI,WAAW,GAAG,UAAU,CAAC;MAE7B,IAAI,aAAa,GAAG,CAAC,CAAC,EAAE;UACtB,YAAY,GAAGA,YAAK,CAAC,QAAQ,CAAC,CAAC;UAC9B,YAA2B,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;OACvD;WAAM,IAAI,UAAU,KAAK,SAAS,EAAE;UACnC,WAAW,GAAG,YAAY,CAAC,MAAM,CAAC;OACnC;MAED,IAAI,WAAW,GAAG,CAAC,CAAC,EAAE;UACpB,YAAY,GAAGA,YAAK,CAAC,YAAY,CAAC,CAAC;UAClC,YAA2B,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,EAAE;cAClD,UAAU,YAAA;WACX,CAAC,CAAC;OACJ;MAED,OAAO,YAAY,CAAC;EACtB,CAAC,CAAC;MAEW,oBAAoB,GAA4D,UAC3F,EAA4B,EAAE,EAA0B;UAAtD,sBAAQ,EAAE,kCAAc;UAAM,0BAAU,EAAE,0BAAU;MAEtD,IAAM,YAAY,GAAG,mBAAmB,CAAC,QAAS,EAAE,EAAE,UAAU,YAAA,EAAE,UAAU,YAAA,EAAE,CAAC,CAAC;MAEhF,IAAM,oBAAoB,GAAG,QAAS,CAAC,SAAS,CAC9C,UAAC,KAAK,EAAE,KAAK,IAAK,OAAA,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,UAAU,KAAK,YAAY,CAAC,KAAK,CAAC,CAAC,UAAU,GAAA,CAC9F,CAAC;MACF,IAAI,oBAAoB,KAAK,CAAC,CAAC,EAAE;UAC/B,OAAO;cACL,QAAQ,EAAE,YAAY;WACvB,CAAC;OACH;MAED,IAAM,sBAAsB,GAAG,cAAe,CAAC,MAAM,CACnD,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,MAAM,IAAI,oBAAoB,GAAA,CACzE,CAAC;MACF,IAAI,sBAAsB,CAAC,MAAM,KAAK,cAAe,CAAC,MAAM,EAAE;UAC5D,OAAO;cACL,QAAQ,EAAE,YAAY;WACvB,CAAC;OACH;MAED,OAAO;UACL,QAAQ,EAAE,YAAY;UACtB,cAAc,EAAE,sBAAsB;OACvC,CAAC;EACJ,CAAC,CAAC;MAEW,oBAAoB,GAAyD,UACxF,KAAK,EAAE,EAAY;UAAV,sBAAQ;MAEjB,IAAM,cAAc,GAAGA,YAAK,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;MACnD,IAAM,aAAa,GAAG,cAAc,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;MAEvD,IAAI,aAAa,GAAG,CAAC,CAAC,EAAE;UACtB,cAAc,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;OACzC;WAAM;UACL,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;OAC/B;MAED,OAAO;UACL,cAAc,gBAAA;OACf,CAAC;EACJ,CAAC,CAAC;MAEW,mBAAmB,GAE5B,UACF,EAA2B,EAC3B,EAA0B;UADxB,sBAAQ,EAAE,gCAAa;UACvB,0BAAU,EAAE,0BAAU;MACrB,QAAC;UACJ,aAAa,EAAE,mBAAmB,CAAC,aAAa,IAAI,QAAQ,EAAE,EAAE,UAAU,YAAA,EAAE,UAAU,YAAA,EAAE,CAAC;OAC1F;EAFI,CAEH,CAAC;MAEU,yBAAyB,GAAG,cAAM,QAAC;MAC9C,aAAa,EAAE,IAAI;GACpB,IAAC;;MCrFW,eAAe,GAAsD,UAChF,aAAa,EAAE,QAAQ,EAAE,OAAO,IAC7B,OAAA,IAAI,CAAC,GAAG,CACX,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,MAAM,CACrC,UAAC,GAAG,EAAE,cAAc;MAClB,IAAM,kBAAkB,GAAG,OAAO,CAAC,SAAS,CAC1C,UAAA,aAAa,IAAI,OAAA,aAAa,CAAC,UAAU,KAAK,cAAc,CAAC,UAAU,GAAA,CACxE,CAAC;MACF,QAAQ,kBAAkB,KAAK,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,EAAE;EACrD,CAAC,EACD,aAAa,CACd,EACD,CAAC,CACF,GAAA;;MCJY,eAAe,GAAoB,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,gBAAgB,CAAC,GAAA,CAAC;MAEhE,sBAAsB,GAAG,UAAC,GAAQ,IAAK,QAAC,GAAG,GAAG,GAAG,CAAC,oBAAoB,CAAC,GAAG,SAAS,IAAC,CAAC;EAElG,IAAM,qBAAqB,GAAG,UAAC,KAAU,IAAK,QAAC;MAC7C,KAAK,OAAA;MACL,GAAG,EAAE,MAAM,CAAC,KAAK,CAAC;GACnB,IAAC,CAAC;MAEU,WAAW,GAAkB,UACxC,IAAI,EAAE,QAAQ,EAAE,YAAY,EAAE,iBAAiB,EAAE,SAAc;MAAd,0BAAA,EAAA,cAAc;MAE/D,IAAI,CAAC,QAAQ,CAAC,MAAM;UAAE,OAAO,IAAI,CAAC;MAE1B,IAAA,mCAAU,CAAiB;MACnC,IAAM,aAAa,GAAG,CAAC,iBAAiB,IAAI,iBAAiB,CAAC,UAAU,CAAC;aACpE,qBAAqB,CAAC;MAE3B,IAAM,MAAM,GAAG,IAAI,GAAG,EAAE,CAAC;MACzB,IAAI,CAAC,OAAO,CAAC,UAAC,GAAG;UACf,IAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;UACzC,IAAA,iCAA6C,EAA3C,YAAG,EAAE,gBAAsC,CAAC;UACpD,IAAM,YAAY,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;UAErC,IAAI,CAAC,YAAY,EAAE;cACjB,IAAM,aAAa,GAAG,KAAK,KAAK,QAAQ,GAAG,KAAK,GAAG,KAAK,IAAI,GAAG,CAAC;cAChE,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;WAC9C;eAAM;cACL,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;WAC3B;OACF,CAAC,CAAC;MAEH,IAAM,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;MACzC,IAAM,cAAc,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;MACzC,OAAO,SAAI,MAAM,CAAC,MAAM,EAAE,EACvB,MAAM,CAAC,UAAC,GAAG,EAAE,EAAmB;;cAAnB,kBAAmB,EAAlB,aAAK,EAAE,WAAG,EAAE,aAAK;UAC9B,IAAM,WAAW,GAAG,KAAG,SAAS,GAAG,GAAK,CAAC;UACzC,GAAG,CAAC,IAAI;kBACN,SAAS,WAAA;kBACT,WAAW,aAAA;kBACX,GAAG,KAAA;kBACH,KAAK,OAAA;;cACL,GAAC,gBAAgB,IAAG,IAAI;cACxB,GAAC,oBAAoB,IAAM,eAAe,CAAC,QAAQ,EAAE,SAAI,SAAW;kBACpE,CAAC;UACH,GAAG,CAAC,IAAI,OAAR,GAAG,WAAS,WAAW,CACrB,KAAK,EACL,cAAc,EACd,YAAY,EACZ,iBAAiB,EACjB,KAAG,WAAW,GAAG,mBAAqB,CACvC,GAAE;UACH,OAAO,GAAG,CAAC;OACZ,EAAE,EAAE,CAAC,CAAC;EACX,CAAC,CAAC;AAEF,MAAa,iBAAiB,GAA2D,UACvF,IAAI,EACJ,QAAQ,EACR,cAAc,EACd,WAAW;MAEX,IAAI,CAAC,QAAQ,CAAC,MAAM;UAAE,OAAO,IAAI,CAAC;MAElC,IAAM,mBAAmB,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAA,cAAc,IAAI,OAAA,cAAc,CAAC,UAAU,GAAA,CAAC,CAAC;MACtF,IAAM,iBAAiB,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,CAAC;MAClD,IAAI,oBAAoB,GAAG,IAAI,CAAC;MAChC,IAAI,iBAAiB,GAAG,CAAC,CAAC;MAE1B,OAAO,IAAI,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG;;UAC1B,IAAI,CAAC,GAAG,CAAC,gBAAgB,CAAC,EAAE;cAC1B,IAAI,oBAAoB,EAAE;kBACxB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;eACf;mBAAM;kBACL,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,yBAAyB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;eAC1D;cACD,OAAO,GAAG,CAAC;WACZ;UAED,IAAM,UAAU,GAAG,mBAAmB,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;UAC9D,IAAI,UAAU,GAAG,iBAAiB,IAAI,CAAC,oBAAoB,EAAE;cAC3D,OAAO,GAAG,CAAC;WACZ;UAED,oBAAoB,GAAG,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,WAAW,CAAC;UAC7E,iBAAiB,GAAG,UAAU,CAAC;UAE/B,IAAI,oBAAoB,EAAE;cACxB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;WACf;eAAM;cACL,GAAG,CAAC,IAAI,uBACH,GAAG,gBACL,yBAAyB,IAAG,EAAE,OAC/B,CAAC;WACJ;UAED,OAAO,GAAG,CAAC;OACZ,EAAE,EAAE,CAAC,CAAC;EACT,CAAC,CAAC;MAEW,wBAAwB,GACnC,UAAA,gBAAgB,IAAI,OAAA,UAAA,GAAG,IAAI,QAC3B,GAAG,CAAC,yBAAyB,CAAC,KAAK,gBAAgB,IAAI,gBAAgB,CAAC,GAAG,CAAC,CAAC,IAC9E,GAAA;;MC1GY,iBAAiB,GAAwB,UACpD,WAAW,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAsB,EAAE,SAAc;MAAtC,yBAAA,EAAA,sBAAsB;MAAE,0BAAA,EAAA,cAAc;MAE7E,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,MAAM;UAAE,OAAO,EAAE,CAAC;MACnD,IAAI,CAAC,QAAQ,CAAC,MAAM;UAAE,OAAO,WAAW,CAAC;MAEzC,IAAM,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;MACzC,IAAM,cAAc,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;MACzC,OAAO,cAAc,CAAC,WAAoB,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAiB,CAAC;WACxE,MAAM,CAAC,UAAC,GAAG,EAAE,EAA+B;;cAA7B,YAAG,EAAE,aAAW,EAAX,gCAAW,EAAE,wBAAS;UACzC,IAAM,WAAW,GAAG,KAAG,SAAS,GAAG,GAAK,CAAC;UACzC,GAAG,CAAC,IAAI;kBACN,SAAS,WAAA;kBACT,WAAW,aAAA;kBACX,GAAG,KAAA;kBACH,KAAK,OAAA;;cACL,GAAC,gBAAgB,IAAG,IAAI;cACxB,GAAC,oBAAoB,IAAM,eAAe,CAAC,QAAQ,EAAE,SAAI,SAAW;kBACpE,CAAC;UACH,GAAG,CAAC,IAAI,OAAR,GAAG,WAAS,iBAAiB,CAC3B,SAAU,EACV,cAAc,EACd,cAAc,EACd,QAAQ,EACR,KAAG,WAAW,GAAG,mBAAqB,CACvC,GAAE;UACH,OAAO,GAAG,CAAC;OACZ,EAAE,EAAW,CAAC,CAAC;EACpB,CAAC,CAAC;MAEW,yBAAyB,GAAsC,UAAC,QAAQ,EAAE,IAAI;MACzF,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAA,CAAC,CAAC;MAC1D,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,KAAK,SAAS,EAAE;UACjD,OAAO,QAAQ,CAAC;OACjB;MAED,IAAM,GAAG,GAAG,IAAI,GAAG,CAAa,IAAI;WACjC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAA,CAAC;WACrC,GAAG,CAAC,UAAC,GAAG,EAAE,QAAQ,IAAK,OAAA,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAA,CAAiB,CAAC,CAAC;MAE5D,OAAO,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,GAAG,CAAC,GAAG,CAAE,GAAA,CAAC;EAC9B,CAAC;;MChDY,kBAAkB,GAAyB,UACtD,OAAO,EAAE,QAAQ,EAAE,aAAa;MAEhC,IAAM,KAAK,GAAG,aAAa,CAAC,GAAG,CAAC,UAAC,EAAc;cAAZ,0BAAU;UAAO,QAAC;cACnD,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,UAAU,GAAA,CAAE;cACjD,KAAK,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,cAAc,IAAI,OAAA,cAAc,CAAC,UAAU,KAAK,UAAU,GAAA,CAAC;WAClF;OAAC,CAAC,CAAC;MAEJ,QAAQ,CAAC,OAAO,CAAC,UAAC,EAAc,EAAE,KAAK;cAAnB,0BAAU;UAC5B,IAAI,aAAa,CAAC,IAAI,CAAC,UAAA,cAAc,IAAI,OAAA,cAAc,CAAC,UAAU,KAAK,UAAU,GAAA,CAAC;cAAE,OAAO;UAC3F,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE;cACrB,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,UAAU,GAAA,CAAE;cACjD,KAAK,EAAE,IAAI;WACZ,CAAC,CAAC;OACJ,CAAC,CAAC;MAEH,OAAO,KAAK,CAAC;EACf,CAAC;;MCnBY,cAAc,GAAG,UAAC,QAAgB,EAAE,IAAY,IAAK,OAAA,IAAI,GAAA,CAAC;MAC1D,WAAW,GAAG,UAAC,YAAoB,EAAE,IAAY,IAAK,OAAA,IAAI,GAAA;;MCC1D,KAAK,GAAmC,UAAC,KAAK,EAAE,GAAG,IAAK,QACnE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,IAClC;;ECAD;EACA,IAAM,2BAA2B,GAAG,yEAAyE,CAAC;MAEjG,aAAa,GAA0C,UAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,IAAK,QAC5F,QAAQ;QACJ,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,EAAE,QAAQ,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC;QAClD,IAAa,IAClB,CAAC;AAEF,MAAa,mBAAmB,GAAoD,UAClF,IAAI,EAAE,QAAQ,EAAE,cAAc;MAE9B,IAAI,CAAC,QAAQ,IAAI,CAAC,cAAc;UAAE,OAAO,IAAa,CAAC;MAEvD,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;MAE1B,IAAI,UAAU,GAAU,EAAE,CAAC;MAC3B,IAAI,YAAY,GAAG,CAAC,CAAC;;UAEnB,IAAM,GAAG,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;UACjC,IAAM,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;UACrC,IAAI,QAAQ,EAAE;cACZ,IAAM,WAAW,GAAG,UAAU,CAAC,SAAS,CAAC,UAAA,SAAS,IAAI,OAAA,cAAc,CAAC,SAAS,CAAC,KAAK,QAAQ,GAAA,CAAC,CAAC;;cAE9F,IAAI,WAAW,KAAK,CAAC,CAAC,EAAE;kBACtB,UAAU,YAAO,UAAU,GAAE,GAAG,EAAC,CAAC;eACnC;mBAAM;kBACL,UAAU,YAAO,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC,GAAE,GAAG,EAAC,CAAC;eACzD;cACD,IAAI,UAAU,CAAC,MAAM,IAAI,QAAQ,EAAE;kBACjC,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;eAC9C;WACF;UACD,IAAM,WAAW,GAAG,YAAY,GAAG,QAAQ,CAAC;UAC5C,IAAI,WAAW,GAAG,UAAU,CAAC,MAAM,IAAI,GAAG,KAAK,UAAU,CAAC,WAAW,CAAC,EAAE;cACtE,MAAM,YACD,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,YAAY,CAAC;kBAChC,UAAU,CAAC,WAAW,CAAC;iBACpB,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,CAC9B,CAAC;WACH;UACD,YAAY,IAAI,CAAC,CAAC;;MAvBpB,OAAO,MAAM,CAAC,MAAM,GAAG,YAAY;;OAwBlC;MAED,OAAO,MAAM,CAAC;EAChB,CAAC,CAAC;MAEW,QAAQ,GAAG,UAAC,IAAW,IAAK,OAAA,IAAI,CAAC,MAAM,GAAA,CAAC;AAErD,MAAa,SAAS,GAAmC,UAAC,KAAK,EAAE,QAAQ,IAAK,QAC5E,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,IAC3C,CAAC;AAEF,MAAa,WAAW,GAAkB,UACxC,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,cAAc;MAE1C,IAAM,UAAU,GAAG,SAAS,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;MACnD,IAAM,mBAAmB,GAAG,KAAK,CAAC,IAAI,EAAE,UAAU,GAAG,CAAC,CAAC,CAAC;MACxD,IAAI,IAAI,KAAK,mBAAmB,EAAE;UAChC,UAAU,CAAC,cAAM,OAAA,cAAc,CAAC,mBAAmB,CAAC,GAAA,CAAC,CAAC;OACvD;MACD,OAAO,mBAAmB,CAAC;EAC7B,CAAC;;MC/DY,cAAc,GAAmB,UAAC,WAAW,EAAE,QAAQ,EAAE,UAAU;MAC9E,IAAI,UAAU,KAAK,CAAC,EAAE;UACpB,OAAO,CAAC,CAAC;OACV;MACD,OAAO,QAAQ,GAAG,CAAC,WAAW,GAAG,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC;EACrD,CAAC,CAAC;AAEF,MAAa,aAAa,GAAmB,UAAC,WAAW,EAAE,QAAQ,EAAE,aAAa;MAChF,IAAI,MAAM,GAAG,aAAa,CAAC;MAC3B,IAAI,QAAQ,EAAE;UACZ,IAAM,KAAK,GAAG,CAAC,WAAW,GAAG,CAAC,IAAI,QAAQ,CAAC;UAC3C,MAAM,GAAG,KAAK,GAAG,aAAa,GAAG,aAAa,GAAG,KAAK,CAAC;OACxD;MAED,OAAO,MAAM,CAAC;EAChB,CAAC,CAAC;MAEW,kBAAkB,GAA2C,UACxE,WAAW,EAAE,cAAc,EAAE,cAAc,IACxC,QACH,IAAI,CAAC,GAAG,CACN,IAAI,CAAC,GAAG,CACR,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,CAAC,CAAC,EAC1C,CAAC,cAAc,GAAG,cAAc,IAAI,CAAC,CACtC,EACD,CAAC,CACF,IACF;;EC3BM,IAAM,MAAM,GAA+C,UAChE,MAAM,EAAE,KAAK,EAAE,KAAM;MAErB,IAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC;MAEhC,IAAI,WAAW,GAAQ,KAAK,CAAC;MAC7B,IAAI,WAAW,KAAK,SAAS,EAAE;UAC7B,IAAM,kBAAkB,GAAG,MAAM,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,GAAA,CAAC,CAAC;UACrE,WAAW,GAAG,kBAAkB,CAAC,MAAM,KAAK,QAAQ,CAAC,IAAI,CAAC;OAC3D;MAED,IAAI,WAAW,EAAE;UACf,IAAM,WAAS,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;UAClC,gBACK,MAAM,EACN,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,WAAS,CAAC,GAAG,CAAC,IAAI,CAAC,GAAA,CAAC,EAC7C;OACH;MAED,OAAO,MAAM,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,GAAA,CAAC,CAAC;EACpD,CAAC,CAAC;;MCpBW,eAAe,GAA2B,UACrD,SAAS,EAAE,EAAiB;UAAf,kBAAM,EAAE,gBAAK;MACvB,OAAA,MAAM,CAAC,SAAS,EAAE,MAAM,EAAE,KAAK,CAAC;EAAhC,CAAgC;;MCExB,yBAAyB,GAAgC,UACpE,IAAI,EAAE,QAAQ,EAAE,UAAU;MAE1B,IAAI,QAAQ,GAAG,IAAI,CAAC;MACpB,IAAI,UAAU,EAAE;UACd,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC,UAAU,CAAC,GAAG,CAAC,GAAA,CAAC,CAAC;OACrD;MACD,OAAO,EAAE,IAAI,MAAA,EAAE,iBAAiB,EAAE,QAAQ,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,QAAQ,CAAC,GAAG,CAAC,GAAA,CAAC,EAAE,CAAC;EACzE,CAAC,CAAC;MAEW,YAAY,GAAmB,UAAC,EAAqB,EAAE,SAAS;UAA9B,wCAAiB;MAC9D,IAAM,YAAY,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC;MAExC,OAAO,iBAAiB,CAAC,MAAM,KAAK,CAAC,IAAI,YAAY,CAAC,IAAI,KAAK,CAAC;aAC3D,iBAAiB,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,GAAA,CAAC;aACtD,iBAAiB,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,GAAA,CAAC,CAAC;EAC/D,CAAC,CAAC;MAEW,WAAW,GAAmB,UAAC,EAAqB,EAAE,SAAS;UAA9B,wCAAiB;MAC7D,IAAM,YAAY,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC;MAExC,OAAO,YAAY,CAAC,IAAI,KAAK,CAAC,IAAI,iBAAiB,CAAC,MAAM,KAAK,CAAC;aAC3D,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,GAAA,CAAC,CAAC;EAChE,CAAC,CAAC;MAEW,kBAAkB,GAAuB,UAAC,EAAQ;UAAN,cAAI;MAAO,OAAA,IAAI;EAAJ,CAAI;;MC3B3D,aAAa,GAAwC,UAChE,iBAAiB,EAAE,EAAU;UAAR,kBAAM;MACxB,gBAAI,iBAAiB,EAAK,MAAM;EAAhC,CAAiC,CAAC;MAE1B,YAAY,GAAwC,UAC/D,iBAAiB,EAAE,EAAU;UAAR,kBAAM;MAE3B,IAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;MACjC,OAAO,iBAAiB,CAAC,MAAM,CAAC,UAAA,EAAE,IAAI,OAAA,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,GAAA,CAAC,CAAC;EAC3D,CAAC,CAAC;MAEW,cAAc,GAAoD,UAC7E,gBAAgB,EAAE,EAAgB;UAAd,8BAAY;MAC7B,gBAAI,gBAAgB,EAAK,YAAY;EAArC,CAAsC,CAAC;MAE/B,aAAa,GAAoD,UAC5E,gBAAgB,EAAE,EAAgB;UAAd,8BAAY;MAEhC,OAAO,gBAAgB,CAAC,MAAM,CAAC,UAAC,EAAqB;cAAnB,gBAAK,EAAE,0BAAU;UAAO,QACxD,CAAC,YAAY,CAAC,IAAI,CAAC,UAAC,EAAsD;kBAApD,uBAAmB,EAAE,iCAA6B;cAAO,QAC7E,YAAY,KAAK,KAAK,IAAI,iBAAiB,KAAK,UAAU;WAC3D,CAAC;OACH,CAAC,CAAC;EACL,CAAC,CAAC;MAEW,MAAM,GAAmC,UACpD,SAAS,EAAE,EAAqB;UAAnB,4CAAG;MACb,gBAAI,SAAS,GAAE,GAAG;EAAlB,CAAmB,CAAC;MAEZ,cAAc,GAAyC,UAClE,SAAS,EAAE,EAAiB;UAAf,gBAAK,EAAE,kBAAM;MAE1B,IAAM,MAAM,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;MACjC,MAAM,CAAC,KAAK,CAAC,yBAAQ,MAAM,CAAC,KAAK,CAAC,GAAK,MAAM,CAAE,CAAC;MAChD,OAAO,MAAM,CAAC;EAChB,CAAC,CAAC;MAEW,eAAe,GAAsC,UAAC,SAAS,EAAE,EAAU;UAAR,kBAAM;MACpF,IAAM,MAAM,GAAU,EAAE,CAAC;MACzB,IAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;MACjC,SAAS,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,KAAK;UAC3B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;cACxB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;WAClB;OACF,CAAC,CAAC;MACH,OAAO,MAAM,CAAC;EAChB,CAAC,CAAC;MAEW,SAAS,GAA8C,UAClE,cAAc,EAAE,EAAiB;;UAAf,gBAAK,EAAE,kBAAM;MAE/B,IAAM,UAAU,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;MAC/C,6BACK,cAAc,gBAChB,KAAK,0BACD,UAAU,GACV,MAAM,QAEX;EACJ,CAAC,CAAC;MAEW,aAAa,GAA2C,UACnE,cAAc,EAAE,EAAU;UAAR,kBAAM;MAExB,IAAM,MAAM,gBAAQ,cAAc,CAAE,CAAC;MACrC,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK;UACnB,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;OACtB,CAAC,CAAC;MACH,OAAO,MAAM,CAAC;EAChB,CAAC,CAAC;MAEW,UAAU,GAAwC,UAAC,aAAa,EAAE,EAAU;UAAR,kBAAM;MAAO,gBACzF,aAAa,EAAK,MAAM;EADiE,CAE7F,CAAC;MAEW,iBAAiB,GAAwC,UACpE,aAAa,EAAE,EAAU;UAAR,kBAAM;MAEvB,IAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;MACjC,OAAO,aAAa,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,OAAA,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;EAC7D,CAAC;;MChFY,gBAAgB,GAEzB,UAAC,OAAO,EAAE,MAAM;MAClB,IAAM,MAAM,GAAG,EAAE,CAAC;MAClB,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK;UACnB,MAAM,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;OAChC,CAAC,CAAC;MACH,OAAO,MAAM,CAAC;EAChB,CAAC,CAAC;MAEW,cAAc,GAAmC,UAAC,SAAS,EAAE,MAAM;MAC9E,IAAM,QAAQ,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC;MACjC,IAAM,MAAM,GAAU,EAAE,CAAC;MACzB,SAAS,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,KAAK;UAC3B,IAAI,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;cACvB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;WAClB;OACF,CAAC,CAAC;MACH,OAAO,MAAM,CAAC;EAChB,CAAC,CAAC;EAEF,IAAM,sBAAsB,GAAsB,UAAC,GAAG,EAAE,KAAK,EAAE,UAAU;;MAAK,iBAC1E,GAAC,UAAU,IAAG,KAAK;EADuD,CAE7E,CAAC;MACW,qBAAqB,GAE9B,UACF,eAAwC,EACxC,gBAAqB;MADrB,gCAAA,EAAA,wCAAwC;MACxC,iCAAA,EAAA,qBAAqB;MAErB,IAAM,GAAG,GAAG,gBAAgB,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,eAAe;UACvD,IAAI,eAAe,CAAC,eAAe,EAAE;cACnC,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,GAAG,eAAe,CAAC,eAAe,CAAC;WACnE;UACD,OAAO,GAAG,CAAC;OACZ,EAAE,EAAE,CAAC,CAAC;MAEP,OAAO,UAAC,GAAG,EAAE,KAAK,EAAE,UAAU;UAC5B,IAAI,GAAG,CAAC,UAAU,CAAC,EAAE;cACnB,OAAO,GAAG,CAAC,UAAU,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;WAChD;UACD,OAAO,eAAe,CAAC,GAAG,EAAE,KAAK,EAAE,UAAU,CAAC,CAAC;OAChD,CAAC;EACJ,CAAC;;MC7CY,YAAY,GAA2C,UAClE,UAAU,EAAE,KAAK,IACd,OAAA,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,GAAA;;MCLf,qBAAqB,GAAG,MAAM,CAAC,YAAY,CAAC;;MCG5C,iBAAiB,GAAuD,UACnF,KAAK,EAAE,EAAsC;UAApC,sCAAgB,EAAE,sCAAgB;MAE3C,IAAM,iBAAiB,GAAG,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;MAC1D,IAAM,iBAAiB,GAAG,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;MAC1D,IAAM,QAAQ,GAAGA,YAAK,CAAC,KAAK,CAAC,CAAC;MAE9B,QAAQ,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;MACtC,QAAQ,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAAC;MACxD,OAAO,QAAQ,CAAC;EAClB,CAAC;;MCbY,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;MACjC,iBAAiB,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;MACrC,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC;;MCIhC,cAAc,GAA2B,UACpD,YAAiB,EAAE,KAAK;MAAxB,6BAAA,EAAA,iBAAiB;MACd,OAAA,SAAS,CAAC,YAAY,EAAE,UAAC,CAAC,EAAE,CAAC;UAChC,IAAI,CAAC,CAAC,IAAI,KAAK,eAAe,IAAI,CAAC,CAAC,IAAI,KAAK,eAAe;cAAE,OAAO,CAAC,CAAC;UAEvE,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;UAC1C,IAAM,IAAI,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;UAC1C,OAAO,IAAI,GAAG,IAAI,CAAC;OACpB,CAAC;EANG,CAMH,CAAC;AAEH,MAAa,6BAA6B,GAA+B,UAAA,eAAe,IAAI,gBACvF,eAAe;MAClB;UACE,GAAG,EAAE,qBAAqB,CAAC,QAAQ,EAAE;UACrC,IAAI,EAAE,qBAAqB;UAC3B,MAAM,EAAE,CAAC;OACV;OACF,CAAC;AAEF,MAAa,UAAU,GAAuB,UAAC,KAAK,EAAE,iBAAiB,EAAE,iBAAiB;MACxF,IAAI,iBAAiB,KAAK,CAAC,CAAC;aACvB,iBAAiB,KAAK,CAAC,CAAC;aACxB,iBAAiB,KAAK,iBAAiB,EAAE;UAC5C,OAAO,KAAK,CAAC;OACd;MAED,IAAM,MAAM,GAAGA,YAAK,CAAC,KAAK,CAAC,CAAC;MAC5B,IAAM,YAAY,GAAG,KAAK,CAAC,iBAAiB,CAAC,CAAC;MAC9C,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;MACpC,MAAM,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC;MAElD,OAAO,MAAM,CAAC;EAChB,CAAC;;ECpCD,IAAM,cAAc,GAAkB,UACpC,YAAY,EAAE,IAAI,EAAE,EAErB;UADG,0BAAU,EAAE,8BAAY,EAAE,gBAAK,EAAE,kCAAc,EAAE,kCAAc,EAAE,wBAAqB,EAArB,0CAAqB;MAExF,IAAM,MAAM,GAAG,IAAI,KAAK,UAAU,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC;MACpD,IAAM,MAAM,GAAI,YAAY,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,UAAU,KAAK,IAAI,GAAA,CAAE,CAAC;MACrE,IAAM,SAAS,GAAG,gBAAgB,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,UAAU,KAAK,IAAI,GAAA,CAAC,CAAC;MAC1E,IAAM,KAAK,GAAG,OAAO,MAAM,CAAC,KAAK,KAAK,QAAQ;YAC1C,MAAM,CAAC,KAAK;YACZ,YAAY,CAAC,IAAI,CAAC,CAAC;MACvB,IAAM,QAAQ,GAAG,SAAS,IAAI,SAAS,CAAC,QAAS,IAAI,CAAC;YAClD,SAAS,CAAC,QAAQ;YAClB,cAAc,CAAC;MACnB,IAAM,QAAQ,GAAG,SAAS,IAAI,SAAS,CAAC,QAAS,IAAI,CAAC;YAClD,SAAS,CAAC,QAAQ;YAClB,cAAc,CAAC;MACnB,IAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CACnB,QAAS,EACT,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,MAAM,EAAE,QAAS,CAAC,CACpC,CAAC;MAEF,QAAQ,EAAE,KAAK,OAAA,EAAE,IAAI,MAAA,EAAE,EAAE;EAC3B,CAAC,CAAC;MAEW,cAAc,GAAkB,UAC3C,YAAY,EAAE,OAAO;MACb,IAAA,+BAAU,EAAE,uCAAc,EAAE,mCAAY,EAAE,qBAAK,CAAa;MAC9D,IAAA,sDAAmE,EAAjE,gBAAK,EAAE,cAA0D,CAAC;MAE1E,IAAI,YAAY,KAAK,YAAY,EAAE;UAC3B,IAAA,0DAEL,EAFO,oBAAgB,EAAE,kBAEzB,CAAC;UAEF,IAAI,IAAI,GAAG,QAAQ,KAAK,KAAK,GAAG,SAAS,EAAE;cACzC,IAAM,aAAa,GAAG,IAAI,GAAG,QAAQ,GAAG,KAAK,GAAG,SAAS,CAAC;cAC1D,IAAM,YAAY,GAAG,KAAK,GAAG,CAAC,CAAC;cAC/B,IAAI,aAAa,KAAK,YAAY,EAAE;kBAClC,OAAO,EAAE,IAAI,MAAA,EAAE,QAAQ,EAAE,KAAK,GAAG,SAAS,GAAG,IAAI,EAAE,CAAC;eACrD;cACD,OAAO,EAAE,IAAI,EAAE,KAAK,GAAG,SAAS,GAAG,QAAQ,EAAE,QAAQ,UAAA,EAAE,CAAC;WACzD;UACD,OAAO,EAAE,IAAI,MAAA,EAAE,QAAQ,UAAA,EAAE,CAAC;OAC3B;MAED,OAAO,EAAE,IAAI,MAAA,EAAE,CAAC;EAClB,CAAC,CAAC;MAEW,YAAY,GAAiB,UAAC,KAAK,EAAE,UAAU;MAC1D,IAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;MACjC,IAAM,IAAI,GAAG,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;MACjE,IAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,KAAK,MAAM,CAAC;MAClD,IAAM,WAAW,GAAG,IAAI,IAAI,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,KAAK,IAAI,GAAA,CAAC,CAAC;MAClF,OAAO,UAAU,IAAI,WAAW,CAAC;EACnC,CAAC,CAAC;MAEW,YAAY,GAAmB,UAAC,KAAK;MAChD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;UAC7B,IAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;UACjC,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;cACnD,OAAO,KAAK,CAAC;WACd;UACD,OAAO,IAAI,CAAC;OACb;MACD,OAAO,KAAK,CAAC;EACf,CAAC;;EC/DD,IAAM,WAAW,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;EAC7E,IAAM,oBAAoB,GAAG,CAAC,GAAG,CAAC,CAAC;EACnC;EACA,IAAM,qBAAqB,GAAG,wFAAwF,CAAC;EAEvH,IAAM,aAAa,GAAoB,UAAC,YAAY,EAAE,MAAM,EAAE,YAAY,EAAE,OAAO;MACjF,IAAI,YAAY,KAAK,QAAQ,IAAI,YAAY,KAAK,YAAY,EAAE;UAC9D,OAAO,EAAE,CAAC;OACX;MACD,IAAI,CAAC,MAAM,CAAC,MAAM;UAAE,OAAO,YAAY,CAAC;MACxC,OAAO,YAAY;WAChB,MAAM,CAAC,UAAC,GAAG,EAAE,WAAW;UACvB,IAAI,WAAW,CAAC,IAAI,KAAK,eAAe,EAAE;cACxC,IAAM,YAAU,GAAG,WAAW,CAAC,MAAO,CAAC,IAAI,CAAC;cAC5C,IAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,UAAU,KAAK,YAAU,GAAA,CAAC,CAAC;cAC/D,IAAM,KAAK,GAAG,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC;cACrC,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;kBAC7B,IAAI,KAAK,KAAK,SAAS,EAAE;sBACvB,OAAO,EAAE,CAAC;mBACX;uBAAM,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,EAAE;sBAC5C,OAAO,EAAE,CAAC;mBACX;uBAAM,IAAI,YAAY,KAAK,QAAQ,IAAI,YAAY,CAAC,KAAK,EAAE,oBAAoB,CAAC,EAAE;sBACjF,OAAO,EAAE,CAAC;mBACX;eACF;mBAAM,IAAI,KAAK,GAAG,CAAC,EAAE;kBACpB,OAAO,EAAE,CAAC;eACX;cACD,IAAI,KAAK,KAAK,SAAS,EAAE;kBACvB,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;eACvB;mBAAM;kBACL,GAAG,CAAC,IAAI,uBAAM,WAAW,KAAE,KAAK,EAAE,YAAY,CAAC,KAAK,CAAC,IAAG,CAAC;eAC1D;WACF;eAAM;cACL,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;WACvB;UACD,OAAO,GAAG,CAAC;OACZ,EAAE,EAAmB,CAAC,CAAC;EAC5B,CAAC,CAAC;AAEF,MAAa,sBAAsB,GAA4B,UAC7D,YAAY,EAAE,YAAY,EAAE,YAAY,IACrC,OAAA,aAAa,CAAC,YAAY,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,CAAC,GAAA,CAAC;AAEzE,MAAa,2BAA2B,GAA4B,UAClE,YAAY,EAAE,iBAAiB,EAAE,YAAY,IAC1C,OAAA,aAAa,CAAC,YAAY,EAAE,iBAAiB,EAAE,YAAY,EAAE,eAAQ,CAAC,GAAA,CAAC;EAE5E,IAAM,UAAU,GAAY;MAC1B,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;EACzC,CAAC,CAAC;;MCjDW,sBAAsB,GAAuB,UAAC,KAAK,EAAE,OAAO;MAC/D,IAAA,iCAAY,CAAW;MACvB,IAAA,+BAAU,EAAE,uCAAc,EAAE,mCAAY,CAAa;MAC7D,IAAM,eAAe,GAAGA,YAAK,CAAC,YAAY,CAAC,CAAC;MAC5C,IAAM,KAAK,GAAG,eAAe,CAAC,SAAS,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,UAAU,KAAK,UAAU,GAAA,CAAC,CAAC;MAChF,IAAM,SAAS,GAAG,eAAe,CAAC,SAAS,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,UAAU,KAAK,cAAc,GAAA,CAAC,CAAC;MAClF,IAAA,0CAA0D,EAAxD,cAAI,EAAE,sBAAkD,CAAC;MAEjE,eAAe,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,UAAU,YAAA,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;MAC9D,IAAI,YAAY,KAAK,YAAY,EAAE;UACjC,eAAe,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,EAAE,EAAE,UAAU,EAAE,cAAc,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;OACvF;MACD,OAAO;UACL,YAAY,EAAE,eAAe;OAC9B,CAAC;EACJ,CAAC,CAAC;MAEW,qBAAqB,GAAuB,UAAC,KAAK,EAAE,OAAO;MAC9D,IAAA,iCAAY,CAAW;MACvB,IAAA,+BAAU,EAAE,uCAAc,EAAE,mCAAY,CAAa;MACvD,IAAA,0CAA0D,EAAxD,cAAI,EAAE,sBAAkD,CAAC;MAEjE,IAAI,YAAY,KAAK,YAAY,EAAE;UACjC,OAAO,EAAE,iBAAiB,EAAE;kBAC1B,EAAE,UAAU,YAAA,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE,UAAU,EAAE,cAAc,EAAE,KAAK,EAAE,QAAS,EAAE;eAC9E,EAAE,CAAC;OACL;MACD,OAAO,EAAE,iBAAiB,EAAE,CAAC,EAAE,UAAU,YAAA,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC;EAC9D,CAAC,CAAC;MAEW,2BAA2B,GAAG,cAAM,QAAC;MAChD,iBAAiB,EAAE,EAAE;GACtB,IAAC;;MCpCW,uBAAuB,GAAG,MAAM,CAAC,aAAa,CAAC;;MCA/C,gBAAgB,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;MACnC,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC;;MCDhC,kBAAkB,GAAG,MAAM,CAAC,SAAS,CAAC;;MCMtC,8BAA8B,GAAqB,UAC9D,QAAQ,EAAE,WAAW,IAClB,OAAA,QAAQ,CAAC,IAAI,KAAK,kBAAkB,IAAI,WAAW,CAAC,IAAI,KAAK,uBAAuB,GAAA,CAAC;AAC1F,MAAa,uBAAuB,GAAqB,UACvD,QAAQ,EAAE,WAAW,IAClB,OAAA,CAAC,QAAQ,CAAC,IAAI,KAAK,eAAe,IAAI,QAAQ,CAAC,IAAI,KAAK,gBAAgB;SACxE,QAAQ,CAAC,IAAI,KAAK,eAAe,KAAK,WAAW,CAAC,IAAI,KAAK,uBAAuB,GAAA;;MCP1E,uBAAuB,GAAmD,UACrF,YAAY,EAAE,KAAK,IAChB;MACH,EAAE,KAAK,EAAE,YAAY,CAAC,KAAK,CAAC;UAC1B,GAAG,EAAE,uBAAuB,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,uBAAuB,EAAE;KACvE,YAAY,IAAC;;MCNL,eAAe,GAAqB,UAC/C,QAAQ,EAAE,WAAW,IAClB,OAAA,CAAC,QAAQ,CAAC,IAAI,KAAK,gBAAgB,IAAI,QAAQ,CAAC,IAAI,KAAK,eAAe;SACxE,WAAW,CAAC,IAAI,KAAK,eAAe,GAAA,CAAC;MAC7B,eAAe,GAAoB,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,KAAK,gBAAgB,GAAA,CAAC;MAClF,cAAc,GAAoB,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,KAAK,eAAe,GAAA;;MCJ/E,oBAAoB,GAA2B,UAC1D,SAAS,EAAE,aAAa,EAAE,SAAS,EAAE,SAAS;MAE9C,IAAM,MAAM,GAAG,IAAI,GAAG,CAAC,aAAa,CAAC,CAAC;MACtC,IAAM,eAAe,GAAG,SAAS;WAC9B,GAAG,CAAC,UAAA,QAAQ,IAAI,QACf,QAAQ,CAAC,IAAI,KAAK,eAAe,IAAI,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAM,CAAC;kCAEzD,QAAQ,KACX,IAAI,EAAE,eAAe,EACrB,MAAM,EAAE,SAAS,MAEjB,QAAQ,IACb,CAAC,CAAC;MAEL,IAAM,cAAc,GAAG,SAAS;WAC7B,GAAG,CAAC,UAAC,GAAG,EAAE,QAAQ,IAAK,QAAC;UACvB,GAAG,KAAA;UACH,GAAG,EAAK,gBAAgB,CAAC,QAAQ,EAAE,SAAI,QAAU;UACjD,IAAI,EAAE,gBAAgB;UACtB,KAAK,EAAE,QAAQ;UACf,MAAM,EAAE,SAAS;OAClB,IAAC,CAAC,CAAC;MAEN,gBACKA,YAAK,CAAC,cAAc,CAAC,CAAC,OAAO,EAAE,EAC/B,eAAe,EAClB;EACJ,CAAC;;MC/BY,oBAAoB,GAAgC,UAC/D,aAAa,EAAE,YAAY,IACxB,OAAA,aAAa,CAAC,GAAG,CAAC,UAAC,GAAG;MACjB,IAAA,iBAAK,CAAS;MACtB,IAAI,KAAK,KAAK,SAAS,IAAI,YAAY,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,KAAK,KAAK,KAAK,GAAA,CAAC,EAAE;UAC1E,6BACK,GAAG,KACN,WAAW,EAAE,IAAI,IACjB;OACH;MACD,OAAO,GAAG,CAAC;EACb,CAAC,CAAC,GAAA,CAAC;MAEU,uBAAuB,GAAmC,UACrE,YAAY,EAAE,YAAY,IACvB,OAAA,YAAY,CAAC,GAAG,CAAC,UAAC,WAAW;MAChC,IAAM,UAAU,GAAG,WAAW,CAAC,MAAM,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;MAC5E,IAAI,UAAU,KAAK,SAAS,IAAI,YAAY,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,UAAU,KAAK,UAAU,GAAA,CAAC,EAAE;UACzF,6BACK,WAAW,KACd,WAAW,EAAE,IAAI,IACjB;OACH;MACD,OAAO,WAAW,CAAC;EACrB,CAAC,CAAC,GAAA;;MC1BW,iBAAiB,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;AAClD,MAAa,yBAAyB,GAAG;MACvC,UAAU;MACV,aAAa;MACb,YAAY;MACZ,UAAU;MACV,OAAO;MACP,UAAU;GACX;;MCAY,iBAAiB,GAAqB,UACjD,QAAQ,EAAE,WAAW,IAClB,OAAA,QAAQ,CAAC,IAAI,KAAK,iBAAiB,IAAI,WAAW,CAAC,IAAI,KAAK,eAAe,GAAA,CAAC;MAEpE,gBAAgB,GAAoB,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,KAAK,iBAAiB,GAAA,CAAC;MAEpF,yBAAyB,GAGlC,UACF,4BAA4B,EAAE,UAAU,IACrC,OAAA,CAAC,4BAA4B,IAAI,4BAA4B,CAAC,UAAU,CAAC;SACzE,yBAAyB,GAAA,CAAC;AAE/B,MAAa,kBAAkB,GAAG,UAAC,KAAU,IAAK,OAAA,KAAK,KAAK,SAAS,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,GAAA,CAAC;AAE/F,MAAa,0BAA0B,GAAiC,UACtE,gBAAgB,EAAE,UAAU,EAAE,YAAY,EAAE,sBAAsB;MAElE,IAAI,YAAY,IAAI,YAAY,CAAC,SAAS,EAAE;UAC1C,OAAO,YAAY,CAAC,SAAS,CAAC;OAC/B;MACD,IAAI,gBAAgB,CAAC,UAAU,CAAC,EAAE;UAChC,OAAO,gBAAgB,CAAC,UAAU,CAAC,CAAC;OACrC;MACD,OAAO,sBAAsB,CAAC,CAAC,CAAC,CAAC;EACnC,CAAC;;MC9BY,yBAAyB,GAAuC,UAC3E,UAAU,EAAE,SAAS,IAClB,gBACA,UAAU;MACb,EAAE,GAAG,EAAE,iBAAiB,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,iBAAiB,EAAE,MAAM,EAAE,SAAS,EAAE;OAAC;;MCRvE,gBAAgB,GAAG,MAAM,CAAC,OAAO,CAAC;;ECY/C,IAAM,6BAA6B,GAAoC,UACrE,YAAY,EAAE,QAAQ,EAAE,aAAa,EAAE,qBAAqB,IACzD,OAAA,YAAY;OACd,MAAM,CAAC,UAAC,GAAG,EAAE,WAAW;MACvB,IAAI,WAAW,CAAC,IAAI,KAAK,eAAe,EAAE;UACxC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;UACtB,OAAO,GAAG,CAAC;OACZ;MAED,IAAM,UAAU,GAAG,WAAW,CAAC,MAAM,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;MACvE,IAAM,oBAAoB,GAAG,QAAQ;WAClC,IAAI,CAAC,UAAA,cAAc,IAAI,OAAA,cAAc,CAAC,UAAU,KAAK,UAAU,GAAA,CAAC,CAAC;MACpE,IAAM,yBAAyB,GAAG,aAAa;WAC5C,IAAI,CAAC,UAAA,cAAc,IAAI,OAAA,cAAc,CAAC,UAAU,KAAK,UAAU,GAAA,CAAC,CAAC;MAEpE,IAAI,CAAC,CAAC,oBAAoB,IAAI,CAAC,yBAAyB;aACjD,qBAAqB,CAAC,UAAU,CAAC,EAAE;UACxC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;OACvB;WAAM,IAAI,CAAC,CAAC,oBAAoB,IAAI,yBAAyB;cACtD,oBAAoB,IAAI,CAAC,yBAAyB,CAAC,EAAE;UAC3D,GAAG,CAAC,IAAI,uBACH,WAAW,KACd,KAAK,EAAE,IAAI,IACX,CAAC;OACJ;MACD,OAAO,GAAG,CAAC;;EAEb,CAAC,EAAE,EAA8C,CAAC,GAAA,CAAC;AAErD,MAAa,wBAAwB,GAA+B,UAClE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,aAAa,EAAE,iBAAiB,EAAE,qBAAqB,IACrF,gBACA,QAAQ,CAAC,GAAG,CAAC,UAAC,cAAc;MAC7B,IAAM,aAAa,GAAG,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,cAAc,CAAC,UAAU,GAAA,CAAC,CAAC;MACxF,OAAO;UACL,GAAG,EAAK,gBAAgB,CAAC,QAAQ,EAAE,SAAI,aAAc,CAAC,IAAM;UAC5D,IAAI,EAAE,gBAAgB;UACtB,MAAM,EAAE,aAAa;UACrB,KAAK,EAAE,iBAAiB;OACzB,CAAC;EACJ,CAAC,CAAC,EACC,6BAA6B,CAAC,YAAY,EAAE,QAAQ,EAAE,aAAa,EAAE,qBAAqB,CAAC,IAC/F,CAAC;MAEW,qBAAqB,GAAgD,UAChF,SAAS,EAAE,UAAU,IAClB,OAAA,SAAS,CAAC,GAAG,CAAC,UAAC,QAAQ;MAC1B,IAAI,QAAQ,CAAC,IAAI,KAAK,eAAe,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;UAClE,OAAO,QAAQ,CAAC;OACjB;MACD,6BACK,QAAQ,KACX,GAAG,EAAK,gBAAgB,CAAC,QAAQ,EAAE,SAAI,QAAQ,CAAC,GAAG,CAAC,WAAa,EACjE,IAAI,EAAE,gBAAgB,IACtB;EACJ,CAAC,CAAC,GAAA,CAAC;EAEH,IAAM,iBAAiB,GAAmD,UACxE,iBAAiB,EAAE,OAAO,IACvB,QACH,iBAAiB,CAAC,IAAI,CAAC,UAAC,IAAS,IAAK,QACpC,CAAC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,UAAU,KAAK,OAAO,IAAC,CAC9E,IACF,CAAC;EAEF,IAAM,kBAAkB,GAAyB,UAAC,QAAQ,EAAE,YAAY,EAAE,iBAAiB;MACzF,IAAI,cAAc,GAAG,KAAK,CAAC;MAC3B,OAAO,YAAY;WAChB,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG;UACf,IAAM,OAAO,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,IAAI,CAAW,CAAC;UAC1D,IAAM,qBAAqB,GAAG,GAAG,CAAC,IAAI,KAAK,gBAAgB;iBACtD,QAAQ,CAAC,GAAG,CAAC,SAAS,KAAK,OAAO,CAAC;UACxC,IAAM,cAAc,GAAG,GAAG,CAAC,IAAI,KAAK,gBAAgB;iBAC/C,QAAQ,CAAC,GAAG,CAAC,SAAS,KAAK,OAAO,IAAI,CAAC,cAAc,CAAC;UAE3D,IAAI,qBAAqB,EAAE;cACzB,cAAc,GAAG,IAAI,CAAC;WACvB;UAED,IAAI,qBAAqB,IAAI,cAAc,EAAE;cAC3C,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;WACrB;eAAM,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,iBAAiB,EAAE,OAAO,CAAC,EAAE;cAC7E,GAAG,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;cACpB,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;WACd;eAAM;cACL,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;WACnC;UACD,OAAO,GAAG,CAAC;OACZ,EAAE,CAAC,EAAE,CAAe,CAAC,CAAC;EAC3B,CAAC,CAAC;MAEW,2BAA2B,GAA2B,UACjE,mBAAmB,EAAE,iBAAiB,IACnC,OAAA,UAAC,MAAM;MACF,IAAA,0BAAQ,EAAE,kCAAY,EAAE,gCAAW,CAAY;MAEvD,IAAI,QAAQ,CAAC,IAAI,KAAK,gBAAgB,EAAE;UACtC,IAAM,MAAM,GAAG,kBAAkB,CAAC,QAAQ,EAAE,YAAY,EAAE,iBAAiB,CAAC,CAAC;UAC7E,IAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,CAAC,CAAC,MAAM,WAAW,CAAC,MAAM,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,GAAA,CAAC,CAAC;UAC3F,IAAI,KAAK,EAAE;cACT,OAAO,KAAK,CAAC,MAAM,CAAC;WACrB;OACF;MACD,OAAO,mBAAmB,CAAC,MAAM,CAAC,CAAC;EACrC,CAAC,GAAA;;MC1GY,kBAAkB,GAAqB,UAClD,QAAQ,EAAE,WAAW,IAClB,OAAA,QAAQ,CAAC,IAAI,KAAK,kBAAkB,IAAI,WAAW,CAAC,IAAI,KAAK,eAAe,GAAA,CAAC;MAErE,iBAAiB,GAAoB,UAAA,QAAQ,IAAI,QAC5D,QAAQ,CAAC,IAAI,KAAK,kBAAkB,IACrC,CAAC;MAEW,sBAAsB,GAA6B,UAAC,MAAM,EAAE,WAAW,IAAK,QACvF,MAAM,CAAC,IAAI,CAAC,UAAA,KAAK,IAAI,QACnB,KAAK,CAAC,KAAK,IAAI,WAAW,IAAI,WAAW,GAAG,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,IAC/E,CAAE,IACJ,CAAC;AAEF,MAAa,uBAAuB,GAA8B,UAChE,iBAAiB,EAAE,YAAY,EAAE,gBAAgB,EAAE,gBAAgB,IAChE,QACH,iBAAiB,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,QAAQ,IAAK,OAAA,GAAG;OACzC,MAAM,CAAC,UAAC,GAAG,EAAE,KAAK;MACjB,IAAI,YAAY,GAAQ,IAAI,CAAC;MAC7B,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,UAAC,GAAG;UACxB,IAAM,MAAM,GAAG,YAAY,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,GAAG,GAAA,CAAC,CAAC;UACzD,IAAM,UAAU,GAAG,gBAAgB,CAAC,YAAY,EAAE,MAAO,EAAE,QAAQ,CAAC,CAAC;UAErE,IAAI,UAAU,EAAE;cACd,IAAM,KAAK,GAAG,YAAY;qBACrB,YAAY,CAAC,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,MAAM;oBACjD,KAAK,CAAC,KAAK,CAAC;cAEhB,GAAG,CAAC,IAAI,gCACH,KAAK,GACL,gBAAgB,CAAC,MAAO,CAAC,KAC5B,KAAK,OAAA,EACL,OAAO,EAAE,EAAE,IACX,CAAC;cACH,YAAY,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;WACpC;UAED,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;OACnC,CAAC,CAAC;MAEH,OAAO,GAAG,CAAC;EACb,CAAC,EAAE,EAAyB,CAAC,GAAA,CAAC,IACjC,CAAC;MAEW,oBAAoB,GAAqB,UAAC,IAAI,EAAE,OAAO,IAAK,QACvE,IAAI,CAAC,GAAG,CAAC,cAAM,QAAC,CAAC;UACf,OAAO,SAAA;UACP,KAAK,EAAE,CAAC;OACT,CAAC,IAAC,CAAC,IACL,CAAC;EAEF,IAAM,cAAc,GAAqB,UAAC,YAAY,EAAG,KAAK;MAC5D,IAAM,mBAAmB,GAAG,KAAK,GAAG,YAAY,CAAC,MAAM,GAAG,CAAC,IAAI,YAAY,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC;MAC9F,OAAO,mBAAmB;YACtB,YAAY,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,MAAO,CAAC,IAAI;YACpC,SAAS,CAAC;EAChB,CAAC,CAAC;MAEW,iBAAiB,GAAwB,UAAC,YAAY,EAAE,UAAU;MAC7E,IAAM,KAAK,GAAG,YAAY,CAAC,SAAS,CAAC,UAAA,IAAI;UACvC,OAAA,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,UAAU;OAAA,CAC/C,CAAC;MACF,OAAO,KAAK,IAAI,CAAC;YACb,cAAc,CAAC,YAAY,EAAE,KAAK,CAAC;YACnC,SAAS,CAAC;EAChB,CAAC;;MCxEY,oBAAoB,GAA+B,UAAA,UAAU,IAAI;MAC5E,EAAE,GAAG,EAAE,kBAAkB,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,kBAAkB,EAAE;KAC7D,UAAU,IAAC;;MCNH,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;MACjC,eAAe,GAAG,eAAe,CAAC;MAClC,gBAAgB,GAAG,gBAAgB,CAAC;MACpC,eAAe,GAAG,eAAe,CAAC;MAClC,qBAAqB,GAAG,qBAAqB,CAAC;AAC3D,MAAa,oBAAoB,GAAG,mBAAmB;;MCO1C,gBAAgB,GAAoB,UAAA,QAAQ,IAAI,QAAC,QAAQ,CAAC,IAAI,KAAK,eAAe,IAAC,CAAC;AACjG,MAAa,mBAAmB,GAAoB,UAAA,QAAQ,IAAI,OAAA,gBAAgB,CAAC,QAAQ,CAAC;SACrF,QAAQ,CAAC,IAAI,KAAK,kBAAkB,GAAA,CAAC;MAC7B,cAAc,GAAG,UAAC,UAAkB,IAAK,OAAA,UAAU,KAAK,eAAe,GAAA,CAAC;MAExE,aAAa,GAAwB,UAChD,UAAU,EAAE,KAAK,EAAE,aAAa,EAAE,GAAQ,EAC1C,KAAS,EAAE,KAAY,EAAE,MAAa;MADJ,oBAAA,EAAA,QAAQ;MAC1C,sBAAA,EAAA,SAAS;MAAE,sBAAA,EAAA,YAAY;MAAE,uBAAA,EAAA,aAAa;MACnC,OAAA,KAAK,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,IAAI;UAC1B,IAAI,IAAI,CAAC,UAAU,KAAK,UAAU,EAAE;cAClC,6BAAY,GAAG,KAAE,KAAK,OAAA,EAAE,KAAK,OAAA,EAAE,GAAG,KAAA,IAAG;WACtC;UACD,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,EAAE;cAC/B,IAAM,cAAc,GAAG,KAAK,GAAG,aAAa,CAAC;cAC7C,IAAM,SAAS,GAAG,cAAc,GAAG,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;cACtD,IAAM,OAAO,GAAG,cAAc,GAAG,GAAG,GAAM,GAAG,SAAI,SAAW,CAAC;cAE7D,OAAO,aAAa,CAClB,UAAU,EACV,IAAI,CAAC,QAAQ,EACb,aAAa,EACb,OAAO,EACP,KAAK,GAAG,CAAC,EACT,SAAS,EACT,GAAG,CACJ,CAAC;WACH;UACD,OAAO,GAAG,CAAC;OACZ,EAAE,MAAM,IAAI,EAAE,KAAK,OAAA,EAAE,KAAK,OAAA,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC;EApBrC,CAoBqC,CAAC;EAE3C;MACa,gBAAgB,GAAuB,UAClD,EAAsD,EACtD,eAAe,EAAE,YAAY,EAAE,WAAW,EAAE,uBAAuB,EACnE,sBAAsB,EAAE,oBAAoB;UAF1C,mCAA+B,EAAE,sBAAQ,EAAE,oBAAO;MAIpD,IAAI,OAAO;UAAE,OAAO,EAAE,IAAI,EAAE,qBAAqB,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;MAEnE,IAAM,QAAQ,GAAG,eAAe,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,eAAe,GAAA,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;MACtF,IAAA,sBAAK,CAAc;MAC3B,IAAM,eAAe,GAAG,KAAK,KAAK,SAAS;YACvC,QAAQ,GAAG,CAAC,GAAG,KAAK,CAAC;MACzB,IAAM,iBAAiB,GAAG,kBAAkB,CAAC,IAAI,KAAK,eAAe;YACjE,aAAa,CAAC,kBAAkB,CAAC,MAAO,CAAC,IAAI,EAAE,WAAW,EAAE,eAAe,CAAC;YAC5E,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;MAE5B,IAAM,kBAAkB,GAAG,YAAY;WACpC,SAAS,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,GAAG,KAAK,kBAAkB,CAAC,GAAG,GAAA,CAAC,CAAC;MAE9D,IAAM,WAAW,GAAG,oBAAoB,CAAC,MAAM,CAAC;MAChD,IAAM,kBAAkB,GAAG,oBAAoB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;MAEvE,IAAI,iBAAiB,CAAC,KAAK,GAAG,eAAe,EAAE;UAC7C,IAAM,eAAe,GAAG,eAAe,GAAG,CAAC,IAAI,kBAAkB,GAAG,WAAW;iBAC1E,CAAC,oBAAoB,CAAC,eAAe,CAAC,IAAI,kBAAkB,CAAC,IAAI,KAAK,eAAe,CAAC;UAE3F,IAAI,eAAe,EAAE;cACnB,OAAO,EAAE,IAAI,EAAE,oBAAoB,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;WACtD;UACD,OAAO,EAAE,IAAI,EAAE,eAAe,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;OACjD;MAED,IAAM,mBAAmB,GAAG,YAAY,CAAC,kBAAkB,GAAG,CAAC,CAAC,CAAC;MACjE,IAAI,YAAY,GAAG,KAAK,CAAC;MACzB,IAAI,kBAAkB,GAAG,CAAC,IAAI,kBAAkB,CAAC,IAAI,KAAK,eAAe;aACpE,cAAc,CAAC,mBAAmB,CAAC,IAAI,CAAC,EAAE;UAC7C,YAAY,GAAG,IAAI,CAAC;OACrB;MAED,IAAI,iBAAiB,CAAC,KAAK,KAAK,eAAe,EAAE;UAC/C,IAAI,kBAAkB,CAAC,IAAI,KAAK,eAAe,EAAE;cAC/C,IAAM,WAAW,GAAG,kBAAkB,GAAG,WAAW;oBAChD,kBAAkB,IAAI,CAAC;oBACvB,QAAQ,CAAC;cAEb,OAAO;kBACL,IAAI,EAAE,oBAAoB;kBAC1B,OAAO,EAAE;sBACP,OAAO,EAAE,WAAW;mBACrB;eACF,CAAC;WACH;UAED,OAAO;cACL,IAAI,EAAE,gBAAgB;cACtB,OAAO,aACL,QAAQ,EAAE,eAAe,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,KAAK,kBAAkB,GAAA,CAAC,EACtE,OAAO,EAAE,QAAQ,GAAG,eAAe,IAChC,YAAY,IAAI,EAAE,YAAY,cAAA,EAAE,CACpC;WACF,CAAC;OACH;MAED,IAAM,kBAAkB,GAAG,sBAAsB,CAC/C,uBAAuB,CAAC,eAAe,CAAC,EACxC,kBAAkB,CACnB,CAAC;MAEF,IAAM,qBAAqB,GAAG,sBAAsB,CAAC,IAAI,CAAC,UAAC,EAAY;cAAZ,kBAAY,EAAX,aAAK,EAAE,WAAG;UAAM,QAC1E,KAAK,IAAI,kBAAkB,IAAI,kBAAkB,IAAI,GAAG;OACzD,CAAE,CAAC;MACJ,IAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE,kBAAkB,CAAC,KAAK,CAAC,CAAC;MAC/E,IAAI,SAAS,GAAG,kBAAkB,EAAE;UAClC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;OACtC;MAED,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CACtB,qBAAqB,CAAC,CAAC,CAAC,GAAG,CAAC,EAC5B,kBAAkB,CAAC,KAAK,GAAG,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAC7D,CAAC;MAEF,OAAO;UACL,IAAI,EAAE,eAAe;UACrB,OAAO,aACL,OAAO,EAAE,OAAO,GAAG,SAAS,EAC5B,KAAK,EAAE,iBAAiB,CAAC,KAAM,EAC/B,MAAM,EAAE,iBAAiB,IACtB,YAAY,IAAI,EAAE,YAAY,cAAA,EAAE,CACpC;OACF,CAAC;EACJ,CAAC;;MC7HY,gBAAgB,GAAgB;MAC3C,IAAI,EAAE,MAAM,CAAC,iBAAiB;MAC9B,IAAI,EAAE,EAAE;GACT,CAAC;EAEF,IAAM,aAAa,GAAuC,UAAC,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,KAAK,IAAK,QAC9F,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,WAAW,EAAE,KAAK,GAAG,WAAW,CAAC,IACtD,CAAC;MAEW,SAAS,GAAgB,UACpC,YAAY,EAAE,aAAa,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU;MAEnE,IAAM,WAAW,GAAG;UAClB,YAAY,CAAC,KAAK,EAAE,YAAY,CAAC,GAAG;UACpC,aAAa,CAAC,KAAK,EAAE,aAAa,CAAC,GAAG;OACvC;WACE,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,iBAAiB,GAAA,CAAC;WACnD,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,GAAG,CAAC,GAAA,CAAC,CAAC;MAEzB,IAAI,MAAM,GAAU,EAAE,CAAC;MACvB,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;UAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;cAClD,IAAM,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;cAC5B,IAAM,KAAK,GAAG,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;cACjC,IAAM,KAAK,GAAG,YAAY,CAAC,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,YAAY,CAAC,GAAG;oBACjE,aAAa,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,CAAC;oBAC3C,aAAa,CAAC,SAAS,EAAE,UAAU,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;cAEtD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;WAC/B;OACF;MAED,OAAO;UACL,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC;UACpB,IAAI,EAAE,MAAM;OACb,CAAC;EACJ,CAAC,CAAC;EAEF,IAAM,qBAAqB,GAAmB,UAAC,eAAe,EAAE,cAAc,EAAE,QAAQ;MAC9E,IAAA,6BAAK,EAAE,yBAAG,CAAqB;MAEvC,IAAI,KAAK,GAAG,cAAc,GAAG,QAAQ,GAAG,CAAC,EAAE;UACzC,OAAO,EAAE,KAAK,EAAE,KAAK,GAAG,QAAQ,EAAE,GAAG,EAAE,GAAG,GAAG,QAAQ,EAAE,CAAC;OACzD;MACD,OAAO,EAAE,KAAK,OAAA,EAAE,GAAG,KAAA,EAAE,CAAC;EACxB,CAAC,CAAC;MAEW,uBAAuB,GAA8B,UAChE,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,cAAc,EAAE,gBAAgB;MAEjE,IAAM,cAAc,GAAG,YAAY,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;MACjE,IAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;MACtF,IAAI,cAAc,EAAE;UAClB,IAAM,eAAe,GAAG,YAAY,CAAC,UAAU,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;UAC1E,IAAI,gBAAgB,IAAI,eAAe,KAAK,YAAY,CAAC,KAAK,EAAE;cAC9D,OAAO,qBAAqB,CAAC,eAAe,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;WACzE;UACD,OAAO,eAAe,CAAC;OACxB;;MAGD,OAAO,QAAQ,CAAC;EAClB,CAAC,CAAC;AAEF,MAAa,cAAc,GAAmC,UAC5D,QAAQ,EAAE,QAAQ,IACf,OAAA,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,QAAQ,CAAC,GAAA,CAAC;AAErC,MAAa,iBAAiB,GAAqD,UACjF,WAAW,EAAE,QAAQ,EAAE,UAAU;MAEjC,IAAM,gBAAgB,GAAG,cAAc,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;MAE/D,IAAM,aAAa,GAAG,gBAAgB,GAAG,CAAC,CAAC;MAC3C,IAAM,aAAa,GAAG,gBAAgB,GAAG,CAAC,CAAC;MAC3C,IAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,aAAa,GAAG,QAAQ,CAAC,CAAC;MACpD,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,GAAG,QAAQ,EAAE,UAAU,CAAC,CAAC;MAE3D,OAAO;UACL,KAAK,OAAA;UACL,GAAG,KAAA;OACJ,CAAC;EACJ,CAAC,CAAC;MAEW,kBAAkB,GAA0C,UACvE,WAAW,EAAE,cAAc;MAE3B,IAAM,YAAY,GAAG,YAAY,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;MAC/D,IAAM,YAAY,GAAG,YAAY,CAAC,SAAS,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;MAC1E,IAAI,YAAY,CAAC,KAAK,KAAK,YAAY,EAAE;UACvC,OAAO,gBAAgB,CAAC;OACzB;MAED,IAAM,IAAI,GAAG,aAAa,CACxB,WAAW,CAAC,IAAI,EAAE,WAAW,CAAC,IAAI,EAAE,YAAY,CAAC,KAAK,EAAE,YAAY,CAAC,GAAG,CACzE,CAAC;MAEF,OAAO;UACL,IAAI,MAAA;UACJ,IAAI,EAAE,YAAY,CAAC,KAAK;OACzB,CAAC;EACJ,CAAC,CAAC;AAEF,MAAa,oBAAoB,GAA4D,UAC3F,gBAAgB,EAAE,WAAW,EAAE,YAAY,EAAE,aAAa;MAE1D,QAAQ,gBAAgB;YACpB,IAAI,CAAC,GAAG,CACN,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,YAAY,CAAC,EACnC,aAAa,CAAC;YAChB,aAAa,EACf;EACJ,CAAC,CAAC;AAEF,MAAa,sBAAsB,GAA0D,UAC3F,WAAW,EAAE,QAAQ,EAAE,aAAa;MAE9B,IAAA,8CAAuE,EAArE,gBAAK,EAAE,oBAA8D,CAAC;MAC9E,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAClB,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,QAAQ,GAAG,CAAC,EAAE,WAAW,CAAC,EAC3C,IAAI,CAAC,GAAG,CAAC,KAAK,GAAG,QAAQ,GAAG,CAAC,EAAE,aAAa,CAAC,CAC9C,CAAC;MACF,OAAO;UACL,KAAK,OAAA;UACL,GAAG,KAAA;OACJ,CAAC;EACJ,CAAC,CAAC;MAEW,cAAc,GAAmB,UAC5C,cAAc,EAAE,WAAW,EAAE,QAAQ,EAAE,aAAa,EAAE,WAAW,EAAE,gBAAgB;MAEnF,IAAM,YAAY,GAAG,WAAW;YAC5B,sBAAsB,CAAC,WAAW,EAAE,QAAS,EAAE,aAAa,CAAC;YAC7D,iBAAiB,CAAC,cAAc,EAAE,QAAS,EAAE,aAAa,CAAC,CAAC;MAChE,IAAM,cAAc,GAAG,WAAW;YAC9B,YAAY;YACZ,uBAAuB,CACrB,WAAW,EAAE,YAAY,EAAE,QAAS,EAAE,cAAc,EAAE,gBAAgB,CACvE,CAAC;MAEN,OAAO,EAAE,cAAc,gBAAA,EAAE,YAAY,cAAA,EAAE,CAAC;EAC1C,CAAC,CAAC;AAEF,MAAa,kBAAkB,GAAyD,UACtF,WAAW,EAAE,cAAc,EAAG,QAAQ;MAEhC,IAAA,8CAA0D,EAAxD,gBAAK,EAAE,YAAiD,CAAC;MACjE,IAAM,SAAS,GAAG,GAAG,GAAG,KAAK,CAAC;MAC9B,IAAM,eAAe,GAAG,KAAK,GAAG,CAAC,GAAG,KAAK,GAAG,QAAS,GAAG,CAAC,CAAC;MAC1D,IAAM,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,GAAG,QAAQ,EAAE,GAAG,GAAG,QAAS,GAAG,GAAG,CAAC,CAAC;MAEvF,IAAI,SAAS,IAAI,CAAC,EAAE;UAClB,OAAO,KAAK,CAAC;OACd;MAED,QAAQ,cAAc,GAAG,eAAe,IAAI,kBAAkB,GAAG,cAAc,EAAE;EACnF,CAAC,CAAC;MAEW,iBAAiB,GAAyC,UACrE,EAAuB;UAArB,uBAAmB,EAAZ,WAAG,EAAE,cAAM;MACjB,QACH,CAAC,GAAG,GAAG,MAAM,IAAI,CAAC;EADf,CAEJ,CAAC;MAEW,iBAAiB,GAA8C,UAC1E,EAAc,EAAE,kBAAkB;UAAhC,gBAAK,EAAE,YAAG;MAEZ,IAAM,YAAY,GAAG,KAAK,CAAC;MAC3B,IAAM,SAAS,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC;MAChC,OAAO,YAAY,KAAK,kBAAkB,IAAI,SAAS,GAAG,CAAC,CAAC;EAC9D,CAAC;;EC7KD,IAAM,KAAK,GAAa;MACtB,KAAK,EAAE,MAAM,CAAC,iBAAiB;MAC/B,GAAG,EAAE,MAAM,CAAC,iBAAiB;GAC9B,CAAC;EAEF,IAAM,eAAe,GAA0C,UAAA,CAAC,IAAI,QAClE,CAAC,KAAK,gBAAgB;QAClB,KAAK;QACL;UACA,KAAK,EAAE,CAAC,CAAC,IAAI;UACb,GAAG,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM;OAC5B,IACJ,CAAC;EAEF,IAAM,SAAS,GAAG,UAAC,CAAW,IAAK,OAAA,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,GAAA,CAAC;EAEnD,IAAM,SAAS,GAAG,UAAC,CAAW,EAAE,CAAW;MACzC,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,EAAE;UACtC,OAAO,KAAK,CAAC;OACd;MAED,OAAO;UACL,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC;UACjC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC;OAC5B,CAAC;EACJ,CAAC,CAAC;EAEF,IAAM,UAAU,GAAG,UAAC,CAAW,EAAE,CAAW;MAC1C,IAAI,KAAK,KAAK,YAAY,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;UAC1C,OAAO,CAAC,CAAC;OACV;MAED,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,EAAE;UACjB,OAAO;cACL,KAAK,EAAE,CAAC,CAAC,GAAG;cACZ,GAAG,EAAE,CAAC,CAAC,GAAG;WACX,CAAC;OACH;MACD,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,EAAE;UACrB,OAAO;cACL,KAAK,EAAE,CAAC,CAAC,KAAK;cACd,GAAG,EAAE,CAAC,CAAC,KAAK;WACb,CAAC;OACH;MACD,OAAO,KAAK,CAAC;EACf,CAAC,CAAC;AAEF,MAAa,YAAY,GAAG;MAC1B,KAAK,OAAA;MAEL,eAAe,iBAAA;MACf,SAAS,WAAA;MAET,SAAS,WAAA;MACT,UAAU,YAAA;GACX;;MC/CY,kBAAkB,GAE3B,UACF,eAAe,EAAE,WAAW,EAAE,YAAY;MAE1C,IAAM,gBAAgB,GAAG,YAAY,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,eAAe,GAAA,CAAC,CAAC;MACxF,IAAM,iBAAiB,GAAwB,UAAC,KAAK,EAAE,KAAS,EAAE,MAAa;UAAxB,sBAAA,EAAA,SAAS;UAAE,uBAAA,EAAA,aAAa;UAAK,QAClF,KAAK,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,MAAM;cACvB,IAAI,MAAM,CAAC,QAAQ,KAAK,SAAS,EAAE;kBACjC,OAAO,iBAAiB,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;eAC3D;cACD,IAAM,YAAY,GAAG,gBAAgB,CAAC,SAAS,CAC7C,UAAA,UAAU,IAAI,OAAA,CAAC,CAAC,UAAU,CAAC,MAAM,IAAI,UAAU,CAAC,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,UAAU,GAAA,CAClF,GAAG,CAAC,CAAC,CAAC;cACP,IAAI,KAAK,GAAG,GAAG,CAAC,KAAK,IAAI,YAAY,EAAE;kBACrC,6BAAY,GAAG,KAAE,KAAK,OAAA,IAAG;eAC1B;cACD,OAAO,GAAG,CAAC;WACZ,EAAE,MAAM,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;OAC3B,CAAC;MAEF,IAAM,gBAAgB,GAAG,KAAK,CAAC,IAAI,CAAC;UAClC,MAAM,EAAE,iBAAiB,CAAC,WAA4B,EAAE,CAAC,CAAC,CAAC,KAAK;OACjE,CAAC;WACC,GAAG,CAAC,UAAC,GAAG,EAAE,KAAK,IAAK,QAAC;UACpB,GAAG,EAAK,eAAe,CAAC,QAAQ,EAAE,SAAI,KAAO;UAC7C,IAAI,EAAE,eAAe;UACrB,KAAK,EAAE,KAAK;OACb,IAAC,CAAC,CAAC;MACN,gBAAW,gBAAgB,EAAK,eAAe,EAAE;EACnD,CAAC,CAAC;AAEF,MAAa,gCAAgC,GAEzC,UACF,eAAe,EAAE,YAAY,EAAE,KAAK;MAEpC,IAAM,MAAM,GAAG,oBAAoB,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;MACnE,IAAM,eAAe,GAAG,eAAe;WACpC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,KAAK,eAAe,GAAA,CAAC;WAC3C,MAAM,CAAC;MACV,IAAM,aAAa,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC;MAEvD,IAAI,WAAW,GAAQ,IAAI,CAAC;MAC5B,IAAM,gBAAgB,GAAuB,UAAC,KAAK,EAAE,MAAM,EAAE,QAAQ;UACnE,IAAI,QAAQ,GAAG,eAAe;cAAE,OAAO,KAAK,CAAC;UAE7C,IAAM,UAAU,GAAG,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;UAC7D,WAAW,GAAG,aAAa,CAAC,UAAU,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;UACzD,OAAO,CAAC,KAAK;iBACP,KAAa,CAAC,GAAG,KAAK,WAAW,CAAC,GAAG,CAAC;OAC7C,CAAC;MACF,IAAM,gBAAgB,GAAG,cAAM,QAAC;UAC9B,SAAS,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,KAAK;UAC7B,GAAG,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,GAAG;OACtB,IAAC,CAAC;MAEH,IAAM,UAAU,GAAG,uBAAuB,CACxC,aAAa,EACb,YAAY,EACZ,gBAAgB,EAChB,gBAAgB,CACjB,CAAC;MAEF,gBAAW,UAAU,EAAK,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,EAAE;EAC3D,CAAC,CAAC;AAEF,EAeA,IAAM,aAAa,GAAG,UAAC,YAAoC,EAAE,MAAW,EAAE,KAAS;MAAtB,uBAAA,EAAA,WAAW;MAAE,sBAAA,EAAA,SAAS;MACjF,YAAY,CAAC,OAAO,CAAC,UAAC,IAAI;UACxB,IAAI,IAAI,CAAC,KAAK,EAAE;cACd,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;WAC5B;UACD,IAAI,IAAI,CAAC,QAAQ,EAAE;cACjB,aAAa,CAAC,IAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;WACjD;OACF,CAAC,CAAC;MACH,OAAO,MAAM,CAAC;EAChB,CAAC,CAAC;MAEW,gBAAgB,GAA8C,UAAA,YAAY,IAAI,QACzF,aAAa,CAAC,YAAY,CAAC,IAC5B,CAAC;AAEF,MAAa,oBAAoB,GAG7B,UAAC,eAAe,EAAE,uBAAuB,EAAE,UAAU;MACvD,IAAM,aAAa,GAAG,uBAAuB;WAC1C,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,CAAC,UAAA,EAAE,IAAI,OAAA,CAAC,CAAC,EAAE,CAAC,SAAS,GAAA,CAAC,CAAC,MAAM,GAAA,CAAC,CAAC;MAEtD,IAAM,gBAAgB,GAAG,eAAe,CAAC,GAAG,CAAC,UAAC,EAAY;cAAZ,kBAAY,EAAX,aAAK,EAAE,WAAG;UAAM,QAAC,EAAE,KAAK,OAAA,EAAE,GAAG,KAAA,EAAE;OAAC,CAAC,CAAC;MAEjF,IAAM,kBAAkB,GAAG,UAAC,KAAwB,IAAK,QACvD,gBAAgB,CAAC,IAAI,CAAC,UAAA,QAAQ,IAAI,QAChC,YAAY,CAAC,SAAS,CACpB,QAAQ,EACR,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CACpE,KAAK,YAAY,CAAC,KAAK,IACzB,CACF,IAAC,CAAC;MAEH,IAAM,sBAAsB,GAAG,UAAC,KAAa,IAAK;;MAEhD,aAAa,CAAC,KAAK,CAAC;YAClB,aAAa,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,UAAA,KAAK,IAAI,QACnC,UAAU,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,KAAK,IAAI,kBAAkB,CAAC,KAAK,CAAC,IACnE,CAAC;YACF,EAAE,IACL,CAAC;MAEF,OAAO,aAAa,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,CAAC,EAAE,KAAK;UACxC,IAAM,QAAQ,GAAG,sBAAsB,CAAC,KAAK,CAAC,CAAC;UAC/C,gBAAW,GAAG,GAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAE;OACpC,EAAE,EAAe,CAAC,CAAC;EACtB,CAAC,CAAC;AAEF,MAAa,sBAAsB,GAG/B,UACF,QAAQ,EAAE,YAAY,IACnB,QACH,QAAQ,GAAG,QAAQ,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC,IACzD;;MCnJY,uBAAuB,GAA0B,UAC5D,YAAY,EAAE,EAAgB;UAAd,gBAAK,EAAE,gBAAK;MACzB,OAAA,MAAM,CAAC,YAAY,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC;EAApC,CAAoC;;MCL5B,iBAAiB,GAAG,MAAM,CAAC,QAAQ,CAAC;;MCKpC,mBAAmB,GAA4C,UAC1E,oBAAoB,EAAE,KAAK,IACxB,OAAA,oBAAoB,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAA,CAAC;AAE9C,MAAa,uBAAuB,GAAqB,UACvD,QAAQ,EAAE,WAAW,IAClB,OAAA,WAAW,CAAC,IAAI,KAAK,iBAAiB,IAAI,QAAQ,CAAC,IAAI,KAAK,eAAe,GAAA,CAAC;MAEpE,gBAAgB,GAAoB,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,KAAK,iBAAiB,GAAA,CAAC;MAEpF,iBAAiB,GAAwD,UACpF,WAAW,EAAE,YAAY,IACtB,OAAA,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,GAAA;;MCZ/B,2BAA2B,GAAiD,UACvF,SAAS,EAAE,oBAAoB,EAAE,SAAS;MAE1C,IAAI,MAAM,GAAG,SAAS,CAAC;MACvB,oBAAoB;WACjB,OAAO,CAAC,UAAC,aAAa;UACrB,IAAM,QAAQ,GAAG,MAAM,CAAC,SAAS,CAC/B,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,KAAK,eAAe,IAAI,QAAQ,CAAC,KAAK,KAAK,aAAa,GAAA,CAClF,CAAC;UACF,IAAI,QAAQ,KAAK,CAAC,CAAC;cAAE,OAAO;UAC5B,IAAM,WAAW,GAAG,QAAQ,GAAG,CAAC,CAAC;UAC3B,IAAA,qBAAiC,EAA/B,YAAG,EAAE,gBAA0B,CAAC;UACxC,MAAM,YACD,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC;cAC/B;kBACE,KAAK,OAAA;kBACL,GAAG,KAAA;kBACH,GAAG,EAAK,iBAAiB,CAAC,QAAQ,EAAE,SAAI,KAAO;kBAC/C,IAAI,EAAE,iBAAiB;kBACvB,MAAM,EAAE,SAAS;eAClB;aACE,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,CAC7B,CAAC;OACH,CAAC,CAAC;MACL,OAAO,MAAM,CAAC;EAChB,CAAC,CAAC;AAEF,MAAa,sBAAsB,GAA0C,UAC3E,YAAY,EAAE,iBAAiB,IAC5B;MACH,EAAE,GAAG,EAAE,iBAAiB,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,iBAAiB,EAAE,KAAK,EAAE,iBAAiB,EAAE;KACrF,YAAY,IAChB,CAAC;AAEF,MAAa,4BAA4B,GAAsB,UAAA,mBAAmB,IAAI,OAAA,UAAC,MAAM;MACnF,IAAA,0BAAQ,EAAE,kCAAY,EAAE,gCAAW,CAAY;MACvD,IAAI,QAAQ,CAAC,IAAI,KAAK,iBAAiB,IAAI,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;UAClF,OAAO,YAAY,CAAC,MAAM,CAAC;OAC5B;MACD,OAAO,mBAAmB,CAAC,MAAM,CAAC,CAAC;EACrC,CAAC,GAAA;;MC7CY,iBAAiB,GAAG,MAAM,CAAC,QAAQ,CAAC;;MCMpC,iBAAiB,GAAqB,UACjD,QAAQ,EAAE,WAAW,IAClB,OAAA,WAAW,CAAC,IAAI,KAAK,iBAAiB,IAAI,QAAQ,CAAC,IAAI,KAAK,eAAe,GAAA,CAAC;AACjF,MAAa,oBAAoB,GAAqB,UACpD,QAAQ,EAAE,WAAW,IAClB,OAAA,WAAW,CAAC,IAAI,KAAK,iBAAiB,IAAI,QAAQ,CAAC,IAAI,KAAK,kBAAkB,GAAA,CAAC;AAEpF,MAAa,gBAAgB,GAAsD,UACjF,YAAY,EAAE,SAAS,EAAE,QAAQ,IAC9B,QACH,YAAY,IAAI,SAAS,IAAI,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,IAChE;;MCbY,yBAAyB,GAA0C,UAC9E,YAAY,EAAE,oBAAoB,IAC/B;MACH,EAAE,GAAG,EAAE,iBAAiB,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,iBAAiB,EAAE,KAAK,EAAE,oBAAoB,EAAE;KACxF,YAAY,IAChB;;ECFD,IAAMC,aAAW,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE,CAAC,CAAC;EAC7E,IAAM,WAAW,GAAG,6EAA6E,CAAC;AAElG,MAAa,eAAe,GAAqB,UAC/C,QAAQ,EAAE,WAAW,IAClB,OAAA,QAAQ,CAAC,IAAI,KAAK,eAAe,IAAI,WAAW,CAAC,IAAI,KAAK,eAAe,GAAA,CAAC;AAC/E,MAAa,qBAAqB,GAA2C,UAC3E,QAAQ,EAAE,UAAU,IACjB,OAAA,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAA,CAAC;MAC1B,cAAc,GAAoB,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,KAAK,eAAe,GAAA,CAAC;MAChF,gBAAgB,GAAoB,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,KAAK,iBAAiB,GAAA,CAAC;AACjG,MAAa,iBAAiB,GAAiD,UAC7E,WAAW,EAAE,YAAY,IACtB,OAAA,YAAY,CAAC,OAAO,CAAC,WAAkB,CAAC,KAAK,CAAC,GAAA,CAAC;MACvC,eAAe,GAAoB,UAAA,QAAQ,IAAI,QAC1D,QAAQ,CAAC,IAAI,KAAK,eAAe,IAClC,CAAC;MAEW,0BAA0B,GAA4B,UAAC,gBAAgB;MAClF,IAAI,gBAAgB,EAAE;UACpB,gBAAgB,CAAC,GAAG,CAAC,UAAC,MAAM;cAClB,IAAA,oBAAK,CAAY;cACzB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;kBAC7B,IAAI,CAAC,YAAY,CAAC,KAAK,EAAEA,aAAW,CAAC,EAAE;sBACrC,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;mBAC9B;eACF;WACF,CAAC,CAAC;OACJ;EACH,CAAC;;MC/BY,kBAAkB,GAE3B,UAAC,gBAAgB,EAAE,UAAU;MAC/B,IAAI,CAAC,gBAAgB,EAAE;;UAErB,OAAO,EAAyB,CAAC;OAClC;MACD,IAAM,eAAe,GAAG,gBAAgB,CAAC,IAAI,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,CAAC,UAAU,KAAK,UAAU,GAAA,CAAC,CAAC;MAChG,IAAI,CAAC,eAAe,EAAE;;UAEpB,OAAO,EAAyB,CAAC;OAClC;MACD,OAAO,eAAe,CAAC;EACzB,CAAC,CAAC;MAEW,6BAA6B,GAAoC,UAC5E,gBAAgB,EAAE,aAAa,EAAE,YAAY,IAC1C,OAAA,UAAC,UAAU;MACd,IAAI,gBAAgB,EAAE;UACpB,IAAM,eAAe,GAAG,kBAAkB,CAAC,gBAAgB,EAAE,UAAU,CAAC,CAAC;UACzE,IAAM,cAAc,GAAG,eAAe,CAAC,aAAa,CAAC,CAAC;UACtD,OAAO,cAAc,KAAK,SAAS,GAAG,cAAc,GAAG,YAAY,CAAC;OACrE;MACD,OAAO,YAAY,CAAC;EACtB,CAAC,GAAA;;MCtBY,wBAAwB,GAAiD,UACpF,OAAO,EAAE,gBAAgB,IACtB,OAAA,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM;MACd,IAAA,kBAAI,CAAY;MACxB,IAAM,eAAe,GAAG,kBAAkB,CAAC,gBAAyC,EAAE,IAAI,CAAC,CAAC;MAC5F,IAAM,KAAK,GAAG,YAAY,CAAC,eAAe,CAAC,KAAM,CAAC,CAAC;MACnD,OAAO;UACL,MAAM,QAAA;UACN,GAAG,EAAK,eAAe,CAAC,QAAQ,EAAE,SAAI,IAAM;UAC5C,IAAI,EAAE,eAAe;UACrB,KAAK,OAAA;UACL,KAAK,EAAE,eAAe,CAAC,KAAK;UAC5B,eAAe,EAAE,eAAe,CAAC,eAAe;OACjD,CAAC;EACJ,CAAC,CAAC,GAAA,CAAC;MAEU,qBAAqB,GAA8C,UAC9E,IAAI,EAAE,QAAQ,EAAE,mBAAmB,IAChC,QACH,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,mBAAmB;QAChC,CAAC,EAAE,GAAG,EAAE,iBAAiB,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAC;QAChE,IAAI,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,SAAS;UACxB,IAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;UAC5B,OAAO;cACL,GAAG,KAAA;;cAEH,KAAK,OAAA;cACL,IAAI,EAAE,eAAe;cACrB,GAAG,EAAK,eAAe,CAAC,QAAQ,EAAE,SAAI,KAAO;WAC9C,CAAC;OACH,CAAC,IAAC,CAAC;MAEK,sBAAsB,GAAqB,UAAC,MAAM;MACrD,IAAA,0BAAQ,EAAE,kCAAY,EAAE,gCAAW,CAAY;MACvD,IAAI,QAAQ,CAAC,IAAI,KAAK,iBAAiB,IAAI,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;UAClF,OAAO,YAAY,CAAC,MAAM,CAAC;OAC5B;MACD,OAAO,CAAC,CAAC;EACX,CAAC;;MCzCY,mBAAmB,GAA4C,UAC1E,YAAiB,EAAE,iBAAiB;MAApC,6BAAA,EAAA,iBAAiB;MACd,OAAA,YAAY,CAAC,MAAM,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,IAAI,KAAK,eAAe;aACrE,iBAAiB,CAAC,OAAO,CAAC,WAAW,CAAC,MAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAA,CAAC;EAD7D,CAC6D;;MCJrD,qBAAqB,GAAG,UAAC,YAA2B,IAAK,OAAA,YAAY,CAAC,IAAI,CACrF,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,eAAe,GAAA,CAC1C,GAAA;;MCDY,kBAAkB,GAA4D,UACzF,OAAO,EAAE,iBAAiB,IACvB,OAAA,OAAO,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,QAAC;MAC1B,MAAM,QAAA;MACN,MAAM,EAAE,iBAAiB,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;GACtD,IAAC,CAAC,GAAA;;MCPU,YAAY,GAAkC,UACzD,iBAAiB,EAAE,UAAU,IAC1B,QACH,iBAAiB,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;iBACpC,iBAAiB,GAAE,UAAU,KACjC,iBAAiB,CAAC,MAAM,CAAC,UAAA,YAAY,IAAI,OAAA,YAAY,KAAK,UAAU,GAAA,CAAC,IAC1E;;MCLY,iBAAiB,GAA0B,UACtD,YAAY,EAAE,EAAgB;UAAd,gBAAK,EAAE,gBAAK;MACzB,OAAA,MAAM,CAAC,YAAY,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC;EAApC,CAAoC;;ECLlC,IAAM,mBAAmB,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;;ECQtD,IAAM,cAAc,GAAwB,UAC1C,UAAU,EAAE,YAAY,EAAE,QAAQ,EAAE,KAAS;MAAT,sBAAA,EAAA,SAAS;MAE7C,IAAM,SAAS,GAAG,YAAY,CAAC,UAAU,EAAE,QAAiB,CAAC,CAAC;MAE9D,IAAI,CAAC,SAAS;UAAE,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC;MAE/D,OAAO,SAAS;WACb,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG;;UACf,IAAM,YAAY,GAAG,cAAc,CACjC,GAAG,EACH,YAAY,EACZ,QAAQ,EACR,KAAK,GAAG,CAAC,CACV,CAAC;UACF,CAAA,KAAA,GAAG,CAAC,IAAI,EAAC,IAAI,qBAAC,GAAG,GAAK,YAAY,CAAC,IAAI,GAAE;UACzC,CAAA,KAAA,GAAG,CAAC,QAAQ,EAAC,IAAI,qBAAC,CAAC,GAAG,EAAE,EAAE,KAAK,OAAA,EAAE,IAAI,EAAE,CAAC,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC,GAAK,YAAY,CAAC,QAAQ,GAAE;UAE1F,OAAO,GAAG,CAAC;OACZ,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;EACnC,CAAC,CAAC;MAEW,sBAAsB,GAAmC,UACpE,IAAI,EAAE,YAAY;MAElB,IAAM,MAAM,GAAG,cAAc,CAAC,IAAI,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;MAExD,OAAO;UACL,IAAI,EAAE,MAAM,CAAC,IAAI;UACjB,QAAQ,EAAE,IAAI,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC;OACnC,CAAC;EACJ,CAAC,CAAC;MAEW,qBAAqB,GAAoD,UACpF,QAAQ,EAAE,EAAkB;UAAhB,cAAI,EAAE,sBAAQ;MAE1B,IAAM,mBAAmB,GAAG,IAAI,CAAC,SAAS,CAAC,UAAA,GAAG,IAAI,OAAA,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAE,CAAC,KAAK,GAAG,CAAC,GAAA,CAAC,CAAC;MAChF,IAAI,mBAAmB,KAAK,CAAC,CAAC,IAAI,QAAQ,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,KAAK,SAAS,EAAE;UACnF,OAAO,QAAQ,CAAC;OACjB;MACD,IAAM,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI;WACrB,GAAG,CAAC,UAAC,GAAG,EAAE,QAAQ,IAAK,OAAA,CAAC,GAAG,EAAE,QAAQ,CAAe,GAAA,CAAC,CAAC,CAAC;MAC1D,OAAO,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAA,CAAC;EAC7B,CAAC,CAAC;MAEW,2BAA2B,GAEpC,UACF,cAAc,EAAE,EAAY;UAAV,sBAAQ;MACvB,OAAA,UAAC,GAAG;UACP,IAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;UAClC,IAAI,OAAO,KAAK,SAAS,EAAE;cACzB,OAAU,mBAAmB,CAAC,QAAQ,EAAE,SAAI,OAAO,CAAC,KAAO,CAAC;WAC7D;UACD,OAAO,cAAc,IAAI,cAAc,EAAE,CAAC;OAC3C;EANI,CAMJ,CAAC;AAEF,MAAa,gBAAgB,GAAuB,UAClD,EAAkB,EAAE,QAAQ,EAAE,cAAc;UAA1C,cAAI,EAAE,sBAAQ;MAEhB,IAAM,iBAAiB,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,CAAC;MAElD,IAAI,eAAe,GAAG,IAAI,CAAC;MAC3B,IAAI,YAAY,GAAG,CAAC,CAAC;MAErB,IAAM,iBAAiB,GAAG,IAAI,GAAG,EAAE,CAAC;MACpC,IAAM,UAAU,GAAa,EAAE,CAAC;MAEhC,IAAI,CAAC,OAAO,CAAC,UAAC,GAAG;UACf,IAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;UAClC,IAAM,KAAK,GAAG,OAAO,IAAI,OAAO,CAAC,KAAK,CAAC;UACvC,IAAI,KAAK,KAAK,SAAS,IAAI,eAAe,EAAE;cAC1C,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;WACtB;eAAM,IAAI,CAAC,eAAe,KAAK,KAAK,KAAK,SAAS,IAAI,KAAK,GAAG,YAAY,CAAC,EAAE;cAC5E,IAAM,OAAO,GAAG,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;cAClD,IAAI,cAAc,GAAG,iBAAiB,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;cACpD,IAAI,CAAC,cAAc,EAAE;kBACnB,cAAc,GAAG,EAAE,CAAC;kBACpB,iBAAiB,CAAC,GAAG,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;eAChD;cACD,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;WAC1B;eAAM;cACL,eAAe,GAAG,iBAAiB,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;cACvD,YAAY,GAAG,KAAM,CAAC;cAEtB,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;WACtB;OACF,CAAC,CAAC;MAEH,OAAO;UACL,QAAQ,UAAA;UACR,iBAAiB,mBAAA;UACjB,IAAI,EAAE,UAAU;OACjB,CAAC;EACJ,CAAC,CAAC;MAEW,uBAAuB,GAEhC,UACF,gBAAgB,EAAE,EAAqB;UAAnB,wCAAiB;MAClC,OAAA,UAAA,GAAG,IAAI,OAAA,iBAAiB,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,gBAAgB,IAAI,gBAAgB,CAAC,GAAG,CAAC,CAAC,GAAA;EAAhF,CAAgF,CAAC;MAEzE,mBAAmB,GAA4B,UAAC,EAAY;UAAV,sBAAQ;MAAO,OAAA,UAAC,GAAG;UAChF,IAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;UAClC,OAAO,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC;OAChC;EAH6E,CAG7E,CAAC;MAEW,qBAAqB,GAA0B,UAAC,EAAY;UAAV,sBAAQ;MAAO,OAAA,UAAC,GAAG;UAChF,IAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;UAClC,QAAQ,OAAO,IAAI,OAAO,CAAC,KAAK,EAAY;OAC7C;EAH6E,CAG7E,CAAC;MAEW,uBAAuB,GAAuB,UAAC,EAAQ;UAAN,cAAI;MAAO,OAAA,IAAI;EAAJ,CAAI;;MCrHhE,eAAe,GAAoD,UAC9E,QAAQ,EAAE,WAAW,EAAE,aAAa,IACjC,OAAA,QAAQ,CAAC,IAAI,KAAK,eAAe,IAAI,WAAW,CAAC,IAAI,KAAK,eAAe;SACzE,WAAW,CAAC,MAAO,CAAC,IAAI,KAAK,aAAa,GAAA;;MCNlC,iBAAiB,GAAG,UAC/B,eAAuB,EAAE,WAAmB,IACzC,OAAA,WAAW,GAAA;;MCAH,sBAAsB,GAA6B,UAC9D,WAAW,EAAE,OAAO,EAAE,gBAAgB;MAEtC,IAAM,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,UAAC,EAAQ;cAAN,cAAI;UAAO,QAAC,EAAE,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE;OAAC,CAAC,CAAC;MACtF,IAAM,oBAAoB,GAAqB,EAAE,OAAO,SAAA,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;MAC3E,IAAI,CAAC,gBAAgB,EAAE;UACrB,OAAO,oBAAoB,CAAC;OAC7B;MACD,OAAO;UACL,QAAQ,EAAE,KAAK;UACf,OAAO,EAAE,CAAC,gBAAoC,EAAE,oBAAoB,CAAC;OACtE,CAAC;EACJ,CAAC;;MCXY,kCAAkC,GAE3C,UACF,4BAA4B,EAC5B,yBAAyB,EACzB,WAAW,IACR,OAAA,UAAA,UAAU,IAAI,OAAA,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,yBAAyB;;UAE7E,OAAO,4BAA4B,KAAK,UAAU,IAAI,4BAA4B,CAAC,UAAU,CAAC,CAAC;SAChG,SAAS,GAAA,GAAA;;MCZH,sBAAsB,GAAG,MAAM,CAAC;MAChC,uBAAuB,GAAG,OAAO,CAAC;MAClC,gBAAgB,GAAG,MAAM,CAAC,OAAO,CAAC;;MCQlC,kBAAkB,GAAyB,UAAC,YAAY,EAAE,UAAU,IAAK,OAAA,YAAY;OAC/F,MAAM,CAAC,UAAA,WAAW,IAAI,QACrB,CAAC,WAAW,CAAC,IAAI,KAAK,eAAe,IAAI,UAAU,CAAC,OAAO,CAAC,WAAW,CAAC,MAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACzF,UAAU,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAC/C,CAAC;OACD,GAAG,CAAC,UAAC,EAAO;UAAL,YAAG;MAAO,OAAA,GAAG;EAAH,CAAG,CAAC,GAAA,CAAC;MAEZ,eAAe,GAAoB,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,KAAK,gBAAgB,GAAA,CAAC;EAE/F,IAAM,iBAAiB,GAAwB,UAAC,KAAK,EAAE,KAAK,EAAE,qBAAqB,IAAK,QACtF,KAAK,KAAK,CAAC;QACP,CAAC;QACD,KAAK;WACJ,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC;WACf,MAAM,CAAC,UAAC,GAAG,EAAE,MAAM,IAAK,OAAA,GAAG,GAAG,qBAAqB,CAAC,MAAM,CAAC,IAAI,CAAC,GAAA,EAAE,CAAC,CAAC,IAC1E,CAAC;MAEW,yBAAyB,GAAgC,UACpE,EAAe,EACf,EAA6B,EAC7B,YAAY,EACZ,qBAAqB,EACrB,uBAAuB;UAJrB,4BAAW;UACX,4BAAW,EAAE,8BAAY;MAK3B,IAAM,IAAI,GAAG,WAAW,CAAC,KAAM,CAAC;MAChC,IAAM,WAAW,GAAG,IAAI,KAAK,sBAAsB;YAC/C,kBAAkB,CAAC,YAAY,EAAE,WAAW,CAAC;YAC7CD,YAAK,CAAC,kBAAkB,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;MAEpE,IAAM,KAAK,GAAG,YAAY,CAAC,SAAS,CAAC,UAAC,EAAO;cAAL,YAAG;UAAO,OAAA,GAAG,KAAK,WAAW,CAAC,GAAG;OAAA,CAAC,CAAC;MAC3E,IAAM,UAAU,GAAG,WAAW,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;MACxD,IAAM,WAAW,GAAG,sBAAsB,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE,KAAK,CAAE,CAAC;MAE/E,IAAM,eAAe,GAAG,WAAW,CAAC,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,CAAC,CAAC;MACnE,IAAM,gBAAgB,GAAG,WAAW,CAAC,KAAK,GAAG,WAAW,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,KAAK,KAAK;aAChF,KAAK,GAAG,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC;MAErC,IAAM,QAAQ,GAAG,iBAAiB,CAAC,WAAW,EAAE,UAAU,EAAE,qBAAqB,CAAC,CAAC;MAEnF,OAAO;UACL,gBAAgB,kBAAA;UAChB,eAAe,iBAAA;UACf,QAAQ,UAAA;UACR,IAAI,MAAA;OACL,CAAC;EACJ,CAAC;;MC9CY,qBAAqB,GAE9B,UACF,YAAY,EAAE,WAAW,EAAE,YAAY,IACpC,OAAA,YAAY;OACd,GAAG,CAAC,UAAC,WAAW;MACf,IAAI,KAAuB,CAAC;MAC5B,IAAI,CAAC,WAAW,CAAC,IAAI,KAAK,eAAe;aACpC,WAAW,CAAC,OAAO,CAAC,WAAW,CAAC,MAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACpD,WAAW,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;UACjD,KAAK,GAAG,sBAAsB,CAAC;OAChC;MACD,IAAI,CAAC,WAAW,CAAC,IAAI,KAAK,eAAe;aACpC,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,MAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACrD,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;UAClD,KAAK,GAAG,uBAAuB,CAAC;OACjC;MACD,OAAO,KAAK,yBAAQ,WAAW,KAAE,KAAK,OAAA,MAAK,WAAW,CAAC;EACzD,CAAC,CAAC,GAAA,CAAC;AAEL,MAAa,wBAAwB,GAA+B,UAAA,eAAe,IAAI,gBAClF,eAAe;MAClB,EAAE,GAAG,EAAE,gBAAgB,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,gBAAgB,EAAE,MAAM,EAAE,CAAC,EAAE;OACxE,CAAC;AAEF,MAAa,gCAAgC,GAEzC,UACF,uBAAuB,EAAE,eAAe,EAAE,YAAY;MAEtD,IAAM,MAAM,GAAG,uBAAuB;aACjC,oBAAoB,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;MAEzD,IAAM,gBAAgB,GAAuB,UAAC,YAAY,EAAE,MAAM,IAAK,QACrE,CAAC,YAAY,IAAK,YAAoB,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,IAC9D,CAAC;MACF,IAAM,gBAAgB,GAAG,UAAC,MAAmB,IAAK,QAAC;UACjD,KAAK,EAAE,MAAM,CAAC,KAAK;OACpB,IAAC,CAAC;MACH,OAAO,uBAAuB,CAC5B,MAAM,EACN,YAAY,EACZ,gBAAgB,EAChB,gBAAgB,CACjB,CAAC;EACJ,CAAC;;ECzCD,IAAM,yBAAyB,GAA8B;MAC3D,KAAK,EAAE,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,GAAA;MAC1B,GAAG,EAAE,UAAC,IAAI,EAAE,QAAQ,IAAK,OAAA,IAAI,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG,IAAK,OAAA,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAA,EAAE,CAAC,CAAC,GAAA;MAC1E,GAAG,EAAE,UAAC,IAAI,EAAE,QAAQ,IAAK,QAAC,IAAI,CAAC,MAAM;YACjC,IAAI,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG,IAAK,OAAA,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAA,EAAE,CAAC,QAAQ,CAAC;YAClE,IAAI,IAAC;MACT,GAAG,EAAE,UAAC,IAAI,EAAE,QAAQ,IAAK,QAAC,IAAI,CAAC,MAAM;YACjC,IAAI,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG,IAAK,OAAA,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAA,EAAE,QAAQ,CAAC;YACjE,IAAI,IAAC;MACT,GAAG,EAAE,UAAC,IAAI,EAAE,QAAQ,IAAK,QAAC,IAAI,CAAC,MAAM;YACjC,IAAI,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG,IAAK,OAAA,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAA,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM;YAC/D,IAAI,IAAC;GACV,CAAC;AAEF,MAAa,wBAAwB,GAAsB,UAAC,IAAI,EAAE,IAAI,EAAE,QAAQ;MAC9E,IAAM,iBAAiB,GAAG,yBAAyB,CAAC,IAAI,CAAC,CAAC;MAC1D,IAAI,CAAC,iBAAiB,EAAE;UACtB,MAAM,IAAI,KAAK,CAAC,uBAAqB,IAAI,qBAAkB,CAAC,CAAC;OAC9D;MACD,OAAO,iBAAiB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;EAC3C,CAAC,CAAC;EAEF,IAAM,WAAW,GAAwB,UACvC,IAAI,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,IACzC,OAAA,YAAY;OACd,MAAM,CAAC,UAAC,GAAG,EAAE,EAAoB;UAAlB,cAAI,EAAE,0BAAU;MAC9B,IAAM,QAAQ,GAAG,UAAC,GAAQ,IAAK,OAAA,YAAY,CAAC,GAAG,EAAE,UAAU,CAAC,GAAA,CAAC;MAC7D,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,IAAa,EAAE,QAAQ,CAAC,CAAC,CAAC;MACpD,OAAO,GAAG,CAAC;EACb,CAAC,EAAE,EAAoB,CAAC,GAAA,CAAC;EAE3B,IAAM,UAAU,GAAiB,UAC/B,IAAI,EAAE,cAAc,EAAE,gBAAgB,EAAE,UAAU,EAAE,eAAuB;MAAvB,gCAAA,EAAA,uBAAuB;MAE3E,IAAM,gBAAgB,GAAG,eAAe,IAAI,CAAC,UAAU;YACnD,cAAM,OAAA,IAAI,GAAA;YACV,UAAC,GAAa,IAAK,OAAA,CAAC,UAAU,CAAC,GAAG,CAAC,GAAA,CAAC;MAExC,OAAO,IAAI;WACR,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG;UACf,IAAI,cAAc,IAAI,cAAc,CAAC,GAAG,CAAC,EAAE;cACzC,IAAI,gBAAgB,CAAC,GAAG,CAAC,EAAE;kBACzB,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;eACf;cACD,IAAM,aAAa,GAAG,gBAAgB,IAAI,gBAAgB,CAAC,GAAG,CAAC,CAAC;cAChE,IAAI,aAAa,EAAE;kBACjB,GAAG,CAAC,IAAI,OAAR,GAAG,WAAS,aAAa,GAAE;eAC5B;cACD,OAAO,GAAG,CAAC;WACZ;UACD,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;UACd,OAAO,GAAG,CAAC;OACZ,EAAE,EAAgB,CAAC,CAAC;EACzB,CAAC,CAAC;MAEW,kBAAkB,GAAyB,UACtD,IAAI,EACJ,YAAY,EACZ,YAAY,EACZ,cAAc,EACd,UAAU,EACV,gBAAgB,EAChB,UAAqC;MAArC,2BAAA,EAAA,qCAAqC;MAErC,IAAM,SAAS,GAAG,UAAU,CAAC,IAAI,EAAE,cAAc,EAAE,gBAAgB,EAAE,UAAU,CAAC,CAAC;MACjF,OAAO,WAAW,CAAC,SAAS,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,CAAC,CAAC;EACxE,CAAC,CAAC;MAEW,kBAAkB,GAAyB,UACtD,IAAI,EACJ,YAAY,EACZ,YAAY,EACZ,cAAc,EACd,UAAU,EACV,gBAAgB,EAChB,UAAqC;MAArC,2BAAA,EAAA,qCAAqC;MAErC,IAAI,MAAM,GAAiB,EAAE,CAAC;MAC9B,IAAM,aAAa,GAAG,UAAC,QAAgB,IAAK,QAC1C,MAAM,CAAC,SAAS,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,QAAQ,KAAK,QAAQ,GAAA,CAAC,IACvD,CAAC;MACF,IAAM,SAAS,GAAG,EAAE,CAAC;MAErB,IAAM,uBAAuB,GAAG,YAAY,CAAC,IAAI,CAAC,UAAA,IAAI,IAAI,QACxD,CAAE,IAAY,CAAC,iBAAiB,IACjC,CAAC,CAAC;MACH,IAAM,YAAY,GAAG,uBAAuB;YACxC,UAAU,CAAC,IAAI,EAAE,cAAc,EAAE,gBAAgB,EAAE,UAAU,EAAE,IAAI,CAAC;YACpE,IAAI,CAAC;MAET,YAAY,CAAC,OAAO,CAAC,UAAC,GAAG;UACvB,IAAM,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;UACrC,IAAM,aAAa,GAAG,gBAAgB,IAAI,gBAAgB,CAAC,GAAG,CAAC,CAAC;UAChE,IAAI,UAAU,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;UACzC,IAAI,UAAU,GAAG,CAAC,CAAC,EAAE;cACnB,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK;kBACnB,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,WAAW,CAC5C,KAAK,CAAC,IAAI,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,CACnD,CAAC;eACH,CAAC,CAAC;cACH,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;WACtC;UACD,IAAI,UAAW,CAAC,GAAG,CAAC,EAAE;cACpB,MAAM,CAAC,IAAI,CAAC;kBACV,QAAQ,UAAA;kBACR,GAAG,KAAA;kBACH,IAAI,EAAE,EAAE;eACT,CAAC,CAAC;cACH,UAAU,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;WACtC;;UAED,IAAM,yBAAyB,GAAG,aAAa,IAAI,UAAU,GAAG,CAAC,IAAI,CAAC,uBAAuB,CAAC;UAC9F,IAAM,YAAY,GAAG,CAAC,QAAQ,GAAG,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC;UACvD,IAAI,CAAC,QAAQ,IAAI,yBAAyB,EAAE;cAC1C,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK;;kBACnB,CAAA,KAAA,KAAK,CAAC,IAAI,EAAC,IAAI,oBAAI,YAAY,GAAE;eAClC,CAAC,CAAC;WACJ;OACF,EAAE,EAAE,CAAC,CAAC;MACP,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK;UACnB,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,GAAG,WAAW,CAC5C,KAAK,CAAC,IAAI,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,CACnD,CAAC;OACH,CAAC,CAAC;MACH,OAAO,SAAS,CAAC;EACnB,CAAC,CAAC;MAEW,iBAAiB,GAAwB,UACpD,IAAI,EACJ,YAAY,EACZ,YAAY,EACZ,cAAc,EACd,UAAU,EACV,QAAQ,EACR,UAAqC;MAArC,2BAAA,EAAA,qCAAqC;MAErC,IAAI,MAAM,GAAU,EAAE,CAAC;MACvB,IAAM,SAAS,GAAG,EAAE,CAAC;MACrB,IAAI,CAAC,OAAO,CAAC,UAAC,GAAG;UACf,IAAM,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;UACrC,IAAI,CAAC,QAAQ,EAAE;cACb,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;cACzC,OAAO;WACR;UACD,IAAM,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,QAAQ,KAAK,QAAQ,GAAA,CAAC,CAAC;UAC1E,IAAI,UAAU,GAAG,CAAC,CAAC,EAAE;cACnB,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAC,KAAK;kBACrC,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE;sBACrB,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAC1C,KAAK,CAAC,IAAI,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,CACnD,CAAC;mBACH;eACF,CAAC,CAAC;cACH,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;WACtC;UACD,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;cACnC,IAAI,MAAM,CAAC,MAAM,EAAE;kBACjB,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;eAC1C;cACD,MAAM,CAAC,IAAI,CAAC;kBACV,QAAQ,UAAA;kBACR,GAAG,KAAA;kBACH,IAAI,EAAE,EAAE;eACT,CAAC,CAAC;WACJ;OACF,EAAE,EAAE,CAAC,CAAC;MACP,MAAM,CAAC,OAAO,CAAC,UAAC,KAAK;UACnB,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE;cACrB,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAC1C,KAAK,CAAC,IAAI,EAAE,YAAY,EAAE,YAAY,EAAE,UAAU,CACnD,CAAC;WACH;OACF,CAAC,CAAC;MACH,OAAO,SAAS,CAAC;EACnB,CAAC;;MC3LY,wBAAwB,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;MAClD,wBAAwB,GAAG,MAAM,CAAC,cAAc,CAAC,CAAC;MAClD,uBAAuB,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;MAEhD,0BAA0B,GAAG,CAAC,OAAO,CAAC;;MCMtC,uBAAuB,GAAqB,UACvD,QAAQ,EAAE,WAAW,IAClB,OAAA,QAAQ,CAAC,IAAI,KAAK,wBAAwB,IAAI,WAAW,CAAC,IAAI,KAAK,eAAe,GAAA,CAAC;AACxF,MAAa,uBAAuB,GAAqB,UACvD,QAAQ,EAAE,WAAW,IAClB,OAAA,QAAQ,CAAC,IAAI,KAAK,wBAAwB,IAAI,WAAW,CAAC,IAAI,KAAK,eAAe,GAAA,CAAC;AACxF,MAAa,sBAAsB,GAAqB,UACtD,QAAQ,EAAE,WAAW,IAClB,OAAA,QAAQ,CAAC,IAAI,KAAK,uBAAuB,IAAI,WAAW,CAAC,IAAI,KAAK,eAAe,GAAA,CAAC;MAC1E,sBAAsB,GAAoB,UAAA,QAAQ,IAAI,QACjE,QAAQ,CAAC,IAAI,KAAK,wBAAwB,IAC3C,CAAC;MACW,sBAAsB,GAAoB,UAAA,QAAQ,IAAI,QACjE,QAAQ,CAAC,IAAI,KAAK,wBAAwB,IAC3C,CAAC;MACW,qBAAqB,GAAoB,UAAA,QAAQ,IAAI,QAChE,QAAQ,CAAC,IAAI,KAAK,uBAAuB,IAC1C,CAAC;AAEF,MAAa,kBAAkB,GAAyB,UACtD,YAAY,EAAE,UAAU,EAAE,aAAa,EAAE,SAAsB;MAAtB,0BAAA,EAAA,0BAAkB,OAAA,IAAI,GAAA;MAC5D,OAAA,YAAY;WACd,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK,IAAK,OAAA,CAAC,IAAI,EAAE,KAAK,CAA0B,GAAA,CAAC;WAC5D,MAAM,CAAC,UAAC,EAAM;cAAN,kBAAM,EAAL,YAAI;UAAM,OAAA,IAAI,CAAC,UAAU,KAAK,UAAU,IAAI,SAAS,CAAC,IAAI,CAAC;OAAA,CAAC;WACrE,GAAG,CAAC,UAAC,EAAa;cAAb,kBAAa,EAAZ,YAAI,EAAE,aAAK;UAAM,QAAC;cACvB,IAAI,EAAE,IAAI,CAAC,IAAI;cACf,KAAK,EAAE,aAAa,CAAC,KAAK,CAAC;WAC5B;OAAC,CAAC;EANA,CAMA,CAAC;MAEO,eAAe,GAAyC,UAAA,WAAW,IAAI,QACjF,WAAgC,CAAC,iBAAkB,IACrD,CAAC;AACF,MAAa,2BAA2B,GAAyC,UAAA,WAAW,IAAI,QAC9F,EAAG,WAAgC,CAAC,iBAAiB;MACpD,WAAgC,CAAC,aAAa,CAAC,IACjD,CAAC;MACW,wBAAwB,GACnC,UAAA,iBAAiB,WAAI,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,IAAI,CAAC,eAAe,IAAC,CAAC;AAEhE,MAAa,uBAAuB,GAA8B,UAChE,YAAY,EAAE,OAAO,EAAE,aAAa;MAEpC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,2BAA2B,CAAC,EAAE;UACnD,OAAO,EAAE,CAAC;OACX;MAED,OAAO,OAAO,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,MAAM;UAChC,IAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC;UAC5B,IAAM,SAAS,GAAG,kBAAkB,CAClC,YAAY,EAAE,OAAO,EAAE,aAAa,EAAE,2BAA2B,CAClE,CAAC;UACF,IAAI,SAAS,CAAC,MAAM,EAAE;cACpB,GAAG,CAAC,IAAI,CAAC;kBACP,MAAM,QAAA;kBACN,SAAS,WAAA;eACV,CAAC,CAAC;WACJ;UAED,OAAO,GAAG,CAAC;OACZ,EAAE,EAA6B,CAAC,CAAC;EACpC,CAAC;;MC3DY,2BAA2B,GAA+B,UAAA,UAAU,IAAI;MACnF,EAAE,GAAG,EAAE,wBAAwB,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,wBAAwB,EAAE;KACzE,UAAU,IACd,CAAC;MAEW,sBAAsB,GAA6B,UAC9D,SAAS,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,cAAc,EAAE,UAAU,EAAE,QAAQ;MAEpF,IAAI,CAAC,cAAc,IAAI,EAAE,iBAAiB,IAAI,gBAAgB,CAAC;UAAE,OAAO,SAAS,CAAC;MAElF,IAAM,qBAAqB,GAAG,wBAAwB,CAAC,iBAAiB,CAAC,CAAC;MAC1E,IAAM,MAAM,GAAe,EAAE,CAAC;MAC9B,IAAM,UAAU,GAAG,UAAC,KAAe;UACjC,IAAI,CAAC,KAAK,CAAC,MAAM;cAAE,OAAO;UAC1B,IAAI,qBAAqB,IAAI,UAAU,IAAI,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;cACxD,IAAA,mCAAW,CAAe;cAClC,MAAM,CAAC,IAAI,CAAC;kBACV,GAAG,EAAK,wBAAwB,CAAC,QAAQ,EAAE,SAAI,WAAa;kBAC5D,IAAI,EAAE,wBAAwB;kBAC9B,GAAG,EAAE,KAAK,CAAC,GAAG;eACf,CAAC,CAAC;WACJ;eAAM,IAAI,gBAAgB,EAAE;cAC3B,IAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;cAClC,MAAM,CAAC,IAAI,CAAC;kBACV,GAAG,EAAK,uBAAuB,CAAC,QAAQ,EAAE,SAAI,KAAO;kBACrD,IAAI,EAAE,uBAAuB;kBAC7B,GAAG,EAAE,KAAK,CAAC,GAAG;eACf,CAAC,CAAC;WACJ;OACF,CAAC;MAEF,IAAI,MAAM,GAAe,EAAE,CAAC;MAC5B,SAAS,CAAC,OAAO,CAAC,UAAC,QAAQ;UACjB,IAAA,kBAAG,CAAc;UACzB,IAAM,QAAQ,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;UACrC,IAAI,QAAQ,EAAE;cACZ,IAAM,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,QAAQ,KAAK,QAAQ,GAAA,CAAC,CAAC;cAC1E,IAAI,UAAU,GAAG,CAAC,CAAC,EAAE;kBACnB,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;kBACvD,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;eACtC;cACD,IAAI,CAAC,UAAU,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;kBACnC,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,8BACxB,KAAK,KACR,MAAM,EAAE,IAAI,OACZ,CAAC,CAAC;eACL;cACD,MAAM,CAAC,IAAI,CAAC;kBACV,QAAQ,UAAA;kBACR,GAAG,KAAA;kBACH,MAAM,EAAE,KAAK;eACd,CAAC,CAAC;WACJ;eAAM;cACL,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,8BACxB,KAAK,KACR,MAAM,EAAE,IAAI,OACZ,CAAC,CAAC;WACL;UACD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;OACvB,CAAC,CAAC;MACH,MAAM,CAAC,KAAK,EAAE,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;MAE7C,OAAO,MAAM,CAAC;EAChB,CAAC;;MCxEY,wBAAwB,GAAG,UAAC,KAAyB,IAAK,QACrE,CAAC,CAAC,KAAK;QACH,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,8BACf,IAAI,KACP,iBAAiB,EAAE,CACjB,IAAI,CAAC,iBAAiB,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,aAAa;gBAEzD,IAAI;gBACJ,IAAI,CAAC,iBAAiB,OAC1B,CAAC;QACD,KAAK,IACV;;ECXM,IAAM,yBAAyB,GAAgC,UACpE,gBAAgB,EAAE,WAAW;MAE7B,IAAM,WAAW,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC,KAAK,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC;MAC7F,IAAM,kBAAkB,GAAG,UAAC,KAAa,IAAK,OAAA,gBAAgB,CAAC,KAAK,CAAC,CAAC,KAAK;YACrC,gBAAgB,CAAC,KAAK,CAAC,CAAC,IAAI;YAC5B,WAAW,GAAA,CAAC;MAElD,OAAO,gBAAgB;WACpB,GAAG,CAAC,UAAC,EAEL,EAAE,WAAW;cADZ,YAAG,EAAE,gBAAK,EAAE,kBAAM,EAAE,cAAI;UAExB,IAAI,UAAU,GAAG,IAAI,CAAC;UACtB,IAAI,WAAW,GAAG,CAAC,IAAI,WAAW,IAAI,WAAW,EAAE;cACjD,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,UAAU,GAAG,kBAAkB,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;WACrF;UACD,IAAI,WAAW,GAAG,WAAW,EAAE;cAC7B,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,UAAU,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;WACjF;UACD,IAAI,WAAW,GAAG,KAAK,CAAC;UACxB,IAAI,WAAW,GAAG,gBAAgB,CAAC,MAAM,GAAG,CAAC,IAAI,WAAW,IAAI,WAAW,EAAE;cAC3E,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,WAAW,GAAG,kBAAkB,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;WACxF;UACD,IAAI,WAAW,GAAG,WAAW,EAAE;cAC7B,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,WAAW,GAAG,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;WACpF;UAED,OAAO;cACL,GAAG,KAAA;cACH,MAAM,QAAA;cACN,KAAK,EAAE,WAAW;cAClB,IAAI,EAAE,UAAU;WACjB,CAAC;OACH,CAAC,CAAC;EACP,CAAC,CAAC;;MC7BW,wBAAwB,GAA+B,UAAC,OAAO,EAAE,UAAU;MACtF,IAAM,YAAY,GAAG,OAAO;WACzB,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,KAAK,GAAA,CAAC,CAAC;MAE/B,IAAM,SAAS,GAAG,UAAU,CAAC;MAC7B,IAAM,eAAe,GAAG,YAAY;WACjC,MAAM,CACL,UAAC,KAAK,EAAE,KAAK,IAAK,OAAC,KAAiB,IAAI,OAAO,KAAK,KAAK,QAAQ,GAAG,KAAK,GAAG,CAAC,CAAC,GAAA,EAAE,CAAC,CAAW,CAAC;MACjG,IAAM,iBAAiB,GAAG,YAAY;WACnC,MAAM,CACL,UAAC,KAAK,EAAE,KAAK,IAAK,OAAC,KAAiB,IAAI,OAAO,KAAK,KAAK,QAAQ,GAAG,CAAC,GAAG,CAAC,CAAC,GAAA,EAAE,CAAC,CAAW,CAAC;MAC7F,IAAM,gBAAgB,GAAG,CAAC,SAAS,GAAG,eAAgB,IAAI,iBAAkB,CAAC;MAE7E,IAAI,iBAAiB,GAAG,CAAC,CAAC;MAC1B,OAAO,YAAY;WAChB,GAAG,CAAC,UAAA,KAAK,IAAI,QAAC,OAAO,KAAK,KAAK,QAAQ,GAAG,gBAAgB,GAAG,KAAK,IAAC,CAAC;WACpE,GAAG,CAAC,UAAC,KAAK;UACT,iBAAiB,IAAI,KAAK,CAAC;UAC3B,OAAO;cACL,IAAI,EAAE,iBAAiB,GAAG,KAAK;cAC/B,KAAK,EAAE,iBAAiB;WACzB,CAAC;OACH,CAAC,CAAC;EACP,CAAC,CAAC;MAEW,yBAAyB,GAAgC,UACpE,gBAAgB,EAAE,WAAW,EAAE,MAAM,IAClC,OAAA,yBAAyB,CAAC,gBAAgB,EAAE,WAAW,CAAC;OAC1D,SAAS,CAAC,UAAC,EAAe;UAAb,cAAI,EAAE,gBAAK;MAAO,OAAA,MAAM,GAAG,IAAI,IAAI,MAAM,GAAG,KAAK;EAA/B,CAA+B,CAAC,GAAA,CAAC;EAEnE,IAAM,kBAAkB,GAAG,GAAG,CAAC;EAE/B,IAAM,oBAAoB,GAAG,UAAC,SAA0B,IAAK,OAAA,CAC3D,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,SAAS,IAAI,kBAAkB,GAAA,CAAC;AAEnE,MAAa,aAAa,GAA0B,UAClD,WAAW,EACX,WAAW,EACX,UAAU,EACV,cAAc;MAEd,IAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,GAAG,GAAA,CAAC,CAAC,IAAI,EAAE;cACvD,WAAW,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,GAAG,GAAA,CAAC,CAAC,IAAI,EAAE,CAAC;MAEnD,IAAM,oBAAoB,GAAG,IAAI,GAAG,CAClC,wBAAwB,CAAC,WAAW,EAAE,UAAU,CAAC;WAC9C,GAAG,CAAC,UAAC,QAAQ,EAAE,KAAK,IAAK,OAAA,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,QAAQ,CAA6B,GAAA,CAAC;WACxF,GAAG,CAAC,UAAC,EAAe;cAAf,kBAAe,EAAd,WAAG,EAAE,gBAAQ;UAClB,IAAM,SAAS,GAAG,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;UAC1C,IAAI,CAAC,SAAS;cAAE,OAAO,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;UACvC,IAAM,QAAQ,GAAGE,mBAAY,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC,CAAC;UACzD,IAAA,mBAA8B,EAA5B,UAAE,EAAE,cAAwB,CAAC;UACrC,IAAM,IAAI,GAAG,CAAC,CAAC,EAAE,GAAG,IAAI,IAAI,QAAQ,IAAI,IAAI,CAAC;UAC7C,OAAO,CAAC,GAAG,EAAE;kBACX,IAAI,MAAA;kBACJ,KAAK,EAAE,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC;eAC/C,CAAC,CAAC;;OAEJ,CAA+B,CACjC,CAAC;MAEJ,IAAM,oBAAoB,GAAG,IAAI,GAAG,CAClC,wBAAwB,CAAC,WAAW,EAAE,UAAU,CAAC;;WAE9C,GAAG,CAAC,UAAC,QAAQ,EAAE,KAAK,IAAK,OAAA,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAA,CAA+B,CAC9F,CAAC;MAEF,OAAO,IAAI,GAAG,CAAC,SAAI,oBAAoB,CAAC,IAAI,EAAE,EAC3C,GAAG,CAAC,UAAC,GAAG;UACP,IAAM,IAAI,GAAQ,oBAAoB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;UAChD,IAAM,IAAI,GAAQ,oBAAoB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;UAEhD,IAAM,MAAM,GAAoB,EAAE,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;UAC/E,IAAM,yBAAyB,GAAG,CAAC,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;UACnF,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,yBAAyB,GAAG,IAAK,CAAC,IAAI,GAAG,IAAK,CAAC,IAAI,IAAI,IAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;cACpF,MAAM,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;WAClD;UACD,OAAO,CAAC,GAAG,EAAE,MAAM,CAA8B,CAAC;OACnD,CAAC;WACD,MAAM,CAAC,UAAC,SAAoC,IAAK,OAAA,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,GAAA,CAAC,CAAC,CAAC;EAC1E,CAAC,CAAC;AAEF,MAAa,sBAAsB,GAA6B,UAAA,UAAU,IAAI,OAAA,IAAI,GAAG,CACnF,SAAI,UAAU,CAAC,OAAO,EAAE,EACrB,MAAM,CAAC,UAAC,EAAa;UAAb,kBAAa,EAAV,iBAAS;MAAM,OAAA,oBAAoB,CAAC,SAAS,CAAC,GAAG,CAAC;EAAnC,CAAmC,CAAC,CAClE,GAAA,CAAC;AAEF,MAAa,cAAc,GAAqB,UAAA,UAAU,IAAI,OAAA,IAAI,GAAG,CAAC,SAAI,UAAU,CAAC,OAAO,EAAE,EAC3F,GAAG,CAAC,UAAC,EAAgB;UAAhB,kBAAgB,EAAf,WAAG,EAAE,iBAAS;MACnB,IAAM,QAAQ,GAAGA,mBAAY,CAAC,oBAAoB,CAAC,SAAS,CAAC,CAAC,CAAC;MAC/D,IAAM,MAAM,gBAAQ,SAAS,CAAC,KAAK,CAAE,CAAC;MACtC,IAAI,SAAS,CAAC,IAAI,EAAE;UAClB,IAAM,MAAM,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,GAAG,CAAC,CAAC,CAAC;UACzE,MAAc,CAAC,SAAS,GAAG,gBAAc,MAAM,QAAK,CAAC;OACvD;MACD,OAAO,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;EACvB,CAAC,CAAC,CAAC,GAAA;;ECnGL,IAAM,eAAe,GAA0D,UAAC,QAAQ,EAAE,CAAC,IAAK,QAC9F,CAAC,IAAI,QAAQ,CAAC,GAAG,IAAI,CAAC,IAAI,QAAQ,CAAC,MAAM,IAC1C,CAAC;EAEF,IAAM,YAAY,GAAG,UAAC,EAEC;UADrB,YAAG,EAAE,gBAAK,EAAE,kBAAM,EAAE,cAAI;MACE,QAAC;UAC3B,GAAG,KAAA,EAAE,KAAK,OAAA,EAAE,MAAM,QAAA,EAAE,IAAI,MAAA;OACzB;EAF2B,CAE1B,CAAC;EAEH,IAAM,wBAAwB,GAA2C,UAAA,UAAU,IAAI,QACrF,UAAU,CAAC,GAAG,CAAC,UAAC,QAAQ,EAAE,KAAK;MAC7B,IAAI,KAAK,KAAK,UAAU,CAAC,MAAM,GAAG,CAAC,IAAI,QAAQ,CAAC,GAAG,KAAK,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE;UACjF,6BACK,QAAQ,KACX,KAAK,EAAE,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,IACjC;OACH;MACD,OAAO,QAAQ,CAAC;EAClB,CAAC,CAAC,IAAC,CAAC;AAEN,MAAa,uBAAuB,GAA8B,UAChE,UAAU,EAAE,WAAW,EAAE,EAAQ;UAAN,QAAC,EAAE,QAAC;MAE/B,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC;UAAE,OAAO,CAAC,CAAC;MAEtC,IAAM,gBAAgB,GAAG,WAAW,KAAK,CAAC,CAAC;YACvC,yBAAyB,CAAC,UAAU,EAAE,WAAW,CAAC;YAClD,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;MAEjC,IAAM,WAAW,GAAG,wBAAwB,CAAC,gBAAgB,CAAC;WAC3D,SAAS,CAAC,UAAC,QAAQ,EAAE,KAAK;UACzB,IAAM,gBAAgB,GAAG,eAAe,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;UACtD,IAAM,kBAAkB,GAAG,CAAC,IAAI,QAAQ,CAAC,IAAI,IAAI,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC;UACrE,IAAM,aAAa,GAAG,KAAK,KAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC;UACvD,IAAM,mBAAmB,GAAG,CAAC,gBAAgB;iBACxC,CAAC,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC;iBACvB,eAAe,CAAC,UAAU,CAAC,KAAK,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;UAE/C,OAAO,CAAC,gBAAgB,IAAI,kBAAkB;iBACzC,aAAa;iBACb,mBAAmB,CAAC;OAC1B,CAAC,CAAC;MAEL,OAAO,WAAW,KAAK,CAAC,CAAC,GAAG,UAAU,CAAC,MAAM,GAAG,WAAW,CAAC;EAC9D,CAAC;;EC9CD;AACA,EAAO,IAAM,WAAW,GAAsD,UAC5E,IAAI,EAAE,IAAI,EAAE,UAA8B;MAA9B,2BAAA,EAAA,uBAAc,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,KAAK,CAAC,GAAA;MAE1C,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,EAAE;UAC/B,OAAO,KAAK,CAAC;OACd;MACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;UACvC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;cACjC,OAAO,KAAK,CAAC;WACd;OACF;MACD,OAAO,IAAI,CAAC;EACd,CAAC,CAAC;;ECdF;AACA,MAAa,aAAa,GAAiB;MACzC,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MACjB,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MACZ,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MAClB,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MAClB,GAAG,EAAE,CAAC;MACN,IAAI,EAAE,CAAC;MACP,KAAK,EAAE,GAAG;MACV,MAAM,EAAE,GAAG;GACZ,CAAC;MAEW,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;MAC7B,eAAe,GAAG,MAAM,CAAC,QAAQ,CAAC;;ECD/C,IAAMD,aAAW,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;EAC/B;EACA,IAAM,mBAAmB,GAAG,oFAAoF,CAAC;MAEpG,WAAW,GAAkB,UACxC,KAAK,EAAE,OAAO,EAAE,kBAAkB,EAAE,YAAY,EAAE,cAAc;MAG9D,IAAA,+BAAW,EAAE,iCAAY,EAAE,qCAAc,EAAE,uCAAe,EAAE,iCAAY,EAAE,iCAAY,CAC9E;MAER,IAAA,yCAAe,EACf,gCAAuB,EACvB,8BAAqB,EACrB,uBAAgC,EAAhC,yCAAgC,EAChC,uBAAgC,EAAhC,yCAAgC,EAChC,mCAAY,EACZ,2BAAQ,CACE;MAEZ,IAAM,IAAI,GAAG,sBAAsB,CACjC,aAAa,EAAE,WAAW,EAAE,eAAe,GAAG,YAAY,GAAG,YAAY,EACzE,YAAY,EAAE,eAAe,EAAE,kBAAkB,EAAE,YAAY,CAChE,CAAC;MACF,IAAM,UAAU,GAAG,sBAAsB,CACvC,eAAe,EAAE,CAAC,EAAE,YAAY,EAChC,YAAY,EAAE,CAAC,EAAE,kBAAkB,EAAE,KAAK,CAC3C,CAAC;MACF,IAAM,UAAU,GAAG,sBAAsB,CACvC,eAAe,EAAE,CAAC,EAAE,YAAY,EAChC,YAAY,EAAE,CAAC,EAAE,kBAAkB,EAAE,KAAK,CAC3C,CAAC;MACF,IAAM,OAAO,GAAG,mBAAmB,CACjC,YAAY,EAAE,YAAY,EAAE,cAAc,EAAE,cAAc,CAC3D,CAAC;;;MAIF,IAAI,MAAM,GAAG,QAAQ,CAAC;MACtB,IAAI,WAAW,KAAK,QAAQ,CAAC,GAAG,EAAE;UAChC,MAAM,yBAAQ,MAAM,KAAE,GAAG,EAAE,WAAW,GAAE,CAAC;OAC1C;MACD,IAAI,YAAY,KAAK,QAAQ,CAAC,IAAI,EAAE;UAClC,MAAM,yBAAQ,MAAM,KAAE,IAAI,EAAE,YAAY,GAAE,CAAC;OAC5C;MACD,IAAI,cAAc,KAAK,QAAQ,CAAC,KAAK,EAAE;UACrC,MAAM,yBAAQ,MAAM,KAAE,KAAK,EAAE,cAAc,GAAE,CAAC;OAC/C;MACD,IAAI,eAAe,KAAK,QAAQ,CAAC,MAAM,EAAE;UACvC,MAAM,yBAAQ,MAAM,KAAE,MAAM,EAAE,eAAe,GAAE,CAAC;OACjD;MACD,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE;UACrC,MAAM,yBAAQ,MAAM,KAAE,IAAI,MAAA,GAAE,CAAC;OAC9B;MACD,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,QAAQ,CAAC,UAAU,CAAC,EAAE;UACjD,MAAM,yBAAQ,MAAM,KAAE,UAAU,YAAA,GAAE,CAAC;OACpC;MACD,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,QAAQ,CAAC,UAAU,CAAC,EAAE;UACjD,MAAM,yBAAQ,MAAM,KAAE,UAAU,YAAA,GAAE,CAAC;OACpC;MACD,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,OAAO,EAAE,WAAW,CAAC,EAAE;UACxD,MAAM,yBAAQ,MAAM,KAAE,OAAO,SAAA,GAAE,CAAC;OACjC;MAED,OAAO,MAAM,CAAC;EAChB,CAAC,CAAC;MAEW,iBAAiB,GAA2B,UAAC,YAAY;MACpE,OAAO,YAAY,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,WAAW;UAClC,IAAA,yBAAK,CAAiB;UAC9B,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;cAC7B,IAAM,IAAI,GAAG,QAAQ,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;cACjC,IAAM,MAAI,GAAG,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,GAAG,KAAK,CAAC;cACjE,IAAM,WAAW,GAAGA,aAAW,CAAC,IAAI,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,KAAK,MAAI,GAAA,CAAC,CAAC;cACtE,IAAI,CAAC,WAAW,EAAE;kBAChB,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;eACtC;cACD,GAAG,CAAC,IAAI,uBAAM,WAAW,KAAE,KAAK,EAAE,IAAI,IAAG,CAAC;WAC3C;eAAM;cACL,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;WACvB;UACD,OAAO,GAAG,CAAC;OACZ,EAAE,EAAoB,CAAC,CAAC;EAC3B,CAAC,CAAC;MAEW,qBAAqB,GAA2B,UAAC,SAAS,EAAE,KAAK;MAC5E,OAAA,KAAK,GAAG,CAAC,CAAC,GAAG,SAAS,GAAG,KAAK,GAAG,SAAS;EAA1C,CAA0C,CAAC;MAEhC,YAAY,GAAsB,UAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,YAAY;MAC7F,IAAI,KAAK,KAAK,YAAY,EAAE;UAC1B,OAAO,CAAC,CAAC;OACV;MACD,IAAI,KAAK,KAAK,eAAe,EAAE;UAC7B,OAAO,SAAS,GAAG,SAAS,CAAC;OAC9B;MAED,IAAM,mBAAmB,GAAG,CAAC,YAAY,IAAI,KAAK,KAAK,SAAS,CAAC;MACjE,IAAM,SAAS,GAAG,mBAAmB;YACjC,IAAI,CAAC,SAAS,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,KAAK,KAAK,KAAK,GAAA,CAAC;YAC1C,SAAS,CAAC;MAEd,OAAO,qBAAqB,CAC1B,SAAS,EACT,SAAU,CACX,CAAC;EACJ,CAAC,CAAC;AAEF,MAAa,WAAW,GAAgB,UAAC,QAAQ,EAAE,aAAa,EAAE,YAAY;MAC5E,IAAM,eAAe,GAAG,QAAQ,IAAI,QAAQ,CAAC,IAAI,CAAC;MAClD,IAAM,WAAW,GAAG,aAAa,IAAI,aAAa,CAAC,MAAM,CAAC;MAC1D,IAAI,eAAe,IAAI,WAAW,IAAI,CAAC,YAAY,EAAE;UACnD,IAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;UAE/B,OAAO,KAAK,GAAG,aAAa,CAAC,MAAM,GAAG,aAAa,CAAC,KAAK,CAAC,CAAC,KAAK,GAAG,SAAS,CAAC;OAC9E;MAED,OAAO,SAAS,CAAC;EACnB,CAAC;;MC/HY,oBAAoB,GAA2B,UAAC,IAAI,EAAE,IAAI,EAAE,KAAK;MAC5E,IAAM,YAAY,GAAG,YAAY,CAAC,eAAe,CAAC,EAAE,IAAI,MAAA,EAAE,IAAI,MAAA,EAAE,CAAC,CAAC;MAClE,IAAM,aAAa,GAAG,YAAY,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;MAE1D,OAAO,SAAS,CAAC,YAAY,EAAE,aAAa,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;EACpF,CAAC,CAAC;MAEW,SAAS,GAAgB,UAAC,WAAW,EAAE,iBAAiB;MACnE,OAAO,WAAW,CAAC,IAAI,CAAC,MAAM,GAAG,iBAAiB;YAC9C,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,iBAAiB,CAAC;YAC5C,WAAW,CAAC,IAAI,CAAC;EACvB,CAAC,CAAC;MAEW,eAAe,GAAsB,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,IAAI,GAAA;;MCjBpE,UAAU,GAAG,UAAU,CAAC;AACrC,MAAa,oBAAoB,GAAG,GAAG;;MCU1B,YAAY,GAAG,UAAC,SAA0B,EAAE,OAAsB;MAC7E,IAAM,IAAI,GAAG,OAAO;WACjB,GAAG,CAAC,UAAC,EAAiB;cAAf,kBAAM,EAAE,gBAAK;UAAO,QAAC;cAC3B,KAAK,EAAE,CAAC,KAAe,IAAI,oBAAoB,IAAI,CAAC;cACpD,GAAG,EAAE,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,IAAI;WAClB;OAAC,CAAC,CAAC;MACN,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC;MAEjB,IAAA,2BAAO,CAAe;MAC9B,IAAI,OAAO,EAAE;UACX,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;OACtB;MAED,IAAM,SAAS,GAAG,OAAO,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,EAAgC;;cAA9B,cAA4B,EAA5B,4BAA4B,EAAlB,cAAI,EAAE,gBAAK;UAAc,8BACvE,GAAG,gBACL,IAAK,IAAG,KAAK;OACd,EAAE,EAAE,CAAC,CAAC;MACR,SAAS,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;MAE5B,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC;UACnB,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,CAAC,OAAQ,CAAC,MAAM;OACnD,CAAC,CAAC;EACL,CAAC,CAAC;MAEW,UAAU,GAAiB,UAAC,SAAS,EAAE,WAAW,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAW;MAAX,uBAAA,EAAA,WAAW;MAC3F,IAAI,KAAK,KAAK,QAAQ,EAAE;UACtB,IAAM,MAAM,GAAI,SAAS,CAAC,WAAW,CAAc,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,QAAQ,IAAK,iBACxE,GAAG,EAAK,UAAU,CAAC,SAAS,EAAE,QAAQ,EAAE,KAAK,GAAG,CAAC,EAAE,QAAQ,EAAE,MAAM,CAAC,KACzE,EAAE,EAAqB,CAAC,CAAC;UAC1B,gBAAW,MAAM,EAAK,MAAM,EAAE;OAC/B;MACD,gBAAW,MAAM,GAAE,SAAS,CAAC,WAAW,CAAa,GAAE;EACzD,CAAC,CAAC;AAEF,MAAa,UAAU,GAAiB,UACtC,SAAS,EAAE,OAAO,EAAE,WAAW,EAAE,OAAO,EAAE,UAAU,EAAE,aAAa,EACnE,UAAU,EAAE,YAAY,EAAE,aAAa,EAAE,aAAa;MAEtD,IAAI,YAAY,GAAG,CAAC,CAAC;MACrB,IAAI,UAAU,GAAU,EAAE,CAAC;MAC3B,IAAM,UAAU,GAAG,aAAa,CAAC,UAAU,CAAC,CAAC;MAE7C,OAAO,CAAC,OAAO,CAAC,UAAC,GAAG;;;UAClB,IAAI,QAAQ,CAAC;UAEb,IAAI,UAAU,IAAI,UAAU,CAAC,GAAG,CAAC,EAAE;cACjC,YAAY,GAAG,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;;cAG5C,UAAU,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;cAE7D,UAAU,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC;cAC/C,UAAU,CAAC,YAAY,CAAC,GAAG,EAAE,SAAS,EAAE,GAAG,CAAC,SAAS,EAAE,WAAW,EAAE,GAAG,CAAC,WAAW,EAAE,CAAC;;cAGtF,IAAM,KAAK,SAAG,WAAW,CAAC,IAAI,CAAC,UAAC,EAAQ;sBAAN,cAAI;kBAAO,OAAA,IAAI,KAAK,GAAG,CAAC,SAAS;eAAA,CAAC,0CAAE,KAAK,CAAC;cAC5E,QAAQ,aAAK,GAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAO,CAAC,IAAI,IAAM,KAAK,UAAK,GAAG,CAAC,KAAO,KAAE,CAAC;cAEnE,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;cAC3B,IAAM,SAAS,GAAG,SAAS,CAAC,OAAQ,CAAC,MAAM,CAAC;;cAG5C,SAAS,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,EAAE,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;cAC9D,SAAS,CAAC,OAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;cAEpD,IAAI,YAAY,GAAG,CAAC,EAAE;kBACpB,SAAS,CAAC,OAAQ,CAAC,YAAY,GAAG,YAAY,CAAC;eAChD;cACD,YAAY,IAAI,CAAC,CAAC;WACnB;eAAM;cACL,QAAQ,GAAG,OAAO,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,EAAU;;sBAAR,kBAAM;kBAAO,8BAC1C,GAAG,IACF,MAAM,aAAK,GAAC,MAAM,CAAC,IAAI,IAAG,YAAY,CAAC,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,QAAK,IAAI;eACrE,EAAE,EAAE,CAAC,CAAC;cACR,SAAS,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;cAC3B,SAAS,CAAC,OAAQ,CAAC,YAAY,GAAG,YAAY,CAAC;WAChD;UAED,SAAS,CAAC,OAAQ,CAAC,QAAQ,CAAC,UAAC,IAAI,EAAE,SAAS;cAC1C,aAAa,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,MAAO,CAAC,CAAC;WAC1D,CAAC,CAAC;OACJ,CAAC,CAAC;MAEH,UAAU,CAAC,OAAO,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;EAC3C,CAAC,CAAC;MAEW,UAAU,GAAiB,UACtC,SAAS,EAAE,SAAS,EAAE,aAAa,EAAE,UAAU,EAAE,iBAAiB,EAAE,aAAa;MAEjF,kBAAkB,CAChB,SAAS,EAAE,SAAS,EAAE,iBAAiB,EAAE,UAAU,EAAE,CAAC,CAAC,EACvD,UAAU,EAAE,aAAa,EAAE,aAAa,CACzC,CAAC;EACJ,CAAC,CAAC;MAEW,eAAe,GAAuC,UAAC,MAAM,EAAE,MAAM,IAAK,QACrF,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,CAAE,KAAK,GAAG,MAAM,GAAA,CAAC,GAAA,CAAC,IAC1D,CAAC;MAEW,kBAAkB,GAAyB,UACtD,SAAS,EAAE,SAAS,EAAE,YAAY,EAAE,QAAQ,EAAE,UAAU,EACxD,UAAU,EAAE,aAAa,EAAE,aAAa;MAExC,IAAI,CAAC,YAAY;UAAE,OAAO;MAE1B,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;MAErB,IAAM,MAAM,GAAG,eAAe,CAC5B,UAAU,CAAC,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,aAAa,CAAC,EAC1D,UAAU,CACX,CAAC;MAEF,YAAY,CAAC,OAAO,CAAC,UAAC,CAAC;UACrB,aAAa,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;OAC1B,CAAC,CAAC;EACL,CAAC,CAAC;AAEF,MAAa,iBAAiB,GAAwB,UAAC,IAAI,EAAE,QAAQ,EAAE,UAAU;MAC/E,IAAI,CAAC,QAAQ;UAAE,OAAO,IAAI,CAAC;MAE3B,IAAM,eAAe,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAC,EAAc;cAAZ,0BAAU;UAAO,OAAA,UAAU;OAAA,CAAC,CAAC;MACrE,IAAM,MAAM,GAAU,EAAE,CAAC;MACzB,IAAI,UAAU,GAAU,EAAE,CAAC;MAE3B,IAAI,CAAC,OAAO,CAAC,UAAC,GAAG;UACf,IAAI,UAAU,CAAC,GAAG,CAAC,EAAE;cACnB,IAAM,KAAK,GAAG,eAAe,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;cACrD,IAAI,KAAK,KAAK,UAAU,CAAC,MAAM,EAAE;kBAC/B,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;eACtB;mBAAM;kBACL,UAAU,YAAO,UAAU,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,GAAE,GAAG,EAAC,CAAC;eACnD;WACF;eAAM;cACL,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;kBACzB,MAAM,CAAC,IAAI,OAAX,MAAM,WAAS,UAAU,GAAE;kBAC3B,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,MAAM,EAAE,CAAC,CAAC;eACxD;cACD,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;WAClB;OACF,CAAC,CAAC;MAEH,OAAO,MAAM,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,CAAC,CAAC,GAAG,GAAA,CAAC,CAAC;EACrC,CAAC;;MChJY,kBAAkB,GAAoB,UAAA,QAAQ,IAAI,QAC7D,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,CAAC,UAAC,GAAG,EAAE,EAAc,EAAE,KAAK;;UAAnB,0BAAU;MAAc,8BAC5C,GAAG,gBACL,UAAU,IAAG,KAAK;EAF4B,CAG/C,EAAE,EAAE,MAAK,EAAE,IACd,CAAC;EAEF,IAAM,kBAAkB,GAAyB,UAAC,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU;MACrF,IAAM,YAAY,GAAG,IAAI,GAAG,CAAQ,SAAS,CAAC,CAAC;MAC/C,OAAO,IAAI,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,CACxB,UAAU,IAAI,UAAU,CAAC,GAAG,CAAC,KAAK,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAA,CAClE,CAAC;EACJ,CAAC,CAAC;MAEW,YAAY,GAAsB,UAC7C,IAAI,EAAE,SAAS,EAAE,QAAQ,EAAE,gBAAgB,EAAE,QAAQ,EAAE,UAAU;MAEjE,IAAM,UAAU,GAA0B,UAAA,aAAa,IAAI,QACzD,aAAa,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG,IAAK,iBAC7B,GAAG,GAAE,GAAG,IAAM,UAAU,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,MAC1D,EAAE,EAAE,CAAC,IACP,CAAC;MAEF,IAAM,YAAY,GAAG,gBAAgB,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;MAEhE,IAAI,CAAC,SAAS,EAAE;UACd,OAAO,YAAY,CAAC;OACrB;MAED,IAAM,YAAY,GAAG,kBAAkB,CAAC,YAAY,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;MACvF,OAAO,iBAAiB,CAAC,YAAY,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;EAC/D,CAAC,CAAC;MAEW,cAAc,GAAqB,UAC9C,IAAI,EAAE,aAAa,EAAE,QAAQ,EAAE,UAAU,EAAE,iBAAiB;;MAE5D,IAAM,SAAS,aAAK,GAAC,UAAU,IAAG,EAAW,KAAE,CAAC;MAEhD,IAAI,EAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,CAAA,EAAE;UACrB,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;UAC7C,OAAO,SAAS,CAAC;OAClB;MAED,IAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;MACvD,IAAM,kBAAkB,GAAG,CAAC,CAAC,iBAAiB,CAAC;MAC/C,IAAM,WAAW,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;MACzC,IAAI,aAAa,GAAG,CAAC,CAAC;MACtB,IAAI,SAAS,GAAG,EAAE,CAAC;MACnB,IAAI,KAAK,GAAG,CAAC,CAAC;MACd,IAAI,KAAK,GAAG,CAAC,CAAC;MACd,IAAI,SAAS,GAAG,CAAC,CAAC;MAElB,IAAI,CAAC,OAAO,CAAC,UAAC,GAAG;UACP,IAAA,yBAAS,EAAE,6BAAW,CAAS;UACvC,IAAI,UAAU,CAAC,GAAG,CAAC,EAAE;cACnB,KAAK,GAAG,aAAa,CAAC,SAAS,CAAC,CAAC;cACjC,SAAS,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;cAC5B,WAAW,CAAC,KAAK,CAAC,GAAG,WAAW,CAAC;cACjC,IAAI,KAAK,IAAI,QAAQ,EAAE;kBACrB,SAAS,CAAC,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;eACrD;cACD,IAAI,KAAK,KAAK,QAAQ,EAAE;kBACtB,IAAI,SAAS,EAAE;;sBAEb,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;mBAC1C;kBACD,SAAS,GAAG,WAAW,CAAC;kBACxB,IAAI,kBAAkB,IAAI,aAAa,GAAG,CAAC,EAAE;sBAC3C,KAAK,IAAI,CAAC,CAAC;mBACZ;kBACD,SAAS,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;eACxC;mBAAM,IAAI,kBAAkB,IAAI,KAAK,GAAG,SAAS,EAAE;;kBAElD,KAAK,IAAI,QAAQ,GAAG,KAAK,CAAC;eAC3B;cACD,SAAS,GAAG,KAAK,CAAC;WACnB;eAAM;cACL,aAAa,GAAG,KAAK,CAAC;WACvB;UACD,KAAK,IAAI,CAAC,CAAC;OACZ,CAAC,CAAC;MAEH,IAAI,SAAS,EAAE;UACb,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;OAC1C;MAED,OAAO,SAAS,CAAC;EACnB,CAAC,CAAC;EAEF,IAAM,UAAU,GAAG;MACjB,KAAK,EAAE,QAAQ;GAChB,CAAC;MACW,mBAAmB,GAAuB,UACrD,SAAS,EAAE,YAAY,EAAE,oBAAoB,EAAE,sBAAsB,IAClE,OAAA,UACH,EAAoB,EAAE,MAAM;UAA1B,0BAAU,EAAE,cAAI;MAEV,IAAA;;;sBAAM,CAEL;;MAET,IAAI,CAAC,MAAM,EAAE;UACX,OAAO;OACR;MAED,IAAM,GAAG,GAAG,SAAS,CAAC,OAAQ,CAAC;MAC/B,IAAM,MAAM,GAAG,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC;MACtD,IAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;MACzD,IAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,QACpC,KAAK;WACF,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,KAAG,MAAM,GAAG,CAAG,GAAA,CAAC;WACzB,MAAM,CAAC,UAAC,GAAG,EAAE,KAAK,EAAE,GAAG,IAAK,OAAA,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,KAAK,GAAA,CAAC;WACvD,IAAI,CAAC,GAAG,CAAC,IACb,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;MAEb,IAAM,IAAI,GAAG,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;MACrC,IAAI,CAAC,KAAK,GAAG;UACX,OAAO,EAAK,SAAS,SAAI,SAAS,MAAG;UACrC,QAAQ,EAAE,KAAK;OAChB,CAAC;MACF,IAAI,CAAC,MAAM,GAAG,OAAI,sBAAsB,CAAC,IAAI,CAAC,UAAM,CAAC;MAErD,IAAM,OAAO,GAAG;UACd,IAAI,MAAA;UACJ,MAAM,QAAA;OACP,CAAC;MACF,oBAAoB,CAAC,IAAI,EAAE,MAAO,EAAE,OAAO,CAAC,CAAC;EAC/C,CAAC,GAAA,CAAC;AAEF,MAAa,gBAAgB,GAAoB,UAC/C,SAAS,EAAE,SAAS,EAAE,aAAa,EAAE,aAAa,EAAE,iBAAiB,EAAE,aAAa,IACjF,OAAA,UAAA,UAAU,IAAI,OAAA,UAAC,KAAK;MACf,IAAA,2BAAS,EAAE,+BAAW,CAAW;MAEzC,kBAAkB,CAChB,SAAS,EAAE,SAAS,EAAE,iBAAiB,EAAE,WAAW,EAAE,aAAa,CAAC,SAAS,CAAC,EAC9E,UAAU,EAAE,aAAa,EAAE,aAAa,CACzC,CAAC;EACJ,CAAC,GAAA,GAAA,CAAC;MAEW,iBAAiB,GAAuC,UAAA,QAAQ,IAAI,QAC/E,CAAC,QAAQ,IAAI,EAAE,EAAE,MAAM,GAAG,CAAC,IAC5B;;MCvIY,eAAe,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;AAE9C,EAAO,IAAM,2BAA2B,GAAkC,UACxE,eAAe,EAAE,KAAK,IACnB,OAAA,KAAK,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,IAAI,EAAE,KAAK;MACjC,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,GAAG,eAAe,CAAC,CAAC,CAAC,IAAI,KAAK,GAAG,eAAe,CAAC,CAAC,CAAC,CAAC,EAAE;UAC5E,GAAG,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC;OAC1B;MACD,OAAO,GAAG,CAAC;EACb,CAAC,EAAE,CAAC,eAAe,CAAsB,CAAC,GAAA,CAAC;AAE3C,EAAO,IAAM,kBAAkB,GAAyB,UACtD,KAAK,EAAE,aAAa,EAAE,YAAY,EAAE,WAAW,EAAE,MAAU,EAAE,QAAY;MAAxB,uBAAA,EAAA,UAAU;MAAE,yBAAA,EAAA,YAAY;MAEzE,IAAI,KAAK,GAAkB,IAAI,CAAC;MAChC,IAAI,GAAG,GAAkB,IAAI,CAAC;MAC9B,IAAI,KAAK,GAAG,CAAC,CAAC;MACd,IAAI,cAAc,GAAG,MAAM,GAAG,QAAQ,CAAC;MAEvC,IAAM,WAAW,GAAG,aAAa,GAAG,YAAY,CAAC;MACjD,OAAO,GAAG,KAAK,IAAI,IAAI,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE;UAC3C,IAAM,IAAI,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;UAC1B,IAAM,aAAa,GAAG,cAAc,GAAG,WAAW,CAAC,IAAI,CAAE,CAAC;UAC1D,IAAM,SAAS,GAAG,CAAC,cAAc,IAAI,aAAa,IAAI,cAAc,GAAG,WAAW;kBAC5E,aAAa,GAAG,aAAa,IAAI,aAAa,IAAI,WAAW,CAAC;kBAC9D,cAAc,GAAG,aAAa,IAAI,aAAa,GAAG,WAAW,CAAC,CAAC;UACrE,IAAI,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;cAC/B,KAAK,GAAG,KAAK,CAAC;WACf;UACD,IAAI,CAAC,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;cAChC,GAAG,GAAG,KAAK,GAAG,CAAC,CAAC;cAChB,MAAM;WACP;UACD,KAAK,IAAI,CAAC,CAAC;UACX,cAAc,GAAG,aAAa,CAAC;OAChC;MACD,IAAI,KAAK,KAAK,IAAI,IAAI,GAAG,KAAK,IAAI,EAAE;UAClC,GAAG,GAAG,KAAK,GAAG,CAAC,CAAC;OACjB;MAED,KAAK,GAAG,KAAK,KAAK,IAAI,GAAG,CAAC,GAAG,KAAK,CAAC;MACnC,GAAG,GAAG,GAAG,KAAK,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC;MAE7B,OAAO,CAAC,KAAK,GAAG,MAAM,EAAE,GAAG,GAAG,MAAM,CAAC,CAAC;EACxC,CAAC,CAAC;AAEF,EAAO,IAAM,iBAAiB,GAAwB,UAAC,UAAU,EAAE,eAAe,EAAE,QAAQ;MACtF,IAAA,+BAA8B,EAA7B,aAAK,EAAE,WAAsB,CAAC;MACnC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,GAAG,QAAQ,CAAC,CAAC;MACtC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,CAAC,EAAE,GAAG,GAAG,QAAQ,CAAC,CAAC;MAE/C,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;EACtB,CAAC,CAAC;MAEW,mBAAmB,GAE5B,UAAC,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,cAAc,IAAK,QAC5C,2BAA2B,CACzB,wBAAwB,CACtB,OAAO,CAAC,MAAM,EACd,kBAAkB,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,CAAC,CAC5D,EACD,OAAO,CACR,IACF,CAAC;MACW,sBAAsB,GAA6B,UAC9D,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,SAAS,EAAE,YAAY;MAEhE,IAAM,cAAc,GAAG,MAAM,GAAG,SAAS,CAAC;MAC1C,IAAM,mBAAmB,GAAG,SAAS,GAAG,CAAC;UACvC,cAAc,GAAG,IAAI,CAAC,MAAM,GAAG,SAAS,GAAG,GAAG;UAC9C,GAAG,GAAG,cAAc,CAAC;MAEvB,IAAI,UAAU,CAAC;MACf,IAAI,YAAY,IAAI,mBAAmB,EAAE;UACvC,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,SAAS,CAAC,CAAC;UAC7C,UAAU,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;OACnC;WAAM;UACL,UAAU,GAAG,kBAAkB,CAAC,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;OACrF;MAED,OAAO,UAAU,CAAC;EACpB,CAAC,CAAC;AAEF,MAAa,wBAAwB,GAAgC,UACnE,WAAW,EAAE,eAAe,IACzB,OAAA,iBAAiB,CAAC,WAAW,EAAE,eAAe,EAAE,CAAC,CAAC,GAAA,CAAC;AAExD,MAAa,qBAAqB,GAAgC,UAChE,SAAS,EAAE,eAAe,IACvB,OAAA,iBAAiB,CAAC,SAAS,EAAE,eAAe,EAAE,CAAC,CAAC,GAAA,CAAC;AAEtD,EAAO,IAAM,eAAe,GAAsB,UAChD,KAAK,EAAE,iBAAiB,EAAE,WAAW,IAClC,OAAA,iBAAiB;OACnB,GAAG,CAAC,UAAC,eAAe;MACnB,IAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;MAChE,IAAI,GAAG,GAAG,QAAQ,CAAC;MACnB,IAAI,KAAK,GAAG,eAAe,CAAC,CAAC,CAAC,IAAI,GAAG,GAAG,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAE/D,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,IAAI,QAAQ,EAAE,KAAK,IAAI,CAAC,EAAE;UACjD,IAAM,IAAI,GAAG,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;UACvC,IAAI,KAAK,GAAG,eAAe,CAAC,CAAC,CAAC,IAAI,KAAK,GAAG,IAAI,GAAG,eAAe,CAAC,CAAC,CAAC,EAAE;cACnE,KAAK,GAAG,KAAK,CAAC;WACf;UACD,IAAI,KAAK,IAAI,IAAI,GAAG,CAAC,CAAC,GAAG,eAAe,CAAC,CAAC,CAAC,EAAE;cAC3C,GAAG,GAAG,KAAK,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC;WAC1B;OACF;MACD,OAAO,CAAC,KAAK,EAAE,GAAG,CAAoB,CAAC;EACzC,CAAC,CAAC,GAAA,CAAC;AAEL,EAAO,IAAM,kBAAkB,GAAyB,UACtD,UAAU,EAAE,iBAAiB,EAAE,cAAc;MAE7C,IAAM,WAAW,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;MAC7C,cAAc,CAAC,OAAO,CAAC,UAAA,aAAa,IAAI,OAAA,aAAa;WAClD,OAAO,CAAC,UAAC,QAAQ;UAChB,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;UAE7B,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;OACxD,CAAC,GAAA,CAAC,CAAC;MAEN,iBAAiB;WACd,MAAM,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,KAAK,CAAC,UAAA,KAAK,IAAI,OAAA,CAAC,IAAI,KAAK,IAAI,KAAK,GAAG,UAAU,GAAA,CAAC,GAAA,CAAC;WAC7E,OAAO,CAAC,UAAC,QAAQ;UAChB,KAAK,IAAI,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,QAAQ,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE;cAC9D,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;WACxB;UACD,IAAI,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,UAAU,EAAE;;cAEhC,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;WAClC;OACF,CAAC,CAAC;MAEL,IAAM,EAAE,GAAG,SAAI,WAAW,EAAE,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,GAAG,CAAC,GAAA,CAAC,CAAC;MAClD,IAAM,MAAM,GAAU,EAAE,CAAC;MACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;UACzC,MAAM,CAAC,IAAI,CAAC;cACV,EAAE,CAAC,CAAC,CAAC;cACL,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;WACd,CAAC,CAAC;OACJ;MAED,OAAO,MAAM,CAAC;EAChB,CAAC,CAAC;EAEF,IAAM,cAAc,GAAqB,UAAC,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,aAAa;MACpF,IAAI,IAAI,GAAG,CAAC,CAAC;MACb,KAAK,IAAI,CAAC,GAAG,UAAU,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC,IAAI,CAAC,EAAE;UAC9C,IAAI,IAAI,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC;OAC3C;MACD,OAAO,IAAI,CAAC;EACd,CAAC,CAAC;AAEF,EAAO,IAAM,mBAAmB,GAA0B,UACxD,OAAO,EAAE,iBAAiB,EAAE,UAAU,EAAE,cAAc;MAEtD,IAAM,gBAAgB,GAAsB,EAAE,CAAC;MAC/C,UAAU,CAAC,OAAO,CAAC,UAAC,QAAQ;UAC1B,IAAM,SAAS,GAAG,iBAAiB,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,eAAe,IAAK,QACnE,GAAG,KAAK,eAAe,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,eAAe,CAAC,CAAC,CAAC,CAAC,IAChF,EAAE,KAAK,CAAC,CAAC;UAEV,IAAI,SAAS,EAAE;cACb,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;cACpC,gBAAgB,CAAC,IAAI,uBAChB,MAAM,KACT,KAAK,EAAE,cAAc,CAAC,MAAM,CAAW,IACvC,CAAC;WACJ;eAAM;cACL,gBAAgB,CAAC,IAAI,CAAC;kBACpB,GAAG,EAAK,eAAe,CAAC,QAAQ,EAAE,SAAI,QAAQ,CAAC,CAAC,CAAC,SAAI,QAAQ,CAAC,CAAC,CAAG;kBAClE,IAAI,EAAE,eAAe;kBACrB,KAAK,EAAE,cAAc,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,cAAc,CAAC;eACzE,CAAC,CAAC;WACJ;OACF,CAAC,CAAC;MACH,OAAO,gBAAgB,CAAC;EAC1B,CAAC,CAAC;AAEF,EAAO,IAAM,gBAAgB,GAA8B,UACzD,IAAI,EAAE,eAAe,EAAE,UAAU,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM;MAEjE,IAAM,aAAa,GAAU,EAAE,CAAC;MAChC,UAAU,CAAC,OAAO,CAAC,UAAC,QAAQ;UAC1B,IAAM,SAAS,GAAG,eAAe,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,eAAe,CAAC,CAAC,CAAC,CAAC;UACzF,IAAI,SAAS,EAAE;cACb,IAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;cACvC,aAAa,CAAC,IAAI,CAAC;kBACjB,GAAG,KAAA;kBACH,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAC;eACrB,CAAC,CAAC;WACJ;eAAM;cACL,IAAM,GAAG,GAAG,EAAS,CAAC;cACtB,aAAa,CAAC,IAAI,CAAC;kBACjB,GAAG,EAAE;sBACH,GAAG,EAAK,eAAe,CAAC,QAAQ,EAAE,SAAI,QAAQ,CAAC,CAAC,CAAC,SAAI,QAAQ,CAAC,CAAC,CAAG;sBAClE,IAAI,EAAE,eAAe;sBACrB,MAAM,EAAE,cAAc,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC;mBACrE;kBACD,KAAK,EAAE,QAAQ,CAAC,GAAG,CAAC;eACrB,CAAC,CAAC;WACJ;OACF,CAAC,CAAC;MACH,OAAO,aAAa,CAAC;EACvB,CAAC,CAAC;AAEF,EAAO,IAAM,iBAAiB,GAAwB,UACpD,OAAO,EAAE,cAAc,EAAE,UAAU,EAAE,UAAU;MAE/C,IAAM,cAAc,GAAoB,EAAE,CAAC;MAC3C,IAAI,KAAK,GAAG,CAAC,CAAC;;UAEZ,IAAM,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC,CAAC;UACnC,IAAM,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,YAAY,IAAK,QAC1D,GAAG,KAAK,YAAY,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,IAAC,EAAE,KAAK,CAAC,CAAC;UACrF,IAAI,MAAM,EAAE;cACV,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;cACpC,IAAM,WAAW,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;cACvC,IAAM,gBAAc,GAAG,CAAC,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;cACvD,IAAM,UAAU,GAAG,UAAU,CAAC,SAAS,CACrC,UAAA,eAAe,IAAI,OAAA,eAAe,CAAC,CAAC,CAAC;qBAClC,gBAAc,IAAI,gBAAc;qBAChC,eAAe,CAAC,CAAC,CAAC,GAAA,CACtB,CAAC;cACF,cAAc,CAAC,IAAI,CAAC;kBAClB,MAAM,QAAA;kBACN,OAAO,EAAE,CAAC,UAAU,GAAG,KAAK,IAAI,CAAC;eAClC,CAAC,CAAC;cACH,KAAK,IAAI,CAAC,CAAC;WACZ;eAAM;cACL,cAAc,CAAC,IAAI,CAAC;kBAClB,MAAM,EAAE;sBACN,GAAG,EAAK,eAAe,CAAC,QAAQ,EAAE,SAAI,QAAQ,CAAC,CAAC,CAAC,SAAI,QAAQ,CAAC,CAAC,CAAG;sBAClE,IAAI,EAAE,eAAe;mBACtB;kBACD,OAAO,EAAE,CAAC;eACX,CAAC,CAAC;cACH,KAAK,IAAI,CAAC,CAAC;WACZ;;MA3BH,OAAO,KAAK,GAAG,UAAU,CAAC,MAAM;;OA4B/B;MACD,OAAO,cAAc,CAAC;EACxB,CAAC,CAAC;MAEW,gBAAgB,GAAuB,UAAC,EAUpD;UATC,cAAI,EACJ,oBAAO,EACP,4CAAmB,EACnB,kDAAsB,EACtB,sBAA8C,EAA9C,gFAA8C,EAC9C,oBAAuC,EAAvC,yEAAuC,EACvC,kBAAoB,EAApB,2DAAoB,EACpB,gCAAa,EACb,kBAAM;MAEN,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;UACnB,OAAO;cACL,OAAO,EAAE,EAAE;cACX,IAAI,EAAE,EAAE;WACT,CAAC;OACH;MAED,IAAM,UAAU,GAAG,mBAAmB,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;MAEpE,IAAM,iBAAiB,GAAG,IAAI;WAC3B,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;WACnC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,eAAe,CACzB,OAAO,EACP,sBAAsB,EACtB,UAAA,MAAM,IAAI,OAAA,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,GAAA,CAClC,GAAA,CAAC,CAAC;MACL,IAAM,gBAAgB,GAAG,kBAAkB,CACzC,OAAO,CAAC,MAAM,EACd,sBAAsB,EACtB,iBAAiB,CAClB,CAAC;MAEF,IAAM,aAAa,GAAG,kBAAkB,CAAC,aAAc,EAAE,CAAC,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC;MAE3E,OAAO;UACL,OAAO,EAAE,mBAAmB,CAC1B,OAAO,EACP,sBAAsB,EACtB,gBAAgB,EAChB,cAAc,CACf;UACD,IAAI,EAAE,gBAAgB,CACpB,IAAI,EACJ,UAAU,EACV,aAAa,EACb,YAAY,EACZ,UAAA,GAAG,IAAI,OAAA,iBAAiB,CACtB,OAAO,EACP,eAAe,CACb,OAAO,EACP,sBAAsB,EACtB,UAAA,MAAM,IAAI,OAAA,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,GAAA,CAClC,EACD,gBAAgB,EAChB,UAAA,MAAM,IAAI,OAAA,UAAU,CAAC,GAAG,EAAE,MAAM,CAAC,GAAA,CAClC,GAAA,EACD,MAAM,CACP;OACF,CAAC;EACJ,CAAC,CAAC;AAEF,MAAa,oBAAoB,GAA2B,UAC1D,YAAY,EAAE,UAAU,EAAE,cAAc;MAExC,IAAM,eAAe,GAAG,YAAY,CAAC,MAAM,CAAC,UAAA,GAAG,IAAI,OAAA,OAAO,GAAG,CAAC,KAAK,KAAK,QAAQ,GAAA,CAAC,CAAC;MAClF,IAAM,YAAY,GAAG,eAAe,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,GAAG,IAAK,QAAC,GAAG,GAAI,GAAG,CAAC,KAAiB,IAAC,EAAE,CAAC,CAAC,CAAC;MAC7F,IAAM,SAAS,GAAG,CAAC,UAAU,GAAG,YAAY,KAAK,YAAY,CAAC,MAAM,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC;MAC/F,IAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,cAAe,CAAC,CAAC;MAE1D,OAAO,UAAA,MAAM,IAAI,QAAC,MAAM,CAAC,IAAI,KAAK,eAAe;YAC7C,IAAI;YACJ,OAAO,MAAM,CAAC,KAAK,KAAK,QAAQ,GAAG,MAAM,CAAC,KAAK,GAAG,YAAY,IAAC,CAAC;EACtE,CAAC,CAAC;MAEW,iBAAiB,GAAwB,UAAC,EAWpD;UAVC,kBAAe,EAAf,oCAAe,EACf,gBAAa,EAAb,kCAAa,EACb,kBAAe,EAAf,oCAAe,EACf,oBAAO,EACP,oCAAe,EACf,gCAAa,EACb,kCAAc,EACd,sBAAQ,EACR,8BAAY,EACZ,kCAAc;MAGhB,IAAM,UAAU,GAAG,UACjB,QAAa,EAAE,WAAgB,IAC5B,OAAA,cAAe,CAAC,EAAE,QAAQ,UAAA,EAAE,WAAW,aAAA,EAAE,YAAY,EAAE,OAAO,EAAE,CAAC,GAAA,CAAC;MAEvE,IAAM,qBAAqB,GAEvB,UACF,IAAI,EAAE,mBAAmB,EAAE,QAAsB,EAAE,MAAU;UAAlC,yBAAA,EAAA,WAAW,IAAI,CAAC,MAAM;UAAE,uBAAA,EAAA,UAAU;UAC1D,OAAA,gBAAgB,CAAC;cACpB,IAAI,MAAA;cACJ,OAAO,SAAA;cACP,mBAAmB,qBAAA;cACnB,sBAAsB,EAAE,QAAQ,CAAC,OAAO;cACxC,cAAc,gBAAA;cACd,YAAY,cAAA;cACZ,UAAU,YAAA;cACV,aAAa,EAAE,QAAQ;cACvB,MAAM,QAAA;WACP,CAAC;OAAA,CAAC;MAEH,IAAM,UAAU,GAAG,qBAAqB,CACtC,UAAU,EAAE,kBAAkB,CAAC,QAAQ,CAAC,UAAU,EAAE,UAAU,CAAC,MAAM,CAAC,CACvE,CAAC;MACF,IAAM,QAAQ,GAAG,qBAAqB,CACpC,QAAQ,EACR,uBAAuB,CACrB,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,MAAM,EAAE,eAAe,CAChD,EACD,aAAa,IAAI,CAAC,EAClB,eAAe,CAChB,CAAC;MACF,IAAM,UAAU,GAAG,qBAAqB,CACtC,UAAU,EAAE,kBAAkB,CAAC,QAAQ,CAAC,UAAU,EAAE,UAAU,CAAC,MAAM,CAAC,CACvE,CAAC;MAEF,OAAO;UACL,UAAU,YAAA;UACV,QAAQ,UAAA;UACR,UAAU,YAAA;OACX,CAAC;EACJ,CAAC,CAAC;EAEF,IAAM,kBAAkB,GAAsD,UAC5E,aAAa,EAAE,QAAQ,IACpB,OAAA,qBAAqB,CACxB,QAAQ,EACR,aAAa,CACd,GAAA,CAAC;EAEF,IAAM,uBAAuB,GAA8D,UACzF,aAAa,EAAE,QAAQ,EAAE,eAAe;MAExC,IAAM,mBAAmB,GAAG,kBAAkB,CAC5C,aAAa,EAAE,eAAe,GAAG,QAAQ,CAC1C,CAAC;MACF,IAAM,gBAAgB,GAAG,YAAY,CAAC,SAAS,CAC7C,EAAE,KAAK,EAAE,mBAAmB,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,mBAAmB,CAAC,CAAC,CAAC,EAAE,EAC9D,EAAE,KAAK,EAAE,eAAe,EAAE,GAAG,EAAE,eAAe,GAAG,QAAQ,EAAE,CAC5D,CAAC;MACF,OAAO,CAAC,gBAAgB,CAAC,KAAK,EAAE,gBAAgB,CAAC,GAAG,CAAC,CAAC;EACxD,CAAC,CAAC;;EClZF,IAAM,qBAAqB,GAAoD,UAC7E,QAAQ,EAAE,WAAW,IAClB,OAAA,QAAQ,CAAC,SAAS,CACrB,UAAA,cAAc,IAAI,OAAA,CAAC,CAAC,WAAW,CAAC,MAAM,IAAI,cAAc,CAAC,UAAU,KAAK,WAAW,CAAC,MAAM,CAAC,IAAI,GAAA,CAChG,GAAA,CAAC;EAEF,IAAM,YAAY,GAAwB,UACtC,QAAQ,EACR,WAAW,EACX,QAAQ;MAEV,IAAI,WAAW,CAAC,MAAM,IAAI,QAAQ,CAAC,GAAG,CAAC,SAAS,KAAK,WAAW,CAAC,MAAM,CAAC,IAAI;UAAE,OAAO,KAAK,CAAC;MAC3F,IAAM,aAAa,GAAG,QAAQ,CAAC,SAAS,CACtC,UAAA,cAAc,IAAI,OAAA,cAAc,CAAC,UAAU,KAAK,QAAQ,CAAC,GAAG,CAAC,SAAS,GAAA,CACvE,CAAC;MACF,IAAM,gBAAgB,GAAG,qBAAqB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;MAEtE,OAAO,gBAAgB,GAAG,aAAa,CAAC;EAC1C,CAAC,CAAC;AAEF,MAAa,gBAAgB,GAAqB,UAChD,QAAQ,EAAE,WAAW,IAClB,OAAA,CAAC,EAAE,QAAQ,CAAC,IAAI,KAAK,gBAAgB,IAAI,WAAW,CAAC,IAAI,KAAK,gBAAgB;SAC9E,WAAW,CAAC,MAAM;SAClB,WAAW,CAAC,MAAM,CAAC,IAAI,KAAK,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,GAAA,CAAC;AAEzD,MAAa,sBAAsB,GAAwB,UACzD,QAAQ,EAAE,WAAW,EAAE,QAAQ,IAC5B,QACH,QAAQ,CAAC,IAAI,KAAK,gBAAgB,IAAI,WAAW,CAAC,IAAI,KAAK,gBAAgB;MAC3E,YAAY,CAAC,QAAQ,EAAE,WAAW,EAAE,QAAQ,CAAC,IAC9C,CAAC;AAEF,MAAa,0BAA0B,GAAwB,UAC7D,QAAQ,EAAE,WAAW,EAAE,QAAQ,IAC5B,SACF,QAAQ,CAAC,IAAI,KAAK,gBAAgB,IAAI,WAAW,CAAC,IAAI,KAAK,eAAe;MACzE,YAAY,CAAC,QAAQ,EAAE,WAAW,EAAE,QAAQ,CAAC,KAChD,CAAC;MAEW,eAAe,GAAG,UAAC,QAAkB,IAAK,OAAA,QAAQ,CAAC,IAAI,KAAK,gBAAgB,GAAA,CAAC;AAE1F,MAAa,sBAAsB,GAAqB,UAAC,QAAQ,EAAE,WAAW,IAAK,QACjF,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,WAAW,CAAC,IACtE,CAAC;EAEF,IAAM,wBAAwB,GAA6D,UACzF,WAAW,EAAE,iBAAiB,IAC3B,QACH,CAAC,EAAE,iBAAiB,IAAI,iBAAiB;OACtC,IAAI,CAAC,UAAA,IAAI,IAAI,QACZ,CAAC,CAAC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,aAAa;SACzC,IAAI,CAAC,UAAU,MAAM,WAAW,CAAC,MAAM,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,IACzE,CAAC,CAAC,IACN,CAAC;MAEW,gBAAgB,GAEzB,UACF,QAAQ,EAAE,WAAW,EAAE,QAAQ,EAAE,iBAAiB,IAC/C,QACH,wBAAwB,CAAC,WAAW,EAAE,iBAAiB,CAAC;SACrD,CAAC,sBAAsB,CAAC,QAAQ,EAAE,WAAW,EAAE,QAAQ,CAAC,IAC5D,CAAC;MAEW,4BAA4B,GAErC,UACF,QAAQ,EAAE,WAAW,EAAE,YAAY,EAAE,QAAQ,EAAE,iBAAiB;MAEhE,IAAM,WAAW,GAAG,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;MACtD,OAAO,WAAW,GAAG,CAAC,IAAI,gBAAgB,CACxC,QAAQ,EAAE,YAAY,CAAC,WAAW,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,iBAAiB,CACrE,CAAC;EACJ,CAAC,CAAC;AAEF,MAAa,wBAAwB,GAA4D,UAC/F,WAAW,EAAE,QAAQ,EAAE,WAAW,IAC/B,QACH,WAAW,GAAG,qBAAqB,CAAC,QAAQ,EAAE,WAAW,CAAC,IAC3D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}