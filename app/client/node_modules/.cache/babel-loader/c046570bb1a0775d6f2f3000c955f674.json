{"ast":null,"code":"import { Parser } from './parsers';\nimport { Result } from './result';\n/**\n * @hidden\n */\n\nvar always = function (value) {\n  return new Parser(function (stream) {\n    return new Result(value, stream);\n  });\n};\n/**\n * @hidden\n */\n\n\nvar append = function (p1, p2) {\n  return p1.chain(function (vs) {\n    return p2.map(function (v) {\n      return vs.concat([v]);\n    });\n  });\n};\n/**\n * @hidden\n */\n\n\nexport var sequence = function (list) {\n  return list.reduce(function (acc, parser) {\n    return append(acc, parser);\n  }, always([]));\n};\n/**\n * @hidden\n */\n\nexport var greedy = function (parser) {\n  return new Parser(function (stream) {\n    var result = new Result([], stream);\n\n    while (!stream.eof()) {\n      result = result.concat(parser.run(stream));\n    }\n\n    return result;\n  });\n};","map":{"version":3,"sources":["../../../../src/maskedtextbox/parsing/combinators.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,WAAvB;AACA,SAAS,MAAT,QAAuB,UAAvB;AAEA;;;;AAGA,IAAM,MAAM,GAAG,UAAA,KAAA,EAAK;AAAI,SAAA,IAAI,MAAJ,CAAW,UAAA,MAAA,EAAM;AAAI,WAAA,IAAI,MAAJ,CAAW,KAAX,EAAA,MAAA,CAAA;AAArB,GAAA,CAAA;AAA+C,CAAvE;AAEA;;;;;AAGA,IAAM,MAAM,GAAG,UAAC,EAAD,EAAK,EAAL,EAAO;AAAK,SAAA,EAAE,CAAC,KAAH,CAAS,UAAA,EAAA,EAAE;AAAI,WAAA,EAAE,CAAC,GAAH,CAAO,UAAA,CAAA,EAAC;AAAI,aAAA,EAAE,CAAC,MAAH,CAAU,CAAV,CAAU,CAAV,CAAA;AAAZ,KAAA,CAAA;AAAf,GAAA,CAAA;AAA2C,CAAtE;AAEA;;;;;AAGA,OAAO,IAAM,QAAQ,GAAG,UAAA,IAAA,EAAI;AAAI,SAAA,IAAI,CAAC,MAAL,CAAY,UAAC,GAAD,EAAM,MAAN,EAAY;AAAK,WAAA,MAAM,CAAC,GAAD,EAAN,MAAM,CAAN;AAAmB,GAAhD,EAAkD,MAAM,CAAxD,EAAwD,CAAxD,CAAA;AAA6D,CAAtF;AAEP;;;;AAGA,OAAO,IAAM,MAAM,GAAG,UAAA,MAAA,EAAM;AAAI,SAAA,IAAI,MAAJ,CAAW,UAAA,MAAA,EAAM;AAC7C,QAAI,MAAM,GAAG,IAAI,MAAJ,CAAW,EAAX,EAAe,MAAf,CAAb;;AAEA,WAAO,CAAC,MAAM,CAAC,GAAP,EAAR,EAAsB;AAClB,MAAA,MAAM,GAAG,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,GAAP,CAAW,MAAX,CAAd,CAAT;AACH;;AAED,WAAO,MAAP;AAP4B,GAAA,CAAA;AAQ9B,CARK","sourceRoot":"","sourcesContent":["import { Parser } from './parsers';\nimport { Result } from './result';\n/**\n * @hidden\n */\nvar always = function (value) { return new Parser(function (stream) { return new Result(value, stream); }); };\n/**\n * @hidden\n */\nvar append = function (p1, p2) { return p1.chain(function (vs) { return p2.map(function (v) { return vs.concat([v]); }); }); };\n/**\n * @hidden\n */\nexport var sequence = function (list) { return list.reduce(function (acc, parser) { return append(acc, parser); }, always([])); };\n/**\n * @hidden\n */\nexport var greedy = function (parser) { return new Parser(function (stream) {\n    var result = new Result([], stream);\n    while (!stream.eof()) {\n        result = result.concat(parser.run(stream));\n    }\n    return result;\n}); };\n//# sourceMappingURL=combinators.js.map"]},"metadata":{},"sourceType":"module"}