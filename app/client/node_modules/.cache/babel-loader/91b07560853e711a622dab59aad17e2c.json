{"ast":null,"code":"/**\n * @hidden\n */\nexport var ifElse = function (predicate, right, left) {\n  return function (value) {\n    return predicate(value) ? right(value) : left(value);\n  };\n};\n/**\n * @hidden\n * Performs the right-to-left function composition. Functions should have a unary.\n */\n\nexport var compose = function () {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return function (data) {\n    return args.reduceRight(function (acc, curr) {\n      return curr(acc);\n    }, data);\n  };\n};\n/**\n * @hidden\n */\n\nexport var constant = function (x) {\n  return function () {\n    return x;\n  };\n};\n/**\n * @hidden\n */\n\nexport var identity = function (x) {\n  return x;\n};","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/node_modules/@progress/kendo-data-query/dist/es/funcs.js"],"names":["ifElse","predicate","right","left","value","compose","args","_i","arguments","length","data","reduceRight","acc","curr","constant","x","identity"],"mappings":"AAAA;;;AAGA,OAAO,IAAIA,MAAM,GAAG,UAAUC,SAAV,EAAqBC,KAArB,EAA4BC,IAA5B,EAAkC;AAAE,SAAO,UAAUC,KAAV,EAAiB;AAAE,WAAOH,SAAS,CAACG,KAAD,CAAT,GAAmBF,KAAK,CAACE,KAAD,CAAxB,GAAkCD,IAAI,CAACC,KAAD,CAA7C;AAAuD,GAAjF;AAAoF,CAArI;AACP;;;;;AAIA,OAAO,IAAIC,OAAO,GAAG,YAAY;AAC7B,MAAIC,IAAI,GAAG,EAAX;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC1CD,IAAAA,IAAI,CAACC,EAAD,CAAJ,GAAWC,SAAS,CAACD,EAAD,CAApB;AACH;;AACD,SAAO,UAAUG,IAAV,EAAgB;AAAE,WAAOJ,IAAI,CAACK,WAAL,CAAiB,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AAAE,aAAOA,IAAI,CAACD,GAAD,CAAX;AAAmB,KAA3D,EAA6DF,IAA7D,CAAP;AAA4E,GAArG;AACH,CANM;AAOP;;;;AAGA,OAAO,IAAII,QAAQ,GAAG,UAAUC,CAAV,EAAa;AAAE,SAAO,YAAY;AAAE,WAAOA,CAAP;AAAW,GAAhC;AAAmC,CAAjE;AACP;;;;AAGA,OAAO,IAAIC,QAAQ,GAAG,UAAUD,CAAV,EAAa;AAAE,SAAOA,CAAP;AAAW,CAAzC","sourcesContent":["/**\n * @hidden\n */\nexport var ifElse = function (predicate, right, left) { return function (value) { return predicate(value) ? right(value) : left(value); }; };\n/**\n * @hidden\n * Performs the right-to-left function composition. Functions should have a unary.\n */\nexport var compose = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return function (data) { return args.reduceRight(function (acc, curr) { return curr(acc); }, data); };\n};\n/**\n * @hidden\n */\nexport var constant = function (x) { return function () { return x; }; };\n/**\n * @hidden\n */\nexport var identity = function (x) { return x; };\n"]},"metadata":{},"sourceType":"module"}