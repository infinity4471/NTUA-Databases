{"ast":null,"code":"import { MS_PER_HOUR, MS_PER_MINUTE } from '../constants';\nimport { cloneDate } from '../clone-date';\nimport { abbrTimezone } from './abbr-timezone';\nimport { offset } from './offset';\nimport { toLocalDate } from './to-local-date';\n\nvar addMinutes = function (date, minutes) {\n  return new Date(date.getTime() + minutes * MS_PER_MINUTE);\n};\n\nvar addHours = function (date, hours) {\n  return new Date(date.getTime() + hours * MS_PER_HOUR);\n};\n\nvar dayAbbr = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nvar monthAbbr = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dev'];\n\nvar datePrefix = function (utcDate) {\n  return dayAbbr[utcDate.getUTCDay()] + ' ' + monthAbbr[utcDate.getUTCMonth()];\n};\n\nvar padNumber = function (num, len) {\n  if (len === void 0) {\n    len = 2;\n  }\n\n  var sign = num < 0 ? '-' : '';\n  return sign + new Array(len).concat([Math.abs(num)]).join('0').slice(-len);\n};\n\nfunction isZoneMissingHour(date, timezone) {\n  var currentOffset = offset(timezone, date);\n  var prevHour = addHours(date, -1);\n  var prevOffset = offset(timezone, prevHour);\n  return currentOffset < prevOffset;\n}\n\nfunction shiftZoneMissingHour(utcDate, timezone) {\n  // Adjust for missing hour during DST transition in timezone.\n  var dstOffset = isZoneMissingHour(utcDate, timezone) ? 1 : 0;\n  return addHours(utcDate, dstOffset);\n}\n\nfunction convertTimezoneUTC(utcLocal, fromTimezone, toTimezone) {\n  if (fromTimezone === toTimezone) {\n    return utcLocal;\n  }\n\n  var fromOffset = offset(fromTimezone, utcLocal);\n  var toOffset = offset(toTimezone, utcLocal);\n  var baseDiff = fromOffset - toOffset;\n  var midDate = addMinutes(utcLocal, baseDiff);\n  var midOffset = offset(toTimezone, midDate);\n  var dstDiff = toOffset - midOffset;\n  return addMinutes(utcLocal, baseDiff + dstDiff);\n}\n\nfunction formatOffset(tzOffset) {\n  var sign = tzOffset <= 0 ? '+' : '-';\n  var value = Math.abs(tzOffset);\n  var hours = padNumber(Math.floor(value / 60));\n  var minutes = padNumber(value % 60);\n  return \"GMT\" + sign + hours + minutes;\n}\n/**\n * Represents a local date in a specified timezone.\n *\n * The following example demonstrates how to convert a local date to the specified timezone.\n *\n * @example\n * ```ts\n * import { ZonedDate } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/America/New_York';\n *\n * const date = new Date('2018-03-13T00:00:00Z');\n * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n *\n * // If you run this example in GMT+0200,\n * // the output will be '2018-03-12T22:00:00.000Z'.\n * console.log(tzDate.toISOString());\n * ```\n *\n * The following example demonstrates how to convert between timezones.\n *\n * @example\n * ```ts\n * import { ZonedDate } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/America/New_York';\n * import '@progress/kendo-date-math/tz/America/Los_Angeles';\n *\n * // Note the \"Z\" suffix for UTC dates.\n * const date = new Date('2018-03-12T22:00:00Z');\n *\n * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n * const result = tzDate.toTimezone('America/Los_Angeles');\n *\n * // Regardless of the browser timezone\n * // the output will be '2018-03-12T15:00:00.000Z'.\n * console.log(tzDate.toUTCDate());\n * ```\n */\n\n\nvar ZonedDate =\n/** @class */\nfunction () {\n  // The constructor is aliased as a static fromUTCDate method\n  // to clarify the meaning of the utcDate parameter.\n  //\n  // It can be confused for a local date time while it is in fact\n  // treated as a UTC date that represents the local date in the timezone.\n  function ZonedDate(utcDate, timezone) {\n    this._utcDate = cloneDate(utcDate);\n    this.timezone = timezone;\n    var tzOffset = offset(timezone, utcDate);\n    this.timezoneOffset = tzOffset;\n    var localDate = shiftZoneMissingHour(utcDate, timezone);\n    this._localDate = convertTimezoneUTC(localDate, timezone, 'Etc/UTC');\n  }\n\n  Object.defineProperty(ZonedDate.prototype, \"cachedLocalDate\", {\n    /**\n     * Returns a cached local date that denotes the exact time in the set timezone.\n     *\n     * @return Date - A local date that denotes the exact time in the set timezone.\n     *\n     * This property is an alternative to `toLocalDate()` that returns a cached value instead of cloning it.\n     *\n     * > Modifying the returned instance will corrupt the `ZonedDate` state.\n     */\n    get: function () {\n      return this._localDate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ZonedDate.prototype, \"cachedUTCDate\", {\n    /**\n     * Returns a cached `Date` instance with UTC date parts that are set to the local time in the set timezone.\n     *\n     * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.\n     *\n     * This property is an alternative to `toUTCDate()` that returns a cached value instead of cloning it.\n     *\n     * > Modifying the returned instance will corrupt the `ZonedDate` state.\n     */\n    get: function () {\n      return this._utcDate;\n    },\n    enumerable: true,\n    configurable: true\n  }); // tslint:disable:max-line-length\n\n  /**\n   * Converts an existing date to a specified timezone.\n   *\n   * If the `timezone` parameter is omitted, the `ZonedDate` defaults to the timezone of the browser. This concept is known as \"floating date\" because it does not represent a particular moment in time. Instead, its actual value depends on the current timezone of the browser.\n   *\n   * @param date - The local date that represents the actual time instance.\n   * @param timezone - The ID of the timezone that will be assumed. For example, `Europe/Sofia`.\n   * @return ZonedDate - The date in the specified timezone.\n   *\n   * @example\n   * ```ts\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   *\n   * const date = new Date('2018-03-13T00:00:00');\n   * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n   *\n   * // If you run this example in GMT+0200,\n   * // the output will be 'Mon Mar 12 2018 18:00:00 GMT+0200 (EET)'.\n   * console.log(tzDate.toString());\n   *\n   * // If you run this example in UTC,\n   * // the output will be '2018-03-12T22:00:00.000Z'.\n   * console.log(tzDate.toISOString());\n   * ```\n   */\n  // tslint:enable:max-line-length\n\n  ZonedDate.fromLocalDate = function (date, timezone) {\n    if (timezone === void 0) {\n      timezone = '';\n    }\n\n    var utcDate = convertTimezoneUTC(date, 'Etc/UTC', timezone);\n    var shiftZone = isZoneMissingHour(utcDate, timezone);\n    var zoneOffset = offset(timezone, utcDate);\n    var fixedOffset = 0;\n\n    if (shiftZone) {\n      // Adjust for the missing hour during the DST transition in the timezone.\n      fixedOffset = zoneOffset > 0 ? -1 : 1;\n    }\n\n    var adjDate = addHours(utcDate, fixedOffset);\n    return ZonedDate.fromUTCDate(adjDate, timezone);\n  }; // tslint:disable:max-line-length\n\n  /**\n   * Creates a date in a specific timezone from the UTC date parts of the supplied `Date`.\n   *\n   * If the `timezone` parameter is omitted, the `ZonedDate` defaults to the timezone of the browser. This concept is known as \"floating date\" because it does not represent a particular moment in time. Instead, its actual value depends on the current timezone of the browser.\n   *\n   * @param date - The UTC date that represents the time in the target zone. This time is not the actual time instant in UTC.\n   * @param timezone - The ID of the timezone that will be assumed. For example, `Europe/Sofia`.\n   * @return ZonedDate - The date in the specified timezone.\n   *\n   * @example\n   * ```ts\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   *\n   * // Note the \"Z\" suffix for UTC dates.\n   * const date = new Date('2018-03-12T18:00:00Z');\n   *\n   * // Alternative syntax using Date.UTC\n   * // const date = new Date(Date.UTC(2018, 2, 12, 18, 0));\n   *\n   * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n   *\n   * // Regardless of the browser timezone\n   * // the output will be 'Mon Mar 12 2018 18:00:00 GMT+0200 (EET)'.\n   * console.log(tzDate.toString());\n   *\n   * // Regardless of the browser timezone\n   * // the output in UTC will be '2018-03-12T22:00:00.000Z'.\n   * console.log(tzDate.toISOString());\n   * ```\n   */\n  // tslint:enable:max-line-length\n\n\n  ZonedDate.fromUTCDate = function (utcDate, timezone) {\n    if (timezone === void 0) {\n      timezone = '';\n    }\n\n    return new ZonedDate(utcDate, timezone);\n  };\n  /**\n   * Returns a local date that denotes the exact time in the set timezone.\n   *\n   * @return Date - A local date that denotes the exact time in the set timezone.\n   *\n   * @example\n   * ```ts\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   *\n   * // Note the \"Z\" suffix for UTC dates.\n   * const date = new Date('2018-03-12T18:00:00Z');\n   * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n   *\n   * // The local date represents the same moment in time as the ZonedDate:\n   * // `2018-03-12T22:00:00.000Z`.\n   * console.log(tzDate.toLocalDate().toISOString());\n   *\n   * // The local date will apply the timezone of the browser. For example,\n   * // `Tue Mar 13 2018 00:00:00 GMT+0200 (Eastern European Standard Time)`.\n   * console.log(tzDate.toLocalDate().toString())\n   * ```\n   */\n\n\n  ZonedDate.prototype.toLocalDate = function () {\n    return cloneDate(this._localDate);\n  };\n  /**\n   * Returns a `Date` instance with UTC date parts that are set to the local time in the set timezone.\n   *\n   * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.\n   *\n   * @example\n   * ```ts\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   *\n   * // Note the \"Z\" suffix for UTC dates.\n   * const date = new Date('2018-03-12T18:00:00Z');\n   * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n   *\n   * // Regardless of the browser timezone\n   * // the output will be '2018-03-12T18:00:00.000Z'.\n   * console.log(tzDate.toUTCDate());\n   * ```\n   */\n\n\n  ZonedDate.prototype.toUTCDate = function () {\n    return cloneDate(this._utcDate);\n  };\n  /**\n   * Converts the date to the specified timezone.\n   *\n   * @param toTimezone - The timezone to which the values will be converted. For example, `America/Los_Angeles`.\n   * @returns ZonedDate - The resulting zoned date.\n   *\n   * @example\n   * ```ts\n   * import { ZonedDate } from '@progress/kendo-date-math';\n   * import '@progress/kendo-date-math/tz/America/New_York';\n   * import '@progress/kendo-date-math/tz/America/Los_Angeles';\n   *\n   * // Note the \"Z\" suffix for UTC dates.\n   * const date = new Date('2018-03-12T22:00:00Z');\n   *\n   * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n   * const result = tzDate.toTimezone('America/Los_Angeles');\n   *\n   * // Regardless of the browser timezone\n   * // the output will be '2018-03-12T15:00:00.000Z'.\n   * console.log(tzDate.toUTCDate());\n   * ```\n   */\n\n\n  ZonedDate.prototype.toTimezone = function (toTimezone) {\n    if (this.timezone === toTimezone) {\n      return this.clone();\n    }\n\n    var tzOffset = offset(this.timezone, this._utcDate);\n    var date = addMinutes(this._utcDate, tzOffset);\n    return ZonedDate.fromLocalDate(date, toTimezone);\n  };\n  /**\n   * Returns a new instance that represents the same date.\n   *\n   * @returns Date - A copy of the instance of the current zoned date.\n   */\n\n\n  ZonedDate.prototype.clone = function () {\n    return ZonedDate.fromUTCDate(this._utcDate, this.timezone);\n  }; // tslint:disable:max-line-length\n\n  /**\n   * Adds the specified number of days and returns a new instance with the resulting date in the same timezone.\n   *\n   * @param days - The number of days that will be added.\n   * @returns ZonedDate - The resulting date.\n   */\n  // tslint:enable:max-line-length\n\n\n  ZonedDate.prototype.addDays = function (days) {\n    var newDate = new Date(this._utcDate.getTime());\n    newDate.setUTCDate(newDate.getUTCDate() + days);\n    return ZonedDate.fromUTCDate(newDate, this.timezone);\n  }; // tslint:disable:max-line-length\n\n  /**\n   * Adds the specified number of milliseconds and returns a new instance with the resulting date in the same timezone.\n   *\n   * The method compensates for DST transitions and ensures that the resulting date occurs exactly after the set amount of time in the timezone.\n   *\n   * @param milliseconds - The number of days that will be added.\n   * @returns ZonedDate - The resulting date.\n   */\n  // tslint:enable:max-line-length\n\n\n  ZonedDate.prototype.addTime = function (milliseconds) {\n    var utcDate = new Date(this._utcDate.getTime());\n    var utcMid = shiftZoneMissingHour(utcDate, this.timezone);\n    utcMid.setTime(utcMid.getTime() + milliseconds);\n    var utcResult = shiftZoneMissingHour(utcMid, this.timezone);\n    return ZonedDate.fromUTCDate(utcResult, this.timezone);\n  }; // tslint:disable:max-line-length\n\n  /**\n   * Returns a new instance of the same zoned date having its time parts set to `00:00:00.000`.\n   *\n   * @returns ZonedDate - The same date having its time parts set to `00:00:00.000`.\n   */\n  // tslint:enable:max-line-length\n\n\n  ZonedDate.prototype.stripTime = function () {\n    var date = this._utcDate;\n    var ticks = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);\n    return ZonedDate.fromUTCDate(new Date(ticks), this.timezone);\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getTime = function () {\n    return this._localDate.getTime();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getTimezoneOffset = function () {\n    return this.timezoneOffset;\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getFullYear = function () {\n    return this._utcDate.getUTCFullYear();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getMonth = function () {\n    return this._utcDate.getUTCMonth();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getDate = function () {\n    return this._utcDate.getUTCDate();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getDay = function () {\n    return this._utcDate.getUTCDay();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getHours = function () {\n    return this._utcDate.getUTCHours();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getMinutes = function () {\n    return this._utcDate.getUTCMinutes();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getSeconds = function () {\n    return this._utcDate.getUTCSeconds();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getMilliseconds = function () {\n    return this._utcDate.getUTCMilliseconds();\n  }; // The local date UTC parts represent actual UTC time\n\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getUTCDate = function () {\n    return this._localDate.getUTCDate();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getUTCDay = function () {\n    return this._localDate.getUTCDay();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getUTCFullYear = function () {\n    return this._localDate.getUTCFullYear();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getUTCHours = function () {\n    return this._localDate.getUTCHours();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getUTCMilliseconds = function () {\n    return this._localDate.getUTCMilliseconds();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getUTCMinutes = function () {\n    return this._localDate.getUTCMinutes();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.getUTCMonth = function () {\n    return this._localDate.getUTCMonth();\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.getUTCSeconds = function () {\n    return this._localDate.getUTCSeconds();\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setTime = function (time) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setMilliseconds = function (ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setUTCMilliseconds = function (ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setSeconds = function (sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setUTCSeconds = function (sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setMinutes = function (min, sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setUTCMinutes = function (min, sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setHours = function (hours, min, sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setUTCHours = function (hours, min, sec, ms) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setDate = function (date) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setUTCDate = function (date) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setMonth = function (month, date) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setUTCMonth = function (month, date) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setFullYear = function (year, month, date) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.setUTCFullYear = function (year, month, date) {\n    throw new Error(\"Method not implemented.\");\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.toISOString = function () {\n    return this._localDate.toISOString();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.toJSON = function () {\n    return this._localDate.toJSON();\n  };\n  /**\n   * @hidden\n   */\n\n\n  ZonedDate.prototype.toString = function () {\n    var dateString = datePrefix(this._utcDate);\n    var timeString = this.toTimeString();\n    return dateString + \" \" + this.getDate() + \" \" + this.getFullYear() + \" \" + timeString;\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.toDateString = function () {\n    return toLocalDate(this._utcDate).toDateString();\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.toTimeString = function () {\n    var hours = padNumber(this.getHours());\n    var minutes = padNumber(this.getMinutes());\n    var seconds = padNumber(this.getSeconds());\n    var time = hours + \":\" + minutes + \":\" + seconds;\n    var tzOffset = formatOffset(this.timezoneOffset);\n    var abbrev = abbrTimezone(this.timezone, this._utcDate);\n\n    if (abbrev) {\n      abbrev = \" (\" + abbrev + \")\";\n    }\n\n    return time + \" \" + tzOffset + abbrev;\n  };\n\n  ZonedDate.prototype.toLocaleString = function (locales, options) {\n    return this._localDate.toLocaleString(locales, options);\n  };\n\n  ZonedDate.prototype.toLocaleDateString = function (locales, options) {\n    return this._localDate.toLocaleDateString(locales, options);\n  };\n\n  ZonedDate.prototype.toLocaleTimeString = function (locales, options) {\n    return this._localDate.toLocaleTimeString(locales, options);\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.toUTCString = function () {\n    return this.toTimezone('Etc/UTC').toString();\n  };\n\n  ZonedDate.prototype[Symbol.toPrimitive] = function (hint) {\n    if (hint === 'string' || hint === 'default') {\n      return this.toString();\n    }\n\n    return this._localDate.getTime();\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.valueOf = function () {\n    return this.getTime();\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.getVarDate = function () {\n    throw new Error('Not implemented.');\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.format = function (_) {\n    throw new Error('Not implemented.');\n  };\n  /** @hidden */\n\n\n  ZonedDate.prototype.formatUTC = function (_) {\n    throw new Error('Not implemented.');\n  };\n\n  return ZonedDate;\n}();\n\nexport { ZonedDate };","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/node_modules/@progress/kendo-date-math/dist/es/tz/zoned-date.js"],"names":["MS_PER_HOUR","MS_PER_MINUTE","cloneDate","abbrTimezone","offset","toLocalDate","addMinutes","date","minutes","Date","getTime","addHours","hours","dayAbbr","monthAbbr","datePrefix","utcDate","getUTCDay","getUTCMonth","padNumber","num","len","sign","Array","concat","Math","abs","join","slice","isZoneMissingHour","timezone","currentOffset","prevHour","prevOffset","shiftZoneMissingHour","dstOffset","convertTimezoneUTC","utcLocal","fromTimezone","toTimezone","fromOffset","toOffset","baseDiff","midDate","midOffset","dstDiff","formatOffset","tzOffset","value","floor","ZonedDate","_utcDate","timezoneOffset","localDate","_localDate","Object","defineProperty","prototype","get","enumerable","configurable","fromLocalDate","shiftZone","zoneOffset","fixedOffset","adjDate","fromUTCDate","toUTCDate","clone","addDays","days","newDate","setUTCDate","getUTCDate","addTime","milliseconds","utcMid","setTime","utcResult","stripTime","ticks","UTC","getUTCFullYear","getTimezoneOffset","getFullYear","getMonth","getDate","getDay","getHours","getUTCHours","getMinutes","getUTCMinutes","getSeconds","getUTCSeconds","getMilliseconds","getUTCMilliseconds","time","Error","setMilliseconds","ms","setUTCMilliseconds","setSeconds","sec","setUTCSeconds","setMinutes","min","setUTCMinutes","setHours","setUTCHours","setDate","setMonth","month","setUTCMonth","setFullYear","year","setUTCFullYear","toISOString","toJSON","toString","dateString","timeString","toTimeString","toDateString","seconds","abbrev","toLocaleString","locales","options","toLocaleDateString","toLocaleTimeString","toUTCString","Symbol","toPrimitive","hint","valueOf","getVarDate","format","_","formatUTC"],"mappings":"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","sourcesContent":["import { MS_PER_HOUR, MS_PER_MINUTE } from '../constants';\nimport { cloneDate } from '../clone-date';\nimport { abbrTimezone } from './abbr-timezone';\nimport { offset } from './offset';\nimport { toLocalDate } from './to-local-date';\nvar addMinutes = function (date, minutes) { return new Date(date.getTime() + minutes * MS_PER_MINUTE); };\nvar addHours = function (date, hours) { return new Date(date.getTime() + hours * MS_PER_HOUR); };\nvar dayAbbr = [\n    'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'\n];\nvar monthAbbr = [\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dev'\n];\nvar datePrefix = function (utcDate) {\n    return dayAbbr[utcDate.getUTCDay()] + ' ' + monthAbbr[utcDate.getUTCMonth()];\n};\nvar padNumber = function (num, len) {\n    if (len === void 0) { len = 2; }\n    var sign = num < 0 ? '-' : '';\n    return sign + new Array(len).concat([Math.abs(num)]).join('0').slice(-len);\n};\nfunction isZoneMissingHour(date, timezone) {\n    var currentOffset = offset(timezone, date);\n    var prevHour = addHours(date, -1);\n    var prevOffset = offset(timezone, prevHour);\n    return currentOffset < prevOffset;\n}\nfunction shiftZoneMissingHour(utcDate, timezone) {\n    // Adjust for missing hour during DST transition in timezone.\n    var dstOffset = isZoneMissingHour(utcDate, timezone) ? 1 : 0;\n    return addHours(utcDate, dstOffset);\n}\nfunction convertTimezoneUTC(utcLocal, fromTimezone, toTimezone) {\n    if (fromTimezone === toTimezone) {\n        return utcLocal;\n    }\n    var fromOffset = offset(fromTimezone, utcLocal);\n    var toOffset = offset(toTimezone, utcLocal);\n    var baseDiff = fromOffset - toOffset;\n    var midDate = addMinutes(utcLocal, baseDiff);\n    var midOffset = offset(toTimezone, midDate);\n    var dstDiff = toOffset - midOffset;\n    return addMinutes(utcLocal, baseDiff + dstDiff);\n}\nfunction formatOffset(tzOffset) {\n    var sign = tzOffset <= 0 ? '+' : '-';\n    var value = Math.abs(tzOffset);\n    var hours = padNumber(Math.floor(value / 60));\n    var minutes = padNumber(value % 60);\n    return \"GMT\" + sign + hours + minutes;\n}\n/**\n * Represents a local date in a specified timezone.\n *\n * The following example demonstrates how to convert a local date to the specified timezone.\n *\n * @example\n * ```ts\n * import { ZonedDate } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/America/New_York';\n *\n * const date = new Date('2018-03-13T00:00:00Z');\n * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n *\n * // If you run this example in GMT+0200,\n * // the output will be '2018-03-12T22:00:00.000Z'.\n * console.log(tzDate.toISOString());\n * ```\n *\n * The following example demonstrates how to convert between timezones.\n *\n * @example\n * ```ts\n * import { ZonedDate } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/America/New_York';\n * import '@progress/kendo-date-math/tz/America/Los_Angeles';\n *\n * // Note the \"Z\" suffix for UTC dates.\n * const date = new Date('2018-03-12T22:00:00Z');\n *\n * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n * const result = tzDate.toTimezone('America/Los_Angeles');\n *\n * // Regardless of the browser timezone\n * // the output will be '2018-03-12T15:00:00.000Z'.\n * console.log(tzDate.toUTCDate());\n * ```\n */\nvar ZonedDate = /** @class */ (function () {\n    // The constructor is aliased as a static fromUTCDate method\n    // to clarify the meaning of the utcDate parameter.\n    //\n    // It can be confused for a local date time while it is in fact\n    // treated as a UTC date that represents the local date in the timezone.\n    function ZonedDate(utcDate, timezone) {\n        this._utcDate = cloneDate(utcDate);\n        this.timezone = timezone;\n        var tzOffset = offset(timezone, utcDate);\n        this.timezoneOffset = tzOffset;\n        var localDate = shiftZoneMissingHour(utcDate, timezone);\n        this._localDate = convertTimezoneUTC(localDate, timezone, 'Etc/UTC');\n    }\n    Object.defineProperty(ZonedDate.prototype, \"cachedLocalDate\", {\n        /**\n         * Returns a cached local date that denotes the exact time in the set timezone.\n         *\n         * @return Date - A local date that denotes the exact time in the set timezone.\n         *\n         * This property is an alternative to `toLocalDate()` that returns a cached value instead of cloning it.\n         *\n         * > Modifying the returned instance will corrupt the `ZonedDate` state.\n         */\n        get: function () {\n            return this._localDate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ZonedDate.prototype, \"cachedUTCDate\", {\n        /**\n         * Returns a cached `Date` instance with UTC date parts that are set to the local time in the set timezone.\n         *\n         * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.\n         *\n         * This property is an alternative to `toUTCDate()` that returns a cached value instead of cloning it.\n         *\n         * > Modifying the returned instance will corrupt the `ZonedDate` state.\n         */\n        get: function () {\n            return this._utcDate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    // tslint:disable:max-line-length\n    /**\n     * Converts an existing date to a specified timezone.\n     *\n     * If the `timezone` parameter is omitted, the `ZonedDate` defaults to the timezone of the browser. This concept is known as \"floating date\" because it does not represent a particular moment in time. Instead, its actual value depends on the current timezone of the browser.\n     *\n     * @param date - The local date that represents the actual time instance.\n     * @param timezone - The ID of the timezone that will be assumed. For example, `Europe/Sofia`.\n     * @return ZonedDate - The date in the specified timezone.\n     *\n     * @example\n     * ```ts\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     *\n     * const date = new Date('2018-03-13T00:00:00');\n     * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n     *\n     * // If you run this example in GMT+0200,\n     * // the output will be 'Mon Mar 12 2018 18:00:00 GMT+0200 (EET)'.\n     * console.log(tzDate.toString());\n     *\n     * // If you run this example in UTC,\n     * // the output will be '2018-03-12T22:00:00.000Z'.\n     * console.log(tzDate.toISOString());\n     * ```\n     */\n    // tslint:enable:max-line-length\n    ZonedDate.fromLocalDate = function (date, timezone) {\n        if (timezone === void 0) { timezone = ''; }\n        var utcDate = convertTimezoneUTC(date, 'Etc/UTC', timezone);\n        var shiftZone = isZoneMissingHour(utcDate, timezone);\n        var zoneOffset = offset(timezone, utcDate);\n        var fixedOffset = 0;\n        if (shiftZone) {\n            // Adjust for the missing hour during the DST transition in the timezone.\n            fixedOffset = zoneOffset > 0 ? -1 : 1;\n        }\n        var adjDate = addHours(utcDate, fixedOffset);\n        return ZonedDate.fromUTCDate(adjDate, timezone);\n    };\n    // tslint:disable:max-line-length\n    /**\n     * Creates a date in a specific timezone from the UTC date parts of the supplied `Date`.\n     *\n     * If the `timezone` parameter is omitted, the `ZonedDate` defaults to the timezone of the browser. This concept is known as \"floating date\" because it does not represent a particular moment in time. Instead, its actual value depends on the current timezone of the browser.\n     *\n     * @param date - The UTC date that represents the time in the target zone. This time is not the actual time instant in UTC.\n     * @param timezone - The ID of the timezone that will be assumed. For example, `Europe/Sofia`.\n     * @return ZonedDate - The date in the specified timezone.\n     *\n     * @example\n     * ```ts\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     *\n     * // Note the \"Z\" suffix for UTC dates.\n     * const date = new Date('2018-03-12T18:00:00Z');\n     *\n     * // Alternative syntax using Date.UTC\n     * // const date = new Date(Date.UTC(2018, 2, 12, 18, 0));\n     *\n     * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n     *\n     * // Regardless of the browser timezone\n     * // the output will be 'Mon Mar 12 2018 18:00:00 GMT+0200 (EET)'.\n     * console.log(tzDate.toString());\n     *\n     * // Regardless of the browser timezone\n     * // the output in UTC will be '2018-03-12T22:00:00.000Z'.\n     * console.log(tzDate.toISOString());\n     * ```\n     */\n    // tslint:enable:max-line-length\n    ZonedDate.fromUTCDate = function (utcDate, timezone) {\n        if (timezone === void 0) { timezone = ''; }\n        return new ZonedDate(utcDate, timezone);\n    };\n    /**\n     * Returns a local date that denotes the exact time in the set timezone.\n     *\n     * @return Date - A local date that denotes the exact time in the set timezone.\n     *\n     * @example\n     * ```ts\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     *\n     * // Note the \"Z\" suffix for UTC dates.\n     * const date = new Date('2018-03-12T18:00:00Z');\n     * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n     *\n     * // The local date represents the same moment in time as the ZonedDate:\n     * // `2018-03-12T22:00:00.000Z`.\n     * console.log(tzDate.toLocalDate().toISOString());\n     *\n     * // The local date will apply the timezone of the browser. For example,\n     * // `Tue Mar 13 2018 00:00:00 GMT+0200 (Eastern European Standard Time)`.\n     * console.log(tzDate.toLocalDate().toString())\n     * ```\n     */\n    ZonedDate.prototype.toLocalDate = function () {\n        return cloneDate(this._localDate);\n    };\n    /**\n     * Returns a `Date` instance with UTC date parts that are set to the local time in the set timezone.\n     *\n     * @returns Date - A `Date` with UTC date parts that are set to the local time in the set timezone.\n     *\n     * @example\n     * ```ts\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     *\n     * // Note the \"Z\" suffix for UTC dates.\n     * const date = new Date('2018-03-12T18:00:00Z');\n     * const tzDate = ZonedDate.fromUTCDate(date, 'America/New_York');\n     *\n     * // Regardless of the browser timezone\n     * // the output will be '2018-03-12T18:00:00.000Z'.\n     * console.log(tzDate.toUTCDate());\n     * ```\n     */\n    ZonedDate.prototype.toUTCDate = function () {\n        return cloneDate(this._utcDate);\n    };\n    /**\n     * Converts the date to the specified timezone.\n     *\n     * @param toTimezone - The timezone to which the values will be converted. For example, `America/Los_Angeles`.\n     * @returns ZonedDate - The resulting zoned date.\n     *\n     * @example\n     * ```ts\n     * import { ZonedDate } from '@progress/kendo-date-math';\n     * import '@progress/kendo-date-math/tz/America/New_York';\n     * import '@progress/kendo-date-math/tz/America/Los_Angeles';\n     *\n     * // Note the \"Z\" suffix for UTC dates.\n     * const date = new Date('2018-03-12T22:00:00Z');\n     *\n     * const tzDate = ZonedDate.fromLocalDate(date, 'America/New_York');\n     * const result = tzDate.toTimezone('America/Los_Angeles');\n     *\n     * // Regardless of the browser timezone\n     * // the output will be '2018-03-12T15:00:00.000Z'.\n     * console.log(tzDate.toUTCDate());\n     * ```\n     */\n    ZonedDate.prototype.toTimezone = function (toTimezone) {\n        if (this.timezone === toTimezone) {\n            return this.clone();\n        }\n        var tzOffset = offset(this.timezone, this._utcDate);\n        var date = addMinutes(this._utcDate, tzOffset);\n        return ZonedDate.fromLocalDate(date, toTimezone);\n    };\n    /**\n     * Returns a new instance that represents the same date.\n     *\n     * @returns Date - A copy of the instance of the current zoned date.\n     */\n    ZonedDate.prototype.clone = function () {\n        return ZonedDate.fromUTCDate(this._utcDate, this.timezone);\n    };\n    // tslint:disable:max-line-length\n    /**\n     * Adds the specified number of days and returns a new instance with the resulting date in the same timezone.\n     *\n     * @param days - The number of days that will be added.\n     * @returns ZonedDate - The resulting date.\n     */\n    // tslint:enable:max-line-length\n    ZonedDate.prototype.addDays = function (days) {\n        var newDate = new Date(this._utcDate.getTime());\n        newDate.setUTCDate(newDate.getUTCDate() + days);\n        return ZonedDate.fromUTCDate(newDate, this.timezone);\n    };\n    // tslint:disable:max-line-length\n    /**\n     * Adds the specified number of milliseconds and returns a new instance with the resulting date in the same timezone.\n     *\n     * The method compensates for DST transitions and ensures that the resulting date occurs exactly after the set amount of time in the timezone.\n     *\n     * @param milliseconds - The number of days that will be added.\n     * @returns ZonedDate - The resulting date.\n     */\n    // tslint:enable:max-line-length\n    ZonedDate.prototype.addTime = function (milliseconds) {\n        var utcDate = new Date(this._utcDate.getTime());\n        var utcMid = shiftZoneMissingHour(utcDate, this.timezone);\n        utcMid.setTime(utcMid.getTime() + milliseconds);\n        var utcResult = shiftZoneMissingHour(utcMid, this.timezone);\n        return ZonedDate.fromUTCDate(utcResult, this.timezone);\n    };\n    // tslint:disable:max-line-length\n    /**\n     * Returns a new instance of the same zoned date having its time parts set to `00:00:00.000`.\n     *\n     * @returns ZonedDate - The same date having its time parts set to `00:00:00.000`.\n     */\n    // tslint:enable:max-line-length\n    ZonedDate.prototype.stripTime = function () {\n        var date = this._utcDate;\n        var ticks = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), 0, 0, 0);\n        return ZonedDate.fromUTCDate(new Date(ticks), this.timezone);\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getTime = function () {\n        return this._localDate.getTime();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getTimezoneOffset = function () {\n        return this.timezoneOffset;\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getFullYear = function () {\n        return this._utcDate.getUTCFullYear();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getMonth = function () {\n        return this._utcDate.getUTCMonth();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getDate = function () {\n        return this._utcDate.getUTCDate();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getDay = function () {\n        return this._utcDate.getUTCDay();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getHours = function () {\n        return this._utcDate.getUTCHours();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getMinutes = function () {\n        return this._utcDate.getUTCMinutes();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getSeconds = function () {\n        return this._utcDate.getUTCSeconds();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getMilliseconds = function () {\n        return this._utcDate.getUTCMilliseconds();\n    };\n    // The local date UTC parts represent actual UTC time\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getUTCDate = function () {\n        return this._localDate.getUTCDate();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getUTCDay = function () {\n        return this._localDate.getUTCDay();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getUTCFullYear = function () {\n        return this._localDate.getUTCFullYear();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getUTCHours = function () {\n        return this._localDate.getUTCHours();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getUTCMilliseconds = function () {\n        return this._localDate.getUTCMilliseconds();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getUTCMinutes = function () {\n        return this._localDate.getUTCMinutes();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.getUTCMonth = function () {\n        return this._localDate.getUTCMonth();\n    };\n    /** @hidden */\n    ZonedDate.prototype.getUTCSeconds = function () {\n        return this._localDate.getUTCSeconds();\n    };\n    /** @hidden */\n    ZonedDate.prototype.setTime = function (time) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setMilliseconds = function (ms) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setUTCMilliseconds = function (ms) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setSeconds = function (sec, ms) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setUTCSeconds = function (sec, ms) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setMinutes = function (min, sec, ms) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setUTCMinutes = function (min, sec, ms) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setHours = function (hours, min, sec, ms) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setUTCHours = function (hours, min, sec, ms) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setDate = function (date) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setUTCDate = function (date) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setMonth = function (month, date) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setUTCMonth = function (month, date) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setFullYear = function (year, month, date) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /** @hidden */\n    ZonedDate.prototype.setUTCFullYear = function (year, month, date) {\n        throw new Error(\"Method not implemented.\");\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.toISOString = function () {\n        return this._localDate.toISOString();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.toJSON = function () {\n        return this._localDate.toJSON();\n    };\n    /**\n     * @hidden\n     */\n    ZonedDate.prototype.toString = function () {\n        var dateString = datePrefix(this._utcDate);\n        var timeString = this.toTimeString();\n        return dateString + \" \" + this.getDate() + \" \" + this.getFullYear() + \" \" + timeString;\n    };\n    /** @hidden */\n    ZonedDate.prototype.toDateString = function () {\n        return toLocalDate(this._utcDate).toDateString();\n    };\n    /** @hidden */\n    ZonedDate.prototype.toTimeString = function () {\n        var hours = padNumber(this.getHours());\n        var minutes = padNumber(this.getMinutes());\n        var seconds = padNumber(this.getSeconds());\n        var time = hours + \":\" + minutes + \":\" + seconds;\n        var tzOffset = formatOffset(this.timezoneOffset);\n        var abbrev = abbrTimezone(this.timezone, this._utcDate);\n        if (abbrev) {\n            abbrev = \" (\" + abbrev + \")\";\n        }\n        return time + \" \" + tzOffset + abbrev;\n    };\n    ZonedDate.prototype.toLocaleString = function (locales, options) {\n        return this._localDate.toLocaleString(locales, options);\n    };\n    ZonedDate.prototype.toLocaleDateString = function (locales, options) {\n        return this._localDate.toLocaleDateString(locales, options);\n    };\n    ZonedDate.prototype.toLocaleTimeString = function (locales, options) {\n        return this._localDate.toLocaleTimeString(locales, options);\n    };\n    /** @hidden */\n    ZonedDate.prototype.toUTCString = function () {\n        return this.toTimezone('Etc/UTC').toString();\n    };\n    ZonedDate.prototype[Symbol.toPrimitive] = function (hint) {\n        if (hint === 'string' || hint === 'default') {\n            return this.toString();\n        }\n        return this._localDate.getTime();\n    };\n    /** @hidden */\n    ZonedDate.prototype.valueOf = function () {\n        return this.getTime();\n    };\n    /** @hidden */\n    ZonedDate.prototype.getVarDate = function () {\n        throw new Error('Not implemented.');\n    };\n    /** @hidden */\n    ZonedDate.prototype.format = function (_) {\n        throw new Error('Not implemented.');\n    };\n    /** @hidden */\n    ZonedDate.prototype.formatUTC = function (_) {\n        throw new Error('Not implemented.');\n    };\n    return ZonedDate;\n}());\nexport { ZonedDate };\n"]},"metadata":{},"sourceType":"module"}