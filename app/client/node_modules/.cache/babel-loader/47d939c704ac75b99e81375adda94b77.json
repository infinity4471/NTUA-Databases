{"ast":null,"code":"import { CURRENCY, ACCOUNTING, DECIMAL, PERCENT, SCIENTIFIC } from '../common/constants';\nimport isString from '../common/is-string';\nvar standardFormatRegExp = /^(n|c|p|e|a)(\\d*)$/i;\n\nfunction standardFormatOptions(format) {\n  var formatAndPrecision = standardFormatRegExp.exec(format);\n\n  if (formatAndPrecision) {\n    var options = {\n      style: DECIMAL\n    };\n    var style = formatAndPrecision[1].toLowerCase();\n\n    if (style === \"c\") {\n      options.style = CURRENCY;\n    } else if (style === \"a\") {\n      options.style = ACCOUNTING;\n    } else if (style === \"p\") {\n      options.style = PERCENT;\n    } else if (style === \"e\") {\n      options.style = SCIENTIFIC;\n    }\n\n    if (formatAndPrecision[2]) {\n      options.minimumFractionDigits = options.maximumFractionDigits = parseInt(formatAndPrecision[2], 10);\n    }\n\n    return options;\n  }\n}\n\nexport default function formatOptions(format) {\n  var options;\n\n  if (isString(format)) {\n    options = standardFormatOptions(format);\n  } else {\n    options = format;\n  }\n\n  return options;\n}","map":{"version":3,"sources":["/Users/infinity/Dropbox/Public/ECE-NTUA/2019-2020/10th Semester/Databases/supermarket/node_modules/@telerik/kendo-intl/dist/es/numbers/format-options.js"],"names":["CURRENCY","ACCOUNTING","DECIMAL","PERCENT","SCIENTIFIC","isString","standardFormatRegExp","standardFormatOptions","format","formatAndPrecision","exec","options","style","toLowerCase","minimumFractionDigits","maximumFractionDigits","parseInt","formatOptions"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,OAA/B,EAAwCC,OAAxC,EAAiDC,UAAjD,QAAmE,qBAAnE;AACA,OAAOC,QAAP,MAAqB,qBAArB;AAEA,IAAIC,oBAAoB,GAAG,qBAA3B;;AAEA,SAASC,qBAAT,CAA+BC,MAA/B,EAAuC;AACnC,MAAIC,kBAAkB,GAAGH,oBAAoB,CAACI,IAArB,CAA0BF,MAA1B,CAAzB;;AAEA,MAAIC,kBAAJ,EAAwB;AACpB,QAAIE,OAAO,GAAG;AACVC,MAAAA,KAAK,EAAEV;AADG,KAAd;AAIA,QAAIU,KAAK,GAAGH,kBAAkB,CAAC,CAAD,CAAlB,CAAsBI,WAAtB,EAAZ;;AAEA,QAAID,KAAK,KAAK,GAAd,EAAmB;AACfD,MAAAA,OAAO,CAACC,KAAR,GAAgBZ,QAAhB;AACH,KAFD,MAEO,IAAIY,KAAK,KAAK,GAAd,EAAmB;AACtBD,MAAAA,OAAO,CAACC,KAAR,GAAgBX,UAAhB;AACH,KAFM,MAEA,IAAIW,KAAK,KAAK,GAAd,EAAmB;AACtBD,MAAAA,OAAO,CAACC,KAAR,GAAgBT,OAAhB;AACH,KAFM,MAEA,IAAIS,KAAK,KAAK,GAAd,EAAmB;AACtBD,MAAAA,OAAO,CAACC,KAAR,GAAgBR,UAAhB;AACH;;AAED,QAAIK,kBAAkB,CAAC,CAAD,CAAtB,EAA2B;AACvBE,MAAAA,OAAO,CAACG,qBAAR,GAAgCH,OAAO,CAACI,qBAAR,GAAgCC,QAAQ,CAACP,kBAAkB,CAAC,CAAD,CAAnB,EAAwB,EAAxB,CAAxE;AACH;;AAED,WAAOE,OAAP;AACH;AACJ;;AAED,eAAe,SAASM,aAAT,CAAuBT,MAAvB,EAA+B;AAC1C,MAAIG,OAAJ;;AACA,MAAIN,QAAQ,CAACG,MAAD,CAAZ,EAAsB;AAClBG,IAAAA,OAAO,GAAGJ,qBAAqB,CAACC,MAAD,CAA/B;AACH,GAFD,MAEO;AACHG,IAAAA,OAAO,GAAGH,MAAV;AACH;;AAED,SAAOG,OAAP;AACH","sourcesContent":["import { CURRENCY, ACCOUNTING, DECIMAL, PERCENT, SCIENTIFIC } from '../common/constants';\nimport isString from '../common/is-string';\n\nvar standardFormatRegExp = /^(n|c|p|e|a)(\\d*)$/i;\n\nfunction standardFormatOptions(format) {\n    var formatAndPrecision = standardFormatRegExp.exec(format);\n\n    if (formatAndPrecision) {\n        var options = {\n            style: DECIMAL\n        };\n\n        var style = formatAndPrecision[1].toLowerCase();\n\n        if (style === \"c\") {\n            options.style = CURRENCY;\n        } else if (style === \"a\") {\n            options.style = ACCOUNTING;\n        } else if (style === \"p\") {\n            options.style = PERCENT;\n        } else if (style === \"e\") {\n            options.style = SCIENTIFIC;\n        }\n\n        if (formatAndPrecision[2]) {\n            options.minimumFractionDigits = options.maximumFractionDigits = parseInt(formatAndPrecision[2], 10);\n        }\n\n        return options;\n    }\n}\n\nexport default function formatOptions(format) {\n    var options;\n    if (isString(format)) {\n        options = standardFormatOptions(format);\n    } else {\n        options = format;\n    }\n\n    return options;\n}"]},"metadata":{},"sourceType":"module"}