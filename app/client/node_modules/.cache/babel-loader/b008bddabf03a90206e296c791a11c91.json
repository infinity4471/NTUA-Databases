{"ast":null,"code":"import { Class } from '../common';\n\nvar BaseNode = function (Class) {\n  function BaseNode(srcElement) {\n    Class.call(this);\n    this.childNodes = [];\n    this.parent = null;\n\n    if (srcElement) {\n      this.srcElement = srcElement;\n      this.observe();\n    }\n  }\n\n  if (Class) BaseNode.__proto__ = Class;\n  BaseNode.prototype = Object.create(Class && Class.prototype);\n  BaseNode.prototype.constructor = BaseNode;\n\n  BaseNode.prototype.destroy = function destroy() {\n    var this$1 = this;\n\n    if (this.srcElement) {\n      this.srcElement.removeObserver(this);\n    }\n\n    var children = this.childNodes;\n\n    for (var i = 0; i < children.length; i++) {\n      this$1.childNodes[i].destroy();\n    }\n\n    this.parent = null;\n  };\n\n  BaseNode.prototype.load = function load() {};\n\n  BaseNode.prototype.observe = function observe() {\n    if (this.srcElement) {\n      this.srcElement.addObserver(this);\n    }\n  };\n\n  BaseNode.prototype.append = function append(node) {\n    this.childNodes.push(node);\n    node.parent = this;\n  };\n\n  BaseNode.prototype.insertAt = function insertAt(node, pos) {\n    this.childNodes.splice(pos, 0, node);\n    node.parent = this;\n  };\n\n  BaseNode.prototype.remove = function remove(index, count) {\n    var this$1 = this;\n    var end = index + count;\n\n    for (var i = index; i < end; i++) {\n      this$1.childNodes[i].removeSelf();\n    }\n\n    this.childNodes.splice(index, count);\n  };\n\n  BaseNode.prototype.removeSelf = function removeSelf() {\n    this.clear();\n    this.destroy();\n  };\n\n  BaseNode.prototype.clear = function clear() {\n    this.remove(0, this.childNodes.length);\n  };\n\n  BaseNode.prototype.invalidate = function invalidate() {\n    if (this.parent) {\n      this.parent.invalidate();\n    }\n  };\n\n  BaseNode.prototype.geometryChange = function geometryChange() {\n    this.invalidate();\n  };\n\n  BaseNode.prototype.optionsChange = function optionsChange() {\n    this.invalidate();\n  };\n\n  BaseNode.prototype.childrenChange = function childrenChange(e) {\n    if (e.action === \"add\") {\n      this.load(e.items, e.index);\n    } else if (e.action === \"remove\") {\n      this.remove(e.index, e.items.length);\n    }\n\n    this.invalidate();\n  };\n\n  return BaseNode;\n}(Class);\n\nexport default BaseNode;","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/node_modules/@progress/kendo-drawing/dist/es/core/base-node.js"],"names":["Class","BaseNode","srcElement","call","childNodes","parent","observe","__proto__","prototype","Object","create","constructor","destroy","this$1","removeObserver","children","i","length","load","addObserver","append","node","push","insertAt","pos","splice","remove","index","count","end","removeSelf","clear","invalidate","geometryChange","optionsChange","childrenChange","e","action","items"],"mappings":"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","sourcesContent":["import { Class } from '../common';\n\nvar BaseNode = (function (Class) {\n    function BaseNode(srcElement) {\n        Class.call(this);\n\n        this.childNodes = [];\n        this.parent = null;\n\n        if (srcElement) {\n            this.srcElement = srcElement;\n            this.observe();\n        }\n    }\n\n    if ( Class ) BaseNode.__proto__ = Class;\n    BaseNode.prototype = Object.create( Class && Class.prototype );\n    BaseNode.prototype.constructor = BaseNode;\n\n    BaseNode.prototype.destroy = function destroy () {\n        var this$1 = this;\n\n        if (this.srcElement) {\n            this.srcElement.removeObserver(this);\n        }\n\n        var children = this.childNodes;\n        for (var i = 0; i < children.length; i++) {\n            this$1.childNodes[i].destroy();\n        }\n\n        this.parent = null;\n    };\n\n    BaseNode.prototype.load = function load () {};\n\n    BaseNode.prototype.observe = function observe () {\n        if (this.srcElement) {\n            this.srcElement.addObserver(this);\n        }\n    };\n\n    BaseNode.prototype.append = function append (node) {\n        this.childNodes.push(node);\n        node.parent = this;\n    };\n\n    BaseNode.prototype.insertAt = function insertAt (node, pos) {\n        this.childNodes.splice(pos, 0, node);\n        node.parent = this;\n    };\n\n    BaseNode.prototype.remove = function remove (index, count) {\n        var this$1 = this;\n\n        var end = index + count;\n        for (var i = index; i < end; i++) {\n            this$1.childNodes[i].removeSelf();\n        }\n        this.childNodes.splice(index, count);\n    };\n\n    BaseNode.prototype.removeSelf = function removeSelf () {\n        this.clear();\n        this.destroy();\n    };\n\n    BaseNode.prototype.clear = function clear () {\n        this.remove(0, this.childNodes.length);\n    };\n\n    BaseNode.prototype.invalidate = function invalidate () {\n        if (this.parent) {\n            this.parent.invalidate();\n        }\n    };\n\n    BaseNode.prototype.geometryChange = function geometryChange () {\n        this.invalidate();\n    };\n\n    BaseNode.prototype.optionsChange = function optionsChange () {\n        this.invalidate();\n    };\n\n    BaseNode.prototype.childrenChange = function childrenChange (e) {\n        if (e.action === \"add\") {\n            this.load(e.items, e.index);\n        } else if (e.action === \"remove\") {\n            this.remove(e.index, e.items.length);\n        }\n\n        this.invalidate();\n    };\n\n    return BaseNode;\n}(Class));\n\nexport default BaseNode;"]},"metadata":{},"sourceType":"module"}