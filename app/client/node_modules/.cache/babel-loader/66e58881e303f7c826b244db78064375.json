{"ast":null,"code":"import * as React from 'react';\nimport Draggable from '@telerik/kendo-draggable';\n/** @hidden */\n\nexport function useDraggable(ref, _a) {\n  var onPress = _a.onPress,\n      onDrag = _a.onDrag,\n      onRelease = _a.onRelease;\n  var draggable = React.useMemo(function () {\n    return new Draggable({\n      press: onPress,\n      drag: onDrag,\n      release: onRelease\n    });\n  }, []);\n\n  var initDraggable = function () {\n    var element = ref.current;\n\n    if (!element) {\n      return;\n    }\n\n    draggable.bindTo(element);\n    return function () {\n      draggable.destroy();\n    };\n  };\n\n  var updateDraggable = function () {\n    draggable.update({\n      press: onPress,\n      drag: onDrag,\n      release: onRelease\n    });\n  };\n\n  React.useEffect(initDraggable, []);\n  React.useEffect(updateDraggable, [onPress, onDrag, onRelease]);\n}","map":{"version":3,"sources":["../../../src/hooks/useDraggable.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,SAAP,MAAsB,0BAAtB;AAEA;;AACA,OAAM,SAAU,YAAV,CACF,GADE,EAEF,EAFE,EAUD;MAPG,OAAA,GAAA,EAAA,CAAA,O;MACA,MAAA,GAAA,EAAA,CAAA,M;MACA,SAAA,GAAA,EAAA,CAAA,S;AAMJ,MAAM,SAAS,GAAG,KAAK,CAAC,OAAN,CACd,YAAA;AAAM,WAAA,IAAI,SAAJ,CACF;AACI,MAAA,KAAK,EAAE,OADX;AAEI,MAAA,IAAI,EAAE,MAFV;AAGI,MAAA,OAAO,EAAE;AAHb,KADE,CAAA;AAML,GAPa,EAQd,EARc,CAAlB;;AAUA,MAAM,aAAa,GAAG,YAAA;AAClB,QAAM,OAAO,GAAG,GAAG,CAAC,OAApB;;AACA,QAAI,CAAC,OAAL,EAAc;AAAE;AAAS;;AAEzB,IAAA,SAAS,CAAC,MAAV,CAAiB,OAAjB;AAEA,WAAO,YAAA;AAAQ,MAAA,SAAS,CAAC,OAAV;AAAsB,KAArC;AACH,GAPD;;AASA,MAAM,eAAe,GAAG,YAAA;AACnB,IAAA,SAAiB,CAAC,MAAlB,CAAyB;AACtB,MAAA,KAAK,EAAE,OADe;AAEtB,MAAA,IAAI,EAAE,MAFgB;AAGtB,MAAA,OAAO,EAAE;AAHa,KAAzB;AAKJ,GAND;;AAQA,EAAA,KAAK,CAAC,SAAN,CAAgB,aAAhB,EAA+B,EAA/B;AACA,EAAA,KAAK,CAAC,SAAN,CAAgB,eAAhB,EAAiC,CAAC,OAAD,EAAU,MAAV,EAAkB,SAAlB,CAAjC;AACH","sourceRoot":"","sourcesContent":["import * as React from 'react';\nimport Draggable from '@telerik/kendo-draggable';\n/** @hidden */\nexport function useDraggable(ref, _a) {\n    var onPress = _a.onPress, onDrag = _a.onDrag, onRelease = _a.onRelease;\n    var draggable = React.useMemo(function () { return new Draggable({\n        press: onPress,\n        drag: onDrag,\n        release: onRelease\n    }); }, []);\n    var initDraggable = function () {\n        var element = ref.current;\n        if (!element) {\n            return;\n        }\n        draggable.bindTo(element);\n        return function () { draggable.destroy(); };\n    };\n    var updateDraggable = function () {\n        draggable.update({\n            press: onPress,\n            drag: onDrag,\n            release: onRelease\n        });\n    };\n    React.useEffect(initDraggable, []);\n    React.useEffect(updateDraggable, [onPress, onDrag, onRelease]);\n}\n//# sourceMappingURL=useDraggable.js.map"]},"metadata":{},"sourceType":"module"}