{"ast":null,"code":"import Class from '../class';\nimport namedColors from './named-colors';\nimport { Bytes, RGB, HSV, HSL } from './parse-color';\nvar DARK_TRESHOLD = 180;\n\nvar Color = function (Class) {\n  function Color(value) {\n    var this$1 = this;\n    Class.call(this);\n\n    if (arguments.length === 1) {\n      var formats = Color.formats;\n      var resolvedColor = this.resolveColor(value);\n\n      for (var idx = 0; idx < formats.length; idx++) {\n        var formatRegex = formats[idx].re;\n        var processor = formats[idx].process;\n        var parts = formatRegex.exec(resolvedColor);\n\n        if (parts) {\n          var channels = processor(parts);\n          this$1.r = channels[0];\n          this$1.g = channels[1];\n          this$1.b = channels[2];\n        }\n      }\n    } else {\n      this.r = arguments[0];\n      this.g = arguments[1];\n      this.b = arguments[2];\n    }\n\n    this.r = this.normalizeByte(this.r);\n    this.g = this.normalizeByte(this.g);\n    this.b = this.normalizeByte(this.b);\n  }\n\n  if (Class) Color.__proto__ = Class;\n  Color.prototype = Object.create(Class && Class.prototype);\n  Color.prototype.constructor = Color;\n\n  Color.prototype.toHex = function toHex() {\n    var pad = this.padDigit;\n    var r = this.r.toString(16);\n    var g = this.g.toString(16);\n    var b = this.b.toString(16);\n    return \"#\" + pad(r) + pad(g) + pad(b);\n  };\n\n  Color.prototype.resolveColor = function resolveColor(value) {\n    var color = value || \"black\";\n\n    if (color.charAt(0) === \"#\") {\n      color = color.substr(1, 6);\n    }\n\n    color = color.replace(/ /g, \"\");\n    color = color.toLowerCase();\n    color = Color.namedColors[color] || color;\n    return color;\n  };\n\n  Color.prototype.normalizeByte = function normalizeByte(value) {\n    if (value < 0 || isNaN(value)) {\n      return 0;\n    }\n\n    return value > 255 ? 255 : value;\n  };\n\n  Color.prototype.padDigit = function padDigit(value) {\n    return value.length === 1 ? \"0\" + value : value;\n  };\n\n  Color.prototype.brightness = function brightness(value) {\n    var round = Math.round;\n    this.r = round(this.normalizeByte(this.r * value));\n    this.g = round(this.normalizeByte(this.g * value));\n    this.b = round(this.normalizeByte(this.b * value));\n    return this;\n  };\n\n  Color.prototype.percBrightness = function percBrightness() {\n    return Math.sqrt(0.241 * this.r * this.r + 0.691 * this.g * this.g + 0.068 * this.b * this.b);\n  };\n\n  Color.prototype.isDark = function isDark() {\n    return this.percBrightness() < DARK_TRESHOLD;\n  };\n\n  Color.fromBytes = function fromBytes(r, g, b, a) {\n    return new Bytes(r, g, b, a != null ? a : 1);\n  };\n\n  Color.fromRGB = function fromRGB(r, g, b, a) {\n    return new RGB(r, g, b, a != null ? a : 1);\n  };\n\n  Color.fromHSV = function fromHSV(h, s, v, a) {\n    return new HSV(h, s, v, a != null ? a : 1);\n  };\n\n  Color.fromHSL = function fromHSL(h, s, l, a) {\n    return new HSL(h, s, l, a != null ? a : 1);\n  };\n\n  return Color;\n}(Class);\n\nColor.formats = [{\n  re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n  process: function (parts) {\n    return [parseInt(parts[1], 10), parseInt(parts[2], 10), parseInt(parts[3], 10)];\n  }\n}, {\n  re: /^(\\w{2})(\\w{2})(\\w{2})$/,\n  process: function (parts) {\n    return [parseInt(parts[1], 16), parseInt(parts[2], 16), parseInt(parts[3], 16)];\n  }\n}, {\n  re: /^(\\w{1})(\\w{1})(\\w{1})$/,\n  process: function (parts) {\n    return [parseInt(parts[1] + parts[1], 16), parseInt(parts[2] + parts[2], 16), parseInt(parts[3] + parts[3], 16)];\n  }\n}];\nColor.namedColors = namedColors;\nexport default Color;","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/node_modules/@progress/kendo-drawing/dist/es/common/color/color.js"],"names":["Class","namedColors","Bytes","RGB","HSV","HSL","DARK_TRESHOLD","Color","value","this$1","call","arguments","length","formats","resolvedColor","resolveColor","idx","formatRegex","re","processor","process","parts","exec","channels","r","g","b","normalizeByte","__proto__","prototype","Object","create","constructor","toHex","pad","padDigit","toString","color","charAt","substr","replace","toLowerCase","isNaN","brightness","round","Math","percBrightness","sqrt","isDark","fromBytes","a","fromRGB","fromHSV","h","s","v","fromHSL","l","parseInt"],"mappings":"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","sourcesContent":["import Class from '../class';\nimport namedColors from './named-colors';\nimport { Bytes, RGB, HSV, HSL } from './parse-color';\n\nvar DARK_TRESHOLD = 180;\n\nvar Color = (function (Class) {\n    function Color(value) {\n        var this$1 = this;\n\n        Class.call(this);\n\n        if (arguments.length === 1) {\n            var formats = Color.formats;\n            var resolvedColor = this.resolveColor(value);\n\n            for (var idx = 0; idx < formats.length; idx++) {\n                var formatRegex = formats[idx].re;\n                var processor = formats[idx].process;\n                var parts = formatRegex.exec(resolvedColor);\n\n                if (parts) {\n                    var channels = processor(parts);\n                    this$1.r = channels[0];\n                    this$1.g = channels[1];\n                    this$1.b = channels[2];\n                }\n            }\n        } else {\n            this.r = arguments[0];\n            this.g = arguments[1];\n            this.b = arguments[2];\n        }\n\n        this.r = this.normalizeByte(this.r);\n        this.g = this.normalizeByte(this.g);\n        this.b = this.normalizeByte(this.b);\n    }\n\n    if ( Class ) Color.__proto__ = Class;\n    Color.prototype = Object.create( Class && Class.prototype );\n    Color.prototype.constructor = Color;\n\n    Color.prototype.toHex = function toHex () {\n        var pad = this.padDigit;\n        var r = this.r.toString(16);\n        var g = this.g.toString(16);\n        var b = this.b.toString(16);\n\n        return \"#\" + pad(r) + pad(g) + pad(b);\n    };\n\n    Color.prototype.resolveColor = function resolveColor (value) {\n        var color = value || \"black\";\n\n        if (color.charAt(0) === \"#\") {\n            color = color.substr(1, 6);\n        }\n\n        color = color.replace(/ /g, \"\");\n        color = color.toLowerCase();\n        color = Color.namedColors[color] || color;\n\n        return color;\n    };\n\n    Color.prototype.normalizeByte = function normalizeByte (value) {\n        if (value < 0 || isNaN(value)) {\n            return 0;\n        }\n\n        return value > 255 ? 255 : value;\n    };\n\n    Color.prototype.padDigit = function padDigit (value) {\n        return (value.length === 1) ? \"0\" + value : value;\n    };\n\n    Color.prototype.brightness = function brightness (value) {\n        var round = Math.round;\n\n        this.r = round(this.normalizeByte(this.r * value));\n        this.g = round(this.normalizeByte(this.g * value));\n        this.b = round(this.normalizeByte(this.b * value));\n\n        return this;\n    };\n\n    Color.prototype.percBrightness = function percBrightness () {\n        return Math.sqrt(0.241 * this.r * this.r + 0.691 * this.g * this.g + 0.068 * this.b * this.b);\n    };\n\n    Color.prototype.isDark = function isDark () {\n        return this.percBrightness() < DARK_TRESHOLD;\n    };\n\n    Color.fromBytes = function fromBytes (r, g, b, a) {\n        return new Bytes(r, g, b, a != null ? a : 1);\n    };\n\n    Color.fromRGB = function fromRGB (r, g, b, a) {\n        return new RGB(r, g, b, a != null ? a : 1);\n    };\n\n    Color.fromHSV = function fromHSV (h, s, v, a) {\n        return new HSV(h, s, v, a != null ? a : 1);\n    };\n\n    Color.fromHSL = function fromHSL (h, s, l, a) {\n        return new HSL(h, s, l, a != null ? a : 1);\n    };\n\n    return Color;\n}(Class));\n\nColor.formats = [ {\n    re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n    process: function(parts) {\n        return [\n            parseInt(parts[1], 10), parseInt(parts[2], 10), parseInt(parts[3], 10)\n        ];\n    }\n}, {\n    re: /^(\\w{2})(\\w{2})(\\w{2})$/,\n    process: function(parts) {\n        return [\n            parseInt(parts[1], 16), parseInt(parts[2], 16), parseInt(parts[3], 16)\n        ];\n    }\n}, {\n    re: /^(\\w{1})(\\w{1})(\\w{1})$/,\n    process: function(parts) {\n        return [\n            parseInt(parts[1] + parts[1], 16),\n            parseInt(parts[2] + parts[2], 16),\n            parseInt(parts[3] + parts[3], 16)\n        ];\n    }\n} ];\n\nColor.namedColors = namedColors;\n\nexport default Color;"]},"metadata":{},"sourceType":"module"}