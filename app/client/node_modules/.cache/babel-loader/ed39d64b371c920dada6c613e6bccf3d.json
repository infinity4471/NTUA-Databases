{"ast":null,"code":"var fromCharCode = String.fromCharCode;\nexport var BOM = '\\xfe\\xff'; // Encodes a string as UTF-8\n\nexport function encodeUTF8(input) {\n  var output = \"\";\n\n  for (var i = 0; i < input.length; i++) {\n    var c = input.charCodeAt(i);\n\n    if (c < 0x80) {\n      // One byte\n      output += fromCharCode(c);\n    } else if (c < 0x800) {\n      // Two bytes\n      output += fromCharCode(0xC0 | c >>> 6);\n      output += fromCharCode(0x80 | c & 0x3f);\n    } else if (c < 0x10000) {\n      // Three bytes\n      output += fromCharCode(0xE0 | c >>> 12);\n      output += fromCharCode(0x80 | c >>> 6 & 0x3f);\n      output += fromCharCode(0x80 | c & 0x3f);\n    }\n  }\n\n  return output;\n}\n\nfunction encodeUnit(codeUnit) {\n  return fromCharCode(codeUnit >> 8) + fromCharCode(codeUnit & 0x00ff);\n} // Encodes a string as UTF-16 big-endian\n\n\nexport function encodeUTF16BE(input) {\n  var output = '';\n\n  for (var i = 0; i < input.length; i++) {\n    var c = input.charCodeAt(i);\n\n    if (c < 0xFFFF) {\n      output += encodeUnit(c);\n    } else {\n      var lead = (c - 0x10000 >> 10) + 0xD800;\n      var trail = (c - 0x10000 & 0x3FF) + 0xDC00;\n      output += encodeUnit(lead);\n      output += encodeUnit(trail);\n    }\n  }\n\n  return output;\n}","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/node_modules/@progress/kendo-drawing/dist/es/util/encode-utf.js"],"names":["fromCharCode","String","BOM","encodeUTF8","input","output","i","length","c","charCodeAt","encodeUnit","codeUnit","encodeUTF16BE","lead","trail"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,MAAM,CAACD,YAA1B;AAEA,OAAO,IAAIE,GAAG,GAAG,UAAV,C,CAEP;;AACA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAC9B,MAAIC,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,QAAIE,CAAC,GAAGJ,KAAK,CAACK,UAAN,CAAiBH,CAAjB,CAAR;;AAEA,QAAIE,CAAC,GAAG,IAAR,EAAc;AACV;AACAH,MAAAA,MAAM,IAAIL,YAAY,CAACQ,CAAD,CAAtB;AACH,KAHD,MAGO,IAAIA,CAAC,GAAG,KAAR,EAAe;AAClB;AACAH,MAAAA,MAAM,IAAIL,YAAY,CAAC,OAAQQ,CAAC,KAAK,CAAf,CAAtB;AACAH,MAAAA,MAAM,IAAIL,YAAY,CAAC,OAAQQ,CAAC,GAAG,IAAb,CAAtB;AACH,KAJM,MAIA,IAAIA,CAAC,GAAG,OAAR,EAAiB;AACpB;AACAH,MAAAA,MAAM,IAAIL,YAAY,CAAC,OAAQQ,CAAC,KAAK,EAAf,CAAtB;AACAH,MAAAA,MAAM,IAAIL,YAAY,CAAC,OAAQQ,CAAC,KAAK,CAAN,GAAU,IAAnB,CAAtB;AACAH,MAAAA,MAAM,IAAIL,YAAY,CAAC,OAAQQ,CAAC,GAAG,IAAb,CAAtB;AACH;AACJ;;AAED,SAAOH,MAAP;AACH;;AAED,SAASK,UAAT,CAAoBC,QAApB,EAA8B;AAC1B,SAAOX,YAAY,CAACW,QAAQ,IAAI,CAAb,CAAZ,GAA8BX,YAAY,CAACW,QAAQ,GAAG,MAAZ,CAAjD;AACH,C,CAED;;;AACA,OAAO,SAASC,aAAT,CAAuBR,KAAvB,EAA8B;AACjC,MAAIC,MAAM,GAAG,EAAb;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,QAAIE,CAAC,GAAGJ,KAAK,CAACK,UAAN,CAAiBH,CAAjB,CAAR;;AAEA,QAAIE,CAAC,GAAG,MAAR,EAAgB;AACZH,MAAAA,MAAM,IAAIK,UAAU,CAACF,CAAD,CAApB;AACH,KAFD,MAEO;AACH,UAAIK,IAAI,GAAG,CAAEL,CAAC,GAAG,OAAL,IAAiB,EAAlB,IAAwB,MAAnC;AACA,UAAIM,KAAK,GAAG,CAAEN,CAAC,GAAG,OAAL,GAAgB,KAAjB,IAA0B,MAAtC;AACAH,MAAAA,MAAM,IAAIK,UAAU,CAACG,IAAD,CAApB;AACAR,MAAAA,MAAM,IAAIK,UAAU,CAACI,KAAD,CAApB;AACH;AACJ;;AAED,SAAOT,MAAP;AACH","sourcesContent":["var fromCharCode = String.fromCharCode;\n\nexport var BOM = '\\xfe\\xff';\n\n// Encodes a string as UTF-8\nexport function encodeUTF8(input) {\n    var output = \"\";\n\n    for (var i = 0; i < input.length; i++) {\n        var c = input.charCodeAt(i);\n\n        if (c < 0x80) {\n            // One byte\n            output += fromCharCode(c);\n        } else if (c < 0x800) {\n            // Two bytes\n            output += fromCharCode(0xC0 | (c >>> 6));\n            output += fromCharCode(0x80 | (c & 0x3f));\n        } else if (c < 0x10000) {\n            // Three bytes\n            output += fromCharCode(0xE0 | (c >>> 12));\n            output += fromCharCode(0x80 | (c >>> 6 & 0x3f));\n            output += fromCharCode(0x80 | (c & 0x3f));\n        }\n    }\n\n    return output;\n}\n\nfunction encodeUnit(codeUnit) {\n    return fromCharCode(codeUnit >> 8) + fromCharCode(codeUnit & 0x00ff);\n}\n\n// Encodes a string as UTF-16 big-endian\nexport function encodeUTF16BE(input) {\n    var output = '';\n\n    for (var i = 0; i < input.length; i++) {\n        var c = input.charCodeAt(i);\n\n        if (c < 0xFFFF) {\n            output += encodeUnit(c);\n        } else {\n            var lead = ((c - 0x10000) >> 10) + 0xD800;\n            var trail = ((c - 0x10000) & 0x3FF) + 0xDC00;\n            output += encodeUnit(lead);\n            output += encodeUnit(trail);\n        }\n    }\n\n    return output;\n}\n"]},"metadata":{},"sourceType":"module"}