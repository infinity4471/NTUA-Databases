{"ast":null,"code":"import { IntlService } from './Intl/IntlService';\nimport { LocalizationService } from './Localization/LocalizationService';\nimport { GlobalizationContext } from './globalization/GlobalizationContext'; // tslint:disable:max-line-length\n\n/**\n * Provides an internationalization service. When the passed component is a direct or indirect child of `IntlProvider`, the returned service uses the locale of the provider. Otherwise, uses `en` as a default locale. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\n\nexport function provideIntlService(component) {\n  if (!component && process.env.NODE_ENV !== 'production') {\n    throw \"Passed component - \" + component + \" is invalid.\";\n  }\n\n  return component.context && component.context.intl ? component.context.intl : new IntlService('en');\n}\n/**\n * Provides a localization service. When the passed component is a direct or indirect child of `LocalizationProvider`, the returned service uses the language of the provider. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\n\nexport function provideLocalizationService(component) {\n  if (!component && process.env.NODE_ENV !== 'production') {\n    throw \"Passed component - \" + component + \" is invalid.\";\n  }\n\n  return component.context && component.context.localization ? component.context.localization : new LocalizationService();\n}\n/**\n * A method which registers a component class or a functional stateless component for internationalization. When a component of that type is a direct or indirect child of `IntlProvider`, the locale of the provider is used. Otherwise, uses `en` as a default locale.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\n\nexport function registerForIntl(component) {\n  component.contextType = GlobalizationContext;\n}\n/**\n * A method which registers a component class or a stateless functional component for localization. When a component of that type is a direct or indirect child of `LocalizationProvider`, the language of the provider is used.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\n\nexport function registerForLocalization(component) {\n  component.contextType = GlobalizationContext;\n} // tslint:enable:max-line-length","map":{"version":3,"sources":["../../src/intlUtils.ts"],"names":[],"mappings":"AAEA,SAAS,WAAT,QAA4B,oBAA5B;AACA,SAAS,mBAAT,QAAoC,oCAApC;AACA,SAAS,oBAAT,QAAqC,sCAArC,C,CAIA;;AACA;;;;;;AAKA,OAAM,SAAU,kBAAV,CAA6B,SAA7B,EAAuD;AACzD,MAAI,CAAC,SAAD,IAAc,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA3C,EAAyD;AACrD,UAAM,wBAAsB,SAAtB,GAA+B,cAArC;AACH;;AAED,SAAO,SAAS,CAAC,OAAV,IAAqB,SAAS,CAAC,OAAV,CAAkB,IAAvC,GACD,SAAS,CAAC,OAAV,CAAkB,IADjB,GAED,IAAI,WAAJ,CAAgB,IAAhB,CAFN;AAGH;AAED;;;;;;AAKA,OAAM,SAAU,0BAAV,CAAqC,SAArC,EAA+D;AACjE,MAAI,CAAC,SAAD,IAAc,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA3C,EAAyD;AACrD,UAAM,wBAAsB,SAAtB,GAA+B,cAArC;AACH;;AAED,SAAO,SAAS,CAAC,OAAV,IAAqB,SAAS,CAAC,OAAV,CAAkB,YAAvC,GACD,SAAS,CAAC,OAAV,CAAkB,YADjB,GAED,IAAI,mBAAJ,EAFN;AAGH;AAED;;;;;;AAKA,OAAM,SAAU,eAAV,CAA0B,SAA1B,EAAyD;AAC3D,EAAA,SAAS,CAAC,WAAV,GAAwB,oBAAxB;AACH;AAED;;;;;;AAKA,OAAM,SAAU,uBAAV,CAAkC,SAAlC,EAAiE;AACnE,EAAA,SAAS,CAAC,WAAV,GAAwB,oBAAxB;AACH,C,CACD","sourceRoot":"","sourcesContent":["import { IntlService } from './Intl/IntlService';\nimport { LocalizationService } from './Localization/LocalizationService';\nimport { GlobalizationContext } from './globalization/GlobalizationContext';\n// tslint:disable:max-line-length\n/**\n * Provides an internationalization service. When the passed component is a direct or indirect child of `IntlProvider`, the returned service uses the locale of the provider. Otherwise, uses `en` as a default locale. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\nexport function provideIntlService(component) {\n    if (!component && process.env.NODE_ENV !== 'production') {\n        throw \"Passed component - \" + component + \" is invalid.\";\n    }\n    return component.context && component.context.intl\n        ? component.context.intl\n        : new IntlService('en');\n}\n/**\n * Provides a localization service. When the passed component is a direct or indirect child of `LocalizationProvider`, the returned service uses the language of the provider. To handle locale changes, call the method on each `render`.\n *\n * @param componentClass - The React component class that will use the internationalization service.\n */\nexport function provideLocalizationService(component) {\n    if (!component && process.env.NODE_ENV !== 'production') {\n        throw \"Passed component - \" + component + \" is invalid.\";\n    }\n    return component.context && component.context.localization\n        ? component.context.localization\n        : new LocalizationService();\n}\n/**\n * A method which registers a component class or a functional stateless component for internationalization. When a component of that type is a direct or indirect child of `IntlProvider`, the locale of the provider is used. Otherwise, uses `en` as a default locale.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\nexport function registerForIntl(component) {\n    component.contextType = GlobalizationContext;\n}\n/**\n * A method which registers a component class or a stateless functional component for localization. When a component of that type is a direct or indirect child of `LocalizationProvider`, the language of the provider is used.\n *\n * @param component - The React component class that will use the internationalization methods.\n */\nexport function registerForLocalization(component) {\n    component.contextType = GlobalizationContext;\n}\n// tslint:enable:max-line-length\n//# sourceMappingURL=intlUtils.js.map"]},"metadata":{},"sourceType":"module"}