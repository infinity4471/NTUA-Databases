{"ast":null,"code":"import { exec, map, aggregatesCombinator, expandAggregates } from '../transducers';\nvar identity = map(function (x) {\n  return x;\n}); // tslint:disable:max-line-length\n\n/**\n * Applies the specified [`AggregateDescriptors`]({% slug api_kendo-data-query_aggregatedescriptor %}) to the data. Returns an [`AggregateResult`]({% slug api_kendo-data-query_aggregateresult %}) instance.\n *\n * @example\n * ```ts-no-run\n * const data = [\n *    { unitPrice: 23, unitsInStock: 21 },\n *    { unitPrice: 10, unitsInStock: 12 },\n *    { unitPrice: 20, unitsInStock: 33 }\n * ];\n *\n * const result = aggregateBy(data, [\n *   { aggregate: \"sum\", field: \"unitPrice\" },\n *   { aggregate: \"sum\", field: \"unitsInStock\" }\n * ]);\n *\n * //output:\n * // {\n * //     \"unitPrice\": { \"sum\": 53 },\n * //     \"unitsInStock\": { \"sum\": 66 }\n * // }\n * ```\n * @param {T[]} data - The data on which the calculation will be executed.\n * @param {AggregateDescriptor[]} descriptors - The aggregate operations that will be executed.\n * @param {any} transformers - For internal use.\n * @returns {AggregateResult} - The aggregated result.\n * For more information, refer to the [`aggregateresult`]({% slug api_kendo-data-query_aggregateresult %}) configuration.\n */\n// tslint:enable:max-line-length\n\nexport var aggregateBy = function (data, descriptors, transformers) {\n  if (descriptors === void 0) {\n    descriptors = [];\n  }\n\n  if (transformers === void 0) {\n    transformers = identity;\n  }\n\n  var initialValue = {};\n\n  if (!descriptors.length) {\n    return initialValue;\n  }\n\n  var result = exec(transformers(aggregatesCombinator(descriptors)), initialValue, data);\n  return expandAggregates(result);\n};","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/node_modules/@progress/kendo-data-query/dist/es/grouping/aggregate.operators.js"],"names":["exec","map","aggregatesCombinator","expandAggregates","identity","x","aggregateBy","data","descriptors","transformers","initialValue","length","result"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,oBAApB,EAA0CC,gBAA1C,QAAkE,gBAAlE;AACA,IAAIC,QAAQ,GAAGH,GAAG,CAAC,UAAUI,CAAV,EAAa;AAAE,SAAOA,CAAP;AAAW,CAA3B,CAAlB,C,CACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;;AACA,OAAO,IAAIC,WAAW,GAAG,UAAUC,IAAV,EAAgBC,WAAhB,EAA6BC,YAA7B,EAA2C;AAChE,MAAID,WAAW,KAAK,KAAK,CAAzB,EAA4B;AAAEA,IAAAA,WAAW,GAAG,EAAd;AAAmB;;AACjD,MAAIC,YAAY,KAAK,KAAK,CAA1B,EAA6B;AAAEA,IAAAA,YAAY,GAAGL,QAAf;AAA0B;;AACzD,MAAIM,YAAY,GAAG,EAAnB;;AACA,MAAI,CAACF,WAAW,CAACG,MAAjB,EAAyB;AACrB,WAAOD,YAAP;AACH;;AACD,MAAIE,MAAM,GAAGZ,IAAI,CAACS,YAAY,CAACP,oBAAoB,CAACM,WAAD,CAArB,CAAb,EAAkDE,YAAlD,EAAgEH,IAAhE,CAAjB;AACA,SAAOJ,gBAAgB,CAACS,MAAD,CAAvB;AACH,CATM","sourcesContent":["import { exec, map, aggregatesCombinator, expandAggregates } from '../transducers';\nvar identity = map(function (x) { return x; });\n// tslint:disable:max-line-length\n/**\n * Applies the specified [`AggregateDescriptors`]({% slug api_kendo-data-query_aggregatedescriptor %}) to the data. Returns an [`AggregateResult`]({% slug api_kendo-data-query_aggregateresult %}) instance.\n *\n * @example\n * ```ts-no-run\n * const data = [\n *    { unitPrice: 23, unitsInStock: 21 },\n *    { unitPrice: 10, unitsInStock: 12 },\n *    { unitPrice: 20, unitsInStock: 33 }\n * ];\n *\n * const result = aggregateBy(data, [\n *   { aggregate: \"sum\", field: \"unitPrice\" },\n *   { aggregate: \"sum\", field: \"unitsInStock\" }\n * ]);\n *\n * //output:\n * // {\n * //     \"unitPrice\": { \"sum\": 53 },\n * //     \"unitsInStock\": { \"sum\": 66 }\n * // }\n * ```\n * @param {T[]} data - The data on which the calculation will be executed.\n * @param {AggregateDescriptor[]} descriptors - The aggregate operations that will be executed.\n * @param {any} transformers - For internal use.\n * @returns {AggregateResult} - The aggregated result.\n * For more information, refer to the [`aggregateresult`]({% slug api_kendo-data-query_aggregateresult %}) configuration.\n */\n// tslint:enable:max-line-length\nexport var aggregateBy = function (data, descriptors, transformers) {\n    if (descriptors === void 0) { descriptors = []; }\n    if (transformers === void 0) { transformers = identity; }\n    var initialValue = {};\n    if (!descriptors.length) {\n        return initialValue;\n    }\n    var result = exec(transformers(aggregatesCombinator(descriptors)), initialValue, data);\n    return expandAggregates(result);\n};\n"]},"metadata":{},"sourceType":"module"}