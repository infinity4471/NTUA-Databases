{"ast":null,"code":"/**\n * @hidden\n */\nexport var defaultFormat = 'd';\n/**\n * @hidden\n */\n\nexport var defaultFormatPlaceholder = 'wide';\n/**\n * @hidden\n */\n\nexport var padZero = function (length) {\n  return new Array(Math.max(length, 0)).fill('0').join('');\n};\n/**\n * @hidden\n */\n\nexport var approximateStringMatching = function (oldTextOrigin, oldFormat, newTextOrigin, selectionStart) {\n  /*\n    Remove the right part of the cursor.\n    oldFormat = oldFormat.substring(0, caret + oldText.length - newText.length);\n  */\n  var oldTextSeparator = oldTextOrigin[selectionStart + oldTextOrigin.length - newTextOrigin.length];\n  var oldText = oldTextOrigin.substring(0, selectionStart + oldTextOrigin.length - newTextOrigin.length);\n  var newText = newTextOrigin.substring(0, selectionStart);\n  var diff = [];\n  /* Handle the typing of a single character over the same selection. */\n\n  if (oldText === newText && selectionStart > 0) {\n    diff.push([oldFormat[selectionStart - 1], newText[selectionStart - 1]]);\n    return diff;\n  }\n\n  if (oldText.indexOf(newText) === 0 && (newText.length === 0 || oldFormat[newText.length - 1] !== oldFormat[newText.length])) {\n    /* Handle Delete/Backspace. */\n    var deletedSymbol = '';\n    /*\n        The whole text is replaced by the same character.\n        A nasty patch is required to keep the selection in the first segment.\n    */\n\n    if (newText.length === 1) {\n      diff.push([oldFormat[0], newText[0]]);\n    }\n\n    for (var i = newText.length; i < oldText.length; i++) {\n      if (oldFormat[i] !== deletedSymbol && oldFormat[i] !== '_') {\n        deletedSymbol = oldFormat[i];\n        diff.push([deletedSymbol, '']);\n      }\n    }\n\n    return diff;\n  }\n  /*\n      Handle the insertion of the text (the new text is longer than the previous one).\n      Handle the typing over a literal as well.\n  */\n\n\n  if (newText.indexOf(oldText) === 0 || oldFormat[selectionStart - 1] === '_') {\n    var symbol = oldFormat[0];\n\n    for (var i = Math.max(0, oldText.length - 1); i < oldFormat.length; i++) {\n      if (oldFormat[i] !== '_') {\n        symbol = oldFormat[i];\n        break;\n      }\n    }\n\n    return [[symbol, newText[selectionStart - 1]]];\n  }\n  /* Handle the entering of a space or a separator for navigating to the next item. */\n\n\n  if (newText[newText.length - 1] === ' ' || newText[newText.length - 1] === oldTextSeparator) {\n    return [[oldFormat[selectionStart - 1], '_']];\n  }\n  /* Handle typing over a correctly selected part. */\n\n\n  return [[oldFormat[selectionStart - 1], newText[selectionStart - 1]]];\n};\n/**\n * @hidden\n */\n\nexport var dateSymbolMap = function (map, part) {\n  map[part.pattern[0]] = part.type;\n  return map;\n};\n/**\n * @hidden\n */\n\nexport var isInRange = function (candidate, min, max) {\n  return candidate === null || !(min && min > candidate || max && max < candidate);\n};\n/**\n * @hidden\n */\n\nexport var invalidClasses = ['k-state-invalid'];\n/** @hidden */\n\nexport var wrapperClasses = ['k-widget', 'k-dateinput'];","map":{"version":3,"sources":["../../../src/dateinput/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @hidden\n */\nexport var defaultFormat = 'd';\n/**\n * @hidden\n */\nexport var defaultFormatPlaceholder = 'wide';\n/**\n * @hidden\n */\nexport var padZero = function (length) { return new Array(Math.max(length, 0)).fill('0').join(''); };\n/**\n * @hidden\n */\nexport var approximateStringMatching = function (oldTextOrigin, oldFormat, newTextOrigin, selectionStart) {\n    /*\n      Remove the right part of the cursor.\n      oldFormat = oldFormat.substring(0, caret + oldText.length - newText.length);\n    */\n    var oldTextSeparator = oldTextOrigin[selectionStart + oldTextOrigin.length - newTextOrigin.length];\n    var oldText = oldTextOrigin.substring(0, selectionStart + oldTextOrigin.length - newTextOrigin.length);\n    var newText = newTextOrigin.substring(0, selectionStart);\n    var diff = [];\n    /* Handle the typing of a single character over the same selection. */\n    if (oldText === newText && selectionStart > 0) {\n        diff.push([oldFormat[selectionStart - 1], newText[selectionStart - 1]]);\n        return diff;\n    }\n    if (oldText.indexOf(newText) === 0 &&\n        (newText.length === 0 || oldFormat[newText.length - 1] !== oldFormat[newText.length])) {\n        /* Handle Delete/Backspace. */\n        var deletedSymbol = '';\n        /*\n            The whole text is replaced by the same character.\n            A nasty patch is required to keep the selection in the first segment.\n        */\n        if (newText.length === 1) {\n            diff.push([oldFormat[0], newText[0]]);\n        }\n        for (var i = newText.length; i < oldText.length; i++) {\n            if (oldFormat[i] !== deletedSymbol && oldFormat[i] !== '_') {\n                deletedSymbol = oldFormat[i];\n                diff.push([deletedSymbol, '']);\n            }\n        }\n        return diff;\n    }\n    /*\n        Handle the insertion of the text (the new text is longer than the previous one).\n        Handle the typing over a literal as well.\n    */\n    if (newText.indexOf(oldText) === 0 || oldFormat[selectionStart - 1] === '_') {\n        var symbol = oldFormat[0];\n        for (var i = Math.max(0, oldText.length - 1); i < oldFormat.length; i++) {\n            if (oldFormat[i] !== '_') {\n                symbol = oldFormat[i];\n                break;\n            }\n        }\n        return [[symbol, newText[selectionStart - 1]]];\n    }\n    /* Handle the entering of a space or a separator for navigating to the next item. */\n    if (newText[newText.length - 1] === ' ' || newText[newText.length - 1] === oldTextSeparator) {\n        return [[oldFormat[selectionStart - 1], '_']];\n    }\n    /* Handle typing over a correctly selected part. */\n    return [[oldFormat[selectionStart - 1], newText[selectionStart - 1]]];\n};\n/**\n * @hidden\n */\nexport var dateSymbolMap = function (map, part) { map[part.pattern[0]] = part.type; return map; };\n/**\n * @hidden\n */\nexport var isInRange = function (candidate, min, max) { return (candidate === null || !((min && min > candidate) || (max && max < candidate))); };\n/**\n * @hidden\n */\nexport var invalidClasses = ['k-state-invalid'];\n/** @hidden */\nexport var wrapperClasses = ['k-widget', 'k-dateinput'];\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}