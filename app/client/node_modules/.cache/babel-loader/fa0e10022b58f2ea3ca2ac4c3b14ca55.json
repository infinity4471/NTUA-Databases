{"ast":null,"code":"import { Day } from './day.enum';\nimport { addDays } from './add-days';\nimport { createDate } from './create-date';\nimport { prevDayOfWeek } from './prev-day-of-week';\nimport { MS_PER_DAY } from './constants';\n\nvar moveDateToWeekStart = function (date, weekStartDay) {\n  if (weekStartDay !== Day.Monday) {\n    return addDays(prevDayOfWeek(date, weekStartDay), 4);\n  }\n\n  return addDays(date, 4 - (date.getDay() || 7));\n};\n\nvar calcWeekInYear = function (date, weekStartDay) {\n  var firstWeekInYear = createDate(date.getFullYear(), 0, 1, -6);\n  var newDate = moveDateToWeekStart(date, weekStartDay);\n  var diffInMS = newDate.getTime() - firstWeekInYear.getTime();\n  var days = Math.floor(diffInMS / MS_PER_DAY);\n  return 1 + Math.floor(days / 7);\n};\n/**\n * A function that returns the number of the week within a year, which is calculated in relation to the date.\n *\n * For more information, refer to the [**ISO week date**](https://en.wikipedia.org/wiki/ISO_week_date) article.\n *\n * @param date - The date used for the week number calculation.\n * @param weekStartDay - The first day of the week. By default, the first week day is Monday.\n * @returns - The number of the week within the year.\n *\n * @example\n * ```ts-no-run\n * weekInYear(new Date(2016, 0, 1)); // Week 53, 2015\n * weekInYear(new Date(2016, 0, 5)); // Week 1, 2016\n * weekInYear(new Date(2017, 0, 1)); // Week 52, 2016\n * weekInYear(new Date(2017, 0, 2)); // Week 1, 2017\n * ```\n */\n\n\nexport var weekInYear = function (date, weekStartDay) {\n  if (weekStartDay === void 0) {\n    weekStartDay = Day.Monday;\n  }\n\n  var prevWeekDate = addDays(date, -7);\n  var nextWeekDate = addDays(date, 7);\n  var weekNumber = calcWeekInYear(date, weekStartDay);\n\n  if (weekNumber === 0) {\n    return calcWeekInYear(prevWeekDate, weekStartDay) + 1;\n  }\n\n  if (weekNumber === 53 && calcWeekInYear(nextWeekDate, weekStartDay) > 1) {\n    return 1;\n  }\n\n  return weekNumber;\n};","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/node_modules/@progress/kendo-date-math/dist/es/week-in-year.js"],"names":["Day","addDays","createDate","prevDayOfWeek","MS_PER_DAY","moveDateToWeekStart","date","weekStartDay","Monday","getDay","calcWeekInYear","firstWeekInYear","getFullYear","newDate","diffInMS","getTime","days","Math","floor","weekInYear","prevWeekDate","nextWeekDate","weekNumber"],"mappings":"AAAA,SAASA,GAAT,QAAoB,YAApB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,UAAT,QAA2B,aAA3B;;AACA,IAAIC,mBAAmB,GAAG,UAAUC,IAAV,EAAgBC,YAAhB,EAA8B;AACpD,MAAIA,YAAY,KAAKP,GAAG,CAACQ,MAAzB,EAAiC;AAC7B,WAAOP,OAAO,CAACE,aAAa,CAACG,IAAD,EAAOC,YAAP,CAAd,EAAoC,CAApC,CAAd;AACH;;AACD,SAAON,OAAO,CAACK,IAAD,EAAQ,KAAKA,IAAI,CAACG,MAAL,MAAiB,CAAtB,CAAR,CAAd;AACH,CALD;;AAMA,IAAIC,cAAc,GAAG,UAAUJ,IAAV,EAAgBC,YAAhB,EAA8B;AAC/C,MAAII,eAAe,GAAGT,UAAU,CAACI,IAAI,CAACM,WAAL,EAAD,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAAC,CAA5B,CAAhC;AACA,MAAIC,OAAO,GAAGR,mBAAmB,CAACC,IAAD,EAAOC,YAAP,CAAjC;AACA,MAAIO,QAAQ,GAAGD,OAAO,CAACE,OAAR,KAAoBJ,eAAe,CAACI,OAAhB,EAAnC;AACA,MAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,QAAQ,GAAGV,UAAtB,CAAX;AACA,SAAO,IAAIa,IAAI,CAACC,KAAL,CAAWF,IAAI,GAAG,CAAlB,CAAX;AACH,CAND;AAOA;;;;;;;;;;;;;;;;;;;AAiBA,OAAO,IAAIG,UAAU,GAAG,UAAUb,IAAV,EAAgBC,YAAhB,EAA8B;AAClD,MAAIA,YAAY,KAAK,KAAK,CAA1B,EAA6B;AAAEA,IAAAA,YAAY,GAAGP,GAAG,CAACQ,MAAnB;AAA4B;;AAC3D,MAAIY,YAAY,GAAGnB,OAAO,CAACK,IAAD,EAAO,CAAC,CAAR,CAA1B;AACA,MAAIe,YAAY,GAAGpB,OAAO,CAACK,IAAD,EAAO,CAAP,CAA1B;AACA,MAAIgB,UAAU,GAAGZ,cAAc,CAACJ,IAAD,EAAOC,YAAP,CAA/B;;AACA,MAAIe,UAAU,KAAK,CAAnB,EAAsB;AAClB,WAAOZ,cAAc,CAACU,YAAD,EAAeb,YAAf,CAAd,GAA6C,CAApD;AACH;;AACD,MAAIe,UAAU,KAAK,EAAf,IAAqBZ,cAAc,CAACW,YAAD,EAAed,YAAf,CAAd,GAA6C,CAAtE,EAAyE;AACrE,WAAO,CAAP;AACH;;AACD,SAAOe,UAAP;AACH,CAZM","sourcesContent":["import { Day } from './day.enum';\nimport { addDays } from './add-days';\nimport { createDate } from './create-date';\nimport { prevDayOfWeek } from './prev-day-of-week';\nimport { MS_PER_DAY } from './constants';\nvar moveDateToWeekStart = function (date, weekStartDay) {\n    if (weekStartDay !== Day.Monday) {\n        return addDays(prevDayOfWeek(date, weekStartDay), 4);\n    }\n    return addDays(date, (4 - (date.getDay() || 7)));\n};\nvar calcWeekInYear = function (date, weekStartDay) {\n    var firstWeekInYear = createDate(date.getFullYear(), 0, 1, -6);\n    var newDate = moveDateToWeekStart(date, weekStartDay);\n    var diffInMS = newDate.getTime() - firstWeekInYear.getTime();\n    var days = Math.floor(diffInMS / MS_PER_DAY);\n    return 1 + Math.floor(days / 7);\n};\n/**\n * A function that returns the number of the week within a year, which is calculated in relation to the date.\n *\n * For more information, refer to the [**ISO week date**](https://en.wikipedia.org/wiki/ISO_week_date) article.\n *\n * @param date - The date used for the week number calculation.\n * @param weekStartDay - The first day of the week. By default, the first week day is Monday.\n * @returns - The number of the week within the year.\n *\n * @example\n * ```ts-no-run\n * weekInYear(new Date(2016, 0, 1)); // Week 53, 2015\n * weekInYear(new Date(2016, 0, 5)); // Week 1, 2016\n * weekInYear(new Date(2017, 0, 1)); // Week 52, 2016\n * weekInYear(new Date(2017, 0, 2)); // Week 1, 2017\n * ```\n */\nexport var weekInYear = function (date, weekStartDay) {\n    if (weekStartDay === void 0) { weekStartDay = Day.Monday; }\n    var prevWeekDate = addDays(date, -7);\n    var nextWeekDate = addDays(date, 7);\n    var weekNumber = calcWeekInYear(date, weekStartDay);\n    if (weekNumber === 0) {\n        return calcWeekInYear(prevWeekDate, weekStartDay) + 1;\n    }\n    if (weekNumber === 53 && calcWeekInYear(nextWeekDate, weekStartDay) > 1) {\n        return 1;\n    }\n    return weekNumber;\n};\n"]},"metadata":{},"sourceType":"module"}