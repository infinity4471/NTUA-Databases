{"ast":null,"code":"var _jsxFileName = \"/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/src/components/App.js\";\nimport React from 'react';\nimport { StoreSelector, ClientSelector } from './MenuSelector';\nimport { connect } from 'react-redux';\nimport { selectCustomer, updateCustomers, updateStores, updateCustomersData, getAllTransactions } from '../actions';\nimport io from 'socket.io-client';\nconst url = \"http://localhost:8000\";\n\nconst App = ({\n  addresses,\n  names,\n  transactions\n}) => {\n  let socket = io(url);\n  socket.on('CUSTOMER_NAMES', data => {\n    names = data;\n  });\n  socket.on('STORE_ADDRESSES', data => {\n    addresses = data;\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(StoreSelector, {\n    items: addresses,\n    grid_data: transactions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(ClientSelector, {\n    items: names,\n    grid_data: [],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 3\n    }\n  }));\n};\n/*const mapStateToProps = (state) => ({\n\tnames: state.customers.names,\n\taddresses: state.stores.addresses,\n\ttransactions: state.transactions.data\n});*/\n\n/*const mapDispatchToProps = (dispatch) => ({\n\tupdateCustomers: (names) => dispatch(updateCustomers(names)),\t\n\tupdateStores: (addresses) => dispatch(updateStores(addresses)),\n\tgetAllTransactions: (data) => dispatch(getAllTransactions(data))\n});*/\n\n\nexport default App;","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/src/components/App.js"],"names":["React","StoreSelector","ClientSelector","connect","selectCustomer","updateCustomers","updateStores","updateCustomersData","getAllTransactions","io","url","App","addresses","names","transactions","socket","on","data"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,aAAR,EAAuBC,cAAvB,QAA4C,gBAA5C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAAQC,cAAR,EACCC,eADD,EAECC,YAFD,EAGCC,mBAHD,EAICC,kBAJD,QAI0B,YAJ1B;AAKA,OAAOC,EAAP,MAAe,kBAAf;AAEA,MAAMC,GAAG,GAAG,uBAAZ;;AAEA,MAAMC,GAAG,GAAG,CAAC;AACZC,EAAAA,SADY;AAEZC,EAAAA,KAFY;AAGZC,EAAAA;AAHY,CAAD,KAIN;AACL,MAAIC,MAAM,GAAGN,EAAE,CAAEC,GAAF,CAAf;AACAK,EAAAA,MAAM,CAACC,EAAP,CAAU,gBAAV,EAA4BC,IAAI,IAAI;AACnCJ,IAAAA,KAAK,GAAGI,IAAR;AACA,GAFD;AAGAF,EAAAA,MAAM,CAACC,EAAP,CAAU,iBAAV,EAA6BC,IAAI,IAAI;AACpCL,IAAAA,SAAS,GAAGK,IAAZ;AACA,GAFD;AAGA,sBACC;AAAK,IAAA,EAAE,EAAC,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAEL,SAAtB;AAAiC,IAAA,SAAS,EAAEE,YAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAEA,oBAAC,cAAD;AAAgB,IAAA,KAAK,EAAED,KAAvB;AAA8B,IAAA,SAAS,EAAE,EAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CADD;AAMA,CAlBD;AAoBA;;;;;;AAMA;;;;;;;AAMA,eAAgBF,GAAhB","sourcesContent":["import React from 'react';\nimport {StoreSelector, ClientSelector} from './MenuSelector';\nimport { connect } from 'react-redux';\nimport {selectCustomer, \n\tupdateCustomers, \n\tupdateStores, \n\tupdateCustomersData,\n\tgetAllTransactions} from '../actions';\nimport io from 'socket.io-client'\n\nconst url = \"http://localhost:8000\"\n\nconst App = ({\n\taddresses,\n\tnames,\n\ttransactions\n}) => {\n\tlet socket = io( url )\n\tsocket.on('CUSTOMER_NAMES', data => {\n\t\tnames = data;\n\t});\n\tsocket.on('STORE_ADDRESSES', data => {\n\t\taddresses = data;\n\t});\n\treturn (\n\t\t<div id=\"App\">\n\t\t<StoreSelector items={addresses} grid_data={transactions}/>\n\t\t<ClientSelector items={names} grid_data={[]}/>\n\t\t</div>\n\t);\n}\n\n/*const mapStateToProps = (state) => ({\n\tnames: state.customers.names,\n\taddresses: state.stores.addresses,\n\ttransactions: state.transactions.data\n});*/\n\n/*const mapDispatchToProps = (dispatch) => ({\n\tupdateCustomers: (names) => dispatch(updateCustomers(names)),\t\n\tupdateStores: (addresses) => dispatch(updateStores(addresses)),\n\tgetAllTransactions: (data) => dispatch(getAllTransactions(data))\n});*/\n\nexport default (App);\n\n"]},"metadata":{},"sourceType":"module"}