{"ast":null,"code":"import ObserversMixin from '../mixins/observers-mixin';\nimport { Class } from '../common';\nvar push = [].push;\nvar pop = [].pop;\nvar splice = [].splice;\nvar shift = [].shift;\nvar slice = [].slice;\nvar unshift = [].unshift;\n\nvar ElementsArray = function (Class) {\n  function ElementsArray(array) {\n    if (array === void 0) array = [];\n    Class.call(this);\n    this.length = 0;\n\n    this._splice(0, array.length, array);\n  }\n\n  if (Class) ElementsArray.__proto__ = Class;\n  ElementsArray.prototype = Object.create(Class && Class.prototype);\n  ElementsArray.prototype.constructor = ElementsArray;\n\n  ElementsArray.prototype.elements = function elements(value) {\n    if (value) {\n      this._splice(0, this.length, value);\n\n      this._change();\n\n      return this;\n    }\n\n    return this.slice(0);\n  };\n\n  ElementsArray.prototype.push = function push$1() {\n    var elements = arguments;\n    var result = push.apply(this, elements);\n\n    this._add(elements);\n\n    return result;\n  };\n\n  ElementsArray.prototype.slice = function slice$1() {\n    return slice.call(this);\n  };\n\n  ElementsArray.prototype.pop = function pop$1() {\n    var length = this.length;\n    var result = pop.apply(this);\n\n    if (length) {\n      this._remove([result]);\n    }\n\n    return result;\n  };\n\n  ElementsArray.prototype.splice = function splice(index, howMany) {\n    var elements = slice.call(arguments, 2);\n\n    var result = this._splice(index, howMany, elements);\n\n    this._change();\n\n    return result;\n  };\n\n  ElementsArray.prototype.shift = function shift$1() {\n    var length = this.length;\n    var result = shift.apply(this);\n\n    if (length) {\n      this._remove([result]);\n    }\n\n    return result;\n  };\n\n  ElementsArray.prototype.unshift = function unshift$1() {\n    var elements = arguments;\n    var result = unshift.apply(this, elements);\n\n    this._add(elements);\n\n    return result;\n  };\n\n  ElementsArray.prototype.indexOf = function indexOf(element) {\n    var this$1 = this;\n    var length = this.length;\n\n    for (var idx = 0; idx < length; idx++) {\n      if (this$1[idx] === element) {\n        return idx;\n      }\n    }\n\n    return -1;\n  };\n\n  ElementsArray.prototype._splice = function _splice(index, howMany, elements) {\n    var result = splice.apply(this, [index, howMany].concat(elements));\n\n    this._clearObserver(result);\n\n    this._setObserver(elements);\n\n    return result;\n  };\n\n  ElementsArray.prototype._add = function _add(elements) {\n    this._setObserver(elements);\n\n    this._change();\n  };\n\n  ElementsArray.prototype._remove = function _remove(elements) {\n    this._clearObserver(elements);\n\n    this._change();\n  };\n\n  ElementsArray.prototype._setObserver = function _setObserver(elements) {\n    var this$1 = this;\n\n    for (var idx = 0; idx < elements.length; idx++) {\n      elements[idx].addObserver(this$1);\n    }\n  };\n\n  ElementsArray.prototype._clearObserver = function _clearObserver(elements) {\n    var this$1 = this;\n\n    for (var idx = 0; idx < elements.length; idx++) {\n      elements[idx].removeObserver(this$1);\n    }\n  };\n\n  ElementsArray.prototype._change = function _change() {};\n\n  return ElementsArray;\n}(Class);\n\nObserversMixin.extend(ElementsArray.prototype);\nexport default ElementsArray;","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/node_modules/@progress/kendo-drawing/dist/es/shapes/elements-array.js"],"names":["ObserversMixin","Class","push","pop","splice","shift","slice","unshift","ElementsArray","array","call","length","_splice","__proto__","prototype","Object","create","constructor","elements","value","_change","push$1","arguments","result","apply","_add","slice$1","pop$1","_remove","index","howMany","shift$1","unshift$1","indexOf","element","this$1","idx","concat","_clearObserver","_setObserver","addObserver","removeObserver","extend"],"mappings":"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","sourcesContent":["import ObserversMixin from '../mixins/observers-mixin';\nimport { Class } from '../common';\n\nvar push = [].push;\nvar pop = [].pop;\nvar splice = [].splice;\nvar shift = [].shift;\nvar slice = [].slice;\nvar unshift = [].unshift;\n\nvar ElementsArray = (function (Class) {\n    function ElementsArray(array) {\n        if ( array === void 0 ) array = [];\n\n        Class.call(this);\n\n        this.length = 0;\n        this._splice(0, array.length, array);\n    }\n\n    if ( Class ) ElementsArray.__proto__ = Class;\n    ElementsArray.prototype = Object.create( Class && Class.prototype );\n    ElementsArray.prototype.constructor = ElementsArray;\n\n    ElementsArray.prototype.elements = function elements (value) {\n        if (value) {\n            this._splice(0, this.length, value);\n\n            this._change();\n            return this;\n        }\n\n        return this.slice(0);\n    };\n\n    ElementsArray.prototype.push = function push$1 () {\n        var elements = arguments;\n        var result = push.apply(this, elements);\n\n        this._add(elements);\n\n        return result;\n    };\n\n    ElementsArray.prototype.slice = function slice$1 () {\n        return slice.call(this);\n    };\n\n    ElementsArray.prototype.pop = function pop$1 () {\n        var length = this.length;\n        var result = pop.apply(this);\n\n        if (length) {\n            this._remove([ result ]);\n        }\n\n        return result;\n    };\n\n    ElementsArray.prototype.splice = function splice (index, howMany) {\n        var elements = slice.call(arguments, 2);\n        var result = this._splice(index, howMany, elements);\n\n        this._change();\n\n        return result;\n    };\n\n    ElementsArray.prototype.shift = function shift$1 () {\n        var length = this.length;\n        var result = shift.apply(this);\n\n        if (length) {\n            this._remove([ result ]);\n        }\n\n        return result;\n    };\n\n    ElementsArray.prototype.unshift = function unshift$1 () {\n        var elements = arguments;\n        var result = unshift.apply(this, elements);\n\n        this._add(elements);\n\n        return result;\n    };\n\n    ElementsArray.prototype.indexOf = function indexOf (element) {\n        var this$1 = this;\n\n        var length = this.length;\n\n        for (var idx = 0; idx < length; idx++) {\n            if (this$1[idx] === element) {\n                return idx;\n            }\n        }\n        return -1;\n    };\n\n    ElementsArray.prototype._splice = function _splice (index, howMany, elements) {\n        var result = splice.apply(this, [ index, howMany ].concat(elements));\n\n        this._clearObserver(result);\n        this._setObserver(elements);\n\n        return result;\n    };\n\n    ElementsArray.prototype._add = function _add (elements) {\n        this._setObserver(elements);\n        this._change();\n    };\n\n    ElementsArray.prototype._remove = function _remove (elements) {\n        this._clearObserver(elements);\n        this._change();\n    };\n\n    ElementsArray.prototype._setObserver = function _setObserver (elements) {\n        var this$1 = this;\n\n        for (var idx = 0; idx < elements.length; idx++) {\n            elements[idx].addObserver(this$1);\n        }\n    };\n\n    ElementsArray.prototype._clearObserver = function _clearObserver (elements) {\n        var this$1 = this;\n\n        for (var idx = 0; idx < elements.length; idx++) {\n            elements[idx].removeObserver(this$1);\n        }\n    };\n\n    ElementsArray.prototype._change = function _change () {};\n\n    return ElementsArray;\n}(Class));\n\nObserversMixin.extend(ElementsArray.prototype);\n\nexport default ElementsArray;\n"]},"metadata":{},"sourceType":"module"}