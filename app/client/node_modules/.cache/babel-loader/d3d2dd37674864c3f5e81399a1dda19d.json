{"ast":null,"code":"var MONTHS = {\n  Jan: 0,\n  Feb: 1,\n  Mar: 2,\n  Apr: 3,\n  May: 4,\n  Jun: 5,\n  Jul: 6,\n  Aug: 7,\n  Sep: 8,\n  Oct: 9,\n  Nov: 10,\n  Dec: 11\n};\nvar DAYS = {\n  Sun: 0,\n  Mon: 1,\n  Tue: 2,\n  Wed: 3,\n  Thu: 4,\n  Fri: 5,\n  Sat: 6\n};\nvar MS_PER_MINUTE = 60000;\n/**\n * @hidden\n *\n * A function that finds zone rules which become applicable after a specific time.\n *\n * @param year - The value of the year.\n * @param rule - A specific zone rule.\n * @param zone - The definition of the zone.\n *\n * @return - Returns an extended rule.\n *\n * @example\n * ```ts-no-run\n * ruleToDate(2018, rule); // A rule that contains {'2018': |2018 DST date| }\n * ```\n */\n\nexport var ruleToDate = function (year, rule, zoneOffset) {\n  var month = rule[3];\n  var on = rule[4];\n  var time = rule[5];\n  var date;\n  var ruleOffset = time[3] === 'u' ? -zoneOffset * MS_PER_MINUTE : 0;\n\n  if (!isNaN(on)) {\n    date = new Date(Date.UTC(year, MONTHS[month], on, time[0], time[1], time[2]) + ruleOffset);\n  } else if (on.indexOf('last') === 0) {\n    date = new Date(Date.UTC(year, MONTHS[month] + 1, 1, time[0] - 24, time[1], time[2]) + ruleOffset);\n    var targetDay = DAYS[on.substr(4, 3)];\n    var ourDay = date.getUTCDay();\n    date.setUTCDate(date.getUTCDate() + targetDay - ourDay - (targetDay > ourDay ? 7 : 0));\n  } else if (on.indexOf('>=') >= 0) {\n    date = new Date(Date.UTC(year, MONTHS[month], on.substr(5), time[0], time[1], time[2], 0) + ruleOffset);\n    var targetDay = DAYS[on.substr(0, 3)];\n    var ourDay = date.getUTCDay();\n    date.setUTCDate(date.getUTCDate() + targetDay - ourDay + (targetDay < ourDay ? 7 : 0));\n  }\n\n  return date;\n};","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/node_modules/@progress/kendo-date-math/dist/es/tz/rule-to-date.js"],"names":["MONTHS","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","DAYS","Sun","Mon","Tue","Wed","Thu","Fri","Sat","MS_PER_MINUTE","ruleToDate","year","rule","zoneOffset","month","on","time","date","ruleOffset","isNaN","Date","UTC","indexOf","targetDay","substr","ourDay","getUTCDay","setUTCDate","getUTCDate"],"mappings":"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","sourcesContent":["var MONTHS = { Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5, Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11 };\nvar DAYS = { Sun: 0, Mon: 1, Tue: 2, Wed: 3, Thu: 4, Fri: 5, Sat: 6 };\nvar MS_PER_MINUTE = 60000;\n/**\n * @hidden\n *\n * A function that finds zone rules which become applicable after a specific time.\n *\n * @param year - The value of the year.\n * @param rule - A specific zone rule.\n * @param zone - The definition of the zone.\n *\n * @return - Returns an extended rule.\n *\n * @example\n * ```ts-no-run\n * ruleToDate(2018, rule); // A rule that contains {'2018': |2018 DST date| }\n * ```\n */\nexport var ruleToDate = function (year, rule, zoneOffset) {\n    var month = rule[3];\n    var on = rule[4];\n    var time = rule[5];\n    var date;\n    var ruleOffset = time[3] === 'u' ? -zoneOffset * MS_PER_MINUTE : 0;\n    if (!isNaN(on)) {\n        date = new Date(Date.UTC(year, MONTHS[month], on, time[0], time[1], time[2]) + ruleOffset);\n    }\n    else if (on.indexOf('last') === 0) {\n        date = new Date(Date.UTC(year, MONTHS[month] + 1, 1, time[0] - 24, time[1], time[2]) + ruleOffset);\n        var targetDay = DAYS[on.substr(4, 3)];\n        var ourDay = date.getUTCDay();\n        date.setUTCDate(date.getUTCDate() + targetDay - ourDay - (targetDay > ourDay ? 7 : 0));\n    }\n    else if (on.indexOf('>=') >= 0) {\n        date = new Date(Date.UTC(year, MONTHS[month], on.substr(5), time[0], time[1], time[2], 0) + ruleOffset);\n        var targetDay = DAYS[on.substr(0, 3)];\n        var ourDay = date.getUTCDay();\n        date.setUTCDate(date.getUTCDate() + targetDay - ourDay + (targetDay < ourDay ? 7 : 0));\n    }\n    return date;\n};\n"]},"metadata":{},"sourceType":"module"}