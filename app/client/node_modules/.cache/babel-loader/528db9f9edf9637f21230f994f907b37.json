{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { ColorPaletteService } from './utils/color-palette.service';\nimport { classNames, Keys, dispatchEvent, guid, getTabIndex } from '@progress/kendo-react-common';\nimport { PALETTEPRESETS } from './models/palette-presets';\nimport { isPresent } from './utils/misc';\nimport { parseColor } from './utils/color-parser';\n/**\n * @hidden\n */\n\nexport var DEFAULT_TILE_SIZE = 24;\n/**\n * @hidden\n */\n\nexport var DEFAULT_COLUMNS_COUNT = 10;\n/**\n * @hidden\n */\n\nexport var DEFAULT_PRESET = 'office';\n/**\n * Represents the [KendoReact ColorPalette component]({% slug overview_colorpalette %}).\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *     render() {\n *         return <ColorPalette palette='basic' />;\n *     }\n * }\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\n\nvar ColorPalette =\n/** @class */\nfunction (_super) {\n  __extends(ColorPalette, _super);\n\n  function ColorPalette(props) {\n    var _this = _super.call(this, props) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.wrapper = null;\n    _this.guid = guid();\n    /**\n     * @hidden\n     */\n\n    _this.focus = function () {\n      if (_this.wrapper) {\n        _this.wrapper.focus();\n      }\n    };\n\n    _this.onKeyDown = function (event) {\n      switch (event.keyCode) {\n        case Keys.down:\n          _this.handleCellNavigation(0, 1);\n\n          break;\n\n        case Keys.up:\n          _this.handleCellNavigation(0, -1);\n\n          break;\n\n        case Keys.right:\n          _this.handleCellNavigation(1, 0);\n\n          break;\n\n        case Keys.left:\n          _this.handleCellNavigation(-1, 0);\n\n          break;\n\n        case Keys.enter:\n          _this.handleEnter(event);\n\n          break;\n\n        default:\n          return;\n      }\n\n      event.preventDefault();\n    };\n\n    _this.onColorClick = function (color, event) {\n      if (_this.isUncontrolled) {\n        _this.setState({\n          selectedColor: color,\n          focusedColor: color\n        });\n      } else {\n        _this.setState({\n          focusedColor: color\n        });\n      }\n\n      _this.dispatchChangeEvent(color, event);\n    };\n\n    _this.onFocus = function () {\n      _this.setState({\n        focusedColor: _this.state.selectedColor || _this.paletteService.colorRows[0][0]\n      });\n    };\n\n    _this.onBlur = function () {\n      _this.setState({\n        focusedColor: undefined\n      });\n    }; // The empty string for the `value` prop means no selection but controlled mode.\n\n\n    _this.state = {\n      selectedColor: _this.props.value !== undefined ? _this.props.value : _this.props.defaultValue,\n      isFirstRender: true\n    };\n    return _this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  ColorPalette.prototype.render = function () {\n    var _this = this;\n\n    var paletteInfo = this.getPaletteInfo();\n    var svc = this.paletteService = new ColorPaletteService();\n    svc.setColorMatrix(paletteInfo.colors, paletteInfo.columns);\n    var selectedCellCoords = svc.getCellCoordsFor(this.state.selectedColor);\n    var focusedCellCoords = svc.getCellCoordsFor(this.state.focusedColor);\n    var className = classNames('k-widget k-colorpalette', {\n      'k-state-disabled': this.props.disabled\n    });\n\n    if (paletteInfo.colors.length) {\n      return React.createElement(\"div\", {\n        id: this.props.id,\n        className: className,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        onKeyDown: this.onKeyDown,\n        \"aria-disabled\": this.props.disabled ? 'true' : undefined,\n        \"aria-activedescendant\": selectedCellCoords && this.createCellId(selectedCellCoords),\n        \"aria-labelledby\": this.props.ariaLabelledBy,\n        \"aria-describedby\": this.props.ariaDescribedBy,\n        tabIndex: getTabIndex(this.props.tabIndex, this.props.disabled),\n        ref: function (el) {\n          return _this.wrapper = el;\n        }\n      }, React.createElement(\"div\", {\n        role: \"grid\"\n      }, React.createElement(\"table\", {\n        className: \"k-palette k-reset\",\n        role: \"presentation\"\n      }, React.createElement(\"tbody\", null, this.renderRows(svc.colorRows, selectedCellCoords, focusedCellCoords)))));\n    } else {\n      // In this way, the code prevents an eventual focus of the component when no cells are available.\n      // This is needed because upon focus the first cell gets focused.\n      return '';\n    }\n  };\n  /**\n   * @hidden\n   */\n\n\n  ColorPalette.getDerivedStateFromProps = function (props, state) {\n    if (!state.isFirstRender && props.value !== undefined) {\n      // The component is in controlled mode.\n      if (props.value === '' && state.selectedColor !== undefined) {\n        // The selection has to be removed.\n        return {\n          selectedColor: undefined\n        };\n      } else if (props.value !== '' && props.value !== state.selectedColor) {\n        return {\n          selectedColor: props.value\n        };\n      }\n    } else if (state.isFirstRender) {\n      return {\n        isFirstRender: false\n      };\n    }\n\n    return null;\n  };\n\n  ColorPalette.prototype.handleCellNavigation = function (horizontalStep, verticalStep) {\n    if (this.focusedColorCooridanates) {\n      var newCoords = this.paletteService.getNextCell(this.focusedColorCooridanates, horizontalStep, verticalStep);\n      this.setState({\n        focusedColor: this.paletteService.getColorAt(newCoords)\n      });\n    } else {\n      this.setState({\n        focusedColor: this.paletteService.colorRows[0][0]\n      });\n    }\n  };\n\n  ColorPalette.prototype.handleEnter = function (event) {\n    if (this.isUncontrolled) {\n      this.setState({\n        selectedColor: this.state.focusedColor\n      });\n    }\n\n    this.dispatchChangeEvent(this.state.focusedColor, event);\n  };\n\n  ColorPalette.prototype.dispatchChangeEvent = function (value, event) {\n    dispatchEvent(this.props.onChange, event, this, {\n      value: value,\n      rgbaValue: parseColor(value, 'rgba')\n    });\n  };\n\n  Object.defineProperty(ColorPalette.prototype, \"focusedColorCooridanates\", {\n    get: function () {\n      return this.state.focusedColor ? this.paletteService.getCellCoordsFor(this.state.focusedColor) : undefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColorPalette.prototype, \"isUncontrolled\", {\n    get: function () {\n      return this.props.value === undefined;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ColorPalette.prototype.getPaletteInfo = function () {\n    if (typeof this.props.palette === 'string') {\n      var preset = PALETTEPRESETS[this.props.palette];\n\n      if (isPresent(preset)) {\n        return {\n          colors: preset.colors,\n          columns: this.props.columns || preset.columns || DEFAULT_COLUMNS_COUNT\n        };\n      } else {\n        return {\n          colors: [],\n          columns: 0\n        };\n      }\n    } else {\n      return {\n        colors: this.props.palette || [],\n        columns: this.props.columns || DEFAULT_COLUMNS_COUNT\n      };\n    }\n  };\n\n  ColorPalette.prototype.renderRows = function (rows, selectedCellCoords, focusedCellCoords) {\n    var _this = this;\n\n    return rows.map(function (row, i) {\n      return React.createElement(\"tr\", {\n        role: \"row\",\n        key: i\n      }, _this.renderColumns(row, i, selectedCellCoords, focusedCellCoords));\n    });\n  };\n\n  ColorPalette.prototype.renderColumns = function (columns, rowIndex, selectedCellCoords, focusedCellCoords) {\n    var _this = this;\n\n    var rowIsSelected = selectedCellCoords !== undefined && selectedCellCoords.row === rowIndex;\n    var selectedColumn = selectedCellCoords && selectedCellCoords.col;\n    var rowIsFocused = focusedCellCoords !== undefined && focusedCellCoords.row === rowIndex;\n    var focusedColumn = focusedCellCoords && focusedCellCoords.col;\n    var tileSize = typeof this.props.tileSize !== 'number' ? this.props.tileSize : {\n      width: this.props.tileSize,\n      height: this.props.tileSize\n    };\n    var width = tileSize.width + 'px';\n    var height = tileSize.height + 'px';\n    return columns.map(function (color, i) {\n      var isSelected = rowIsSelected && selectedColumn === i;\n      var className = classNames('k-item', {\n        'k-state-selected': isSelected,\n        'k-state-focused': rowIsFocused && focusedColumn === i\n      });\n      return React.createElement(\"td\", {\n        className: className,\n        \"aria-label\": color,\n        \"aria-selected\": isSelected ? true : _this.props.disabled ? undefined : false,\n        style: {\n          backgroundColor: color,\n          width: width,\n          height: height,\n          minWidth: width\n        },\n        onClick: function (event) {\n          return _this.onColorClick(color, event);\n        },\n        id: _this.createCellId({\n          row: rowIndex,\n          col: i\n        }),\n        key: i\n      });\n    });\n  };\n\n  ColorPalette.prototype.createCellId = function (cellCoords) {\n    return this.guid + \"_\" + cellCoords.row + \"_\" + cellCoords.col;\n  };\n  /**\n   * @hidden\n   */\n\n\n  ColorPalette.propTypes = {\n    palette: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n    columns: PropTypes.number,\n    tileSize: PropTypes.any,\n    defaultValue: PropTypes.string,\n    value: PropTypes.string,\n    disabled: PropTypes.bool,\n    tabIndex: PropTypes.number,\n    onChange: PropTypes.func,\n    id: PropTypes.string,\n    ariaLabelledBy: PropTypes.string,\n    ariaDescribedBy: PropTypes.string\n  };\n  /**\n   * @hidden\n   */\n\n  ColorPalette.defaultProps = {\n    palette: DEFAULT_PRESET,\n    tileSize: DEFAULT_TILE_SIZE\n  };\n  return ColorPalette;\n}(React.Component);\n\nexport { ColorPalette };","map":{"version":3,"sources":["../../../src/colors/ColorPalette.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { ColorPaletteService } from './utils/color-palette.service';\nimport { classNames, Keys, dispatchEvent, guid, getTabIndex } from '@progress/kendo-react-common';\nimport { PALETTEPRESETS } from './models/palette-presets';\nimport { isPresent } from './utils/misc';\nimport { parseColor } from './utils/color-parser';\n/**\n * @hidden\n */\nexport var DEFAULT_TILE_SIZE = 24;\n/**\n * @hidden\n */\nexport var DEFAULT_COLUMNS_COUNT = 10;\n/**\n * @hidden\n */\nexport var DEFAULT_PRESET = 'office';\n/**\n * Represents the [KendoReact ColorPalette component]({% slug overview_colorpalette %}).\n *\n * @example\n * ```jsx\n * class App extends React.Component {\n *     render() {\n *         return <ColorPalette palette='basic' />;\n *     }\n * }\n * ReactDOM.render(<App />, document.querySelector('my-app'));\n * ```\n */\nvar ColorPalette = /** @class */ (function (_super) {\n    __extends(ColorPalette, _super);\n    function ColorPalette(props) {\n        var _this = _super.call(this, props) || this;\n        /**\n         * @hidden\n         */\n        _this.wrapper = null;\n        _this.guid = guid();\n        /**\n         * @hidden\n         */\n        _this.focus = function () {\n            if (_this.wrapper) {\n                _this.wrapper.focus();\n            }\n        };\n        _this.onKeyDown = function (event) {\n            switch (event.keyCode) {\n                case Keys.down:\n                    _this.handleCellNavigation(0, 1);\n                    break;\n                case Keys.up:\n                    _this.handleCellNavigation(0, -1);\n                    break;\n                case Keys.right:\n                    _this.handleCellNavigation(1, 0);\n                    break;\n                case Keys.left:\n                    _this.handleCellNavigation(-1, 0);\n                    break;\n                case Keys.enter:\n                    _this.handleEnter(event);\n                    break;\n                default: return;\n            }\n            event.preventDefault();\n        };\n        _this.onColorClick = function (color, event) {\n            if (_this.isUncontrolled) {\n                _this.setState({ selectedColor: color, focusedColor: color });\n            }\n            else {\n                _this.setState({ focusedColor: color });\n            }\n            _this.dispatchChangeEvent(color, event);\n        };\n        _this.onFocus = function () {\n            _this.setState({ focusedColor: _this.state.selectedColor || _this.paletteService.colorRows[0][0] });\n        };\n        _this.onBlur = function () {\n            _this.setState({ focusedColor: undefined });\n        };\n        // The empty string for the `value` prop means no selection but controlled mode.\n        _this.state = {\n            selectedColor: _this.props.value !== undefined ? _this.props.value : _this.props.defaultValue,\n            isFirstRender: true\n        };\n        return _this;\n    }\n    /**\n     * @hidden\n     */\n    ColorPalette.prototype.render = function () {\n        var _this = this;\n        var paletteInfo = this.getPaletteInfo();\n        var svc = this.paletteService = new ColorPaletteService();\n        svc.setColorMatrix(paletteInfo.colors, paletteInfo.columns);\n        var selectedCellCoords = svc.getCellCoordsFor(this.state.selectedColor);\n        var focusedCellCoords = svc.getCellCoordsFor(this.state.focusedColor);\n        var className = classNames('k-widget k-colorpalette', { 'k-state-disabled': this.props.disabled });\n        if (paletteInfo.colors.length) {\n            return (React.createElement(\"div\", { id: this.props.id, className: className, onFocus: this.onFocus, onBlur: this.onBlur, onKeyDown: this.onKeyDown, \"aria-disabled\": this.props.disabled ? 'true' : undefined, \"aria-activedescendant\": selectedCellCoords && this.createCellId(selectedCellCoords), \"aria-labelledby\": this.props.ariaLabelledBy, \"aria-describedby\": this.props.ariaDescribedBy, tabIndex: getTabIndex(this.props.tabIndex, this.props.disabled), ref: function (el) { return _this.wrapper = el; } },\n                React.createElement(\"div\", { role: \"grid\" },\n                    React.createElement(\"table\", { className: \"k-palette k-reset\", role: \"presentation\" },\n                        React.createElement(\"tbody\", null, this.renderRows(svc.colorRows, selectedCellCoords, focusedCellCoords))))));\n        }\n        else {\n            // In this way, the code prevents an eventual focus of the component when no cells are available.\n            // This is needed because upon focus the first cell gets focused.\n            return '';\n        }\n    };\n    /**\n     * @hidden\n     */\n    ColorPalette.getDerivedStateFromProps = function (props, state) {\n        if (!state.isFirstRender && props.value !== undefined) {\n            // The component is in controlled mode.\n            if (props.value === '' && state.selectedColor !== undefined) {\n                // The selection has to be removed.\n                return { selectedColor: undefined };\n            }\n            else if (props.value !== '' && props.value !== state.selectedColor) {\n                return { selectedColor: props.value };\n            }\n        }\n        else if (state.isFirstRender) {\n            return { isFirstRender: false };\n        }\n        return null;\n    };\n    ColorPalette.prototype.handleCellNavigation = function (horizontalStep, verticalStep) {\n        if (this.focusedColorCooridanates) {\n            var newCoords = this.paletteService.getNextCell(this.focusedColorCooridanates, horizontalStep, verticalStep);\n            this.setState({ focusedColor: this.paletteService.getColorAt(newCoords) });\n        }\n        else {\n            this.setState({ focusedColor: this.paletteService.colorRows[0][0] });\n        }\n    };\n    ColorPalette.prototype.handleEnter = function (event) {\n        if (this.isUncontrolled) {\n            this.setState({ selectedColor: this.state.focusedColor });\n        }\n        this.dispatchChangeEvent(this.state.focusedColor, event);\n    };\n    ColorPalette.prototype.dispatchChangeEvent = function (value, event) {\n        dispatchEvent(this.props.onChange, event, this, { value: value, rgbaValue: parseColor(value, 'rgba') });\n    };\n    Object.defineProperty(ColorPalette.prototype, \"focusedColorCooridanates\", {\n        get: function () {\n            return this.state.focusedColor ? this.paletteService.getCellCoordsFor(this.state.focusedColor) : undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColorPalette.prototype, \"isUncontrolled\", {\n        get: function () {\n            return this.props.value === undefined;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ColorPalette.prototype.getPaletteInfo = function () {\n        if (typeof this.props.palette === 'string') {\n            var preset = PALETTEPRESETS[this.props.palette];\n            if (isPresent(preset)) {\n                return {\n                    colors: preset.colors,\n                    columns: this.props.columns || preset.columns || DEFAULT_COLUMNS_COUNT\n                };\n            }\n            else {\n                return { colors: [], columns: 0 };\n            }\n        }\n        else {\n            return { colors: this.props.palette || [], columns: this.props.columns || DEFAULT_COLUMNS_COUNT };\n        }\n    };\n    ColorPalette.prototype.renderRows = function (rows, selectedCellCoords, focusedCellCoords) {\n        var _this = this;\n        return rows.map(function (row, i) {\n            return React.createElement(\"tr\", { role: \"row\", key: i }, _this.renderColumns(row, i, selectedCellCoords, focusedCellCoords));\n        });\n    };\n    ColorPalette.prototype.renderColumns = function (columns, rowIndex, selectedCellCoords, focusedCellCoords) {\n        var _this = this;\n        var rowIsSelected = selectedCellCoords !== undefined && selectedCellCoords.row === rowIndex;\n        var selectedColumn = selectedCellCoords && selectedCellCoords.col;\n        var rowIsFocused = focusedCellCoords !== undefined && focusedCellCoords.row === rowIndex;\n        var focusedColumn = focusedCellCoords && focusedCellCoords.col;\n        var tileSize = typeof this.props.tileSize !== 'number' ?\n            this.props.tileSize : { width: this.props.tileSize, height: this.props.tileSize };\n        var width = tileSize.width + 'px';\n        var height = tileSize.height + 'px';\n        return columns.map(function (color, i) {\n            var isSelected = rowIsSelected && selectedColumn === i;\n            var className = classNames('k-item', {\n                'k-state-selected': isSelected,\n                'k-state-focused': rowIsFocused && focusedColumn === i\n            });\n            return (React.createElement(\"td\", { className: className, \"aria-label\": color, \"aria-selected\": isSelected ? true : _this.props.disabled ? undefined : false, style: { backgroundColor: color, width: width, height: height, minWidth: width }, onClick: function (event) { return _this.onColorClick(color, event); }, id: _this.createCellId({ row: rowIndex, col: i }), key: i }));\n        });\n    };\n    ColorPalette.prototype.createCellId = function (cellCoords) {\n        return this.guid + \"_\" + cellCoords.row + \"_\" + cellCoords.col;\n    };\n    /**\n     * @hidden\n     */\n    ColorPalette.propTypes = {\n        palette: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.string]),\n        columns: PropTypes.number,\n        tileSize: PropTypes.any,\n        defaultValue: PropTypes.string,\n        value: PropTypes.string,\n        disabled: PropTypes.bool,\n        tabIndex: PropTypes.number,\n        onChange: PropTypes.func,\n        id: PropTypes.string,\n        ariaLabelledBy: PropTypes.string,\n        ariaDescribedBy: PropTypes.string\n    };\n    /**\n     * @hidden\n     */\n    ColorPalette.defaultProps = {\n        palette: DEFAULT_PRESET,\n        tileSize: DEFAULT_TILE_SIZE\n    };\n    return ColorPalette;\n}(React.Component));\nexport { ColorPalette };\n//# sourceMappingURL=ColorPalette.js.map"]},"metadata":{},"sourceType":"module"}