{"ast":null,"code":"import { isPresent } from '../utils';\nimport { isCompositeFilterDescriptor } from './filter-descriptor.interface';\nimport { normalizeFilters } from './filter.operators';\nimport { transformCompositeFilter } from \"./filter-no-eval\"; // tslint:disable:max-line-length\n\n/**\n * Creates a [`Predicate`]({% slug api_kendo-data-query_predicate %}) function for the specified [`CompositeFilterDescriptor`]({% slug api_kendo-data-query_compositefilterdescriptor %}).\n *\n * @param {CompositeFilterDescriptor} descriptor - The descriptor for which the predicate is created.\n * @returns {Predicate} - The created function instance.\n *\n * @example\n * ```ts-no-run\n * import { compileFilter } from '@progress/kendo-data-query';\n *\n * const data = [{ name: \"Pork\" }, { name: \"Pepper\" }, { name: \"Beef\" } ];\n * const predicate = compileFilter({ logic: \"and\", filters: [{ field: \"name\", operator: \"startswith\", value: \"P\" }] });\n * const result = data.filter(predicate);\n *\n * ```\n */\n// tslint:enable:max-line-length\n\nexport var compileFilter = function (descriptor) {\n  if (!descriptor || descriptor.filters.length === 0) {\n    return function () {\n      return true;\n    };\n  }\n\n  return transformCompositeFilter(descriptor);\n}; // tslint:disable:max-line-length\n\n/**\n * Filters the provided array according to the specified [`CompositeFilterDescriptor`]({% slug api_kendo-data-query_compositefilterdescriptor %}).\n *\n * @param {T[]} data - The data that will be filtered.\n * @param {(CompositeFilterDescriptor | FilterDescriptor)} descriptor - The filter criteria that will be applied.\n * @returns {T[]} - The filtered data.\n *\n * @example\n * ```ts-no-run\n * import { filterBy } from '@progress/kendo-data-query';\n *\n * const data = [\n *  { name: \"Pork\", category: \"Food\", subcategory: \"Meat\" },\n *  { name: \"Pepper\", category: \"Food\", subcategory: \"Vegetables\" },\n *  { name: \"Beef\", category: \"Food\", subcategory: \"Meat\" }\n * ];\n *\n * const result = filterBy(data, {\n *     logic: 'and',\n *     filters: [\n *           { field: \"name\", operator: \"startswith\", value: \"p\", ignoreCase: true },\n *           { field: \"subcategory\", operator: \"eq\", value: \"Meat\" },\n *     ]\n * });\n *\n * // output:\n * // [{ \"name\": \"Pork\", \"category\": \"Food\", \"subcategory\": \"Meat\" }]\n * ```\n */\n// tslint:enable:max-line-length\n\nexport var filterBy = function (data, descriptor) {\n  if (!isPresent(descriptor) || isCompositeFilterDescriptor(descriptor) && descriptor.filters.length === 0) {\n    return data;\n  }\n\n  return data.filter(compileFilter(normalizeFilters(descriptor)));\n};","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/node_modules/@progress/kendo-data-query/dist/es/filtering/filter-expression.factory.js"],"names":["isPresent","isCompositeFilterDescriptor","normalizeFilters","transformCompositeFilter","compileFilter","descriptor","filters","length","filterBy","data","filter"],"mappings":"AAAA,SAASA,SAAT,QAA0B,UAA1B;AACA,SAASC,2BAAT,QAA4C,+BAA5C;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,wBAAT,QAAyC,kBAAzC,C,CACA;;AACA;;;;;;;;;;;;;;;;AAgBA;;AACA,OAAO,IAAIC,aAAa,GAAG,UAAUC,UAAV,EAAsB;AAC7C,MAAI,CAACA,UAAD,IAAeA,UAAU,CAACC,OAAX,CAAmBC,MAAnB,KAA8B,CAAjD,EAAoD;AAChD,WAAO,YAAY;AAAE,aAAO,IAAP;AAAc,KAAnC;AACH;;AACD,SAAOJ,wBAAwB,CAACE,UAAD,CAA/B;AACH,CALM,C,CAMP;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;AACA,OAAO,IAAIG,QAAQ,GAAG,UAAUC,IAAV,EAAgBJ,UAAhB,EAA4B;AAC9C,MAAI,CAACL,SAAS,CAACK,UAAD,CAAV,IAA2BJ,2BAA2B,CAACI,UAAD,CAA3B,IAA2CA,UAAU,CAACC,OAAX,CAAmBC,MAAnB,KAA8B,CAAxG,EAA4G;AACxG,WAAOE,IAAP;AACH;;AACD,SAAOA,IAAI,CAACC,MAAL,CAAYN,aAAa,CAACF,gBAAgB,CAACG,UAAD,CAAjB,CAAzB,CAAP;AACH,CALM","sourcesContent":["import { isPresent } from '../utils';\nimport { isCompositeFilterDescriptor } from './filter-descriptor.interface';\nimport { normalizeFilters } from './filter.operators';\nimport { transformCompositeFilter } from \"./filter-no-eval\";\n// tslint:disable:max-line-length\n/**\n * Creates a [`Predicate`]({% slug api_kendo-data-query_predicate %}) function for the specified [`CompositeFilterDescriptor`]({% slug api_kendo-data-query_compositefilterdescriptor %}).\n *\n * @param {CompositeFilterDescriptor} descriptor - The descriptor for which the predicate is created.\n * @returns {Predicate} - The created function instance.\n *\n * @example\n * ```ts-no-run\n * import { compileFilter } from '@progress/kendo-data-query';\n *\n * const data = [{ name: \"Pork\" }, { name: \"Pepper\" }, { name: \"Beef\" } ];\n * const predicate = compileFilter({ logic: \"and\", filters: [{ field: \"name\", operator: \"startswith\", value: \"P\" }] });\n * const result = data.filter(predicate);\n *\n * ```\n */\n// tslint:enable:max-line-length\nexport var compileFilter = function (descriptor) {\n    if (!descriptor || descriptor.filters.length === 0) {\n        return function () { return true; };\n    }\n    return transformCompositeFilter(descriptor);\n};\n// tslint:disable:max-line-length\n/**\n * Filters the provided array according to the specified [`CompositeFilterDescriptor`]({% slug api_kendo-data-query_compositefilterdescriptor %}).\n *\n * @param {T[]} data - The data that will be filtered.\n * @param {(CompositeFilterDescriptor | FilterDescriptor)} descriptor - The filter criteria that will be applied.\n * @returns {T[]} - The filtered data.\n *\n * @example\n * ```ts-no-run\n * import { filterBy } from '@progress/kendo-data-query';\n *\n * const data = [\n *  { name: \"Pork\", category: \"Food\", subcategory: \"Meat\" },\n *  { name: \"Pepper\", category: \"Food\", subcategory: \"Vegetables\" },\n *  { name: \"Beef\", category: \"Food\", subcategory: \"Meat\" }\n * ];\n *\n * const result = filterBy(data, {\n *     logic: 'and',\n *     filters: [\n *           { field: \"name\", operator: \"startswith\", value: \"p\", ignoreCase: true },\n *           { field: \"subcategory\", operator: \"eq\", value: \"Meat\" },\n *     ]\n * });\n *\n * // output:\n * // [{ \"name\": \"Pork\", \"category\": \"Food\", \"subcategory\": \"Meat\" }]\n * ```\n */\n// tslint:enable:max-line-length\nexport var filterBy = function (data, descriptor) {\n    if (!isPresent(descriptor) || (isCompositeFilterDescriptor(descriptor) && descriptor.filters.length === 0)) {\n        return data;\n    }\n    return data.filter(compileFilter(normalizeFilters(descriptor)));\n};\n"]},"metadata":{},"sourceType":"module"}