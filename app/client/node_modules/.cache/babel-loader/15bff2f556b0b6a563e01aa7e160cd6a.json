{"ast":null,"code":"/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */\n\n/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */\n\n/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */\n\n/* eslint-disable no-param-reassign, no-var, block-scoped-var */\n// mergeSort is stable.\nexport default function mergeSort(a, cmp) {\n  if (a.length < 2) {\n    return a.slice();\n  }\n\n  function merge(a, b) {\n    var r = [],\n        ai = 0,\n        bi = 0,\n        i = 0;\n\n    while (ai < a.length && bi < b.length) {\n      if (cmp(a[ai], b[bi]) <= 0) {\n        r[i++] = a[ai++];\n      } else {\n        r[i++] = b[bi++];\n      }\n    }\n\n    if (ai < a.length) {\n      r.push.apply(r, a.slice(ai));\n    }\n\n    if (bi < b.length) {\n      r.push.apply(r, b.slice(bi));\n    }\n\n    return r;\n  }\n\n  return function sort(a) {\n    if (a.length <= 1) {\n      return a;\n    }\n\n    var m = Math.floor(a.length / 2);\n    var left = a.slice(0, m);\n    var right = a.slice(m);\n    left = sort(left);\n    right = sort(right);\n    return merge(left, right);\n  }(a);\n}","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/node_modules/@progress/kendo-drawing/dist/es/util/merge-sort.js"],"names":["mergeSort","a","cmp","length","slice","merge","b","r","ai","bi","i","push","apply","sort","m","Math","floor","left","right"],"mappings":"AAAA;;AACA;;AACA;;AACA;AAEA;AACA,eAAe,SAASA,SAAT,CAAmBC,CAAnB,EAAsBC,GAAtB,EAA2B;AACtC,MAAID,CAAC,CAACE,MAAF,GAAW,CAAf,EAAkB;AACd,WAAOF,CAAC,CAACG,KAAF,EAAP;AACH;;AACD,WAASC,KAAT,CAAeJ,CAAf,EAAkBK,CAAlB,EAAqB;AACjB,QAAIC,CAAC,GAAG,EAAR;AAAA,QAAYC,EAAE,GAAG,CAAjB;AAAA,QAAoBC,EAAE,GAAG,CAAzB;AAAA,QAA4BC,CAAC,GAAG,CAAhC;;AACA,WAAOF,EAAE,GAAGP,CAAC,CAACE,MAAP,IAAiBM,EAAE,GAAGH,CAAC,CAACH,MAA/B,EAAuC;AACnC,UAAID,GAAG,CAACD,CAAC,CAACO,EAAD,CAAF,EAAQF,CAAC,CAACG,EAAD,CAAT,CAAH,IAAqB,CAAzB,EAA4B;AACxBF,QAAAA,CAAC,CAACG,CAAC,EAAF,CAAD,GAAST,CAAC,CAACO,EAAE,EAAH,CAAV;AACH,OAFD,MAEO;AACHD,QAAAA,CAAC,CAACG,CAAC,EAAF,CAAD,GAASJ,CAAC,CAACG,EAAE,EAAH,CAAV;AACH;AACJ;;AACD,QAAID,EAAE,GAAGP,CAAC,CAACE,MAAX,EAAmB;AACfI,MAAAA,CAAC,CAACI,IAAF,CAAOC,KAAP,CAAaL,CAAb,EAAgBN,CAAC,CAACG,KAAF,CAAQI,EAAR,CAAhB;AACH;;AACD,QAAIC,EAAE,GAAGH,CAAC,CAACH,MAAX,EAAmB;AACfI,MAAAA,CAAC,CAACI,IAAF,CAAOC,KAAP,CAAaL,CAAb,EAAgBD,CAAC,CAACF,KAAF,CAAQK,EAAR,CAAhB;AACH;;AACD,WAAOF,CAAP;AACH;;AACD,SAAQ,SAASM,IAAT,CAAcZ,CAAd,EAAiB;AACrB,QAAIA,CAAC,CAACE,MAAF,IAAY,CAAhB,EAAmB;AACf,aAAOF,CAAP;AACH;;AACD,QAAIa,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWf,CAAC,CAACE,MAAF,GAAW,CAAtB,CAAR;AACA,QAAIc,IAAI,GAAGhB,CAAC,CAACG,KAAF,CAAQ,CAAR,EAAWU,CAAX,CAAX;AACA,QAAII,KAAK,GAAGjB,CAAC,CAACG,KAAF,CAAQU,CAAR,CAAZ;AACAG,IAAAA,IAAI,GAAGJ,IAAI,CAACI,IAAD,CAAX;AACAC,IAAAA,KAAK,GAAGL,IAAI,CAACK,KAAD,CAAZ;AACA,WAAOb,KAAK,CAACY,IAAD,EAAOC,KAAP,CAAZ;AACH,GAVM,CAUJjB,CAVI,CAAP;AAWH","sourcesContent":["/* eslint-disable no-multi-spaces, key-spacing, indent, camelcase, space-before-blocks, eqeqeq, brace-style */\n/* eslint-disable space-infix-ops, space-before-function-paren, array-bracket-spacing, object-curly-spacing */\n/* eslint-disable no-nested-ternary, max-params, default-case, no-else-return, no-empty */\n/* eslint-disable no-param-reassign, no-var, block-scoped-var */\n\n// mergeSort is stable.\nexport default function mergeSort(a, cmp) {\n    if (a.length < 2) {\n        return a.slice();\n    }\n    function merge(a, b) {\n        var r = [], ai = 0, bi = 0, i = 0;\n        while (ai < a.length && bi < b.length) {\n            if (cmp(a[ai], b[bi]) <= 0) {\n                r[i++] = a[ai++];\n            } else {\n                r[i++] = b[bi++];\n            }\n        }\n        if (ai < a.length) {\n            r.push.apply(r, a.slice(ai));\n        }\n        if (bi < b.length) {\n            r.push.apply(r, b.slice(bi));\n        }\n        return r;\n    }\n    return (function sort(a) {\n        if (a.length <= 1) {\n            return a;\n        }\n        var m = Math.floor(a.length / 2);\n        var left = a.slice(0, m);\n        var right = a.slice(m);\n        left = sort(left);\n        right = sort(right);\n        return merge(left, right);\n    })(a);\n}"]},"metadata":{},"sourceType":"module"}