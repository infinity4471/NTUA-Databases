{"ast":null,"code":"import QuadRoot from './quad-root';\nimport QuadNode from './quad-node';\nimport { Rect } from '../geometry';\nimport { Class } from '../common';\nimport { append } from '../util';\nvar ROOT_SIZE = 3000;\nvar LEVEL_STEP = 10000;\nvar MAX_LEVEL = 75;\n\nvar ShapesQuadTree = function (Class) {\n  function ShapesQuadTree() {\n    Class.call(this);\n    this.initRoots();\n  }\n\n  if (Class) ShapesQuadTree.__proto__ = Class;\n  ShapesQuadTree.prototype = Object.create(Class && Class.prototype);\n  ShapesQuadTree.prototype.constructor = ShapesQuadTree;\n\n  ShapesQuadTree.prototype.initRoots = function initRoots() {\n    this.rootMap = {};\n    this.root = new QuadRoot();\n    this.rootElements = [];\n  };\n\n  ShapesQuadTree.prototype.clear = function clear() {\n    var this$1 = this;\n    var rootElements = this.rootElements;\n\n    for (var idx = 0; idx < rootElements.length; idx++) {\n      this$1.remove(rootElements[idx]);\n    }\n\n    this.initRoots();\n  };\n\n  ShapesQuadTree.prototype.pointShape = function pointShape(point) {\n    var sectorRoot = (this.rootMap[Math.floor(point.x / ROOT_SIZE)] || {})[Math.floor(point.y / ROOT_SIZE)];\n    var result = this.root.pointShapes(point);\n\n    if (sectorRoot) {\n      result = result.concat(sectorRoot.pointShapes(point));\n    }\n\n    this.assignZindex(result);\n    result.sort(zIndexComparer);\n\n    for (var idx = 0; idx < result.length; idx++) {\n      if (result[idx].containsPoint(point)) {\n        return result[idx];\n      }\n    }\n  };\n\n  ShapesQuadTree.prototype.assignZindex = function assignZindex(elements) {\n    var this$1 = this;\n\n    for (var idx = 0; idx < elements.length; idx++) {\n      var element = elements[idx];\n      var zIndex = 0;\n      var levelWeight = Math.pow(LEVEL_STEP, MAX_LEVEL);\n      var parents = [];\n\n      while (element) {\n        parents.push(element);\n        element = element.parent;\n      }\n\n      while (parents.length) {\n        element = parents.pop();\n        zIndex += ((element.parent ? element.parent.children : this$1.rootElements).indexOf(element) + 1) * levelWeight;\n        levelWeight /= LEVEL_STEP;\n      }\n\n      elements[idx]._zIndex = zIndex;\n    }\n  };\n\n  ShapesQuadTree.prototype.optionsChange = function optionsChange(e) {\n    if (e.field === \"transform\" || e.field === \"stroke.width\") {\n      this.bboxChange(e.element);\n    }\n  };\n\n  ShapesQuadTree.prototype.geometryChange = function geometryChange(e) {\n    this.bboxChange(e.element);\n  };\n\n  ShapesQuadTree.prototype.bboxChange = function bboxChange(element) {\n    var this$1 = this;\n\n    if (element.nodeType === \"Group\") {\n      for (var idx = 0; idx < element.children.length; idx++) {\n        this$1.bboxChange(element.children[idx]);\n      }\n    } else {\n      if (element._quadNode) {\n        element._quadNode.remove(element);\n      }\n\n      this._insertShape(element);\n    }\n  };\n\n  ShapesQuadTree.prototype.add = function add(elements) {\n    var elementsArray = Array.isArray(elements) ? elements.slice(0) : [elements];\n    append(this.rootElements, elementsArray);\n\n    this._insert(elementsArray);\n  };\n\n  ShapesQuadTree.prototype.childrenChange = function childrenChange(e) {\n    var this$1 = this;\n\n    if (e.action === \"remove\") {\n      for (var idx = 0; idx < e.items.length; idx++) {\n        this$1.remove(e.items[idx]);\n      }\n    } else {\n      this._insert(Array.prototype.slice.call(e.items, 0));\n    }\n  };\n\n  ShapesQuadTree.prototype._insert = function _insert(elements) {\n    var this$1 = this;\n    var element;\n\n    while (elements.length > 0) {\n      element = elements.pop();\n      element.addObserver(this$1);\n\n      if (element.nodeType === \"Group\") {\n        append(elements, element.children);\n      } else {\n        this$1._insertShape(element);\n      }\n    }\n  };\n\n  ShapesQuadTree.prototype._insertShape = function _insertShape(shape) {\n    var bbox = shape.bbox();\n\n    if (bbox) {\n      var sectors = this.getSectors(bbox);\n      var x = sectors[0][0];\n      var y = sectors[1][0];\n\n      if (this.inRoot(sectors)) {\n        this.root.insert(shape, bbox);\n      } else {\n        var rootMap = this.rootMap;\n\n        if (!rootMap[x]) {\n          rootMap[x] = {};\n        }\n\n        if (!rootMap[x][y]) {\n          rootMap[x][y] = new QuadNode(new Rect([x * ROOT_SIZE, y * ROOT_SIZE], [ROOT_SIZE, ROOT_SIZE]));\n        }\n\n        rootMap[x][y].insert(shape, bbox);\n      }\n    }\n  };\n\n  ShapesQuadTree.prototype.remove = function remove(element) {\n    var this$1 = this;\n    element.removeObserver(this);\n\n    if (element.nodeType === \"Group\") {\n      var children = element.children;\n\n      for (var idx = 0; idx < children.length; idx++) {\n        this$1.remove(children[idx]);\n      }\n    } else if (element._quadNode) {\n      element._quadNode.remove(element);\n\n      delete element._quadNode;\n    }\n  };\n\n  ShapesQuadTree.prototype.inRoot = function inRoot(sectors) {\n    return sectors[0].length > 1 || sectors[1].length > 1;\n  };\n\n  ShapesQuadTree.prototype.getSectors = function getSectors(rect) {\n    var bottomRight = rect.bottomRight();\n    var bottomX = Math.floor(bottomRight.x / ROOT_SIZE);\n    var bottomY = Math.floor(bottomRight.y / ROOT_SIZE);\n    var sectors = [[], []];\n\n    for (var x = Math.floor(rect.origin.x / ROOT_SIZE); x <= bottomX; x++) {\n      sectors[0].push(x);\n    }\n\n    for (var y = Math.floor(rect.origin.y / ROOT_SIZE); y <= bottomY; y++) {\n      sectors[1].push(y);\n    }\n\n    return sectors;\n  };\n\n  return ShapesQuadTree;\n}(Class);\n\nfunction zIndexComparer(x1, x2) {\n  if (x1._zIndex < x2._zIndex) {\n    return 1;\n  }\n\n  if (x1._zIndex > x2._zIndex) {\n    return -1;\n  }\n\n  return 0;\n}\n\nexport default ShapesQuadTree;","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/node_modules/@progress/kendo-drawing/dist/es/search/shapes-quad-tree.js"],"names":["QuadRoot","QuadNode","Rect","Class","append","ROOT_SIZE","LEVEL_STEP","MAX_LEVEL","ShapesQuadTree","call","initRoots","__proto__","prototype","Object","create","constructor","rootMap","root","rootElements","clear","this$1","idx","length","remove","pointShape","point","sectorRoot","Math","floor","x","y","result","pointShapes","concat","assignZindex","sort","zIndexComparer","containsPoint","elements","element","zIndex","levelWeight","pow","parents","push","parent","pop","children","indexOf","_zIndex","optionsChange","e","field","bboxChange","geometryChange","nodeType","_quadNode","_insertShape","add","elementsArray","Array","isArray","slice","_insert","childrenChange","action","items","addObserver","shape","bbox","sectors","getSectors","inRoot","insert","removeObserver","rect","bottomRight","bottomX","bottomY","origin","x1","x2"],"mappings":"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","sourcesContent":["import QuadRoot from './quad-root';\nimport QuadNode from './quad-node';\nimport { Rect } from '../geometry';\nimport { Class } from '../common';\nimport { append } from '../util';\n\nvar ROOT_SIZE = 3000;\nvar LEVEL_STEP = 10000;\nvar MAX_LEVEL = 75;\n\nvar ShapesQuadTree = (function (Class) {\n    function ShapesQuadTree() {\n        Class.call(this);\n\n        this.initRoots();\n    }\n\n    if ( Class ) ShapesQuadTree.__proto__ = Class;\n    ShapesQuadTree.prototype = Object.create( Class && Class.prototype );\n    ShapesQuadTree.prototype.constructor = ShapesQuadTree;\n\n    ShapesQuadTree.prototype.initRoots = function initRoots () {\n        this.rootMap = {};\n        this.root = new QuadRoot();\n        this.rootElements = [];\n    };\n\n    ShapesQuadTree.prototype.clear = function clear () {\n        var this$1 = this;\n\n        var rootElements = this.rootElements;\n        for (var idx = 0; idx < rootElements.length; idx++) {\n            this$1.remove(rootElements[idx]);\n        }\n        this.initRoots();\n    };\n\n    ShapesQuadTree.prototype.pointShape = function pointShape (point) {\n        var sectorRoot = ( this.rootMap[ Math.floor( point.x / ROOT_SIZE ) ] || {} )[ Math.floor( point.y / ROOT_SIZE ) ];\n        var result = this.root.pointShapes(point);\n\n        if (sectorRoot) {\n            result = result.concat(sectorRoot.pointShapes(point));\n        }\n\n        this.assignZindex(result);\n\n        result.sort(zIndexComparer);\n        for (var idx = 0; idx < result.length; idx++) {\n            if (result[idx].containsPoint(point)) {\n                return result[idx];\n            }\n        }\n    };\n\n    ShapesQuadTree.prototype.assignZindex = function assignZindex (elements) {\n        var this$1 = this;\n\n        for (var idx = 0; idx < elements.length; idx++) {\n            var element = elements[idx];\n            var zIndex = 0;\n            var levelWeight = Math.pow(LEVEL_STEP, MAX_LEVEL);\n            var parents = [];\n\n            while (element) {\n                parents.push(element);\n                element = element.parent;\n            }\n\n            while (parents.length) {\n                element = parents.pop();\n                zIndex += ((element.parent ? element.parent.children : this$1.rootElements).indexOf(element) + 1) * levelWeight;\n                levelWeight /= LEVEL_STEP;\n            }\n\n            elements[idx]._zIndex = zIndex;\n        }\n    };\n\n    ShapesQuadTree.prototype.optionsChange = function optionsChange (e) {\n        if (e.field === \"transform\" || e.field === \"stroke.width\") {\n            this.bboxChange(e.element);\n        }\n    };\n\n    ShapesQuadTree.prototype.geometryChange = function geometryChange (e) {\n        this.bboxChange(e.element);\n    };\n\n    ShapesQuadTree.prototype.bboxChange = function bboxChange (element) {\n        var this$1 = this;\n\n        if (element.nodeType === \"Group\") {\n            for (var idx = 0; idx < element.children.length; idx++) {\n                this$1.bboxChange(element.children[idx]);\n            }\n        } else {\n            if (element._quadNode) {\n                element._quadNode.remove(element);\n            }\n            this._insertShape(element);\n        }\n    };\n\n    ShapesQuadTree.prototype.add = function add (elements) {\n        var elementsArray = Array.isArray(elements) ? elements.slice(0) : [ elements ];\n\n        append(this.rootElements, elementsArray);\n        this._insert(elementsArray);\n    };\n\n    ShapesQuadTree.prototype.childrenChange = function childrenChange (e) {\n        var this$1 = this;\n\n        if (e.action === \"remove\") {\n            for (var idx = 0; idx < e.items.length; idx++) {\n                this$1.remove(e.items[idx]);\n            }\n        } else {\n            this._insert(Array.prototype.slice.call(e.items, 0));\n        }\n    };\n\n    ShapesQuadTree.prototype._insert = function _insert (elements) {\n        var this$1 = this;\n\n        var element;\n\n        while (elements.length > 0) {\n            element = elements.pop();\n            element.addObserver(this$1);\n            if (element.nodeType === \"Group\") {\n                append(elements, element.children);\n            } else {\n                this$1._insertShape(element);\n            }\n        }\n    };\n\n    ShapesQuadTree.prototype._insertShape = function _insertShape (shape) {\n        var bbox = shape.bbox();\n        if (bbox) {\n            var sectors = this.getSectors(bbox);\n            var x = sectors[0][0];\n            var y = sectors[1][0];\n\n            if (this.inRoot(sectors)) {\n                this.root.insert(shape, bbox);\n            } else {\n                var rootMap = this.rootMap;\n                if (!rootMap[x]) {\n                    rootMap[x] = {};\n                }\n\n                if (!rootMap[x][y]) {\n                    rootMap[x][y] = new QuadNode(\n                        new Rect([ x * ROOT_SIZE, y * ROOT_SIZE ], [ ROOT_SIZE, ROOT_SIZE ])\n                    );\n                }\n\n                rootMap[x][y].insert(shape, bbox);\n            }\n        }\n    };\n\n    ShapesQuadTree.prototype.remove = function remove (element) {\n        var this$1 = this;\n\n        element.removeObserver(this);\n\n        if (element.nodeType === \"Group\") {\n            var children = element.children;\n            for (var idx = 0; idx < children.length; idx++) {\n                this$1.remove(children[idx]);\n            }\n        } else if (element._quadNode) {\n            element._quadNode.remove(element);\n            delete element._quadNode;\n        }\n    };\n\n    ShapesQuadTree.prototype.inRoot = function inRoot (sectors) {\n        return sectors[0].length > 1 || sectors[1].length > 1;\n    };\n\n    ShapesQuadTree.prototype.getSectors = function getSectors (rect) {\n        var bottomRight = rect.bottomRight();\n        var bottomX = Math.floor(bottomRight.x / ROOT_SIZE);\n        var bottomY = Math.floor(bottomRight.y / ROOT_SIZE);\n        var sectors = [ [], [] ];\n        for (var x = Math.floor(rect.origin.x / ROOT_SIZE); x <= bottomX; x++) {\n            sectors[0].push(x);\n        }\n        for (var y = Math.floor(rect.origin.y / ROOT_SIZE); y <= bottomY; y++) {\n            sectors[1].push(y);\n        }\n        return sectors;\n    };\n\n    return ShapesQuadTree;\n}(Class));\n\nfunction zIndexComparer(x1, x2) {\n    if (x1._zIndex < x2._zIndex) {\n        return 1;\n    }\n    if (x1._zIndex > x2._zIndex) {\n        return -1;\n    }\n\n    return 0;\n}\n\nexport default ShapesQuadTree;"]},"metadata":{},"sourceType":"module"}