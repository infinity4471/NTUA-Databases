{"ast":null,"code":"import { CURRENCY, PERCENT, LIST_SEPARATOR, GROUP_SEPARATOR, CURRENCY_PLACEHOLDER, PERCENT_PLACEHOLDER, POINT, EMPTY } from '../common/constants';\nimport isNegativeZero from '../common/is-negative-zero';\nimport groupInteger from './group-integer';\nimport round from '../common/round';\nimport { setStyleOptions, setFormatLiterals, replaceLiterals } from './utils';\nvar SHARP = \"#\";\nvar ZERO = \"0\";\nvar trailingZerosRegExp = /(\\.(?:[0-9]*[1-9])?)0+$/g;\nvar trailingPointRegExp = /\\.$/;\nvar commaRegExp = /\\,/g;\n\nfunction trimTrailingZeros(value, lastZero) {\n  var trimRegex;\n\n  if (lastZero === 0) {\n    trimRegex = trailingZerosRegExp;\n  } else {\n    trimRegex = new RegExp(\"(\\\\.[0-9]{\" + lastZero + \"}[1-9]*)0+$\", 'g');\n  }\n\n  return value.replace(trimRegex, '$1').replace(trailingPointRegExp, EMPTY);\n}\n\nfunction roundNumber(formatOptions) {\n  var number = formatOptions.number;\n  var format = formatOptions.format;\n  var decimalIndex = format.indexOf(POINT);\n\n  if (decimalIndex !== -1) {\n    var zeroIndex = format.lastIndexOf(ZERO) - decimalIndex;\n    var sharpIndex = format.lastIndexOf(SHARP) - decimalIndex;\n    var hasZero = zeroIndex > -1;\n    var hasSharp = sharpIndex > -1;\n    var fraction = number.toString().split(\"e\");\n\n    if (fraction[1]) {\n      fraction = round(number, Math.abs(fraction[1]));\n    } else {\n      fraction = fraction[0];\n    }\n\n    fraction = fraction.split(POINT)[1] || EMPTY;\n    var precision = fraction.length;\n    var trailingZeros = -1;\n\n    if (!hasZero && !hasSharp) {\n      formatOptions.format = format.substring(0, decimalIndex) + format.substring(decimalIndex + 1);\n      decimalIndex = -1;\n      precision = 0;\n    } else if (hasZero && zeroIndex > sharpIndex) {\n      precision = zeroIndex;\n    } else if (sharpIndex > zeroIndex) {\n      if (hasSharp && precision > sharpIndex) {\n        precision = sharpIndex;\n      } else if (hasZero && precision < zeroIndex) {\n        precision = zeroIndex;\n      }\n\n      trailingZeros = hasZero ? zeroIndex : 0;\n    }\n\n    if (precision > -1) {\n      number = round(number, precision);\n\n      if (trailingZeros > -1) {\n        number = trimTrailingZeros(number, trailingZeros);\n      }\n    }\n  } else {\n    number = round(number);\n  }\n\n  if (formatOptions.negative && number * -1 >= 0 && !formatOptions.negativeZero) {\n    formatOptions.negative = false;\n  }\n\n  formatOptions.number = number;\n  formatOptions.decimalIndex = decimalIndex;\n}\n\nfunction isConstantFormat(format) {\n  return format.indexOf(SHARP) === -1 && format.indexOf(ZERO) === -1;\n}\n\nfunction setValueSpecificFormat(formatOptions) {\n  var number = formatOptions.number;\n  var format = formatOptions.format;\n  format = format.split(LIST_SEPARATOR);\n\n  if ((formatOptions.negative || formatOptions.negativeZero) && format[1]) {\n    format = format[1];\n    formatOptions.hasNegativeFormat = true;\n  } else if (number === 0) {\n    var zeroFormat = format[2];\n    format = zeroFormat || format[0];\n\n    if (zeroFormat && isConstantFormat(zeroFormat)) {\n      formatOptions.constant = zeroFormat;\n    }\n  } else {\n    format = format[0];\n  }\n\n  formatOptions.format = format;\n}\n\nfunction setGroupOptions(formatOptions) {\n  formatOptions.hasGroup = formatOptions.format.indexOf(GROUP_SEPARATOR) > -1;\n\n  if (formatOptions.hasGroup) {\n    formatOptions.format = formatOptions.format.replace(commaRegExp, EMPTY);\n  }\n}\n\nfunction placeholderIndex(index1, index2, start) {\n  var index;\n\n  if (index1 === -1 && index2 !== -1) {\n    index = index2;\n  } else if (index1 !== -1 && index2 === -1) {\n    index = index1;\n  } else {\n    index = start ? Math.min(index1, index2) : Math.max(index1, index2);\n  }\n\n  return index;\n}\n\nfunction setPlaceholderIndices(formatOptions) {\n  var format = formatOptions.format;\n  var sharpIndex = format.indexOf(SHARP);\n  var zeroIndex = format.indexOf(ZERO);\n  var start = placeholderIndex(sharpIndex, zeroIndex, true);\n  sharpIndex = format.lastIndexOf(SHARP);\n  zeroIndex = format.lastIndexOf(ZERO);\n  var end = placeholderIndex(sharpIndex, zeroIndex);\n\n  if (start === format.length) {\n    end = start;\n  }\n\n  formatOptions.start = start;\n  formatOptions.end = end;\n  formatOptions.lastZeroIndex = zeroIndex;\n}\n\nfunction replaceStyleSymbols(number, style, symbol) {\n  var result = number;\n\n  if (style === CURRENCY || style === PERCENT) {\n    result = EMPTY;\n\n    for (var idx = 0, length = number.length; idx < length; idx++) {\n      var ch = number.charAt(idx);\n      result += ch === CURRENCY_PLACEHOLDER || ch === PERCENT_PLACEHOLDER ? symbol : ch;\n    }\n  }\n\n  return result;\n}\n\nfunction replacePlaceHolders(formatOptions, info) {\n  var start = formatOptions.start;\n  var end = formatOptions.end;\n  var negative = formatOptions.negative;\n  var negativeZero = formatOptions.negativeZero;\n  var format = formatOptions.format;\n  var decimalIndex = formatOptions.decimalIndex;\n  var lastZeroIndex = formatOptions.lastZeroIndex;\n  var hasNegativeFormat = formatOptions.hasNegativeFormat;\n  var hasGroup = formatOptions.hasGroup;\n  var number = formatOptions.number;\n  var value = number.toString().split(POINT);\n  var length = format.length;\n  var integer = value[0];\n  var fraction = value[1] || EMPTY;\n  var integerLength = integer.length;\n  var replacement = EMPTY;\n  number = format.substring(0, start);\n\n  if ((negative || negativeZero) && !hasNegativeFormat) {\n    number += \"-\";\n  }\n\n  for (var idx = start; idx < length; idx++) {\n    var ch = format.charAt(idx);\n\n    if (decimalIndex === -1) {\n      if (end - idx < integerLength) {\n        number += integer;\n        break;\n      }\n    } else {\n      if (lastZeroIndex !== -1 && lastZeroIndex < idx) {\n        replacement = EMPTY;\n      }\n\n      if (decimalIndex - idx <= integerLength && decimalIndex - idx > -1) {\n        number += integer;\n        idx = decimalIndex;\n      }\n\n      if (decimalIndex === idx) {\n        number += (fraction ? info.numbers.symbols.decimal : EMPTY) + fraction;\n        idx += end - decimalIndex + 1;\n        continue;\n      }\n    }\n\n    if (ch === ZERO) {\n      number += ch;\n      replacement = ch;\n    } else if (ch === SHARP) {\n      number += replacement;\n    }\n  }\n\n  if (hasGroup) {\n    number = groupInteger(number, start + (negative && !hasNegativeFormat ? 1 : 0), Math.max(end, integerLength + start), info.numbers.decimal, info);\n  }\n\n  if (end >= start) {\n    number += format.substring(end + 1);\n  }\n\n  return number;\n}\n\nfunction applyCustomFormat(formatOptions, info) {\n  var number = formatOptions.number;\n\n  if (formatOptions.start !== -1) {\n    number = replacePlaceHolders(formatOptions, info);\n    number = replaceStyleSymbols(number, formatOptions.style, formatOptions.symbol);\n    number = replaceLiterals(number, formatOptions.literals);\n  }\n\n  return number;\n}\n\nexport default function customNumberFormat(number, format, info) {\n  var formatOptions = {\n    negative: number < 0,\n    number: Math.abs(number),\n    negativeZero: isNegativeZero(number),\n    format: format\n  };\n  setValueSpecificFormat(formatOptions);\n\n  if (formatOptions.constant) {\n    return formatOptions.constant;\n  }\n\n  setFormatLiterals(formatOptions);\n  setStyleOptions(formatOptions, info);\n  setGroupOptions(formatOptions);\n  roundNumber(formatOptions);\n  setPlaceholderIndices(formatOptions);\n  return applyCustomFormat(formatOptions, info);\n}","map":{"version":3,"sources":["/Users/infinity/Dropbox/Public/ECE-NTUA/2019-2020/10th Semester/Databases/supermarket/node_modules/@telerik/kendo-intl/dist/es/numbers/custom-number-format.js"],"names":["CURRENCY","PERCENT","LIST_SEPARATOR","GROUP_SEPARATOR","CURRENCY_PLACEHOLDER","PERCENT_PLACEHOLDER","POINT","EMPTY","isNegativeZero","groupInteger","round","setStyleOptions","setFormatLiterals","replaceLiterals","SHARP","ZERO","trailingZerosRegExp","trailingPointRegExp","commaRegExp","trimTrailingZeros","value","lastZero","trimRegex","RegExp","replace","roundNumber","formatOptions","number","format","decimalIndex","indexOf","zeroIndex","lastIndexOf","sharpIndex","hasZero","hasSharp","fraction","toString","split","Math","abs","precision","length","trailingZeros","substring","negative","negativeZero","isConstantFormat","setValueSpecificFormat","hasNegativeFormat","zeroFormat","constant","setGroupOptions","hasGroup","placeholderIndex","index1","index2","start","index","min","max","setPlaceholderIndices","end","lastZeroIndex","replaceStyleSymbols","style","symbol","result","idx","ch","charAt","replacePlaceHolders","info","integer","integerLength","replacement","numbers","symbols","decimal","applyCustomFormat","literals","customNumberFormat"],"mappings":"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","sourcesContent":["import { CURRENCY, PERCENT, LIST_SEPARATOR, GROUP_SEPARATOR, CURRENCY_PLACEHOLDER, PERCENT_PLACEHOLDER, POINT, EMPTY } from '../common/constants';\nimport isNegativeZero from '../common/is-negative-zero';\nimport groupInteger from './group-integer';\nimport round from '../common/round';\nimport { setStyleOptions, setFormatLiterals, replaceLiterals } from './utils';\n\nvar SHARP = \"#\";\nvar ZERO = \"0\";\n\nvar trailingZerosRegExp = /(\\.(?:[0-9]*[1-9])?)0+$/g;\nvar trailingPointRegExp = /\\.$/;\nvar commaRegExp = /\\,/g;\n\nfunction trimTrailingZeros(value, lastZero) {\n    var trimRegex;\n\n    if (lastZero === 0) {\n        trimRegex = trailingZerosRegExp;\n    } else {\n        trimRegex = new RegExp((\"(\\\\.[0-9]{\" + lastZero + \"}[1-9]*)0+$\"), 'g');\n    }\n\n    return value.replace(trimRegex, '$1').replace(trailingPointRegExp, EMPTY);\n}\n\nfunction roundNumber(formatOptions) {\n    var number = formatOptions.number;\n    var format = formatOptions.format;\n    var decimalIndex = format.indexOf(POINT);\n\n    if (decimalIndex !== -1) {\n        var zeroIndex = format.lastIndexOf(ZERO) - decimalIndex;\n        var sharpIndex = format.lastIndexOf(SHARP) - decimalIndex;\n        var hasZero = zeroIndex > -1;\n        var hasSharp = sharpIndex > -1;\n        var fraction = number.toString().split(\"e\");\n\n        if (fraction[1]) {\n            fraction = round(number, Math.abs(fraction[1]));\n        } else {\n            fraction = fraction[0];\n        }\n        fraction = fraction.split(POINT)[1] || EMPTY;\n\n        var precision = fraction.length;\n        var trailingZeros = -1;\n\n        if (!hasZero && !hasSharp) {\n            formatOptions.format = format.substring(0, decimalIndex) + format.substring(decimalIndex + 1);\n            decimalIndex = -1;\n            precision = 0;\n        } else if (hasZero && zeroIndex > sharpIndex) {\n            precision = zeroIndex;\n        } else if (sharpIndex > zeroIndex) {\n            if (hasSharp && precision > sharpIndex) {\n                precision = sharpIndex;\n            } else if (hasZero && precision < zeroIndex) {\n                precision = zeroIndex;\n            }\n\n            trailingZeros = hasZero ? zeroIndex : 0;\n        }\n\n        if (precision > -1) {\n            number = round(number, precision);\n            if (trailingZeros > -1) {\n                number = trimTrailingZeros(number, trailingZeros);\n            }\n        }\n    } else {\n        number = round(number);\n    }\n\n    if (formatOptions.negative && (number * -1) >= 0 && !formatOptions.negativeZero) {\n        formatOptions.negative = false;\n    }\n\n    formatOptions.number = number;\n    formatOptions.decimalIndex = decimalIndex;\n}\n\nfunction isConstantFormat(format) {\n    return format.indexOf(SHARP) === -1 && format.indexOf(ZERO) === -1;\n}\n\nfunction setValueSpecificFormat(formatOptions) {\n    var number = formatOptions.number;\n    var format = formatOptions.format;\n    format = format.split(LIST_SEPARATOR);\n    if ((formatOptions.negative || formatOptions.negativeZero) && format[1]) {\n        format = format[1];\n        formatOptions.hasNegativeFormat = true;\n    } else if (number === 0) {\n        var zeroFormat = format[2];\n        format = zeroFormat || format[0];\n        if (zeroFormat && isConstantFormat(zeroFormat)) {\n            formatOptions.constant = zeroFormat;\n        }\n    } else {\n        format = format[0];\n    }\n\n    formatOptions.format = format;\n}\n\nfunction setGroupOptions(formatOptions) {\n    formatOptions.hasGroup = formatOptions.format.indexOf(GROUP_SEPARATOR) > -1;\n    if (formatOptions.hasGroup) {\n        formatOptions.format = formatOptions.format.replace(commaRegExp, EMPTY);\n    }\n}\n\nfunction placeholderIndex(index1, index2, start) {\n    var index;\n    if (index1 === -1 && index2 !== -1) {\n        index = index2;\n    } else if (index1 !== -1 && index2 === -1) {\n        index = index1;\n    } else {\n        index = start ? Math.min(index1, index2) : Math.max(index1, index2);\n    }\n    return index;\n}\n\nfunction setPlaceholderIndices(formatOptions) {\n    var format = formatOptions.format;\n    var sharpIndex = format.indexOf(SHARP);\n    var zeroIndex = format.indexOf(ZERO);\n\n    var start = placeholderIndex(sharpIndex, zeroIndex, true);\n\n    sharpIndex = format.lastIndexOf(SHARP);\n    zeroIndex = format.lastIndexOf(ZERO);\n\n    var end = placeholderIndex(sharpIndex, zeroIndex);\n\n    if (start === format.length) {\n        end = start;\n    }\n\n    formatOptions.start = start;\n    formatOptions.end = end;\n    formatOptions.lastZeroIndex = zeroIndex;\n}\n\nfunction replaceStyleSymbols(number, style, symbol) {\n    var result = number;\n    if (style === CURRENCY || style === PERCENT) {\n        result = EMPTY;\n        for (var idx = 0, length = number.length; idx < length; idx++) {\n            var ch = number.charAt(idx);\n            result += (ch === CURRENCY_PLACEHOLDER || ch === PERCENT_PLACEHOLDER) ? symbol : ch;\n        }\n    }\n    return result;\n}\n\nfunction replacePlaceHolders(formatOptions, info) {\n    var start = formatOptions.start;\n    var end = formatOptions.end;\n    var negative = formatOptions.negative;\n    var negativeZero = formatOptions.negativeZero;\n    var format = formatOptions.format;\n    var decimalIndex = formatOptions.decimalIndex;\n    var lastZeroIndex = formatOptions.lastZeroIndex;\n    var hasNegativeFormat = formatOptions.hasNegativeFormat;\n    var hasGroup = formatOptions.hasGroup;\n    var number = formatOptions.number;\n    var value = number.toString().split(POINT);\n    var length = format.length;\n    var integer = value[0];\n    var fraction = value[1] || EMPTY;\n    var integerLength = integer.length;\n    var replacement = EMPTY;\n\n    number = format.substring(0, start);\n\n    if ((negative || negativeZero) && !hasNegativeFormat) {\n        number += \"-\";\n    }\n\n    for (var idx = start; idx < length; idx++) {\n        var ch = format.charAt(idx);\n\n        if (decimalIndex === -1) {\n            if (end - idx < integerLength) {\n\n                number += integer;\n                break;\n            }\n        } else {\n            if (lastZeroIndex !== -1 && lastZeroIndex < idx) {\n                replacement = EMPTY;\n            }\n\n            if ((decimalIndex - idx) <= integerLength && decimalIndex - idx > -1) {\n                number += integer;\n                idx = decimalIndex;\n            }\n\n            if (decimalIndex === idx) {\n                number += (fraction ? info.numbers.symbols.decimal : EMPTY) + fraction;\n                idx += end - decimalIndex + 1;\n                continue;\n            }\n        }\n\n        if (ch === ZERO) {\n            number += ch;\n            replacement = ch;\n        } else if (ch === SHARP) {\n            number += replacement;\n        }\n    }\n\n    if (hasGroup) {\n        number = groupInteger(number, start + (negative && !hasNegativeFormat ? 1 : 0), Math.max(end, (integerLength + start)), info.numbers.decimal, info);\n    }\n\n    if (end >= start) {\n        number += format.substring(end + 1);\n    }\n\n    return number;\n}\n\nfunction applyCustomFormat(formatOptions, info) {\n    var number = formatOptions.number;\n    if (formatOptions.start !== -1) {\n        number = replacePlaceHolders(formatOptions, info);\n        number = replaceStyleSymbols(number, formatOptions.style, formatOptions.symbol);\n        number = replaceLiterals(number, formatOptions.literals);\n    }\n\n    return number;\n}\n\nexport default function customNumberFormat(number, format, info) {\n    var formatOptions = {\n        negative: number < 0,\n        number: Math.abs(number),\n        negativeZero: isNegativeZero(number),\n        format: format\n    };\n\n    setValueSpecificFormat(formatOptions);\n\n    if (formatOptions.constant) {\n        return formatOptions.constant;\n    }\n\n    setFormatLiterals(formatOptions);\n    setStyleOptions(formatOptions, info);\n    setGroupOptions(formatOptions);\n    roundNumber(formatOptions);\n    setPlaceholderIndices(formatOptions);\n\n    return applyCustomFormat(formatOptions, info);\n}"]},"metadata":{},"sourceType":"module"}