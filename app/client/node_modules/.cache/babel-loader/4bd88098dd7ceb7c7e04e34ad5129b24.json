{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport { isPresent, isNotNullOrEmptyString } from './utils';\nimport { serializeFilter } from './odata-filtering.operators';\nimport { ifElse, constant } from './funcs';\n\nvar serializeSort = function (orderby) {\n  var str = orderby.filter(function (sort) {\n    return isPresent(sort.dir);\n  }).map(function (sort) {\n    var order = sort.field.replace(/\\./g, \"/\");\n    return sort.dir === \"desc\" ? order + \" desc\" : order;\n  }).join(\",\");\n  return str ? \"$orderby=\" + str : str;\n};\n\nvar emptyString = constant('');\n\nvar concat = function (a) {\n  return function (b) {\n    return a + b;\n  };\n};\n\nvar serializeKey = function (strings, val) {\n  return ifElse(isPresent, concat(strings[0]), emptyString)(val);\n};\n\nvar rules = function (settings, state) {\n  return function (key) {\n    return {\n      \"filter\": serializeFilter(state.filter || {}, settings),\n      \"skip\": serializeKey(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"$skip=\", \"\"], [\"$skip=\", \"\"])), state.skip),\n      \"sort\": serializeSort(state.sort || []),\n      \"take\": serializeKey(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"$top=\", \"\"], [\"$top=\", \"\"])), state.take)\n    }[key];\n  };\n}; // tslint:enable:max-line-length\n\n/**\n * Converts a [`State`]({% slug api_kendo-data-query_state %}) into an OData v4 compatible string.\n *\n * @param {State} state - The state that will be serialized.\n * @param {ODataSettings} settings - The settings that are used during the serialization.\n * @returns {string} - The serialized state.\n */\n\n\nexport var toODataString = function (state, settings) {\n  if (settings === void 0) {\n    settings = {};\n  }\n\n  return Object.keys(state).map(rules(settings, state)).filter(isNotNullOrEmptyString).join('&');\n};\nvar templateObject_1, templateObject_2;","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/node_modules/@progress/kendo-data-query/dist/es/odata.operators.js"],"names":["tslib_1","isPresent","isNotNullOrEmptyString","serializeFilter","ifElse","constant","serializeSort","orderby","str","filter","sort","dir","map","order","field","replace","join","emptyString","concat","a","b","serializeKey","strings","val","rules","settings","state","key","templateObject_1","__makeTemplateObject","skip","templateObject_2","take","toODataString","Object","keys"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,OAAzB;AACA,SAASC,SAAT,EAAoBC,sBAApB,QAAkD,SAAlD;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,SAAjC;;AACA,IAAIC,aAAa,GAAG,UAAUC,OAAV,EAAmB;AACnC,MAAIC,GAAG,GAAGD,OAAO,CACZE,MADK,CACE,UAAUC,IAAV,EAAgB;AAAE,WAAOT,SAAS,CAACS,IAAI,CAACC,GAAN,CAAhB;AAA6B,GADjD,EAELC,GAFK,CAED,UAAUF,IAAV,EAAgB;AACrB,QAAIG,KAAK,GAAGH,IAAI,CAACI,KAAL,CAAWC,OAAX,CAAmB,KAAnB,EAA0B,GAA1B,CAAZ;AACA,WAAOL,IAAI,CAACC,GAAL,KAAa,MAAb,GAAsBE,KAAK,GAAG,OAA9B,GAAwCA,KAA/C;AACH,GALS,EAKPG,IALO,CAKF,GALE,CAAV;AAMA,SAAOR,GAAG,GAAG,cAAcA,GAAjB,GAAuBA,GAAjC;AACH,CARD;;AASA,IAAIS,WAAW,GAAGZ,QAAQ,CAAC,EAAD,CAA1B;;AACA,IAAIa,MAAM,GAAG,UAAUC,CAAV,EAAa;AAAE,SAAO,UAAUC,CAAV,EAAa;AAAE,WAAOD,CAAC,GAAGC,CAAX;AAAe,GAArC;AAAwC,CAApE;;AACA,IAAIC,YAAY,GAAG,UAAUC,OAAV,EAAmBC,GAAnB,EAAwB;AAAE,SAAOnB,MAAM,CAACH,SAAD,EAAYiB,MAAM,CAACI,OAAO,CAAC,CAAD,CAAR,CAAlB,EAAgCL,WAAhC,CAAN,CAAmDM,GAAnD,CAAP;AAAiE,CAA9G;;AACA,IAAIC,KAAK,GAAG,UAAUC,QAAV,EAAoBC,KAApB,EAA2B;AAAE,SAAO,UAAUC,GAAV,EAAe;AAAE,WAAQ;AACrE,gBAAUxB,eAAe,CAACuB,KAAK,CAACjB,MAAN,IAAgB,EAAjB,EAAqBgB,QAArB,CAD4C;AAErE,cAAQJ,YAAY,CAACO,gBAAgB,KAAKA,gBAAgB,GAAG5B,OAAO,CAAC6B,oBAAR,CAA6B,CAAC,QAAD,EAAW,EAAX,CAA7B,EAA6C,CAAC,QAAD,EAAW,EAAX,CAA7C,CAAxB,CAAjB,EAAwGH,KAAK,CAACI,IAA9G,CAFiD;AAGrE,cAAQxB,aAAa,CAACoB,KAAK,CAAChB,IAAN,IAAc,EAAf,CAHgD;AAIrE,cAAQW,YAAY,CAACU,gBAAgB,KAAKA,gBAAgB,GAAG/B,OAAO,CAAC6B,oBAAR,CAA6B,CAAC,OAAD,EAAU,EAAV,CAA7B,EAA4C,CAAC,OAAD,EAAU,EAAV,CAA5C,CAAxB,CAAjB,EAAsGH,KAAK,CAACM,IAA5G;AAJiD,MAKvEL,GALuE,CAAR;AAKvD,GAL+B;AAK5B,CALb,C,CAMA;;AACA;;;;;;;;;AAOA,OAAO,IAAIM,aAAa,GAAG,UAAUP,KAAV,EAAiBD,QAAjB,EAA2B;AAClD,MAAIA,QAAQ,KAAK,KAAK,CAAtB,EAAyB;AAAEA,IAAAA,QAAQ,GAAG,EAAX;AAAgB;;AAC3C,SAAQS,MAAM,CAACC,IAAP,CAAYT,KAAZ,EACHd,GADG,CACCY,KAAK,CAACC,QAAD,EAAWC,KAAX,CADN,EAEHjB,MAFG,CAEIP,sBAFJ,EAGHc,IAHG,CAGE,GAHF,CAAR;AAIH,CANM;AAOP,IAAIY,gBAAJ,EAAsBG,gBAAtB","sourcesContent":["import * as tslib_1 from \"tslib\";\nimport { isPresent, isNotNullOrEmptyString } from './utils';\nimport { serializeFilter } from './odata-filtering.operators';\nimport { ifElse, constant } from './funcs';\nvar serializeSort = function (orderby) {\n    var str = orderby\n        .filter(function (sort) { return isPresent(sort.dir); })\n        .map(function (sort) {\n        var order = sort.field.replace(/\\./g, \"/\");\n        return sort.dir === \"desc\" ? order + \" desc\" : order;\n    }).join(\",\");\n    return str ? \"$orderby=\" + str : str;\n};\nvar emptyString = constant('');\nvar concat = function (a) { return function (b) { return a + b; }; };\nvar serializeKey = function (strings, val) { return ifElse(isPresent, concat(strings[0]), emptyString)(val); };\nvar rules = function (settings, state) { return function (key) { return ({\n    \"filter\": serializeFilter(state.filter || {}, settings),\n    \"skip\": serializeKey(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject([\"$skip=\", \"\"], [\"$skip=\", \"\"])), state.skip),\n    \"sort\": serializeSort(state.sort || []),\n    \"take\": serializeKey(templateObject_2 || (templateObject_2 = tslib_1.__makeTemplateObject([\"$top=\", \"\"], [\"$top=\", \"\"])), state.take)\n}[key]); }; };\n// tslint:enable:max-line-length\n/**\n * Converts a [`State`]({% slug api_kendo-data-query_state %}) into an OData v4 compatible string.\n *\n * @param {State} state - The state that will be serialized.\n * @param {ODataSettings} settings - The settings that are used during the serialization.\n * @returns {string} - The serialized state.\n */\nexport var toODataString = function (state, settings) {\n    if (settings === void 0) { settings = {}; }\n    return (Object.keys(state)\n        .map(rules(settings, state))\n        .filter(isNotNullOrEmptyString)\n        .join('&'));\n};\nvar templateObject_1, templateObject_2;\n"]},"metadata":{},"sourceType":"module"}