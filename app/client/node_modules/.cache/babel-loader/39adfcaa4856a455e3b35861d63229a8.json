{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react'; // tslint:disable:max-line-length\n\n/**\n * Represents the detail row class of the KendoReact Grid. Used to define custom details for each row. Can be applied for building the hierarchy. If `expandField` is set, the details for each row will be visible or hidden depending on the current data item and its `expandField` value.\n *\n * @example\n * ```jsx\n * class CustomGridDetailRow extends GridDetailRow {\n *     render() {\n *         const detailData = this.props.dataItem.MasterField2;\n *         return (\n *             <div>\n *               This is detail template with another grid inside it\n *               <Grid scrollable=\"none\" data={detailData} />\n *             </div>\n *         );\n *     }\n * }\n *\n * class App extends React.Component {\n *     constructor(props) {\n *         super(props);\n *         this.state = {\n *             data: [{MasterField1:'A1', MasterField2: [{DetailField1: 1, DetailField2: 2}]},\n *                   {MasterField1:'B1', MasterField2: [{DetailField1: 3, DetailField2: 4}]},\n *                   {MasterField1:'C1', MasterField2: [{DetailField1: 5, DetailField2: 6}]}]\n *         };\n *     }\n *     render() {\n *         return (\n *             <Grid\n *                  data={this.state.data}\n *                  detail={CustomGridDetailRow}\n *              >\n *              <GridColumn field=\"MasterField1\" />\n *             </Grid>\n *         );\n *     }\n * }\n * ReactDOM.render(\n *     <App />,\n *     document.querySelector('my-app')\n * );\n * ```\n */\n// tslint:enable:max-line-length\n\nvar GridDetailRow =\n/** @class */\nfunction (_super) {\n  __extends(GridDetailRow, _super);\n\n  function GridDetailRow() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * @hidden\n   */\n\n\n  GridDetailRow.prototype.render = function () {\n    return null;\n  };\n\n  return GridDetailRow;\n}(React.Component);\n\nexport { GridDetailRow };","map":{"version":3,"sources":["../../../src/rows/GridDetailRow.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB,C,CAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CC;;AACD,IAAA,aAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmC,EAAA,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;;AAAnC,WAAA,aAAA,GAAA;;AAOC;AANG;;;;;AAGA,EAAA,aAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACI,WAAO,IAAP;AACH,GAFD;;AAGJ,SAAA,aAAA;AAAC,CAPD,CAAmC,KAAK,CAAC,SAAzC,CAAA","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as React from 'react';\n// tslint:disable:max-line-length\n/**\n * Represents the detail row class of the KendoReact Grid. Used to define custom details for each row. Can be applied for building the hierarchy. If `expandField` is set, the details for each row will be visible or hidden depending on the current data item and its `expandField` value.\n *\n * @example\n * ```jsx\n * class CustomGridDetailRow extends GridDetailRow {\n *     render() {\n *         const detailData = this.props.dataItem.MasterField2;\n *         return (\n *             <div>\n *               This is detail template with another grid inside it\n *               <Grid scrollable=\"none\" data={detailData} />\n *             </div>\n *         );\n *     }\n * }\n *\n * class App extends React.Component {\n *     constructor(props) {\n *         super(props);\n *         this.state = {\n *             data: [{MasterField1:'A1', MasterField2: [{DetailField1: 1, DetailField2: 2}]},\n *                   {MasterField1:'B1', MasterField2: [{DetailField1: 3, DetailField2: 4}]},\n *                   {MasterField1:'C1', MasterField2: [{DetailField1: 5, DetailField2: 6}]}]\n *         };\n *     }\n *     render() {\n *         return (\n *             <Grid\n *                  data={this.state.data}\n *                  detail={CustomGridDetailRow}\n *              >\n *              <GridColumn field=\"MasterField1\" />\n *             </Grid>\n *         );\n *     }\n * }\n * ReactDOM.render(\n *     <App />,\n *     document.querySelector('my-app')\n * );\n * ```\n */\n// tslint:enable:max-line-length\nvar GridDetailRow = /** @class */ (function (_super) {\n    __extends(GridDetailRow, _super);\n    function GridDetailRow() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * @hidden\n     */\n    GridDetailRow.prototype.render = function () {\n        return null;\n    };\n    return GridDetailRow;\n}(React.Component));\nexport { GridDetailRow };\n//# sourceMappingURL=GridDetailRow.js.map"]},"metadata":{},"sourceType":"module"}