{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { MaskingService } from './masking.service';\nimport { defaultRules, maskingChanged, returnFalse } from './utils';\nimport { guid, classNames, getTabIndex } from '@progress/kendo-react-common';\nimport { FloatingLabel } from '@progress/kendo-react-labels';\n/**\n * Represents the props of the [KendoReact MaskedTextBox component]({% slug overview_maskedtextbox %}).\n */\n\nvar MaskedTextBox =\n/** @class */\nfunction (_super) {\n  __extends(MaskedTextBox, _super);\n\n  function MaskedTextBox() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * @hidden\n     */\n\n\n    _this.state = {};\n    _this._inputId = \"k-\" + guid();\n    _this._service = new MaskingService();\n    _this._isPasted = false;\n    _this._selection = [null, null];\n    _this._input = null;\n    /**\n     * @hidden\n     */\n\n    _this.focus = function () {\n      if (_this._input) {\n        _this._input.focus();\n      }\n    };\n\n    _this.pasteHandler = function (event) {\n      var _a = event.target,\n          selectionStart = _a.selectionStart,\n          selectionEnd = _a.selectionEnd;\n\n      if (selectionEnd === selectionStart) {\n        return;\n      }\n\n      _this._isPasted = true;\n      _this._selection = [selectionStart || 0, selectionEnd || 0];\n    };\n\n    _this.onChangeHandler = function (event) {\n      var input = event.currentTarget;\n      var value = input.value;\n      var start = _this._selection[0] || 0;\n      var end = _this._selection[1] || 0;\n\n      if (!_this.props.mask) {\n        _this._isPasted = false;\n        _this._selection = [null, null];\n\n        _this.triggerOnChange(value, event);\n\n        return;\n      }\n\n      var maskedValue = _this.value;\n      var result;\n\n      if (_this._isPasted) {\n        _this._isPasted = false;\n        var rightPart = maskedValue.length - end;\n        var to = value.length - rightPart;\n        result = _this._service.maskInRange(value.slice(start, to), maskedValue, start, end);\n      } else {\n        result = _this._service.maskInput(value, maskedValue, input.selectionStart || 0);\n      }\n\n      _this._selection = [result.selection, result.selection];\n\n      _this.triggerOnChange(result.value, event);\n    };\n\n    _this.focusHandler = function (event) {\n      if (!_this.state.focused) {\n        _this.setState({\n          focused: true\n        });\n\n        if (_this.props.onFocus) {\n          _this.props.onFocus.call(undefined, {\n            target: _this,\n            syntheticEvent: event,\n            nativeEvent: event.nativeEvent\n          });\n        }\n      }\n    };\n\n    _this.blurHandler = function (event) {\n      if (_this.state.focused) {\n        _this.setState({\n          focused: false\n        });\n\n        if (_this.props.onBlur) {\n          _this.props.onBlur.call(undefined, {\n            target: _this,\n            syntheticEvent: event,\n            nativeEvent: event.nativeEvent\n          });\n        }\n      }\n    };\n\n    _this.setValidity = function () {\n      if (_this.element) {\n        _this.element.setCustomValidity(_this.validity.valid ? '' : _this.props.validationMessage || '');\n      }\n    };\n\n    return _this;\n  }\n\n  Object.defineProperty(MaskedTextBox.prototype, \"element\", {\n    /**\n     * Gets the element of the MaskedTextBox.\n     *\n     * @return - An `HTMLInputElement`.\n     *\n     * @example\n     * ```jsx\n     * class App extends React.Component {\n     *     constructor(props) {\n     *         super(props);\n     *     }\n     *     element = null;\n     *     render() {\n     *         return (\n     *             <div>\n     *                 <MaskedTextBox\n     *                     ref={(component) =>\n     *                         this.element = component ? component.element : null}\n     *                 />\n     *                 <button onClick={() => console.log(this.element)}>console.log the element</button>\n     *             </div>\n     *         );\n     *     }\n     * }\n     *\n     * ReactDOM.render(\n     *     <App />,\n     *     document.getElementsByTagName('my-app')[0]\n     * );\n     * ```\n     */\n    get: function () {\n      return this._input;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MaskedTextBox.prototype, \"value\", {\n    /**\n     * Gets the value with the mask of the MaskedTextBox.\n     */\n    get: function () {\n      if (this._valueDuringOnChange !== undefined) {\n        return this._valueDuringOnChange;\n      } else if (this.props.value !== undefined) {\n        return this.props.value;\n      } else if (this.state.value !== undefined) {\n        return this.state.value;\n      } else if (this.props.defaultValue !== undefined) {\n        return this.props.defaultValue;\n      }\n\n      return '';\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MaskedTextBox.prototype, \"rawValue\", {\n    /**\n     * Gets the raw value without the mask of the MaskedTextBox.\n     */\n    get: function () {\n      return this._service.rawValue(this.value);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MaskedTextBox.prototype, \"validity\", {\n    /**\n     * Represents the validity state into which the MaskedTextBox is set.\n     */\n    get: function () {\n      var maskedValue = this.value;\n\n      var value = this._service.validationValue(maskedValue);\n\n      var customError = this.props.validationMessage !== undefined;\n      var valid = this.props.valid !== undefined ? this.props.valid : (!this.required || !!value) && (!this.props.maskValidation || !this.props.prompt || maskedValue.indexOf(this.props.prompt) === -1);\n      return {\n        customError: customError,\n        valid: valid,\n        valueMissing: !value\n      };\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MaskedTextBox.prototype, \"validityStyles\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      return this.props.validityStyles !== undefined ? this.props.validityStyles : MaskedTextBox.defaultProps.validityStyles;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MaskedTextBox.prototype, \"required\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      return this.props.required !== undefined ? this.props.required : MaskedTextBox.defaultProps.required;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MaskedTextBox.prototype, \"name\", {\n    /**\n     * Gets the `name` property of the MaskedTextBox.\n     */\n    get: function () {\n      return this.props.name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  MaskedTextBox.prototype.componentDidUpdate = function (prevProps, prevState) {\n    if (this.element && this.state.focused && prevState.focused) {\n      var _a = this._selection,\n          start = _a[0],\n          end = _a[1];\n      var prevSelection = prevProps.selection;\n      var nextSelection = this.props.selection;\n\n      if (!prevSelection && nextSelection || prevSelection && nextSelection && (prevSelection.start !== nextSelection.start || prevSelection.end !== nextSelection.end)) {\n        start = nextSelection.start;\n        end = nextSelection.end;\n      }\n\n      if (start !== null && end !== null) {\n        this.element.setSelectionRange(start, end);\n      }\n    }\n\n    if (maskingChanged(prevProps, this.props)) {\n      this.updateService();\n    }\n\n    this.setValidity();\n  };\n  /**\n   * @hidden\n   */\n\n\n  MaskedTextBox.prototype.componentDidMount = function () {\n    this.updateService();\n    this.setValidity();\n  };\n  /**\n   * @hidden\n   */\n\n\n  MaskedTextBox.prototype.render = function () {\n    var _this = this;\n\n    var inputId = this.props.id || this._inputId;\n    var isValid = !this.validityStyles || this.validity.valid;\n    var component = React.createElement(\"span\", {\n      dir: this.props.dir,\n      className: classNames('k-widget k-maskedtextbox', this.props.className, {\n        'k-state-focused': this.state.focused,\n        'k-state-disabled': this.props.disabled,\n        'k-state-invalid': !isValid\n      }),\n      style: !this.props.label ? {\n        width: this.props.width\n      } : undefined\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      autoCapitalize: \"off\",\n      spellCheck: false,\n      className: \"k-textbox\",\n      value: this.value,\n      id: inputId,\n      \"aria-labelledby\": this.props.ariaLabelledBy,\n      \"aria-describedby\": this.props.ariaDescribedBy,\n      name: this.props.name,\n      tabIndex: getTabIndex(this.props.tabIndex, this.props.disabled, true),\n      accessKey: this.props.accessKey,\n      title: this.props.title,\n      disabled: this.props.disabled || undefined,\n      readOnly: this.props.readonly || undefined,\n      placeholder: this.props.placeholder,\n      ref: function (input) {\n        return _this._input = input;\n      },\n      onChange: this.onChangeHandler,\n      onPaste: this.pasteHandler,\n      onFocus: this.focusHandler,\n      onBlur: this.blurHandler,\n      onDragStart: returnFalse,\n      onDrop: returnFalse\n    }));\n    return this.props.label ? React.createElement(FloatingLabel, {\n      label: this.props.label,\n      editorId: inputId,\n      editorValue: this.value,\n      editorValid: isValid,\n      editorDisabled: this.props.disabled,\n      editorPlaceholder: this.props.placeholder,\n      children: component,\n      style: {\n        width: this.props.width\n      },\n      dir: this.props.dir\n    }) : component;\n  };\n\n  MaskedTextBox.prototype.triggerOnChange = function (maskedValue, event) {\n    this.setState({\n      value: maskedValue\n    });\n\n    if (this.props.onChange) {\n      this._valueDuringOnChange = maskedValue;\n      this.props.onChange.call(undefined, {\n        syntheticEvent: event,\n        nativeEvent: event.nativeEvent,\n        selectionStart: this._selection[0],\n        selectionEnd: this._selection[1],\n        target: this,\n        value: this.value\n      });\n      this._valueDuringOnChange = undefined;\n    }\n  };\n\n  MaskedTextBox.prototype.updateService = function (extra) {\n    var config = Object.assign({\n      includeLiterals: this.props.includeLiterals,\n      mask: this.props.mask,\n      prompt: this.props.prompt,\n      promptPlaceholder: this.props.promptPlaceholder,\n      rules: this.rules\n    }, extra); // tslint:disable-line:align\n\n    this._service.update(config);\n  };\n\n  Object.defineProperty(MaskedTextBox.prototype, \"rules\", {\n    get: function () {\n      return Object.assign({}, defaultRules, this.props.rules);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * @hidden\n   */\n\n  MaskedTextBox.propTypes = {\n    value: PropTypes.string,\n    defaultValue: PropTypes.string,\n    placeholder: PropTypes.string,\n    title: PropTypes.string,\n    dir: PropTypes.string,\n    id: PropTypes.string,\n    ariaLabelledBy: PropTypes.string,\n    ariaDescribedBy: PropTypes.string,\n    width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    tabIndex: PropTypes.number,\n    accessKey: PropTypes.string,\n    disabled: PropTypes.bool,\n    readonly: PropTypes.bool,\n    prompt: PropTypes.string,\n    promptPlaceholder: PropTypes.string,\n    includeLiterals: PropTypes.bool,\n    maskValidation: PropTypes.bool,\n    mask: PropTypes.string,\n    rules: function (props, propName, componentName) {\n      var rules = props.rules;\n\n      if (rules !== undefined) {\n        var valid = Object.entries(rules).some(function (e) {\n          return typeof e !== 'string' || !(rules[e] instanceof RegExp);\n        });\n\n        if (!valid) {\n          return new Error('Invalid prop `' + propName + '` supplied to' + ' `' + componentName + '`. Validation failed.');\n        }\n      }\n    },\n    selection: PropTypes.shape({\n      start: PropTypes.number.isRequired,\n      end: PropTypes.number.isRequired\n    }),\n    name: PropTypes.string,\n    label: PropTypes.string,\n    validationMessage: PropTypes.string,\n    required: PropTypes.bool,\n    valid: PropTypes.bool,\n    validityStyles: PropTypes.bool,\n    onChange: PropTypes.func\n  };\n  /**\n   * @hidden\n   */\n\n  MaskedTextBox.defaultProps = {\n    prompt: '_',\n    promptPlaceholder: ' ',\n    includeLiterals: false,\n    maskValidation: true,\n    rules: defaultRules,\n    required: false,\n    validityStyles: true\n  };\n  return MaskedTextBox;\n}(React.Component);\n\nexport { MaskedTextBox };","map":{"version":3,"sources":["../../../src/maskedtextbox/MaskedTextBox.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAK,SAAZ,MAA2B,YAA3B;AAEA,SAAS,cAAT,QAA+B,mBAA/B;AAGA,SACI,YADJ,EAEI,cAFJ,EAGI,WAHJ,QAIO,SAJP;AAMA,SACI,IADJ,EAEI,UAFJ,EAKI,WALJ,QAMO,8BANP;AAQA,SAAS,aAAT,QAA8B,8BAA9B;AAUA;;;;AAGA,IAAA,aAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmC,EAAA,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;;AAAnC,WAAA,aAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;AAkEI;;;;;AAGA,IAAA,KAAA,CAAA,KAAA,GAA4B,EAA5B;AAEQ,IAAA,KAAA,CAAA,QAAA,GAAmB,OAAK,IAAI,EAA5B;AACA,IAAA,KAAA,CAAA,QAAA,GAAW,IAAI,cAAJ,EAAX;AACA,IAAA,KAAA,CAAA,SAAA,GAAqB,KAArB;AACA,IAAA,KAAA,CAAA,UAAA,GAA6C,CAAC,IAAD,EAAO,IAAP,CAA7C;AACA,IAAA,KAAA,CAAA,MAAA,GAAkC,IAAlC;AAGR;;;;AAGO,IAAA,KAAA,CAAA,KAAA,GAAQ,YAAA;AACX,UAAI,KAAI,CAAC,MAAT,EAAiB;AACb,QAAA,KAAI,CAAC,MAAL,CAAY,KAAZ;AACH;AACJ,KAJM;;AAiNC,IAAA,KAAA,CAAA,YAAA,GAAe,UAAC,KAAD,EAA8C;AAC3D,UAAA,EAAA,GAAA,KAAA,CAAA,MAAA;AAAA,UAAE,cAAA,GAAA,EAAA,CAAA,cAAF;AAAA,UAAkB,YAAA,GAAA,EAAA,CAAA,YAAlB;;AAEN,UAAI,YAAY,KAAK,cAArB,EAAqC;AACjC;AACH;;AAED,MAAA,KAAI,CAAC,SAAL,GAAiB,IAAjB;AACA,MAAA,KAAI,CAAC,UAAL,GAAkB,CAAC,cAAc,IAAI,CAAnB,EAAsB,YAAY,IAAI,CAAtC,CAAlB;AACH,KATO;;AAWA,IAAA,KAAA,CAAA,eAAA,GAAkB,UAAC,KAAD,EAAyC;AAC/D,UAAM,KAAK,GAAqB,KAAK,CAAC,aAAtC;AACA,UAAM,KAAK,GAAG,KAAK,CAAC,KAApB;AACA,UAAM,KAAK,GAAG,KAAI,CAAC,UAAL,CAAgB,CAAhB,KAAsB,CAApC;AACA,UAAM,GAAG,GAAG,KAAI,CAAC,UAAL,CAAgB,CAAhB,KAAsB,CAAlC;;AAEA,UAAI,CAAC,KAAI,CAAC,KAAL,CAAW,IAAhB,EAAsB;AAClB,QAAA,KAAI,CAAC,SAAL,GAAiB,KAAjB;AACA,QAAA,KAAI,CAAC,UAAL,GAAkB,CAAC,IAAD,EAAO,IAAP,CAAlB;;AACA,QAAA,KAAI,CAAC,eAAL,CAAqB,KAArB,EAA4B,KAA5B;;AACA;AACH;;AAED,UAAM,WAAW,GAAG,KAAI,CAAC,KAAzB;AACA,UAAI,MAAJ;;AAEA,UAAI,KAAI,CAAC,SAAT,EAAoB;AAChB,QAAA,KAAI,CAAC,SAAL,GAAiB,KAAjB;AACA,YAAM,SAAS,GAAG,WAAW,CAAC,MAAZ,GAAqB,GAAvC;AACA,YAAM,EAAE,GAAG,KAAK,CAAC,MAAN,GAAe,SAA1B;AACA,QAAA,MAAM,GAAG,KAAI,CAAC,QAAL,CAAc,WAAd,CAA0B,KAAK,CAAC,KAAN,CAAY,KAAZ,EAAmB,EAAnB,CAA1B,EAAkD,WAAlD,EAA+D,KAA/D,EAAsE,GAAtE,CAAT;AACH,OALD,MAKO;AACH,QAAA,MAAM,GAAG,KAAI,CAAC,QAAL,CAAc,SAAd,CAAwB,KAAxB,EAA+B,WAA/B,EAA4C,KAAK,CAAC,cAAN,IAAwB,CAApE,CAAT;AACH;;AAED,MAAA,KAAI,CAAC,UAAL,GAAkB,CAAC,MAAM,CAAC,SAAR,EAAmB,MAAM,CAAC,SAA1B,CAAlB;;AAEA,MAAA,KAAI,CAAC,eAAL,CAAqB,MAAM,CAAC,KAA5B,EAAmC,KAAnC;AACH,KA5BO;;AA8BA,IAAA,KAAA,CAAA,YAAA,GAAe,UAAC,KAAD,EAA0C;AAC7D,UAAI,CAAC,KAAI,CAAC,KAAL,CAAW,OAAhB,EAAyB;AACrB,QAAA,KAAI,CAAC,QAAL,CAAc;AAAE,UAAA,OAAO,EAAE;AAAX,SAAd;;AACA,YAAI,KAAI,CAAC,KAAL,CAAW,OAAf,EAAwB;AACpB,UAAA,KAAI,CAAC,KAAL,CAAW,OAAX,CAAmB,IAAnB,CAAwB,SAAxB,EAAmC;AAC/B,YAAA,MAAM,EAAE,KADuB;AAE/B,YAAA,cAAc,EAAE,KAFe;AAG/B,YAAA,WAAW,EAAE,KAAK,CAAC;AAHY,WAAnC;AAKH;AACJ;AACJ,KAXO;;AAaA,IAAA,KAAA,CAAA,WAAA,GAAc,UAAC,KAAD,EAA0C;AAC5D,UAAI,KAAI,CAAC,KAAL,CAAW,OAAf,EAAwB;AACpB,QAAA,KAAI,CAAC,QAAL,CAAc;AAAE,UAAA,OAAO,EAAE;AAAX,SAAd;;AACA,YAAI,KAAI,CAAC,KAAL,CAAW,MAAf,EAAuB;AACnB,UAAA,KAAI,CAAC,KAAL,CAAW,MAAX,CAAkB,IAAlB,CAAuB,SAAvB,EAAkC;AAC9B,YAAA,MAAM,EAAE,KADsB;AAE9B,YAAA,cAAc,EAAE,KAFc;AAG9B,YAAA,WAAW,EAAE,KAAK,CAAC;AAHW,WAAlC;AAKH;AACJ;AACJ,KAXO;;AAgDA,IAAA,KAAA,CAAA,WAAA,GAAc,YAAA;AAClB,UAAI,KAAI,CAAC,OAAT,EAAkB;AACd,QAAA,KAAI,CAAC,OAAL,CAAa,iBAAb,CACI,KAAI,CAAC,QAAL,CAAc,KAAd,GACM,EADN,GAEM,KAAI,CAAC,KAAL,CAAW,iBAAX,IAAgC,EAH1C;AAKH;AACJ,KARO;;;AASX;;AA3RG,EAAA,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAX,EAAW,SAAX,EAAkB;AA/BlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SA+BA,YAAA;AACI,aAAO,KAAK,MAAZ;AACH,KAFiB;oBAAA;;AAAA,GAAlB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAX,EAAW,OAAX,EAAgB;AAHhB;;;SAGA,YAAA;AACI,UAAI,KAAK,oBAAL,KAA8B,SAAlC,EAA6C;AACzC,eAAO,KAAK,oBAAZ;AACH,OAFD,MAEO,IAAI,KAAK,KAAL,CAAW,KAAX,KAAqB,SAAzB,EAAoC;AACvC,eAAO,KAAK,KAAL,CAAW,KAAlB;AACH,OAFM,MAEA,IAAI,KAAK,KAAL,CAAW,KAAX,KAAqB,SAAzB,EAAoC;AACvC,eAAO,KAAK,KAAL,CAAW,KAAlB;AACH,OAFM,MAEA,IAAI,KAAK,KAAL,CAAW,YAAX,KAA4B,SAAhC,EAA2C;AAC9C,eAAO,KAAK,KAAL,CAAW,YAAlB;AACH;;AACD,aAAO,EAAP;AACH,KAXe;oBAAA;;AAAA,GAAhB;AAgBA,EAAA,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAX,EAAW,UAAX,EAAmB;AAHnB;;;SAGA,YAAA;AACI,aAAO,KAAK,QAAL,CAAc,QAAd,CAAuB,KAAK,KAA5B,CAAP;AACH,KAFkB;oBAAA;;AAAA,GAAnB;AAOA,EAAA,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAX,EAAW,UAAX,EAAmB;AAHnB;;;SAGA,YAAA;AACI,UAAM,WAAW,GAAG,KAAK,KAAzB;;AACA,UAAM,KAAK,GAAG,KAAK,QAAL,CAAc,eAAd,CAA8B,WAA9B,CAAd;;AACA,UAAM,WAAW,GAAG,KAAK,KAAL,CAAW,iBAAX,KAAiC,SAArD;AACA,UAAM,KAAK,GAAI,KAAK,KAAL,CAAW,KAAX,KAAqB,SAArB,GACX,KAAK,KAAL,CAAW,KADA,GACQ,CAAE,CAAC,KAAK,QAAN,IAAkB,CAAC,CAAC,KAAtB,MAClB,CAAC,KAAK,KAAL,CAAW,cAAZ,IAA8B,CAAC,KAAK,KAAL,CAAW,MAA1C,IAAoD,WAAW,CAAC,OAAZ,CAAoB,KAAK,KAAL,CAAW,MAA/B,MAA2C,CAAC,CAD9E,CADvB;AAIA,aAAO;AACH,QAAA,WAAW,EAAA,WADR;AAEH,QAAA,KAAK,EAAA,KAFF;AAGH,QAAA,YAAY,EAAE,CAAC;AAHZ,OAAP;AAKH,KAbkB;oBAAA;;AAAA,GAAnB;AAkBA,EAAA,MAAA,CAAA,cAAA,CAAc,aAAA,CAAA,SAAd,EAAc,gBAAd,EAA4B;AAH5B;;;SAGA,YAAA;AACI,aAAO,KAAK,KAAL,CAAW,cAAX,KAA8B,SAA9B,GACD,KAAK,KAAL,CAAW,cADV,GAED,aAAa,CAAC,YAAd,CAA2B,cAFjC;AAGH,KAJ2B;oBAAA;;AAAA,GAA5B;AASA,EAAA,MAAA,CAAA,cAAA,CAAc,aAAA,CAAA,SAAd,EAAc,UAAd,EAAsB;AAHtB;;;SAGA,YAAA;AACI,aAAO,KAAK,KAAL,CAAW,QAAX,KAAwB,SAAxB,GACD,KAAK,KAAL,CAAW,QADV,GAED,aAAa,CAAC,YAAd,CAA2B,QAFjC;AAGH,KAJqB;oBAAA;;AAAA,GAAtB;AASA,EAAA,MAAA,CAAA,cAAA,CAAW,aAAA,CAAA,SAAX,EAAW,MAAX,EAAe;AAHf;;;SAGA,YAAA;AACI,aAAO,KAAK,KAAL,CAAW,IAAlB;AACH,KAFc;oBAAA;;AAAA,GAAf;AAIA;;;;AAGA,EAAA,aAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,SAAnB,EAAkD,SAAlD,EAA+E;AAC3E,QAAI,KAAK,OAAL,IAAgB,KAAK,KAAL,CAAW,OAA3B,IAAsC,SAAS,CAAC,OAApD,EAA6D;AACrD,UAAA,EAAA,GAAA,KAAA,UAAA;AAAA,UAAC,KAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,UAAQ,GAAA,GAAA,EAAA,CAAA,CAAA,CAAR;AACJ,UAAM,aAAa,GAAG,SAAS,CAAC,SAAhC;AACA,UAAM,aAAa,GAAG,KAAK,KAAL,CAAW,SAAjC;;AAEA,UAAK,CAAC,aAAD,IAAkB,aAAnB,IACC,aAAa,IAAI,aAAjB,KACI,aAAa,CAAC,KAAd,KAAwB,aAAa,CAAC,KAAtC,IAA+C,aAAa,CAAC,GAAd,KAAsB,aAAa,CAAC,GADvF,CADL,EAEmG;AAC/F,QAAA,KAAK,GAAG,aAAa,CAAC,KAAtB;AACA,QAAA,GAAG,GAAG,aAAa,CAAC,GAApB;AACH;;AACD,UAAI,KAAK,KAAK,IAAV,IAAkB,GAAG,KAAK,IAA9B,EAAoC;AAChC,aAAK,OAAL,CAAa,iBAAb,CAA+B,KAA/B,EAAsC,GAAtC;AACH;AACJ;;AAED,QAAI,cAAc,CAAC,SAAD,EAAY,KAAK,KAAjB,CAAlB,EAA2C;AACvC,WAAK,aAAL;AACH;;AACD,SAAK,WAAL;AACH,GArBD;AAuBA;;;;;AAGA,EAAA,aAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,YAAA;AACI,SAAK,aAAL;AACA,SAAK,WAAL;AACH,GAHD;AAKA;;;;;AAGA,EAAA,aAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACI,QAAM,OAAO,GAAG,KAAK,KAAL,CAAW,EAAX,IAAiB,KAAK,QAAtC;AACA,QAAM,OAAO,GAAG,CAAC,KAAK,cAAN,IAAwB,KAAK,QAAL,CAAc,KAAtD;AACA,QAAM,SAAS,GACX,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACI,MAAA,GAAG,EAAE,KAAK,KAAL,CAAW,GADpB;AAEI,MAAA,SAAS,EACL,UAAU,CAAC,0BAAD,EAA6B,KAAK,KAAL,CAAW,SAAxC,EAAmD;AACzD,2BAAmB,KAAK,KAAL,CAAW,OAD2B;AAEzD,4BAAoB,KAAK,KAAL,CAAW,QAF0B;AAGzD,2BAAmB,CAAC;AAHqC,OAAnD,CAHlB;AASI,MAAA,KAAK,EAAE,CAAC,KAAK,KAAL,CAAW,KAAZ,GACD;AAAE,QAAA,KAAK,EAAE,KAAK,KAAL,CAAW;AAApB,OADC,GAED;AAXV,KAAA,EAaI,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;AACI,MAAA,IAAI,EAAC,MADT;AAEI,MAAA,YAAY,EAAC,KAFjB;AAGI,MAAA,WAAW,EAAC,KAHhB;AAII,MAAA,cAAc,EAAC,KAJnB;AAKI,MAAA,UAAU,EAAE,KALhB;AAMI,MAAA,SAAS,EAAC,WANd;AAOI,MAAA,KAAK,EAAE,KAAK,KAPhB;AAQI,MAAA,EAAE,EAAE,OARR;AAQe,yBACM,KAAK,KAAL,CAAW,cAThC;AAS8C,0BACxB,KAAK,KAAL,CAAW,eAVjC;AAWI,MAAA,IAAI,EAAE,KAAK,KAAL,CAAW,IAXrB;AAYI,MAAA,QAAQ,EAAE,WAAW,CAAC,KAAK,KAAL,CAAW,QAAZ,EAAsB,KAAK,KAAL,CAAW,QAAjC,EAA2C,IAA3C,CAZzB;AAaI,MAAA,SAAS,EAAE,KAAK,KAAL,CAAW,SAb1B;AAcI,MAAA,KAAK,EAAE,KAAK,KAAL,CAAW,KAdtB;AAeI,MAAA,QAAQ,EAAE,KAAK,KAAL,CAAW,QAAX,IAAuB,SAfrC;AAgBI,MAAA,QAAQ,EAAE,KAAK,KAAL,CAAW,QAAX,IAAuB,SAhBrC;AAiBI,MAAA,WAAW,EAAE,KAAK,KAAL,CAAW,WAjB5B;AAmBI,MAAA,GAAG,EAAE,UAAA,KAAA,EAAK;AAAI,eAAA,KAAI,CAAC,MAAL,GAAA,KAAA;AAAmB,OAnBrC;AAqBI,MAAA,QAAQ,EAAE,KAAK,eArBnB;AAsBI,MAAA,OAAO,EAAE,KAAK,YAtBlB;AAuBI,MAAA,OAAO,EAAE,KAAK,YAvBlB;AAwBI,MAAA,MAAM,EAAE,KAAK,WAxBjB;AAyBI,MAAA,WAAW,EAAE,WAzBjB;AA0BI,MAAA,MAAM,EAAE;AA1BZ,KAAA,CAbJ,CADJ;AA6CA,WAAO,KAAK,KAAL,CAAW,KAAX,GAEC,KAAA,CAAA,aAAA,CAAC,aAAD,EAAc;AACV,MAAA,KAAK,EAAE,KAAK,KAAL,CAAW,KADR;AAEV,MAAA,QAAQ,EAAE,OAFA;AAGV,MAAA,WAAW,EAAE,KAAK,KAHR;AAIV,MAAA,WAAW,EAAE,OAJH;AAKV,MAAA,cAAc,EAAE,KAAK,KAAL,CAAW,QALjB;AAMV,MAAA,iBAAiB,EAAE,KAAK,KAAL,CAAW,WANpB;AAOV,MAAA,QAAQ,EAAE,SAPA;AAQV,MAAA,KAAK,EAAE;AAAE,QAAA,KAAK,EAAE,KAAK,KAAL,CAAW;AAApB,OARG;AASV,MAAA,GAAG,EAAE,KAAK,KAAL,CAAW;AATN,KAAd,CAFD,GAcD,SAdN;AAeH,GA/DD;;AAoIQ,EAAA,aAAA,CAAA,SAAA,CAAA,eAAA,GAAR,UAAwB,WAAxB,EAA6C,KAA7C,EAAwE;AACpE,SAAK,QAAL,CAAc;AACV,MAAA,KAAK,EAAE;AADG,KAAd;;AAIA,QAAI,KAAK,KAAL,CAAW,QAAf,EAAyB;AACrB,WAAK,oBAAL,GAA4B,WAA5B;AACA,WAAK,KAAL,CAAW,QAAX,CAAoB,IAApB,CAAyB,SAAzB,EAAoC;AAChC,QAAA,cAAc,EAAE,KADgB;AAEhC,QAAA,WAAW,EAAE,KAAK,CAAC,WAFa;AAGhC,QAAA,cAAc,EAAE,KAAK,UAAL,CAAgB,CAAhB,CAHgB;AAIhC,QAAA,YAAY,EAAE,KAAK,UAAL,CAAgB,CAAhB,CAJkB;AAKhC,QAAA,MAAM,EAAE,IALwB;AAMhC,QAAA,KAAK,EAAE,KAAK;AANoB,OAApC;AAQA,WAAK,oBAAL,GAA4B,SAA5B;AACH;AACJ,GAjBO;;AAmBA,EAAA,aAAA,CAAA,SAAA,CAAA,aAAA,GAAR,UAAsB,KAAtB,EAAiC;AAC7B,QAAM,MAAM,GAAG,MAAM,CAAC,MAAP,CAAc;AACzB,MAAA,eAAe,EAAE,KAAK,KAAL,CAAW,eADH;AAEzB,MAAA,IAAI,EAAE,KAAK,KAAL,CAAW,IAFQ;AAGzB,MAAA,MAAM,EAAE,KAAK,KAAL,CAAW,MAHM;AAIzB,MAAA,iBAAiB,EAAE,KAAK,KAAL,CAAW,iBAJL;AAKzB,MAAA,KAAK,EAAE,KAAK;AALa,KAAd,EAMZ,KANY,CAAf,CAD6B,CAOlB;;AAEX,SAAK,QAAL,CAAc,MAAd,CAAqB,MAArB;AACH,GAVO;;AAYR,EAAA,MAAA,CAAA,cAAA,CAAY,aAAA,CAAA,SAAZ,EAAY,OAAZ,EAAiB;SAAjB,YAAA;AACI,aAAO,MAAM,CAAC,MAAP,CAAc,EAAd,EAAkB,YAAlB,EAAgC,KAAK,KAAL,CAAW,KAA3C,CAAP;AACH,KAFgB;oBAAA;;AAAA,GAAjB;AAlYA;;;;AAGO,EAAA,aAAA,CAAA,SAAA,GAAY;AACf,IAAA,KAAK,EAAE,SAAS,CAAC,MADF;AAEf,IAAA,YAAY,EAAE,SAAS,CAAC,MAFT;AAGf,IAAA,WAAW,EAAE,SAAS,CAAC,MAHR;AAIf,IAAA,KAAK,EAAE,SAAS,CAAC,MAJF;AAKf,IAAA,GAAG,EAAE,SAAS,CAAC,MALA;AAMf,IAAA,EAAE,EAAE,SAAS,CAAC,MANC;AAOf,IAAA,cAAc,EAAE,SAAS,CAAC,MAPX;AAQf,IAAA,eAAe,EAAE,SAAS,CAAC,MARZ;AASf,IAAA,KAAK,EAAE,SAAS,CAAC,SAAV,CAAoB,CACvB,SAAS,CAAC,MADa,EAEvB,SAAS,CAAC,MAFa,CAApB,CATQ;AAaf,IAAA,QAAQ,EAAE,SAAS,CAAC,MAbL;AAcf,IAAA,SAAS,EAAE,SAAS,CAAC,MAdN;AAef,IAAA,QAAQ,EAAE,SAAS,CAAC,IAfL;AAgBf,IAAA,QAAQ,EAAE,SAAS,CAAC,IAhBL;AAiBf,IAAA,MAAM,EAAE,SAAS,CAAC,MAjBH;AAkBf,IAAA,iBAAiB,EAAE,SAAS,CAAC,MAlBd;AAmBf,IAAA,eAAe,EAAE,SAAS,CAAC,IAnBZ;AAoBf,IAAA,cAAc,EAAE,SAAS,CAAC,IApBX;AAqBf,IAAA,IAAI,EAAE,SAAS,CAAC,MArBD;AAsBf,IAAA,KAAK,EAAE,UAAU,KAAV,EAAqC,QAArC,EAAuD,aAAvD,EAA4E;AAC/E,UAAM,KAAK,GAAG,KAAK,CAAC,KAApB;;AACA,UAAI,KAAK,KAAK,SAAd,EAAyB;AACrB,YAAM,KAAK,GAAI,MAAc,CAAC,OAAf,CAAuB,KAAvB,EACV,IADU,CACL,UAAA,CAAA,EAAC;AAAI,iBAAA,OAAO,CAAP,KAAa,QAAb,IAAyB,EAAE,KAAK,CAAC,CAAD,CAAL,YAA3B,MAAyB,CAAzB;AAAsD,SADtD,CAAf;;AAEA,YAAI,CAAC,KAAL,EAAY;AACR,iBAAO,IAAI,KAAJ,CACH,mBAAmB,QAAnB,GAA8B,eAA9B,GACA,IADA,GACO,aADP,GACuB,uBAFpB,CAAP;AAIH;AACJ;AACJ,KAlCc;AAmCf,IAAA,SAAS,EAAE,SAAS,CAAC,KAAV,CAAgB;AACvB,MAAA,KAAK,EAAE,SAAS,CAAC,MAAV,CAAiB,UADD;AAEvB,MAAA,GAAG,EAAE,SAAS,CAAC,MAAV,CAAiB;AAFC,KAAhB,CAnCI;AAuCf,IAAA,IAAI,EAAE,SAAS,CAAC,MAvCD;AAwCf,IAAA,KAAK,EAAE,SAAS,CAAC,MAxCF;AAyCf,IAAA,iBAAiB,EAAE,SAAS,CAAC,MAzCd;AA0Cf,IAAA,QAAQ,EAAE,SAAS,CAAC,IA1CL;AA2Cf,IAAA,KAAK,EAAE,SAAS,CAAC,IA3CF;AA4Cf,IAAA,cAAc,EAAE,SAAS,CAAC,IA5CX;AA6Cf,IAAA,QAAQ,EAAE,SAAS,CAAC;AA7CL,GAAZ;AAgDP;;;;AAGO,EAAA,aAAA,CAAA,YAAA,GAAe;AAClB,IAAA,MAAM,EAAE,GADU;AAElB,IAAA,iBAAiB,EAAE,GAFD;AAGlB,IAAA,eAAe,EAAE,KAHC;AAIlB,IAAA,cAAc,EAAE,IAJE;AAKlB,IAAA,KAAK,EAAE,YALW;AAMlB,IAAA,QAAQ,EAAE,KANQ;AAOlB,IAAA,cAAc,EAAE;AAPE,GAAf;AAyVX,SAAA,aAAA;AAAC,CAjZD,CAAmC,KAAK,CAAC,SAAzC,CAAA;;SAAa,a","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { MaskingService } from './masking.service';\nimport { defaultRules, maskingChanged, returnFalse } from './utils';\nimport { guid, classNames, getTabIndex } from '@progress/kendo-react-common';\nimport { FloatingLabel } from '@progress/kendo-react-labels';\n/**\n * Represents the props of the [KendoReact MaskedTextBox component]({% slug overview_maskedtextbox %}).\n */\nvar MaskedTextBox = /** @class */ (function (_super) {\n    __extends(MaskedTextBox, _super);\n    function MaskedTextBox() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * @hidden\n         */\n        _this.state = {};\n        _this._inputId = \"k-\" + guid();\n        _this._service = new MaskingService();\n        _this._isPasted = false;\n        _this._selection = [null, null];\n        _this._input = null;\n        /**\n         * @hidden\n         */\n        _this.focus = function () {\n            if (_this._input) {\n                _this._input.focus();\n            }\n        };\n        _this.pasteHandler = function (event) {\n            var _a = event.target, selectionStart = _a.selectionStart, selectionEnd = _a.selectionEnd;\n            if (selectionEnd === selectionStart) {\n                return;\n            }\n            _this._isPasted = true;\n            _this._selection = [selectionStart || 0, selectionEnd || 0];\n        };\n        _this.onChangeHandler = function (event) {\n            var input = event.currentTarget;\n            var value = input.value;\n            var start = _this._selection[0] || 0;\n            var end = _this._selection[1] || 0;\n            if (!_this.props.mask) {\n                _this._isPasted = false;\n                _this._selection = [null, null];\n                _this.triggerOnChange(value, event);\n                return;\n            }\n            var maskedValue = _this.value;\n            var result;\n            if (_this._isPasted) {\n                _this._isPasted = false;\n                var rightPart = maskedValue.length - end;\n                var to = value.length - rightPart;\n                result = _this._service.maskInRange(value.slice(start, to), maskedValue, start, end);\n            }\n            else {\n                result = _this._service.maskInput(value, maskedValue, input.selectionStart || 0);\n            }\n            _this._selection = [result.selection, result.selection];\n            _this.triggerOnChange(result.value, event);\n        };\n        _this.focusHandler = function (event) {\n            if (!_this.state.focused) {\n                _this.setState({ focused: true });\n                if (_this.props.onFocus) {\n                    _this.props.onFocus.call(undefined, {\n                        target: _this,\n                        syntheticEvent: event,\n                        nativeEvent: event.nativeEvent\n                    });\n                }\n            }\n        };\n        _this.blurHandler = function (event) {\n            if (_this.state.focused) {\n                _this.setState({ focused: false });\n                if (_this.props.onBlur) {\n                    _this.props.onBlur.call(undefined, {\n                        target: _this,\n                        syntheticEvent: event,\n                        nativeEvent: event.nativeEvent\n                    });\n                }\n            }\n        };\n        _this.setValidity = function () {\n            if (_this.element) {\n                _this.element.setCustomValidity(_this.validity.valid\n                    ? ''\n                    : _this.props.validationMessage || '');\n            }\n        };\n        return _this;\n    }\n    Object.defineProperty(MaskedTextBox.prototype, \"element\", {\n        /**\n         * Gets the element of the MaskedTextBox.\n         *\n         * @return - An `HTMLInputElement`.\n         *\n         * @example\n         * ```jsx\n         * class App extends React.Component {\n         *     constructor(props) {\n         *         super(props);\n         *     }\n         *     element = null;\n         *     render() {\n         *         return (\n         *             <div>\n         *                 <MaskedTextBox\n         *                     ref={(component) =>\n         *                         this.element = component ? component.element : null}\n         *                 />\n         *                 <button onClick={() => console.log(this.element)}>console.log the element</button>\n         *             </div>\n         *         );\n         *     }\n         * }\n         *\n         * ReactDOM.render(\n         *     <App />,\n         *     document.getElementsByTagName('my-app')[0]\n         * );\n         * ```\n         */\n        get: function () {\n            return this._input;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MaskedTextBox.prototype, \"value\", {\n        /**\n         * Gets the value with the mask of the MaskedTextBox.\n         */\n        get: function () {\n            if (this._valueDuringOnChange !== undefined) {\n                return this._valueDuringOnChange;\n            }\n            else if (this.props.value !== undefined) {\n                return this.props.value;\n            }\n            else if (this.state.value !== undefined) {\n                return this.state.value;\n            }\n            else if (this.props.defaultValue !== undefined) {\n                return this.props.defaultValue;\n            }\n            return '';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MaskedTextBox.prototype, \"rawValue\", {\n        /**\n         * Gets the raw value without the mask of the MaskedTextBox.\n         */\n        get: function () {\n            return this._service.rawValue(this.value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MaskedTextBox.prototype, \"validity\", {\n        /**\n         * Represents the validity state into which the MaskedTextBox is set.\n         */\n        get: function () {\n            var maskedValue = this.value;\n            var value = this._service.validationValue(maskedValue);\n            var customError = this.props.validationMessage !== undefined;\n            var valid = (this.props.valid !== undefined ?\n                this.props.valid : ((!this.required || !!value)) &&\n                (!this.props.maskValidation || !this.props.prompt || maskedValue.indexOf(this.props.prompt) === -1));\n            return {\n                customError: customError,\n                valid: valid,\n                valueMissing: !value\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MaskedTextBox.prototype, \"validityStyles\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.props.validityStyles !== undefined\n                ? this.props.validityStyles\n                : MaskedTextBox.defaultProps.validityStyles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MaskedTextBox.prototype, \"required\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this.props.required !== undefined\n                ? this.props.required\n                : MaskedTextBox.defaultProps.required;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MaskedTextBox.prototype, \"name\", {\n        /**\n         * Gets the `name` property of the MaskedTextBox.\n         */\n        get: function () {\n            return this.props.name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    MaskedTextBox.prototype.componentDidUpdate = function (prevProps, prevState) {\n        if (this.element && this.state.focused && prevState.focused) {\n            var _a = this._selection, start = _a[0], end = _a[1];\n            var prevSelection = prevProps.selection;\n            var nextSelection = this.props.selection;\n            if ((!prevSelection && nextSelection) ||\n                (prevSelection && nextSelection &&\n                    (prevSelection.start !== nextSelection.start || prevSelection.end !== nextSelection.end))) {\n                start = nextSelection.start;\n                end = nextSelection.end;\n            }\n            if (start !== null && end !== null) {\n                this.element.setSelectionRange(start, end);\n            }\n        }\n        if (maskingChanged(prevProps, this.props)) {\n            this.updateService();\n        }\n        this.setValidity();\n    };\n    /**\n     * @hidden\n     */\n    MaskedTextBox.prototype.componentDidMount = function () {\n        this.updateService();\n        this.setValidity();\n    };\n    /**\n     * @hidden\n     */\n    MaskedTextBox.prototype.render = function () {\n        var _this = this;\n        var inputId = this.props.id || this._inputId;\n        var isValid = !this.validityStyles || this.validity.valid;\n        var component = (React.createElement(\"span\", { dir: this.props.dir, className: classNames('k-widget k-maskedtextbox', this.props.className, {\n                'k-state-focused': this.state.focused,\n                'k-state-disabled': this.props.disabled,\n                'k-state-invalid': !isValid\n            }), style: !this.props.label\n                ? { width: this.props.width }\n                : undefined },\n            React.createElement(\"input\", { type: \"text\", autoComplete: \"off\", autoCorrect: \"off\", autoCapitalize: \"off\", spellCheck: false, className: \"k-textbox\", value: this.value, id: inputId, \"aria-labelledby\": this.props.ariaLabelledBy, \"aria-describedby\": this.props.ariaDescribedBy, name: this.props.name, tabIndex: getTabIndex(this.props.tabIndex, this.props.disabled, true), accessKey: this.props.accessKey, title: this.props.title, disabled: this.props.disabled || undefined, readOnly: this.props.readonly || undefined, placeholder: this.props.placeholder, ref: function (input) { return _this._input = input; }, onChange: this.onChangeHandler, onPaste: this.pasteHandler, onFocus: this.focusHandler, onBlur: this.blurHandler, onDragStart: returnFalse, onDrop: returnFalse })));\n        return this.props.label\n            ? (React.createElement(FloatingLabel, { label: this.props.label, editorId: inputId, editorValue: this.value, editorValid: isValid, editorDisabled: this.props.disabled, editorPlaceholder: this.props.placeholder, children: component, style: { width: this.props.width }, dir: this.props.dir }))\n            : component;\n    };\n    MaskedTextBox.prototype.triggerOnChange = function (maskedValue, event) {\n        this.setState({\n            value: maskedValue\n        });\n        if (this.props.onChange) {\n            this._valueDuringOnChange = maskedValue;\n            this.props.onChange.call(undefined, {\n                syntheticEvent: event,\n                nativeEvent: event.nativeEvent,\n                selectionStart: this._selection[0],\n                selectionEnd: this._selection[1],\n                target: this,\n                value: this.value\n            });\n            this._valueDuringOnChange = undefined;\n        }\n    };\n    MaskedTextBox.prototype.updateService = function (extra) {\n        var config = Object.assign({\n            includeLiterals: this.props.includeLiterals,\n            mask: this.props.mask,\n            prompt: this.props.prompt,\n            promptPlaceholder: this.props.promptPlaceholder,\n            rules: this.rules\n        }, extra); // tslint:disable-line:align\n        this._service.update(config);\n    };\n    Object.defineProperty(MaskedTextBox.prototype, \"rules\", {\n        get: function () {\n            return Object.assign({}, defaultRules, this.props.rules);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    MaskedTextBox.propTypes = {\n        value: PropTypes.string,\n        defaultValue: PropTypes.string,\n        placeholder: PropTypes.string,\n        title: PropTypes.string,\n        dir: PropTypes.string,\n        id: PropTypes.string,\n        ariaLabelledBy: PropTypes.string,\n        ariaDescribedBy: PropTypes.string,\n        width: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.number\n        ]),\n        tabIndex: PropTypes.number,\n        accessKey: PropTypes.string,\n        disabled: PropTypes.bool,\n        readonly: PropTypes.bool,\n        prompt: PropTypes.string,\n        promptPlaceholder: PropTypes.string,\n        includeLiterals: PropTypes.bool,\n        maskValidation: PropTypes.bool,\n        mask: PropTypes.string,\n        rules: function (props, propName, componentName) {\n            var rules = props.rules;\n            if (rules !== undefined) {\n                var valid = Object.entries(rules)\n                    .some(function (e) { return typeof e !== 'string' || !(rules[e] instanceof RegExp); });\n                if (!valid) {\n                    return new Error('Invalid prop `' + propName + '` supplied to' +\n                        ' `' + componentName + '`. Validation failed.');\n                }\n            }\n        },\n        selection: PropTypes.shape({\n            start: PropTypes.number.isRequired,\n            end: PropTypes.number.isRequired\n        }),\n        name: PropTypes.string,\n        label: PropTypes.string,\n        validationMessage: PropTypes.string,\n        required: PropTypes.bool,\n        valid: PropTypes.bool,\n        validityStyles: PropTypes.bool,\n        onChange: PropTypes.func\n    };\n    /**\n     * @hidden\n     */\n    MaskedTextBox.defaultProps = {\n        prompt: '_',\n        promptPlaceholder: ' ',\n        includeLiterals: false,\n        maskValidation: true,\n        rules: defaultRules,\n        required: false,\n        validityStyles: true\n    };\n    return MaskedTextBox;\n}(React.Component));\nexport { MaskedTextBox };\n//# sourceMappingURL=MaskedTextBox.js.map"]},"metadata":{},"sourceType":"module"}