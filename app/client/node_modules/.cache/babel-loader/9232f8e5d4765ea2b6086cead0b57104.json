{"ast":null,"code":"import { filterEqOperator, filterNotEqOperator, filterIsNullOperator, filterIsNotNullOperator, filterIsEmptyOperator, filterIsNotEmptyOperator, filterStartsWithOperator, filterContainsOperator, filterNotContainsOperator, filterEndsWithOperator, filterGteOperator, filterGtOperator, filterLteOperator, filterLtOperator, filterAfterOrEqualOperator, filterAfterOperator, filterBeforeOperator, filterBeforeOrEqualOperator } from './../messages';\nvar textOperators = [{\n  text: filterContainsOperator,\n  operator: 'contains'\n}, {\n  text: filterNotContainsOperator,\n  operator: 'doesnotcontain'\n}, {\n  text: filterEqOperator,\n  operator: 'eq'\n}, {\n  text: filterNotEqOperator,\n  operator: 'neq'\n}, {\n  text: filterStartsWithOperator,\n  operator: 'startswith'\n}, {\n  text: filterEndsWithOperator,\n  operator: 'endswith'\n}, {\n  text: filterIsNullOperator,\n  operator: 'isnull'\n}, {\n  text: filterIsNotNullOperator,\n  operator: 'isnotnull'\n}, {\n  text: filterIsEmptyOperator,\n  operator: 'isempty'\n}, {\n  text: filterIsNotEmptyOperator,\n  operator: 'isnotempty'\n}];\nvar numericOperators = [{\n  text: filterEqOperator,\n  operator: 'eq'\n}, {\n  text: filterNotEqOperator,\n  operator: 'neq'\n}, {\n  text: filterGteOperator,\n  operator: 'gte'\n}, {\n  text: filterGtOperator,\n  operator: 'gt'\n}, {\n  text: filterLteOperator,\n  operator: 'lte'\n}, {\n  text: filterLtOperator,\n  operator: 'lt'\n}, {\n  text: filterIsNullOperator,\n  operator: 'isnull'\n}, {\n  text: filterIsNotNullOperator,\n  operator: 'isnotnull'\n}];\nvar dateOperators = [{\n  text: filterEqOperator,\n  operator: 'eq'\n}, {\n  text: filterNotEqOperator,\n  operator: 'neq'\n}, {\n  text: filterAfterOrEqualOperator,\n  operator: 'gte'\n}, {\n  text: filterAfterOperator,\n  operator: 'gt'\n}, {\n  text: filterBeforeOperator,\n  operator: 'lt'\n}, {\n  text: filterBeforeOrEqualOperator,\n  operator: 'lte'\n}, {\n  text: filterIsNullOperator,\n  operator: 'isnull'\n}, {\n  text: filterIsNotNullOperator,\n  operator: 'isnotnull'\n}];\nvar booleanOperators = [{\n  text: filterEqOperator,\n  operator: 'eq'\n}, {\n  text: filterNotEqOperator,\n  operator: 'neq'\n}];\n/**\n * Represents the operators for the TextFilter, NumericFilter, DateFilter and BooleanFilter components.\n *\n * The text field of each operator object will be resolved according to the\n * [localization messages]({% slug globalization_datatools %}#toc-messages).\n */\n\nvar Operators =\n/** @class */\nfunction () {\n  function Operators() {}\n\n  Object.defineProperty(Operators, \"text\", {\n    /**\n     * An array containing the operators for the TextFilter component.\n     *\n     * The operators are:\n     *\n     * - { text: 'filter.containsOperator', operator: 'contains' }\n     * - { text: 'filter.notContainsOperator', operator: 'doesnotcontain' }\n     * - { text: 'filter.eqOperator', operator: 'eq' }\n     * - { text: 'filter.notEqOperator', operator: 'neq' }\n     * - { text: 'filter.startsWithOperator', operator: 'startswith' }\n     * - { text: 'filter.endsWithOperator', operator: 'endswith' }\n     * - { text: 'filter.isNullOperator', operator: 'isnull' }\n     * - { text: 'filter.isNotNullOperator', operator: 'isnotnull' }\n     * - { text: 'filter.isEmptyOperator', operator: 'isempty' }\n     * - { text: 'filter.isNotEmptyOperator', operator: 'isnotempty' }\n     */\n    get: function () {\n      return textOperators.slice();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Operators, \"numeric\", {\n    /**\n     * An array containing the operators for the NumericFilter component.\n     *\n     * The operators are:\n     *\n     * - { text: 'filter.eqOperator', operator: 'eq' }\n     * - { text: 'filter.notEqOperator', operator: 'neq' }\n     * - { text: 'filter.gteOperator', operator: 'gte' }\n     * - { text: 'filter.gtOperator', operator: 'gt' }\n     * - { text: 'filter.lteOperator', operator: 'lte' }\n     * - { text: 'filter.ltOperator', operator: 'lt' }\n     * - { text: 'filter.isNullOperator', operator: 'isnull' }\n     * - { text: 'filter.isNotNullOperator', operator: 'isnotnull' }\n     */\n    get: function () {\n      return numericOperators.slice();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Operators, \"date\", {\n    /**\n     * An array containing the operators for the DateFilter component.\n     *\n     * The operators are:\n     *\n     * - { text: 'filter.eqOperator', operator: 'eq' }\n     * - { text: 'filter.notEqOperator', operator: 'neq' }\n     * - { text: 'filter.afterOrEqualOperator', operator: 'gte' }\n     * - { text: 'filter.afterOperator', operator: 'gt' }\n     * - { text: 'filter.beforeOperator', operator: 'lt' }\n     * - { text: 'filter.beforeOrEqualOperator', operator: 'lte' }\n     * - { text: 'filter.isNullOperator', operator: 'isnull' }\n     * - { text: 'filter.isNotNullOperator', operator: 'isnotnull' }\n     */\n    get: function () {\n      return dateOperators.slice();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Operators, \"boolean\", {\n    /**\n     * An array containing the operators for the BooleanFilter component.\n     *\n     * The operators are:\n     *\n     * - { text: 'filter.eqOperator', operator: 'eq' }\n     * - { text: 'filter.notEqOperator', operator: 'neq' }\n     */\n    get: function () {\n      return booleanOperators.slice();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Operators;\n}();\n\nexport { Operators };\n/**\n * @hidden\n */\n\nexport var stringOperator = function (operator) {\n  return operator === 'contains' || operator === 'doesnotcontain' || operator === 'startswith' || operator === 'endswith';\n};\n/**\n * @hidden\n */\n\nexport var unaryOperator = function (operator) {\n  return operator === 'isnull' || operator === 'isnotnull' || operator === 'isempty' || operator === 'isnotempty';\n};","map":{"version":3,"sources":["../../../src/filter/operators.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { filterEqOperator, filterNotEqOperator, filterIsNullOperator, filterIsNotNullOperator, filterIsEmptyOperator, filterIsNotEmptyOperator, filterStartsWithOperator, filterContainsOperator, filterNotContainsOperator, filterEndsWithOperator, filterGteOperator, filterGtOperator, filterLteOperator, filterLtOperator, filterAfterOrEqualOperator, filterAfterOperator, filterBeforeOperator, filterBeforeOrEqualOperator } from './../messages';\nvar textOperators = [\n    { text: filterContainsOperator, operator: 'contains' },\n    { text: filterNotContainsOperator, operator: 'doesnotcontain' },\n    { text: filterEqOperator, operator: 'eq' },\n    { text: filterNotEqOperator, operator: 'neq' },\n    { text: filterStartsWithOperator, operator: 'startswith' },\n    { text: filterEndsWithOperator, operator: 'endswith' },\n    { text: filterIsNullOperator, operator: 'isnull' },\n    { text: filterIsNotNullOperator, operator: 'isnotnull' },\n    { text: filterIsEmptyOperator, operator: 'isempty' },\n    { text: filterIsNotEmptyOperator, operator: 'isnotempty' }\n];\nvar numericOperators = [\n    { text: filterEqOperator, operator: 'eq' },\n    { text: filterNotEqOperator, operator: 'neq' },\n    { text: filterGteOperator, operator: 'gte' },\n    { text: filterGtOperator, operator: 'gt' },\n    { text: filterLteOperator, operator: 'lte' },\n    { text: filterLtOperator, operator: 'lt' },\n    { text: filterIsNullOperator, operator: 'isnull' },\n    { text: filterIsNotNullOperator, operator: 'isnotnull' }\n];\nvar dateOperators = [\n    { text: filterEqOperator, operator: 'eq' },\n    { text: filterNotEqOperator, operator: 'neq' },\n    { text: filterAfterOrEqualOperator, operator: 'gte' },\n    { text: filterAfterOperator, operator: 'gt' },\n    { text: filterBeforeOperator, operator: 'lt' },\n    { text: filterBeforeOrEqualOperator, operator: 'lte' },\n    { text: filterIsNullOperator, operator: 'isnull' },\n    { text: filterIsNotNullOperator, operator: 'isnotnull' }\n];\nvar booleanOperators = [\n    { text: filterEqOperator, operator: 'eq' },\n    { text: filterNotEqOperator, operator: 'neq' }\n];\n/**\n * Represents the operators for the TextFilter, NumericFilter, DateFilter and BooleanFilter components.\n *\n * The text field of each operator object will be resolved according to the\n * [localization messages]({% slug globalization_datatools %}#toc-messages).\n */\nvar Operators = /** @class */ (function () {\n    function Operators() {\n    }\n    Object.defineProperty(Operators, \"text\", {\n        /**\n         * An array containing the operators for the TextFilter component.\n         *\n         * The operators are:\n         *\n         * - { text: 'filter.containsOperator', operator: 'contains' }\n         * - { text: 'filter.notContainsOperator', operator: 'doesnotcontain' }\n         * - { text: 'filter.eqOperator', operator: 'eq' }\n         * - { text: 'filter.notEqOperator', operator: 'neq' }\n         * - { text: 'filter.startsWithOperator', operator: 'startswith' }\n         * - { text: 'filter.endsWithOperator', operator: 'endswith' }\n         * - { text: 'filter.isNullOperator', operator: 'isnull' }\n         * - { text: 'filter.isNotNullOperator', operator: 'isnotnull' }\n         * - { text: 'filter.isEmptyOperator', operator: 'isempty' }\n         * - { text: 'filter.isNotEmptyOperator', operator: 'isnotempty' }\n         */\n        get: function () {\n            return textOperators.slice();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Operators, \"numeric\", {\n        /**\n         * An array containing the operators for the NumericFilter component.\n         *\n         * The operators are:\n         *\n         * - { text: 'filter.eqOperator', operator: 'eq' }\n         * - { text: 'filter.notEqOperator', operator: 'neq' }\n         * - { text: 'filter.gteOperator', operator: 'gte' }\n         * - { text: 'filter.gtOperator', operator: 'gt' }\n         * - { text: 'filter.lteOperator', operator: 'lte' }\n         * - { text: 'filter.ltOperator', operator: 'lt' }\n         * - { text: 'filter.isNullOperator', operator: 'isnull' }\n         * - { text: 'filter.isNotNullOperator', operator: 'isnotnull' }\n         */\n        get: function () {\n            return numericOperators.slice();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Operators, \"date\", {\n        /**\n         * An array containing the operators for the DateFilter component.\n         *\n         * The operators are:\n         *\n         * - { text: 'filter.eqOperator', operator: 'eq' }\n         * - { text: 'filter.notEqOperator', operator: 'neq' }\n         * - { text: 'filter.afterOrEqualOperator', operator: 'gte' }\n         * - { text: 'filter.afterOperator', operator: 'gt' }\n         * - { text: 'filter.beforeOperator', operator: 'lt' }\n         * - { text: 'filter.beforeOrEqualOperator', operator: 'lte' }\n         * - { text: 'filter.isNullOperator', operator: 'isnull' }\n         * - { text: 'filter.isNotNullOperator', operator: 'isnotnull' }\n         */\n        get: function () {\n            return dateOperators.slice();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Operators, \"boolean\", {\n        /**\n         * An array containing the operators for the BooleanFilter component.\n         *\n         * The operators are:\n         *\n         * - { text: 'filter.eqOperator', operator: 'eq' }\n         * - { text: 'filter.notEqOperator', operator: 'neq' }\n         */\n        get: function () {\n            return booleanOperators.slice();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Operators;\n}());\nexport { Operators };\n/**\n * @hidden\n */\nexport var stringOperator = function (operator) {\n    return operator === 'contains' || operator === 'doesnotcontain' || operator === 'startswith' || operator === 'endswith';\n};\n/**\n * @hidden\n */\nexport var unaryOperator = function (operator) {\n    return operator === 'isnull' || operator === 'isnotnull' || operator === 'isempty' || operator === 'isnotempty';\n};\n//# sourceMappingURL=operators.js.map"]},"metadata":{},"sourceType":"module"}