{"ast":null,"code":"import { fieldList } from './fieldList';\nvar setterCache = {};\n\nsetterCache.undefined = function (obj) {\n  return obj;\n};\n\nvar defaultValue = function (nextField, options) {\n  return options && options.arrays && !isNaN(Number(nextField)) ? [] : {};\n};\n/**\n * Can be used for setting value to object using field path. For example `users[index].name`.\n * @example\n * ```jsx-no-run\n * const values = {users:[{lastName: 'Doe'}]};\n * const firstUserFirstName = setter('user[0].firstName');\n *\n * firstUserFirstName(values, 'John');\n *\n * console.log(values)\n *\n * // result: {users:[{firstName: 'John', lastName: 'Doe'}]}\n * ```\n */\n\n\nexport function setter(field) {\n  if (setterCache[field]) {\n    return setterCache[field];\n  }\n\n  var fields = fieldList(field);\n\n  setterCache[field] = function (obj, value, options) {\n    var root = obj;\n    var depth = fields.length - 1;\n\n    for (var idx = 0; idx < depth && root; idx++) {\n      root = root[fields[idx]] = root[fields[idx]] || defaultValue(fields[idx + 1], options);\n    }\n\n    root[fields[depth]] = value;\n  };\n\n  return setterCache[field];\n}","map":{"version":3,"sources":["../../src/setter.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,aAA1B;AAEA,IAAM,WAAW,GAAG,EAApB;;AAEC,WAAmB,CAAC,SAApB,GAAgC,UAAA,GAAA,EAAG;AAAI,SAAA,GAAA;AAAG,CAA1C;;AAED,IAAM,YAAY,GAAG,UAAC,SAAD,EAAoB,OAApB,EAAgC;AACjD,SAAA,OAAO,IAAI,OAAO,CAAC,MAAnB,IAA6B,CAAC,KAAK,CAAC,MAAM,CAAC,SAAD,CAAP,CAAnC,GAAyD,EAAzD,GAA8D,EAA9D;AAAgE,CADpE;AAGA;;;;;;;;;;;;;;;;AAcA,OAAM,SAAU,MAAV,CAAiB,KAAjB,EAA8B;AAChC,MAAI,WAAW,CAAC,KAAD,CAAf,EAAwB;AACpB,WAAO,WAAW,CAAC,KAAD,CAAlB;AACH;;AAED,MAAM,MAAM,GAAG,SAAS,CAAC,KAAD,CAAxB;;AAEA,EAAA,WAAW,CAAC,KAAD,CAAX,GAAqB,UAAC,GAAD,EAAW,KAAX,EAAuB,OAAvB,EAAoC;AACrD,QAAI,IAAI,GAAG,GAAX;AACA,QAAM,KAAK,GAAG,MAAM,CAAC,MAAP,GAAgB,CAA9B;;AACA,SAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,GAAG,KAAN,IAAe,IAAjC,EAAuC,GAAG,EAA1C,EAA8C;AAC1C,MAAA,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAD,CAAP,CAAJ,GAAoB,IAAI,CAAC,MAAM,CAAC,GAAD,CAAP,CAAJ,IAAqB,YAAY,CAAC,MAAM,CAAC,GAAG,GAAG,CAAP,CAAP,EAAkB,OAAlB,CAA5D;AACH;;AACD,IAAA,IAAI,CAAC,MAAM,CAAC,KAAD,CAAP,CAAJ,GAAsB,KAAtB;AACH,GAPD;;AASA,SAAO,WAAW,CAAC,KAAD,CAAlB;AACH","sourceRoot":"","sourcesContent":["import { fieldList } from './fieldList';\nvar setterCache = {};\nsetterCache.undefined = function (obj) { return obj; };\nvar defaultValue = function (nextField, options) {\n    return options && options.arrays && !isNaN(Number(nextField)) ? [] : {};\n};\n/**\n * Can be used for setting value to object using field path. For example `users[index].name`.\n * @example\n * ```jsx-no-run\n * const values = {users:[{lastName: 'Doe'}]};\n * const firstUserFirstName = setter('user[0].firstName');\n *\n * firstUserFirstName(values, 'John');\n *\n * console.log(values)\n *\n * // result: {users:[{firstName: 'John', lastName: 'Doe'}]}\n * ```\n */\nexport function setter(field) {\n    if (setterCache[field]) {\n        return setterCache[field];\n    }\n    var fields = fieldList(field);\n    setterCache[field] = function (obj, value, options) {\n        var root = obj;\n        var depth = fields.length - 1;\n        for (var idx = 0; idx < depth && root; idx++) {\n            root = root[fields[idx]] = root[fields[idx]] || defaultValue(fields[idx + 1], options);\n        }\n        root[fields[depth]] = value;\n    };\n    return setterCache[field];\n}\n//# sourceMappingURL=setter.js.map"]},"metadata":{},"sourceType":"module"}