{"ast":null,"code":"import { messages } from './messages';\n/**\n * A service which provides localization methods.\n */\n\nvar LocalizationService =\n/** @class */\nfunction () {\n  function LocalizationService(language) {\n    this.language = language;\n\n    if (language === '' && process.env.NODE_ENV !== 'production') {\n      throw 'Language should not be an empty string';\n    }\n  } // tslint:disable:max-line-length\n\n  /**\n   * Provides a string based on a key for the current language. When no string for the current language is available under this key, the `defaultValue` is returned.\n   *\n   * @param key - The key which identifies the string for the current language.\n   * @param defaultValue - The default value which will be returned when no string\n   * for the current language is available under the key.\n   * @return - The string for the current language.\n   */\n  // tslint:enable:max-line-length\n\n\n  LocalizationService.prototype.toLanguageString = function (key, defaultValue) {\n    if (this.language && messages[this.language] && messages[this.language].hasOwnProperty(key)) {\n      return messages[this.language][key];\n    } else {\n      return defaultValue;\n    }\n  };\n\n  return LocalizationService;\n}();\n\nexport { LocalizationService };","map":{"version":3,"sources":["../../../src/Localization/LocalizationService.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,QAAyB,YAAzB;AAIA;;;;AAGA,IAAA,mBAAA;AAAA;AAAA,YAAA;AACI,WAAA,mBAAA,CAAmB,QAAnB,EAAoC;AAAjB,SAAA,QAAA,GAAA,QAAA;;AACf,QAAI,QAAQ,KAAK,EAAb,IAAmB,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAAhD,EAA8D;AAC1D,YAAM,wCAAN;AACH;AACJ,GALL,CAMI;;AACA;;;;;;;;AAQC;;;AACD,EAAA,mBAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,GAAjB,EAA8B,YAA9B,EAAkD;AAC9C,QAAI,KAAK,QAAL,IACA,QAAQ,CAAC,KAAK,QAAN,CADR,IAEA,QAAQ,CAAC,KAAK,QAAN,CAAR,CAAwB,cAAxB,CAAuC,GAAvC,CAFJ,EAEiD;AAC7C,aAAO,QAAQ,CAAC,KAAK,QAAN,CAAR,CAAwB,GAAxB,CAAP;AACH,KAJD,MAIO;AACH,aAAO,YAAP;AACH;AACJ,GARD;;AASJ,SAAA,mBAAA;AAAC,CAzBD,EAAA","sourceRoot":"","sourcesContent":["import { messages } from './messages';\n/**\n * A service which provides localization methods.\n */\nvar LocalizationService = /** @class */ (function () {\n    function LocalizationService(language) {\n        this.language = language;\n        if (language === '' && process.env.NODE_ENV !== 'production') {\n            throw 'Language should not be an empty string';\n        }\n    }\n    // tslint:disable:max-line-length\n    /**\n     * Provides a string based on a key for the current language. When no string for the current language is available under this key, the `defaultValue` is returned.\n     *\n     * @param key - The key which identifies the string for the current language.\n     * @param defaultValue - The default value which will be returned when no string\n     * for the current language is available under the key.\n     * @return - The string for the current language.\n     */\n    // tslint:enable:max-line-length\n    LocalizationService.prototype.toLanguageString = function (key, defaultValue) {\n        if (this.language &&\n            messages[this.language] &&\n            messages[this.language].hasOwnProperty(key)) {\n            return messages[this.language][key];\n        }\n        else {\n            return defaultValue;\n        }\n    };\n    return LocalizationService;\n}());\nexport { LocalizationService };\n//# sourceMappingURL=LocalizationService.js.map"]},"metadata":{},"sourceType":"module"}