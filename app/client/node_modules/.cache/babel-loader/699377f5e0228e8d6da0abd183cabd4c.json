{"ast":null,"code":"/**\n * @hidden\n */\nexport var ResultType;\n\n(function (ResultType) {\n  ResultType[ResultType[\"Literal\"] = 0] = \"Literal\";\n  ResultType[ResultType[\"Mask\"] = 1] = \"Mask\";\n  ResultType[ResultType[\"Undefined\"] = 2] = \"Undefined\";\n})(ResultType || (ResultType = {}));\n/**\n * @hidden\n */\n\n\nvar Result =\n/** @class */\nfunction () {\n  function Result(value, rest, type) {\n    if (type === void 0) {\n      type = ResultType.Undefined;\n    }\n\n    this.value = value;\n    this.rest = rest;\n    this.type = type;\n  } // map :: Functor f => f a ~> (a -> b) -> f b\n\n\n  Result.prototype.map = function (fn) {\n    return new Result(fn(this.value), this.rest);\n  }; // chain :: Chain m => m a ~> (a -> m b) -> m b\n\n\n  Result.prototype.chain = function (fn) {\n    return fn(this.value, this.rest);\n  };\n\n  Result.prototype.fold = function (s, _\n  /*we don't need it*/\n  ) {\n    return s(this.value, this.rest);\n  };\n\n  Result.prototype.concat = function (r) {\n    return this.map(function (vs, _) {\n      return r.chain(function (v, __) {\n        return vs.concat([v]);\n      });\n    });\n  };\n\n  Result.prototype.toString = function () {\n    return \"Result({ value: '\" + this.value + \"', rest: \" + this.rest + \" })\";\n  };\n\n  return Result;\n}();\n\nexport { Result };","map":{"version":3,"sources":["../../../../src/maskedtextbox/parsing/result.ts"],"names":[],"mappings":"AAEA;;;AAGA,OAAA,IAAY,UAAZ;;AAAA,CAAA,UAAY,UAAZ,EAAsB;AAClB,EAAA,UAAA,CAAA,UAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,EAAA,UAAA,CAAA,UAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACA,EAAA,UAAA,CAAA,UAAA,CAAA,WAAA,CAAA,GAAA,CAAA,CAAA,GAAA,WAAA;AACH,CAJD,EAAY,UAAU,KAAV,UAAU,GAAA,EAAA,CAAtB;AAMA;;;;;AAGA,IAAA,MAAA;AAAA;AAAA,YAAA;AACI,WAAA,MAAA,CAAoB,KAApB,EAAwC,IAAxC,EAA6D,IAA7D,EAAoG;AAAvC,QAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,IAAA,GAAmB,UAAU,CAAC,SAA9B;AAAuC;;AAAhF,SAAA,KAAA,GAAA,KAAA;AAAoB,SAAA,IAAA,GAAA,IAAA;AAAqB,SAAA,IAAA,GAAA,IAAA;AAA2C,GAD5G,CAGI;;;AACO,EAAA,MAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,EAAX,EAAuB;AACnB,WAAO,IAAI,MAAJ,CAAW,EAAE,CAAC,KAAK,KAAN,CAAb,EAA2B,KAAK,IAAhC,CAAP;AACH,GAFM,CAJX,CAQI;;;AACO,EAAA,MAAA,CAAA,SAAA,CAAA,KAAA,GAAP,UAAa,EAAb,EAAyB;AACrB,WAAO,EAAE,CAAC,KAAK,KAAN,EAAa,KAAK,IAAlB,CAAT;AACH,GAFM;;AAIA,EAAA,MAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UAAY,CAAZ,EAAyB;AAAY;AAArC,IAAyD;AACrD,WAAO,CAAC,CAAC,KAAK,KAAN,EAAa,KAAK,IAAlB,CAAR;AACH,GAFM;;AAIA,EAAA,MAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,CAAd,EAAuB;AACnB,WAAO,KAAK,GAAL,CAAS,UAAC,EAAD,EAAK,CAAL,EAAM;AAAK,aAAA,CAAC,CAAC,KAAF,CAAQ,UAAC,CAAD,EAAI,EAAJ,EAAM;AAAK,eAAA,EAAE,CAAC,MAAH,CAAU,CAAV,CAAU,CAAV,CAAA;AAAnB,OAAA,CAAA;AAAkC,KAAtD,CAAP;AACH,GAFM;;AAIA,EAAA,MAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACI,WAAO,sBAAoB,KAAK,KAAzB,GAA8B,WAA9B,GAA0C,KAAK,IAA/C,GAAmD,KAA1D;AACH,GAFM;;AAGX,SAAA,MAAA;AAAC,CAxBD,EAAA","sourceRoot":"","sourcesContent":["/**\n * @hidden\n */\nexport var ResultType;\n(function (ResultType) {\n    ResultType[ResultType[\"Literal\"] = 0] = \"Literal\";\n    ResultType[ResultType[\"Mask\"] = 1] = \"Mask\";\n    ResultType[ResultType[\"Undefined\"] = 2] = \"Undefined\";\n})(ResultType || (ResultType = {}));\n/**\n * @hidden\n */\nvar Result = /** @class */ (function () {\n    function Result(value, rest, type) {\n        if (type === void 0) { type = ResultType.Undefined; }\n        this.value = value;\n        this.rest = rest;\n        this.type = type;\n    }\n    // map :: Functor f => f a ~> (a -> b) -> f b\n    Result.prototype.map = function (fn) {\n        return new Result(fn(this.value), this.rest);\n    };\n    // chain :: Chain m => m a ~> (a -> m b) -> m b\n    Result.prototype.chain = function (fn) {\n        return fn(this.value, this.rest);\n    };\n    Result.prototype.fold = function (s, _ /*we don't need it*/) {\n        return s(this.value, this.rest);\n    };\n    Result.prototype.concat = function (r) {\n        return this.map(function (vs, _) { return r.chain(function (v, __) { return vs.concat([v]); }); });\n    };\n    Result.prototype.toString = function () {\n        return \"Result({ value: '\" + this.value + \"', rest: \" + this.rest + \" })\";\n    };\n    return Result;\n}());\nexport { Result };\n//# sourceMappingURL=result.js.map"]},"metadata":{},"sourceType":"module"}