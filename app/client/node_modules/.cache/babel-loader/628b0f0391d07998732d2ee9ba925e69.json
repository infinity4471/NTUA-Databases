{"ast":null,"code":"export default function lineIntersectionsCount(a, b, point) {\n  var intersects;\n\n  if (a.x !== b.x) {\n    var minX = Math.min(a.x, b.x);\n    var maxX = Math.max(a.x, b.x);\n    var minY = Math.min(a.y, b.y);\n    var maxY = Math.max(a.y, b.y);\n    var inRange = minX <= point.x && point.x < maxX;\n\n    if (minY === maxY) {\n      intersects = point.y <= minY && inRange;\n    } else {\n      intersects = inRange && (maxY - minY) * ((a.x - b.x) * (a.y - b.y) > 0 ? point.x - minX : maxX - point.x) / (maxX - minX) + minY - point.y >= 0;\n    }\n  }\n\n  return intersects ? 1 : 0;\n}","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/node_modules/@progress/kendo-drawing/dist/es/geometry/math/line-intersections-count.js"],"names":["lineIntersectionsCount","a","b","point","intersects","x","minX","Math","min","maxX","max","minY","y","maxY","inRange"],"mappings":"AAAA,eAAe,SAASA,sBAAT,CAAgCC,CAAhC,EAAmCC,CAAnC,EAAsCC,KAAtC,EAA6C;AACxD,MAAIC,UAAJ;;AACA,MAAIH,CAAC,CAACI,CAAF,KAAQH,CAAC,CAACG,CAAd,EAAiB;AACb,QAAIC,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASP,CAAC,CAACI,CAAX,EAAcH,CAAC,CAACG,CAAhB,CAAX;AACA,QAAII,IAAI,GAAGF,IAAI,CAACG,GAAL,CAAST,CAAC,CAACI,CAAX,EAAcH,CAAC,CAACG,CAAhB,CAAX;AACA,QAAIM,IAAI,GAAGJ,IAAI,CAACC,GAAL,CAASP,CAAC,CAACW,CAAX,EAAcV,CAAC,CAACU,CAAhB,CAAX;AACA,QAAIC,IAAI,GAAGN,IAAI,CAACG,GAAL,CAAST,CAAC,CAACW,CAAX,EAAcV,CAAC,CAACU,CAAhB,CAAX;AACA,QAAIE,OAAO,GAAGR,IAAI,IAAIH,KAAK,CAACE,CAAd,IAAmBF,KAAK,CAACE,CAAN,GAAUI,IAA3C;;AAEA,QAAIE,IAAI,KAAKE,IAAb,EAAmB;AACfT,MAAAA,UAAU,GAAGD,KAAK,CAACS,CAAN,IAAWD,IAAX,IAAmBG,OAAhC;AACH,KAFD,MAEO;AACHV,MAAAA,UAAU,GAAGU,OAAO,IAAM,CAACD,IAAI,GAAGF,IAAR,KAAiB,CAACV,CAAC,CAACI,CAAF,GAAMH,CAAC,CAACG,CAAT,KAAeJ,CAAC,CAACW,CAAF,GAAMV,CAAC,CAACU,CAAvB,IAA4B,CAA5B,GAAgCT,KAAK,CAACE,CAAN,GAAUC,IAA1C,GAAiDG,IAAI,GAAGN,KAAK,CAACE,CAA/E,CAAD,IAAuFI,IAAI,GAAGH,IAA9F,IAAsGK,IAAtG,GAA6GR,KAAK,CAACS,CAApH,IAA0H,CAAlJ;AACH;AACJ;;AAED,SAAOR,UAAU,GAAG,CAAH,GAAO,CAAxB;AACH","sourcesContent":["export default function lineIntersectionsCount(a, b, point) {\n    var intersects;\n    if (a.x !== b.x) {\n        var minX = Math.min(a.x, b.x);\n        var maxX = Math.max(a.x, b.x);\n        var minY = Math.min(a.y, b.y);\n        var maxY = Math.max(a.y, b.y);\n        var inRange = minX <= point.x && point.x < maxX;\n\n        if (minY === maxY) {\n            intersects = point.y <= minY && inRange;\n        } else {\n            intersects = inRange && (((maxY - minY) * ((a.x - b.x) * (a.y - b.y) > 0 ? point.x - minX : maxX - point.x)) / (maxX - minX) + minY - point.y) >= 0;\n        }\n    }\n\n    return intersects ? 1 : 0;\n}"]},"metadata":{},"sourceType":"module"}