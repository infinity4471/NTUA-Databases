{"ast":null,"code":"import { timezones } from './timezones';\n/**\n * A function that returns all timezones which match the title of the zone.\n *\n * @param group - The fully qualified zone title. For example, Central Standard Time.\n *\n * @return - Returns the list of all matching timezone names. For example, `[America/Chicago, ...]`.\n *\n * @example\n * ```ts-no-run\n * zonesPerGroup('(GMT+01:00) Amsterdam, Berlin'); // ['Europe/Amsterdam', 'Europe/Berlin'...]\n * ```\n */\n\nexport var zonesPerGroup = function (group) {\n  var titles = timezones.titles;\n  return Object.keys(titles).reduce(function (result, title) {\n    var info = titles[title] || {};\n    return info.group === group ? result.concat(title.split(' ')) : result;\n  }, []);\n};","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/node_modules/@progress/kendo-date-math/dist/es/tz/zones-per-group.js"],"names":["timezones","zonesPerGroup","group","titles","Object","keys","reduce","result","title","info","concat","split"],"mappings":"AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA;;;;;;;;;;;;;AAYA,OAAO,IAAIC,aAAa,GAAG,UAAUC,KAAV,EAAiB;AACxC,MAAIC,MAAM,GAAGH,SAAS,CAACG,MAAvB;AACA,SAAOC,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,MAApB,CAA2B,UAAUC,MAAV,EAAkBC,KAAlB,EAAyB;AACvD,QAAIC,IAAI,GAAGN,MAAM,CAACK,KAAD,CAAN,IAAiB,EAA5B;AACA,WAAOC,IAAI,CAACP,KAAL,KAAeA,KAAf,GAAuBK,MAAM,CAACG,MAAP,CAAcF,KAAK,CAACG,KAAN,CAAY,GAAZ,CAAd,CAAvB,GAAyDJ,MAAhE;AACH,GAHM,EAGJ,EAHI,CAAP;AAIH,CANM","sourcesContent":["import { timezones } from './timezones';\n/**\n * A function that returns all timezones which match the title of the zone.\n *\n * @param group - The fully qualified zone title. For example, Central Standard Time.\n *\n * @return - Returns the list of all matching timezone names. For example, `[America/Chicago, ...]`.\n *\n * @example\n * ```ts-no-run\n * zonesPerGroup('(GMT+01:00) Amsterdam, Berlin'); // ['Europe/Amsterdam', 'Europe/Berlin'...]\n * ```\n */\nexport var zonesPerGroup = function (group) {\n    var titles = timezones.titles;\n    return Object.keys(titles).reduce(function (result, title) {\n        var info = titles[title] || {};\n        return info.group === group ? result.concat(title.split(' ')) : result;\n    }, []);\n};\n"]},"metadata":{},"sourceType":"module"}