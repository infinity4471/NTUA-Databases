{"ast":null,"code":"import Element from './element';\nimport Point from '../geometry/point';\nimport Rect from '../geometry/rect';\nimport toMatrix from '../geometry/to-matrix';\nimport Paintable from '../mixins/paintable';\nimport definePointAccessors from '../accessors/define-point-accessors';\nimport { defined, measureText } from '../util';\nvar DEFAULT_FONT = \"12px sans-serif\";\nvar DEFAULT_FILL = \"#000\";\n\nvar Text = function (Element) {\n  function Text(content, position, options) {\n    if (position === void 0) position = new Point();\n    if (options === void 0) options = {};\n    Element.call(this, options);\n    this.content(content);\n    this.position(position);\n\n    if (!this.options.font) {\n      this.options.font = DEFAULT_FONT;\n    }\n\n    if (!defined(this.options.fill)) {\n      this.fill(DEFAULT_FILL);\n    }\n  }\n\n  if (Element) Text.__proto__ = Element;\n  Text.prototype = Object.create(Element && Element.prototype);\n  Text.prototype.constructor = Text;\n\n  Text.prototype.content = function content(value) {\n    if (defined(value)) {\n      this.options.set(\"content\", value);\n      return this;\n    }\n\n    return this.options.get(\"content\");\n  };\n\n  Text.prototype.measure = function measure() {\n    var metrics = measureText(this.content(), {\n      font: this.options.get(\"font\")\n    });\n    return metrics;\n  };\n\n  Text.prototype.rect = function rect() {\n    var size = this.measure();\n    var pos = this.position().clone();\n    return new Rect(pos, [size.width, size.height]);\n  };\n\n  Text.prototype.bbox = function bbox(transformation) {\n    var combinedMatrix = toMatrix(this.currentTransform(transformation));\n    return this.rect().bbox(combinedMatrix);\n  };\n\n  Text.prototype.rawBBox = function rawBBox() {\n    return this.rect().bbox();\n  };\n\n  Text.prototype._containsPoint = function _containsPoint(point) {\n    return this.rect().containsPoint(point);\n  };\n\n  return Text;\n}(Element);\n\nText.prototype.nodeType = \"Text\";\nPaintable.extend(Text.prototype);\ndefinePointAccessors(Text.prototype, [\"position\"]);\nexport default Text;","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/node_modules/@progress/kendo-drawing/dist/es/shapes/text.js"],"names":["Element","Point","Rect","toMatrix","Paintable","definePointAccessors","defined","measureText","DEFAULT_FONT","DEFAULT_FILL","Text","content","position","options","call","font","fill","__proto__","prototype","Object","create","constructor","value","set","get","measure","metrics","rect","size","pos","clone","width","height","bbox","transformation","combinedMatrix","currentTransform","rawBBox","_containsPoint","point","containsPoint","nodeType","extend"],"mappings":"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","sourcesContent":["import Element from './element';\nimport Point from '../geometry/point';\nimport Rect from '../geometry/rect';\nimport toMatrix from '../geometry/to-matrix';\nimport Paintable from '../mixins/paintable';\nimport definePointAccessors from '../accessors/define-point-accessors';\nimport { defined, measureText } from '../util';\n\nvar DEFAULT_FONT = \"12px sans-serif\";\nvar DEFAULT_FILL = \"#000\";\n\nvar Text = (function (Element) {\n    function Text(content, position, options) {\n        if ( position === void 0 ) position = new Point();\n        if ( options === void 0 ) options = {};\n\n        Element.call(this, options);\n\n        this.content(content);\n        this.position(position);\n\n        if (!this.options.font) {\n            this.options.font = DEFAULT_FONT;\n        }\n\n        if (!defined(this.options.fill)) {\n            this.fill(DEFAULT_FILL);\n        }\n    }\n\n    if ( Element ) Text.__proto__ = Element;\n    Text.prototype = Object.create( Element && Element.prototype );\n    Text.prototype.constructor = Text;\n\n    Text.prototype.content = function content (value) {\n        if (defined(value)) {\n            this.options.set(\"content\", value);\n            return this;\n        }\n\n        return this.options.get(\"content\");\n    };\n\n    Text.prototype.measure = function measure () {\n        var metrics = measureText(this.content(), {\n            font: this.options.get(\"font\")\n        });\n\n        return metrics;\n    };\n\n    Text.prototype.rect = function rect () {\n        var size = this.measure();\n        var pos = this.position().clone();\n        return new Rect(pos, [ size.width, size.height ]);\n    };\n\n    Text.prototype.bbox = function bbox (transformation) {\n        var combinedMatrix = toMatrix(this.currentTransform(transformation));\n        return this.rect().bbox(combinedMatrix);\n    };\n\n    Text.prototype.rawBBox = function rawBBox () {\n        return this.rect().bbox();\n    };\n\n    Text.prototype._containsPoint = function _containsPoint (point) {\n        return this.rect().containsPoint(point);\n    };\n\n    return Text;\n}(Element));\n\nText.prototype.nodeType = \"Text\";\n\nPaintable.extend(Text.prototype);\n\ndefinePointAccessors(Text.prototype, [ \"position\" ]);\n\nexport default Text;"]},"metadata":{},"sourceType":"module"}