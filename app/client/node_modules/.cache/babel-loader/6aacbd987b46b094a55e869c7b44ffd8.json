{"ast":null,"code":"var _a;\n\nimport { addDays, addWeeks, addMonths, dayOfWeek, durationInMonths, getDate, firstDayOfMonth, lastDayOfMonth } from '@progress/kendo-date-math';\nimport { Action } from '../models/NavigationAction';\nimport { EMPTY_SELECTIONRANGE } from '../models/SelectionRange';\nimport { getToday, isInRange, isInSelectionRange, range } from '../../utils';\nvar EMPTY_DATA = [[]];\nvar CELLS_LENGTH = 7;\nvar ROWS_LENGTH = 6;\nvar SATURDAY = 6;\nvar SUNDAY = 0;\nvar ACTIONS = (_a = {}, _a[Action.Left] = function (date) {\n  return addDays(date, -1);\n}, _a[Action.Up] = function (date) {\n  return addWeeks(date, -1);\n}, _a[Action.Right] = function (date) {\n  return addDays(date, 1);\n}, _a[Action.Down] = function (date) {\n  return addWeeks(date, 1);\n}, _a[Action.PrevView] = function (date) {\n  return addMonths(date, -1);\n}, _a[Action.NextView] = function (date) {\n  return addMonths(date, 1);\n}, _a[Action.FirstInView] = function (date) {\n  return firstDayOfMonth(date);\n}, _a[Action.LastInView] = function (date) {\n  return lastDayOfMonth(date);\n}, _a);\n/**\n * @hidden\n */\n\nvar MonthViewService =\n/** @class */\nfunction () {\n  function MonthViewService(intl) {\n    this.intl = intl;\n  }\n\n  MonthViewService.prototype.addToDate = function (min, skip) {\n    return addMonths(min, skip);\n  };\n\n  MonthViewService.prototype.datesList = function (start, count) {\n    return range(0, count).map(function (i) {\n      return addMonths(start, i);\n    });\n  };\n\n  MonthViewService.prototype.data = function (options) {\n    var _this = this;\n\n    var cellUID = options.cellUID,\n        focusedDate = options.focusedDate,\n        isActiveView = options.isActiveView,\n        max = options.max,\n        min = options.min,\n        selectedDate = options.selectedDate,\n        _a = options.selectionRange,\n        selectionRange = _a === void 0 ? EMPTY_SELECTIONRANGE : _a,\n        viewDate = options.viewDate;\n\n    if (!viewDate) {\n      return EMPTY_DATA;\n    }\n\n    var firstMonthDate = firstDayOfMonth(viewDate);\n    var lastMonthDate = lastDayOfMonth(viewDate);\n    var backward = -1;\n    var date = dayOfWeek(firstMonthDate, this.intl.firstDay(), backward);\n    var cells = range(0, CELLS_LENGTH);\n    var today = getToday();\n    return range(0, ROWS_LENGTH).map(function (rowOffset) {\n      var baseDate = addDays(date, rowOffset * CELLS_LENGTH);\n      return cells.map(function (cellOffset) {\n        var cellDate = _this.normalize(addDays(baseDate, cellOffset), min, max);\n\n        var otherMonth = cellDate < firstMonthDate || cellDate > lastMonthDate;\n\n        if (otherMonth) {\n          return null;\n        }\n\n        var isRangeStart = _this.isEqual(cellDate, selectionRange.start);\n\n        var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);\n\n        var isInMiddle = !isRangeStart && !isRangeEnd;\n        var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);\n        var isSelected = isActiveView && (!Array.isArray(selectedDate) ? isInRange(selectedDate, min, max) && _this.isEqual(cellDate, selectedDate) : _this.isSelectedFromArray(cellDate, selectedDate, min, max));\n        var cell = {\n          formattedValue: _this.value(cellDate),\n          id: \"\" + cellUID + cellDate.getTime(),\n          isFocused: _this.isEqual(cellDate, focusedDate),\n          isSelected: isSelected,\n          isInRange: isInRange(cellDate, min, max),\n          isWeekend: _this.isWeekend(cellDate),\n          isRangeStart: isRangeStart,\n          isRangeMid: isRangeMid,\n          isRangeEnd: isRangeEnd,\n          isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstMonthDate),\n          isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastMonthDate),\n          isToday: _this.isEqual(cellDate, today),\n          title: _this.cellTitle(cellDate),\n          value: cellDate\n        };\n        return cell;\n      });\n    });\n  };\n\n  MonthViewService.prototype.isEqual = function (candidate, expected) {\n    if (!candidate || !expected) {\n      return false;\n    }\n\n    return getDate(candidate).getTime() === getDate(expected).getTime();\n  };\n\n  MonthViewService.prototype.isSelectedFromArray = function (candidate, dates, min, max) {\n    var _this = this;\n\n    var result = false;\n    dates.forEach(function (date) {\n      if (isInRange(candidate, min, max) && _this.isEqual(candidate, date)) {\n        result = true;\n      }\n    });\n    return result;\n  };\n\n  MonthViewService.prototype.isInArray = function (date, dates) {\n    return !!dates.length && firstDayOfMonth(dates[0]) <= date && date <= lastDayOfMonth(dates[dates.length - 1]);\n  };\n\n  MonthViewService.prototype.isInRange = function (candidate, min, max) {\n    var value = getDate(candidate);\n    var aboveMin = !min || getDate(min) <= value;\n    var belowMax = !max || value <= getDate(max);\n    return aboveMin && belowMax;\n  };\n\n  MonthViewService.prototype.isInSameView = function (candidate, value) {\n    return durationInMonths(candidate, value) === 0;\n  };\n\n  MonthViewService.prototype.isRangeStart = function (value) {\n    return !value.getMonth();\n  };\n\n  MonthViewService.prototype.move = function (value, action) {\n    var modifier = ACTIONS[action];\n\n    if (!modifier) {\n      return value;\n    }\n\n    return modifier(value);\n  };\n\n  MonthViewService.prototype.cellTitle = function (value) {\n    return this.intl.formatDate(value, 'D');\n  };\n\n  MonthViewService.prototype.navigationTitle = function (value) {\n    if (!value) {\n      return '';\n    }\n\n    return this.isRangeStart(value) ? value.getFullYear().toString() : this.abbrMonthNames()[value.getMonth()];\n  };\n\n  MonthViewService.prototype.title = function (current) {\n    return this.wideMonthNames()[current.getMonth()] + \" \" + current.getFullYear();\n  };\n\n  MonthViewService.prototype.rowLength = function (prependCell) {\n    return CELLS_LENGTH + (prependCell ? 1 : 0);\n  };\n\n  MonthViewService.prototype.skip = function (value, min) {\n    return durationInMonths(min, value);\n  };\n\n  MonthViewService.prototype.total = function (min, max) {\n    return durationInMonths(min, max) + 1;\n  };\n\n  MonthViewService.prototype.value = function (current) {\n    return current ? current.getDate().toString() : '';\n  };\n\n  MonthViewService.prototype.viewDate = function (date, max, border) {\n    if (border === void 0) {\n      border = 1;\n    }\n\n    var renderTwoViews = durationInMonths(date, max) < border;\n    return renderTwoViews ? addMonths(date, -1) : date;\n  };\n\n  MonthViewService.prototype.isWeekend = function (date) {\n    var day = date.getDay();\n    return day === SATURDAY || day === SUNDAY;\n  };\n\n  MonthViewService.prototype.abbrMonthNames = function () {\n    return this.intl.dateFormatNames({\n      nameType: 'abbreviated',\n      type: 'months'\n    });\n  };\n\n  MonthViewService.prototype.normalize = function (cellDate, min, max) {\n    if (cellDate < min && this.isEqual(cellDate, min)) {\n      return getDate(min);\n    }\n\n    if (cellDate > max && this.isEqual(cellDate, max)) {\n      return getDate(max);\n    }\n\n    return cellDate;\n  };\n\n  MonthViewService.prototype.wideMonthNames = function () {\n    return this.intl.dateFormatNames({\n      nameType: 'wide',\n      type: 'months'\n    });\n  };\n\n  return MonthViewService;\n}();\n\nexport { MonthViewService };","map":{"version":3,"sources":["../../../../src/calendar/services/MonthViewService.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var _a;\nimport { addDays, addWeeks, addMonths, dayOfWeek, durationInMonths, getDate, firstDayOfMonth, lastDayOfMonth } from '@progress/kendo-date-math';\nimport { Action } from '../models/NavigationAction';\nimport { EMPTY_SELECTIONRANGE } from '../models/SelectionRange';\nimport { getToday, isInRange, isInSelectionRange, range } from '../../utils';\nvar EMPTY_DATA = [[]];\nvar CELLS_LENGTH = 7;\nvar ROWS_LENGTH = 6;\nvar SATURDAY = 6;\nvar SUNDAY = 0;\nvar ACTIONS = (_a = {},\n    _a[Action.Left] = function (date) { return addDays(date, -1); },\n    _a[Action.Up] = function (date) { return addWeeks(date, -1); },\n    _a[Action.Right] = function (date) { return addDays(date, 1); },\n    _a[Action.Down] = function (date) { return addWeeks(date, 1); },\n    _a[Action.PrevView] = function (date) { return addMonths(date, -1); },\n    _a[Action.NextView] = function (date) { return addMonths(date, 1); },\n    _a[Action.FirstInView] = function (date) { return firstDayOfMonth(date); },\n    _a[Action.LastInView] = function (date) { return lastDayOfMonth(date); },\n    _a);\n/**\n * @hidden\n */\nvar MonthViewService = /** @class */ (function () {\n    function MonthViewService(intl) {\n        this.intl = intl;\n    }\n    MonthViewService.prototype.addToDate = function (min, skip) {\n        return addMonths(min, skip);\n    };\n    MonthViewService.prototype.datesList = function (start, count) {\n        return range(0, count).map(function (i) { return addMonths(start, i); });\n    };\n    MonthViewService.prototype.data = function (options) {\n        var _this = this;\n        var cellUID = options.cellUID, focusedDate = options.focusedDate, isActiveView = options.isActiveView, max = options.max, min = options.min, selectedDate = options.selectedDate, _a = options.selectionRange, selectionRange = _a === void 0 ? EMPTY_SELECTIONRANGE : _a, viewDate = options.viewDate;\n        if (!viewDate) {\n            return EMPTY_DATA;\n        }\n        var firstMonthDate = firstDayOfMonth(viewDate);\n        var lastMonthDate = lastDayOfMonth(viewDate);\n        var backward = -1;\n        var date = dayOfWeek(firstMonthDate, this.intl.firstDay(), backward);\n        var cells = range(0, CELLS_LENGTH);\n        var today = getToday();\n        return range(0, ROWS_LENGTH).map(function (rowOffset) {\n            var baseDate = addDays(date, rowOffset * CELLS_LENGTH);\n            return cells.map(function (cellOffset) {\n                var cellDate = _this.normalize(addDays(baseDate, cellOffset), min, max);\n                var otherMonth = cellDate < firstMonthDate || cellDate > lastMonthDate;\n                if (otherMonth) {\n                    return null;\n                }\n                var isRangeStart = _this.isEqual(cellDate, selectionRange.start);\n                var isRangeEnd = _this.isEqual(cellDate, selectionRange.end);\n                var isInMiddle = !isRangeStart && !isRangeEnd;\n                var isRangeMid = isInMiddle && isInSelectionRange(cellDate, selectionRange);\n                var isSelected = isActiveView && (!Array.isArray(selectedDate)\n                    ? isInRange(selectedDate, min, max) && _this.isEqual(cellDate, selectedDate)\n                    : _this.isSelectedFromArray(cellDate, selectedDate, min, max));\n                var cell = {\n                    formattedValue: _this.value(cellDate),\n                    id: \"\" + cellUID + cellDate.getTime(),\n                    isFocused: _this.isEqual(cellDate, focusedDate),\n                    isSelected: isSelected,\n                    isInRange: isInRange(cellDate, min, max),\n                    isWeekend: _this.isWeekend(cellDate),\n                    isRangeStart: isRangeStart,\n                    isRangeMid: isRangeMid,\n                    isRangeEnd: isRangeEnd,\n                    isRangeSplitStart: isRangeMid && _this.isEqual(cellDate, firstMonthDate),\n                    isRangeSplitEnd: isRangeMid && _this.isEqual(cellDate, lastMonthDate),\n                    isToday: _this.isEqual(cellDate, today),\n                    title: _this.cellTitle(cellDate),\n                    value: cellDate\n                };\n                return cell;\n            });\n        });\n    };\n    MonthViewService.prototype.isEqual = function (candidate, expected) {\n        if (!candidate || !expected) {\n            return false;\n        }\n        return getDate(candidate).getTime() === getDate(expected).getTime();\n    };\n    MonthViewService.prototype.isSelectedFromArray = function (candidate, dates, min, max) {\n        var _this = this;\n        var result = false;\n        dates.forEach(function (date) {\n            if (isInRange(candidate, min, max) && _this.isEqual(candidate, date)) {\n                result = true;\n            }\n        });\n        return result;\n    };\n    MonthViewService.prototype.isInArray = function (date, dates) {\n        return !!dates.length && firstDayOfMonth(dates[0]) <= date && date <= lastDayOfMonth(dates[dates.length - 1]);\n    };\n    MonthViewService.prototype.isInRange = function (candidate, min, max) {\n        var value = getDate(candidate);\n        var aboveMin = !min || getDate(min) <= value;\n        var belowMax = !max || value <= getDate(max);\n        return aboveMin && belowMax;\n    };\n    MonthViewService.prototype.isInSameView = function (candidate, value) {\n        return durationInMonths(candidate, value) === 0;\n    };\n    MonthViewService.prototype.isRangeStart = function (value) {\n        return !value.getMonth();\n    };\n    MonthViewService.prototype.move = function (value, action) {\n        var modifier = ACTIONS[action];\n        if (!modifier) {\n            return value;\n        }\n        return modifier(value);\n    };\n    MonthViewService.prototype.cellTitle = function (value) {\n        return this.intl.formatDate(value, 'D');\n    };\n    MonthViewService.prototype.navigationTitle = function (value) {\n        if (!value) {\n            return '';\n        }\n        return this.isRangeStart(value) ? value.getFullYear().toString() : this.abbrMonthNames()[value.getMonth()];\n    };\n    MonthViewService.prototype.title = function (current) {\n        return this.wideMonthNames()[current.getMonth()] + \" \" + current.getFullYear();\n    };\n    MonthViewService.prototype.rowLength = function (prependCell) {\n        return CELLS_LENGTH + (prependCell ? 1 : 0);\n    };\n    MonthViewService.prototype.skip = function (value, min) {\n        return durationInMonths(min, value);\n    };\n    MonthViewService.prototype.total = function (min, max) {\n        return durationInMonths(min, max) + 1;\n    };\n    MonthViewService.prototype.value = function (current) {\n        return current ? current.getDate().toString() : '';\n    };\n    MonthViewService.prototype.viewDate = function (date, max, border) {\n        if (border === void 0) { border = 1; }\n        var renderTwoViews = durationInMonths(date, max) < border;\n        return renderTwoViews ? addMonths(date, -1) : date;\n    };\n    MonthViewService.prototype.isWeekend = function (date) {\n        var day = date.getDay();\n        return day === SATURDAY || day === SUNDAY;\n    };\n    MonthViewService.prototype.abbrMonthNames = function () {\n        return this.intl.dateFormatNames({ nameType: 'abbreviated', type: 'months' });\n    };\n    MonthViewService.prototype.normalize = function (cellDate, min, max) {\n        if (cellDate < min && this.isEqual(cellDate, min)) {\n            return getDate(min);\n        }\n        if (cellDate > max && this.isEqual(cellDate, max)) {\n            return getDate(max);\n        }\n        return cellDate;\n    };\n    MonthViewService.prototype.wideMonthNames = function () {\n        return this.intl.dateFormatNames({ nameType: 'wide', type: 'months' });\n    };\n    return MonthViewService;\n}());\nexport { MonthViewService };\n//# sourceMappingURL=MonthViewService.js.map"]},"metadata":{},"sourceType":"module"}