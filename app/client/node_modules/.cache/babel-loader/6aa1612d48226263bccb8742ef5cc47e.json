{"ast":null,"code":"import defaultData from './default-data';\nimport isString from '../common/is-string';\nimport { errors } from '../errors';\n\nfunction availableLocaleInfo(fullName, suffixes) {\n  var parts = fullName.split(\"-\");\n  var language = parts[0];\n  var script = parts[1];\n  var territory = parts[2];\n  return cldr[fullName] || suffixes.indexOf(territory) !== -1 && cldr[language + \"-\" + territory] || suffixes.indexOf(script) !== -1 && cldr[language + \"-\" + script] || cldr[language];\n}\n\nfunction localeFullName(language, suffixes) {\n  var likelySubtags = cldr.supplemental.likelySubtags;\n\n  for (var idx = 0; idx < suffixes.length; idx++) {\n    var name = likelySubtags[language + \"-\" + suffixes[idx]];\n\n    if (name) {\n      return name;\n    }\n  }\n\n  if (likelySubtags[language]) {\n    return likelySubtags[language];\n  }\n}\n\nexport var cldr = defaultData;\nexport function getLocaleInfo(locale) {\n  var info;\n\n  if (isString(locale)) {\n    info = localeInfo(locale);\n  } else {\n    info = locale;\n  }\n\n  return info;\n}\nexport function localeInfo(locale) {\n  if (cldr[locale]) {\n    return cldr[locale];\n  }\n\n  var likelySubtags = cldr.supplemental.likelySubtags;\n\n  if (likelySubtags) {\n    var parts = locale.split(\"-\");\n    var language = parts[0];\n    var suffixes = parts.slice(1);\n    var fullName = localeFullName(language, suffixes);\n    var info = fullName ? availableLocaleInfo(fullName, suffixes) : null;\n\n    if (info) {\n      return info;\n    }\n  }\n\n  throw errors.NoLocale.error(locale);\n}","map":{"version":3,"sources":["/home/infinity/Desktop/NTUA-Databases/app/client/node_modules/@telerik/kendo-intl/dist/es/cldr/info.js"],"names":["defaultData","isString","errors","availableLocaleInfo","fullName","suffixes","parts","split","language","script","territory","cldr","indexOf","localeFullName","likelySubtags","supplemental","idx","length","name","getLocaleInfo","locale","info","localeInfo","slice","NoLocale","error"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,gBAAxB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAEA,SAASC,mBAAT,CAA6BC,QAA7B,EAAuCC,QAAvC,EAAiD;AAC7C,MAAIC,KAAK,GAAGF,QAAQ,CAACG,KAAT,CAAe,GAAf,CAAZ;AACA,MAAIC,QAAQ,GAAGF,KAAK,CAAC,CAAD,CAApB;AACA,MAAIG,MAAM,GAAGH,KAAK,CAAC,CAAD,CAAlB;AACA,MAAII,SAAS,GAAGJ,KAAK,CAAC,CAAD,CAArB;AAEA,SAAOK,IAAI,CAACP,QAAD,CAAJ,IAAmBC,QAAQ,CAACO,OAAT,CAAiBF,SAAjB,MAAgC,CAAC,CAAjC,IAAsCC,IAAI,CAACH,QAAQ,GAAG,GAAX,GAAiBE,SAAlB,CAA7D,IAA+FL,QAAQ,CAACO,OAAT,CAAiBH,MAAjB,MAA6B,CAAC,CAA9B,IAAmCE,IAAI,CAACH,QAAQ,GAAG,GAAX,GAAiBC,MAAlB,CAAtI,IAAoKE,IAAI,CAACH,QAAD,CAA/K;AACH;;AAED,SAASK,cAAT,CAAwBL,QAAxB,EAAkCH,QAAlC,EAA4C;AACxC,MAAIS,aAAa,GAAGH,IAAI,CAACI,YAAL,CAAkBD,aAAtC;;AAEA,OAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGX,QAAQ,CAACY,MAAjC,EAAyCD,GAAG,EAA5C,EAAgD;AAC5C,QAAIE,IAAI,GAAGJ,aAAa,CAACN,QAAQ,GAAG,GAAX,GAAiBH,QAAQ,CAACW,GAAD,CAA1B,CAAxB;;AACA,QAAIE,IAAJ,EAAU;AACN,aAAOA,IAAP;AACH;AACJ;;AAED,MAAIJ,aAAa,CAACN,QAAD,CAAjB,EAA6B;AACzB,WAAOM,aAAa,CAACN,QAAD,CAApB;AACH;AACJ;;AAED,OAAO,IAAIG,IAAI,GAAGX,WAAX;AAEP,OAAO,SAASmB,aAAT,CAAuBC,MAAvB,EAA+B;AAClC,MAAIC,IAAJ;;AACA,MAAIpB,QAAQ,CAACmB,MAAD,CAAZ,EAAsB;AAClBC,IAAAA,IAAI,GAAGC,UAAU,CAACF,MAAD,CAAjB;AACH,GAFD,MAEO;AACHC,IAAAA,IAAI,GAAGD,MAAP;AACH;;AACD,SAAOC,IAAP;AACH;AAED,OAAO,SAASC,UAAT,CAAoBF,MAApB,EAA4B;AAC/B,MAAIT,IAAI,CAACS,MAAD,CAAR,EAAkB;AACd,WAAOT,IAAI,CAACS,MAAD,CAAX;AACH;;AAED,MAAIN,aAAa,GAAGH,IAAI,CAACI,YAAL,CAAkBD,aAAtC;;AACA,MAAIA,aAAJ,EAAmB;AACf,QAAIR,KAAK,GAAGc,MAAM,CAACb,KAAP,CAAa,GAAb,CAAZ;AACA,QAAIC,QAAQ,GAAGF,KAAK,CAAC,CAAD,CAApB;AACA,QAAID,QAAQ,GAAGC,KAAK,CAACiB,KAAN,CAAY,CAAZ,CAAf;AACA,QAAInB,QAAQ,GAAGS,cAAc,CAACL,QAAD,EAAWH,QAAX,CAA7B;AACA,QAAIgB,IAAI,GAAGjB,QAAQ,GAAGD,mBAAmB,CAACC,QAAD,EAAWC,QAAX,CAAtB,GAA6C,IAAhE;;AACA,QAAIgB,IAAJ,EAAU;AACN,aAAOA,IAAP;AACH;AACJ;;AAED,QAAMnB,MAAM,CAACsB,QAAP,CAAgBC,KAAhB,CAAsBL,MAAtB,CAAN;AACH","sourcesContent":["import defaultData from './default-data';\nimport isString from '../common/is-string';\nimport { errors } from '../errors';\n\nfunction availableLocaleInfo(fullName, suffixes) {\n    var parts = fullName.split(\"-\");\n    var language = parts[0];\n    var script = parts[1];\n    var territory = parts[2];\n\n    return cldr[fullName] || (suffixes.indexOf(territory) !== -1 && cldr[language + \"-\" + territory]) || (suffixes.indexOf(script) !== -1 && cldr[language + \"-\" + script]) || cldr[language];\n}\n\nfunction localeFullName(language, suffixes) {\n    var likelySubtags = cldr.supplemental.likelySubtags;\n\n    for (var idx = 0; idx < suffixes.length; idx++) {\n        var name = likelySubtags[language + \"-\" + suffixes[idx ]];\n        if (name) {\n            return name;\n        }\n    }\n\n    if (likelySubtags[language]) {\n        return likelySubtags[language];\n    }\n}\n\nexport var cldr = defaultData;\n\nexport function getLocaleInfo(locale) {\n    var info;\n    if (isString(locale)) {\n        info = localeInfo(locale);\n    } else {\n        info = locale;\n    }\n    return info;\n}\n\nexport function localeInfo(locale) {\n    if (cldr[locale]) {\n        return cldr[locale];\n    }\n\n    var likelySubtags = cldr.supplemental.likelySubtags;\n    if (likelySubtags) {\n        var parts = locale.split(\"-\");\n        var language = parts[0];\n        var suffixes = parts.slice(1);\n        var fullName = localeFullName(language, suffixes);\n        var info = fullName ? availableLocaleInfo(fullName, suffixes) : null;\n        if (info) {\n            return info;\n        }\n    }\n\n    throw errors.NoLocale.error(locale);\n}\n"]},"metadata":{},"sourceType":"module"}