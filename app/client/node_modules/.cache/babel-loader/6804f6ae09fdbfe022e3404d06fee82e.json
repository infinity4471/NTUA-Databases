{"ast":null,"code":"export default function groupInteger(number, start, end, options, info) {\n  var symbols = info.numbers.symbols;\n  var decimalIndex = number.indexOf(symbols.decimal);\n  var groupSizes = options.groupSize.slice();\n  var groupSize = groupSizes.shift();\n  var integerEnd = decimalIndex !== -1 ? decimalIndex : end + 1;\n  var integer = number.substring(start, integerEnd);\n  var result = number;\n  var integerLength = integer.length;\n\n  if (integerLength >= groupSize) {\n    var idx = integerLength;\n    var parts = [];\n\n    while (idx > -1) {\n      var value = integer.substring(idx - groupSize, idx);\n\n      if (value) {\n        parts.push(value);\n      }\n\n      idx -= groupSize;\n      var newGroupSize = groupSizes.shift();\n      groupSize = newGroupSize !== undefined ? newGroupSize : groupSize;\n\n      if (groupSize === 0) {\n        value = integer.substring(0, idx);\n\n        if (value) {\n          parts.push(value);\n        }\n\n        break;\n      }\n    }\n\n    integer = parts.reverse().join(symbols.group);\n    result = number.substring(0, start) + integer + number.substring(integerEnd);\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/infinity/Dropbox/Public/ECE-NTUA/2019-2020/10th Semester/Databases/supermarket/node_modules/@telerik/kendo-intl/dist/es/numbers/group-integer.js"],"names":["groupInteger","number","start","end","options","info","symbols","numbers","decimalIndex","indexOf","decimal","groupSizes","groupSize","slice","shift","integerEnd","integer","substring","result","integerLength","length","idx","parts","value","push","newGroupSize","undefined","reverse","join","group"],"mappings":"AAAA,eAAe,SAASA,YAAT,CAAsBC,MAAtB,EAA8BC,KAA9B,EAAqCC,GAArC,EAA0CC,OAA1C,EAAmDC,IAAnD,EAAyD;AACpE,MAAIC,OAAO,GAAGD,IAAI,CAACE,OAAL,CAAaD,OAA3B;AACA,MAAIE,YAAY,GAAGP,MAAM,CAACQ,OAAP,CAAeH,OAAO,CAACI,OAAvB,CAAnB;AACA,MAAIC,UAAU,GAAGP,OAAO,CAACQ,SAAR,CAAkBC,KAAlB,EAAjB;AACA,MAAID,SAAS,GAAGD,UAAU,CAACG,KAAX,EAAhB;AAEA,MAAIC,UAAU,GAAGP,YAAY,KAAK,CAAC,CAAlB,GAAsBA,YAAtB,GAAqCL,GAAG,GAAG,CAA5D;AAEA,MAAIa,OAAO,GAAGf,MAAM,CAACgB,SAAP,CAAiBf,KAAjB,EAAwBa,UAAxB,CAAd;AACA,MAAIG,MAAM,GAAGjB,MAAb;AACA,MAAIkB,aAAa,GAAGH,OAAO,CAACI,MAA5B;;AAEA,MAAID,aAAa,IAAIP,SAArB,EAAgC;AAC5B,QAAIS,GAAG,GAAGF,aAAV;AACA,QAAIG,KAAK,GAAG,EAAZ;;AAEA,WAAOD,GAAG,GAAG,CAAC,CAAd,EAAiB;AACb,UAAIE,KAAK,GAAGP,OAAO,CAACC,SAAR,CAAkBI,GAAG,GAAGT,SAAxB,EAAmCS,GAAnC,CAAZ;;AACA,UAAIE,KAAJ,EAAW;AACPD,QAAAA,KAAK,CAACE,IAAN,CAAWD,KAAX;AACH;;AACDF,MAAAA,GAAG,IAAIT,SAAP;AACA,UAAIa,YAAY,GAAGd,UAAU,CAACG,KAAX,EAAnB;AACAF,MAAAA,SAAS,GAAGa,YAAY,KAAKC,SAAjB,GAA6BD,YAA7B,GAA4Cb,SAAxD;;AAEA,UAAIA,SAAS,KAAK,CAAlB,EAAqB;AACjBW,QAAAA,KAAK,GAAGP,OAAO,CAACC,SAAR,CAAkB,CAAlB,EAAqBI,GAArB,CAAR;;AACA,YAAIE,KAAJ,EAAW;AACPD,UAAAA,KAAK,CAACE,IAAN,CAAWD,KAAX;AACH;;AACD;AACH;AACJ;;AAEDP,IAAAA,OAAO,GAAGM,KAAK,CAACK,OAAN,GAAgBC,IAAhB,CAAqBtB,OAAO,CAACuB,KAA7B,CAAV;AACAX,IAAAA,MAAM,GAAGjB,MAAM,CAACgB,SAAP,CAAiB,CAAjB,EAAoBf,KAApB,IAA6Bc,OAA7B,GAAuCf,MAAM,CAACgB,SAAP,CAAiBF,UAAjB,CAAhD;AACH;;AAED,SAAOG,MAAP;AACH","sourcesContent":["export default function groupInteger(number, start, end, options, info) {\n    var symbols = info.numbers.symbols;\n    var decimalIndex = number.indexOf(symbols.decimal);\n    var groupSizes = options.groupSize.slice();\n    var groupSize = groupSizes.shift();\n\n    var integerEnd = decimalIndex !== -1 ? decimalIndex : end + 1;\n\n    var integer = number.substring(start, integerEnd);\n    var result = number;\n    var integerLength = integer.length;\n\n    if (integerLength >= groupSize) {\n        var idx = integerLength;\n        var parts = [];\n\n        while (idx > -1) {\n            var value = integer.substring(idx - groupSize, idx);\n            if (value) {\n                parts.push(value);\n            }\n            idx -= groupSize;\n            var newGroupSize = groupSizes.shift();\n            groupSize = newGroupSize !== undefined ? newGroupSize : groupSize;\n\n            if (groupSize === 0) {\n                value = integer.substring(0, idx);\n                if (value) {\n                    parts.push(value);\n                }\n                break;\n            }\n        }\n\n        integer = parts.reverse().join(symbols.group);\n        result = number.substring(0, start) + integer + number.substring(integerEnd);\n    }\n\n    return result;\n}"]},"metadata":{},"sourceType":"module"}