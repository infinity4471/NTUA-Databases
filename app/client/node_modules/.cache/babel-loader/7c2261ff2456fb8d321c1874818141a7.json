{"ast":null,"code":"import toCubicPolynomial from './to-cubic-polynomial';\nimport solveCubicEquation from './solve-cubic-equation';\nimport calculateCurveAt from './calculate-curve-at';\nexport default function hasRootsInRange(points, point, field, rootField, range) {\n  var polynomial = toCubicPolynomial(points, rootField);\n  var roots = solveCubicEquation(polynomial[0], polynomial[1], polynomial[2], polynomial[3] - point[rootField]);\n  var intersection;\n\n  for (var idx = 0; idx < roots.length; idx++) {\n    if (0 <= roots[idx] && roots[idx] <= 1) {\n      intersection = calculateCurveAt(roots[idx], field, points);\n\n      if (Math.abs(intersection - point[field]) <= range) {\n        return true;\n      }\n    }\n  }\n}","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/node_modules/@progress/kendo-drawing/dist/es/geometry/math/has-roots-in-range.js"],"names":["toCubicPolynomial","solveCubicEquation","calculateCurveAt","hasRootsInRange","points","point","field","rootField","range","polynomial","roots","intersection","idx","length","Math","abs"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,uBAA9B;AACA,OAAOC,kBAAP,MAA+B,wBAA/B;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;AAEA,eAAe,SAASC,eAAT,CAAyBC,MAAzB,EAAiCC,KAAjC,EAAwCC,KAAxC,EAA+CC,SAA/C,EAA0DC,KAA1D,EAAiE;AAC5E,MAAIC,UAAU,GAAGT,iBAAiB,CAACI,MAAD,EAASG,SAAT,CAAlC;AACA,MAAIG,KAAK,GAAGT,kBAAkB,CAACQ,UAAU,CAAC,CAAD,CAAX,EAAgBA,UAAU,CAAC,CAAD,CAA1B,EAA+BA,UAAU,CAAC,CAAD,CAAzC,EAA8CA,UAAU,CAAC,CAAD,CAAV,GAAgBJ,KAAK,CAACE,SAAD,CAAnE,CAA9B;AACA,MAAII,YAAJ;;AAEA,OAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,KAAK,CAACG,MAA9B,EAAsCD,GAAG,EAAzC,EAA6C;AACzC,QAAI,KAAKF,KAAK,CAACE,GAAD,CAAV,IAAmBF,KAAK,CAACE,GAAD,CAAL,IAAc,CAArC,EAAwC;AACpCD,MAAAA,YAAY,GAAGT,gBAAgB,CAACQ,KAAK,CAACE,GAAD,CAAN,EAAaN,KAAb,EAAoBF,MAApB,CAA/B;;AACA,UAAIU,IAAI,CAACC,GAAL,CAASJ,YAAY,GAAGN,KAAK,CAACC,KAAD,CAA7B,KAAyCE,KAA7C,EAAoD;AAChD,eAAO,IAAP;AACH;AACJ;AACJ;AACJ","sourcesContent":["import toCubicPolynomial from './to-cubic-polynomial';\nimport solveCubicEquation from './solve-cubic-equation';\nimport calculateCurveAt from './calculate-curve-at';\n\nexport default function hasRootsInRange(points, point, field, rootField, range) {\n    var polynomial = toCubicPolynomial(points, rootField);\n    var roots = solveCubicEquation(polynomial[0], polynomial[1], polynomial[2], polynomial[3] - point[rootField]);\n    var intersection;\n\n    for (var idx = 0; idx < roots.length; idx++) {\n        if (0 <= roots[idx] && roots[idx] <= 1) {\n            intersection = calculateCurveAt(roots[idx], field, points);\n            if (Math.abs(intersection - point[field]) <= range) {\n                return true;\n            }\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}