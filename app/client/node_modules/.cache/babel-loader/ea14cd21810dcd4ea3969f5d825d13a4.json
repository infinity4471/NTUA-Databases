{"ast":null,"code":"import { zoneAndRule } from './zone-and-rule';\n/**\n * @hidden\n *\n * A function that calculates the time offset based on zone name.\n *\n * @param timezone - The timezone name. For example, `America/Chicago`, `Europe/Sofia`.\n * @param date - A date for which the zone rule will be located.\n *\n * @return - Returns the timezone offset in minutes at the specified time.\n */\n\nexport var offset = function (timezone, date) {\n  if (date === void 0) {\n    date = new Date();\n  }\n\n  if (timezone === 'Etc/UTC' || timezone === 'Etc/GMT') {\n    return 0;\n  }\n\n  if (timezone === '') {\n    return date.getTimezoneOffset();\n  }\n\n  var _a = zoneAndRule(timezone, date),\n      rule = _a.rule,\n      zone = _a.zone;\n\n  return parseFloat(rule ? zone[0] - rule[6] : zone[0]);\n};","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/node_modules/@progress/kendo-date-math/dist/es/tz/offset.js"],"names":["zoneAndRule","offset","timezone","date","Date","getTimezoneOffset","_a","rule","zone","parseFloat"],"mappings":"AAAA,SAASA,WAAT,QAA4B,iBAA5B;AACA;;;;;;;;;;;AAUA,OAAO,IAAIC,MAAM,GAAG,UAAUC,QAAV,EAAoBC,IAApB,EAA0B;AAC1C,MAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AAAEA,IAAAA,IAAI,GAAG,IAAIC,IAAJ,EAAP;AAAoB;;AAC3C,MAAIF,QAAQ,KAAK,SAAb,IAA0BA,QAAQ,KAAK,SAA3C,EAAsD;AAClD,WAAO,CAAP;AACH;;AACD,MAAIA,QAAQ,KAAK,EAAjB,EAAqB;AACjB,WAAOC,IAAI,CAACE,iBAAL,EAAP;AACH;;AACD,MAAIC,EAAE,GAAGN,WAAW,CAACE,QAAD,EAAWC,IAAX,CAApB;AAAA,MAAsCI,IAAI,GAAGD,EAAE,CAACC,IAAhD;AAAA,MAAsDC,IAAI,GAAGF,EAAE,CAACE,IAAhE;;AACA,SAAOC,UAAU,CAACF,IAAI,GAAGC,IAAI,CAAC,CAAD,CAAJ,GAAUD,IAAI,CAAC,CAAD,CAAjB,GAAuBC,IAAI,CAAC,CAAD,CAAhC,CAAjB;AACH,CAVM","sourcesContent":["import { zoneAndRule } from './zone-and-rule';\n/**\n * @hidden\n *\n * A function that calculates the time offset based on zone name.\n *\n * @param timezone - The timezone name. For example, `America/Chicago`, `Europe/Sofia`.\n * @param date - A date for which the zone rule will be located.\n *\n * @return - Returns the timezone offset in minutes at the specified time.\n */\nexport var offset = function (timezone, date) {\n    if (date === void 0) { date = new Date(); }\n    if (timezone === 'Etc/UTC' || timezone === 'Etc/GMT') {\n        return 0;\n    }\n    if (timezone === '') {\n        return date.getTimezoneOffset();\n    }\n    var _a = zoneAndRule(timezone, date), rule = _a.rule, zone = _a.zone;\n    return parseFloat(rule ? zone[0] - rule[6] : zone[0]);\n};\n"]},"metadata":{},"sourceType":"module"}