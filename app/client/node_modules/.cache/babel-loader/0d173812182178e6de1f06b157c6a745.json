{"ast":null,"code":"import { columnMenuFilterEqOperator, columnMenuFilterNotEqOperator, columnMenuFilterIsNullOperator, columnMenuFilterIsNotNullOperator, columnMenuFilterIsEmptyOperator, columnMenuFilterIsNotEmptyOperator, columnMenuFilterStartsWithOperator, columnMenuFilterContainsOperator, columnMenuFilterNotContainsOperator, columnMenuFilterEndsWithOperator, columnMenuFilterGteOperator, columnMenuFilterGtOperator, columnMenuFilterLteOperator, columnMenuFilterLtOperator, columnMenuFilterAfterOrEqualOperator, columnMenuFilterAfterOperator, columnMenuFilterBeforeOperator, columnMenuFilterBeforeOrEqualOperator, columnMenuFilterIsTrue } from '../messages';\nvar textOperators = [{\n  text: columnMenuFilterContainsOperator,\n  operator: 'contains'\n}, {\n  text: columnMenuFilterNotContainsOperator,\n  operator: 'doesnotcontain'\n}, {\n  text: columnMenuFilterEqOperator,\n  operator: 'eq'\n}, {\n  text: columnMenuFilterNotEqOperator,\n  operator: 'neq'\n}, {\n  text: columnMenuFilterStartsWithOperator,\n  operator: 'startswith'\n}, {\n  text: columnMenuFilterEndsWithOperator,\n  operator: 'endswith'\n}, {\n  text: columnMenuFilterIsNullOperator,\n  operator: 'isnull'\n}, {\n  text: columnMenuFilterIsNotNullOperator,\n  operator: 'isnotnull'\n}, {\n  text: columnMenuFilterIsEmptyOperator,\n  operator: 'isempty'\n}, {\n  text: columnMenuFilterIsNotEmptyOperator,\n  operator: 'isnotempty'\n}];\nvar numericOperators = [{\n  text: columnMenuFilterEqOperator,\n  operator: 'eq'\n}, {\n  text: columnMenuFilterNotEqOperator,\n  operator: 'neq'\n}, {\n  text: columnMenuFilterGteOperator,\n  operator: 'gte'\n}, {\n  text: columnMenuFilterGtOperator,\n  operator: 'gt'\n}, {\n  text: columnMenuFilterLteOperator,\n  operator: 'lte'\n}, {\n  text: columnMenuFilterLtOperator,\n  operator: 'lt'\n}, {\n  text: columnMenuFilterIsNullOperator,\n  operator: 'isnull'\n}, {\n  text: columnMenuFilterIsNotNullOperator,\n  operator: 'isnotnull'\n}];\nvar dateOperators = [{\n  text: columnMenuFilterEqOperator,\n  operator: 'eq'\n}, {\n  text: columnMenuFilterNotEqOperator,\n  operator: 'neq'\n}, {\n  text: columnMenuFilterAfterOrEqualOperator,\n  operator: 'gte'\n}, {\n  text: columnMenuFilterAfterOperator,\n  operator: 'gt'\n}, {\n  text: columnMenuFilterBeforeOperator,\n  operator: 'lt'\n}, {\n  text: columnMenuFilterBeforeOrEqualOperator,\n  operator: 'lte'\n}, {\n  text: columnMenuFilterIsNullOperator,\n  operator: 'isnull'\n}, {\n  text: columnMenuFilterIsNotNullOperator,\n  operator: 'isnotnull'\n}];\nvar booleanOperators = [{\n  text: columnMenuFilterIsTrue,\n  operator: ''\n}];\n/**\n * Represents the operators for the ColumnMenuTextFilter, ColumnMenuNumericFilter,\n * ColumnMenuDateFilter and ColumnMenuBooleanFilter components.\n *\n * The text field of each operator object will be resolved according to the\n * [localization messages]({% slug globalization_datatools %}#toc-messages).\n */\n\nvar ColumnMenuOperators =\n/** @class */\nfunction () {\n  function ColumnMenuOperators() {}\n\n  Object.defineProperty(ColumnMenuOperators, \"text\", {\n    /**\n     * An array containing the operators for the ColumnMenuTextFilter component.\n     *\n     * The operators are:\n     *\n     * - { text: 'columnMenu.filterContainsOperator', operator: 'contains' }\n     * - { text: 'columnMenu.filterNotContainsOperator', operator: 'doesnotcontain' }\n     * - { text: 'columnMenu.filterEqOperator', operator: 'eq' }\n     * - { text: 'columnMenu.filterNotEqOperator', operator: 'neq' }\n     * - { text: 'columnMenu.filterStartsWithOperator', operator: 'startswith' }\n     * - { text: 'columnMenu.filterEndsWithOperator', operator: 'endswith' }\n     * - { text: 'columnMenu.filterIsNullOperator', operator: 'isnull' }\n     * - { text: 'columnMenu.filterIsNotNullOperator', operator: 'isnotnull' }\n     * - { text: 'columnMenu.filterIsEmptyOperator', operator: 'isempty' }\n     * - { text: 'columnMenu.filterIsNotEmptyOperator', operator: 'isnotempty' }\n     */\n    get: function () {\n      return textOperators.slice();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnMenuOperators, \"numeric\", {\n    /**\n     * An array containing the operators for the ColumnMenuNumericFilter component.\n     *\n     * The operators are:\n     *\n     * - { text: 'columnMenu.filterEqOperator', operator: 'eq' }\n     * - { text: 'columnMenu.filterNotEqOperator', operator: 'neq' }\n     * - { text: 'columnMenu.filterGteOperator', operator: 'gte' }\n     * - { text: 'columnMenu.filterGtOperator', operator: 'gt' }\n     * - { text: 'columnMenu.filterLteOperator', operator: 'lte' }\n     * - { text: 'columnMenu.filterLtOperator', operator: 'lt' }\n     * - { text: 'columnMenu.filterIsNullOperator', operator: 'isnull' }\n     * - { text: 'columnMenu.filterIsNotNullOperator', operator: 'isnotnull' }\n     */\n    get: function () {\n      return numericOperators.slice();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnMenuOperators, \"date\", {\n    /**\n     * An array containing the operators for the ColumnMenuDateFilter component.\n     *\n     * The operators are:\n     *\n     * - { text: 'columnMenu.filterEqOperator', operator: 'eq' }\n     * - { text: 'columnMenu.filterNotEqOperator', operator: 'neq' }\n     * - { text: 'columnMenu.filterAfterOrEqualOperator', operator: 'gte' }\n     * - { text: 'columnMenu.filterAfterOperator', operator: 'gt' }\n     * - { text: 'columnMenu.filterBeforeOperator', operator: 'lt' }\n     * - { text: 'columnMenu.filterBeforeOrEqualOperator', operator: 'lte' }\n     * - { text: 'columnMenu.filterIsNullOperator', operator: 'isnull' }\n     * - { text: 'columnMenu.filterIsNotNullOperator', operator: 'isnotnull' }\n     */\n    get: function () {\n      return dateOperators.slice();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColumnMenuOperators, \"boolean\", {\n    /**\n     * An array containing the operators for the ColumnMenuBooleanFilter component.\n     *\n     * The operators are:\n     *\n     * - { text: 'columnMenu.filterIsTrue', operator: '' }\n     */\n    get: function () {\n      return booleanOperators.slice();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return ColumnMenuOperators;\n}();\n\nexport { ColumnMenuOperators };","map":{"version":3,"sources":["../../../src/columnmenu/ColumnMenuOperators.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { columnMenuFilterEqOperator, columnMenuFilterNotEqOperator, columnMenuFilterIsNullOperator, columnMenuFilterIsNotNullOperator, columnMenuFilterIsEmptyOperator, columnMenuFilterIsNotEmptyOperator, columnMenuFilterStartsWithOperator, columnMenuFilterContainsOperator, columnMenuFilterNotContainsOperator, columnMenuFilterEndsWithOperator, columnMenuFilterGteOperator, columnMenuFilterGtOperator, columnMenuFilterLteOperator, columnMenuFilterLtOperator, columnMenuFilterAfterOrEqualOperator, columnMenuFilterAfterOperator, columnMenuFilterBeforeOperator, columnMenuFilterBeforeOrEqualOperator, columnMenuFilterIsTrue } from '../messages';\nvar textOperators = [\n    { text: columnMenuFilterContainsOperator, operator: 'contains' },\n    { text: columnMenuFilterNotContainsOperator, operator: 'doesnotcontain' },\n    { text: columnMenuFilterEqOperator, operator: 'eq' },\n    { text: columnMenuFilterNotEqOperator, operator: 'neq' },\n    { text: columnMenuFilterStartsWithOperator, operator: 'startswith' },\n    { text: columnMenuFilterEndsWithOperator, operator: 'endswith' },\n    { text: columnMenuFilterIsNullOperator, operator: 'isnull' },\n    { text: columnMenuFilterIsNotNullOperator, operator: 'isnotnull' },\n    { text: columnMenuFilterIsEmptyOperator, operator: 'isempty' },\n    { text: columnMenuFilterIsNotEmptyOperator, operator: 'isnotempty' }\n];\nvar numericOperators = [\n    { text: columnMenuFilterEqOperator, operator: 'eq' },\n    { text: columnMenuFilterNotEqOperator, operator: 'neq' },\n    { text: columnMenuFilterGteOperator, operator: 'gte' },\n    { text: columnMenuFilterGtOperator, operator: 'gt' },\n    { text: columnMenuFilterLteOperator, operator: 'lte' },\n    { text: columnMenuFilterLtOperator, operator: 'lt' },\n    { text: columnMenuFilterIsNullOperator, operator: 'isnull' },\n    { text: columnMenuFilterIsNotNullOperator, operator: 'isnotnull' }\n];\nvar dateOperators = [\n    { text: columnMenuFilterEqOperator, operator: 'eq' },\n    { text: columnMenuFilterNotEqOperator, operator: 'neq' },\n    { text: columnMenuFilterAfterOrEqualOperator, operator: 'gte' },\n    { text: columnMenuFilterAfterOperator, operator: 'gt' },\n    { text: columnMenuFilterBeforeOperator, operator: 'lt' },\n    { text: columnMenuFilterBeforeOrEqualOperator, operator: 'lte' },\n    { text: columnMenuFilterIsNullOperator, operator: 'isnull' },\n    { text: columnMenuFilterIsNotNullOperator, operator: 'isnotnull' }\n];\nvar booleanOperators = [\n    { text: columnMenuFilterIsTrue, operator: '' }\n];\n/**\n * Represents the operators for the ColumnMenuTextFilter, ColumnMenuNumericFilter,\n * ColumnMenuDateFilter and ColumnMenuBooleanFilter components.\n *\n * The text field of each operator object will be resolved according to the\n * [localization messages]({% slug globalization_datatools %}#toc-messages).\n */\nvar ColumnMenuOperators = /** @class */ (function () {\n    function ColumnMenuOperators() {\n    }\n    Object.defineProperty(ColumnMenuOperators, \"text\", {\n        /**\n         * An array containing the operators for the ColumnMenuTextFilter component.\n         *\n         * The operators are:\n         *\n         * - { text: 'columnMenu.filterContainsOperator', operator: 'contains' }\n         * - { text: 'columnMenu.filterNotContainsOperator', operator: 'doesnotcontain' }\n         * - { text: 'columnMenu.filterEqOperator', operator: 'eq' }\n         * - { text: 'columnMenu.filterNotEqOperator', operator: 'neq' }\n         * - { text: 'columnMenu.filterStartsWithOperator', operator: 'startswith' }\n         * - { text: 'columnMenu.filterEndsWithOperator', operator: 'endswith' }\n         * - { text: 'columnMenu.filterIsNullOperator', operator: 'isnull' }\n         * - { text: 'columnMenu.filterIsNotNullOperator', operator: 'isnotnull' }\n         * - { text: 'columnMenu.filterIsEmptyOperator', operator: 'isempty' }\n         * - { text: 'columnMenu.filterIsNotEmptyOperator', operator: 'isnotempty' }\n         */\n        get: function () {\n            return textOperators.slice();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnMenuOperators, \"numeric\", {\n        /**\n         * An array containing the operators for the ColumnMenuNumericFilter component.\n         *\n         * The operators are:\n         *\n         * - { text: 'columnMenu.filterEqOperator', operator: 'eq' }\n         * - { text: 'columnMenu.filterNotEqOperator', operator: 'neq' }\n         * - { text: 'columnMenu.filterGteOperator', operator: 'gte' }\n         * - { text: 'columnMenu.filterGtOperator', operator: 'gt' }\n         * - { text: 'columnMenu.filterLteOperator', operator: 'lte' }\n         * - { text: 'columnMenu.filterLtOperator', operator: 'lt' }\n         * - { text: 'columnMenu.filterIsNullOperator', operator: 'isnull' }\n         * - { text: 'columnMenu.filterIsNotNullOperator', operator: 'isnotnull' }\n         */\n        get: function () {\n            return numericOperators.slice();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnMenuOperators, \"date\", {\n        /**\n         * An array containing the operators for the ColumnMenuDateFilter component.\n         *\n         * The operators are:\n         *\n         * - { text: 'columnMenu.filterEqOperator', operator: 'eq' }\n         * - { text: 'columnMenu.filterNotEqOperator', operator: 'neq' }\n         * - { text: 'columnMenu.filterAfterOrEqualOperator', operator: 'gte' }\n         * - { text: 'columnMenu.filterAfterOperator', operator: 'gt' }\n         * - { text: 'columnMenu.filterBeforeOperator', operator: 'lt' }\n         * - { text: 'columnMenu.filterBeforeOrEqualOperator', operator: 'lte' }\n         * - { text: 'columnMenu.filterIsNullOperator', operator: 'isnull' }\n         * - { text: 'columnMenu.filterIsNotNullOperator', operator: 'isnotnull' }\n         */\n        get: function () {\n            return dateOperators.slice();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ColumnMenuOperators, \"boolean\", {\n        /**\n         * An array containing the operators for the ColumnMenuBooleanFilter component.\n         *\n         * The operators are:\n         *\n         * - { text: 'columnMenu.filterIsTrue', operator: '' }\n         */\n        get: function () {\n            return booleanOperators.slice();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return ColumnMenuOperators;\n}());\nexport { ColumnMenuOperators };\n//# sourceMappingURL=ColumnMenuOperators.js.map"]},"metadata":{},"sourceType":"module"}