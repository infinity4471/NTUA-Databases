{"ast":null,"code":"/**\n * @hidden\n */\nvar ColumnResize =\n/** @class */\nfunction () {\n  function ColumnResize(triggerResize) {\n    var _this = this;\n    /**\n     * The settings for resizing the Grid.\n     */\n\n\n    this.resizable = false;\n    this.isRtl = false;\n\n    this.setIsRtl = function (isRtl) {\n      _this.isRtl = isRtl;\n    };\n\n    this.onResize = triggerResize;\n    this.dragHandler = this.dragHandler.bind(this);\n  }\n\n  ColumnResize.prototype.dragHandler = function (event, column, dragCue, end) {\n    var e = event.originalEvent;\n\n    if (!end) {\n      e.preventDefault();\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n    }\n\n    var tdElement = dragCue.parentElement;\n\n    if (!tdElement || !tdElement.parentElement) {\n      return;\n    }\n\n    var oldWidth = tdElement.clientWidth;\n    var newWidth;\n\n    if (this.isRtl) {\n      newWidth = dragCue.getBoundingClientRect().right - dragCue.offsetWidth / 2 - event.clientX;\n      newWidth += oldWidth;\n    } else {\n      newWidth = oldWidth + event.clientX - dragCue.getBoundingClientRect().left - dragCue.offsetWidth / 2;\n    }\n\n    if (!end && Math.abs(newWidth - oldWidth) < 1) {\n      return;\n    }\n\n    this.setWidths(column, Math.floor(newWidth) / oldWidth);\n    var index = this.columns.filter(function (c) {\n      return !c.children.length;\n    }).indexOf(column);\n    this.onResize(index, oldWidth, newWidth, e, end);\n  };\n\n  ColumnResize.prototype.setWidths = function (column, coef) {\n    var indexInOriginal = this.columns.indexOf(column);\n    var toAdjust = [];\n    var more = column.children.length;\n\n    for (var i = indexInOriginal + 1; more > 0 && i < this.columns.length; i++, more--) {\n      var cc = this.columns[i];\n\n      if (!cc.children.length) {\n        toAdjust.push(cc);\n      } else {\n        more += cc.children.length;\n      }\n    }\n\n    if (toAdjust.length === 0) {\n      toAdjust.push(column);\n    }\n\n    toAdjust.forEach(function (colToAdjust) {\n      var targetWidth = colToAdjust.width ? parseFloat(colToAdjust.width.toString()) * coef : 0;\n      var min = colToAdjust.minResizableWidth === undefined ? 10 : colToAdjust.minResizableWidth;\n\n      if (targetWidth < min) {\n        targetWidth = min;\n      }\n\n      colToAdjust.width = targetWidth;\n    });\n    this.updateColElements(toAdjust);\n  };\n\n  ColumnResize.prototype.updateColElements = function (affectedColumns) {\n    var columns = this.columns.filter(function (c) {\n      return !c.children.length;\n    });\n    var difference = 1e-10;\n\n    for (var i = 0; i < affectedColumns.length; i++) {\n      var colIndex = columns.indexOf(affectedColumns[i]);\n      var currentColumnFloatWidth = parseFloat((affectedColumns[i].width || 0).toString());\n      difference += currentColumnFloatWidth - Math.floor(currentColumnFloatWidth);\n      var currentWidth = Math.floor(currentColumnFloatWidth) + Math.floor(difference);\n      difference -= Math.floor(difference);\n      this.setColWidth(this.colGroupMain && this.colGroupMain.children[colIndex], currentWidth);\n      this.setColWidth(this.colGroupHeader && this.colGroupHeader.children[colIndex], currentWidth);\n      this.setColWidth(this.colGroupFooter && this.colGroupFooter.children[colIndex], currentWidth);\n    }\n  };\n\n  ColumnResize.prototype.setColWidth = function (col, width) {\n    if (col) {\n      col.style.width = width + 'px';\n    }\n  };\n\n  return ColumnResize;\n}();\n\nexport { ColumnResize };","map":{"version":3,"sources":["../../../src/drag/ColumnResize.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\n * @hidden\n */\nvar ColumnResize = /** @class */ (function () {\n    function ColumnResize(triggerResize) {\n        var _this = this;\n        /**\n         * The settings for resizing the Grid.\n         */\n        this.resizable = false;\n        this.isRtl = false;\n        this.setIsRtl = function (isRtl) {\n            _this.isRtl = isRtl;\n        };\n        this.onResize = triggerResize;\n        this.dragHandler = this.dragHandler.bind(this);\n    }\n    ColumnResize.prototype.dragHandler = function (event, column, dragCue, end) {\n        var e = event.originalEvent;\n        if (!end) {\n            e.preventDefault();\n            e.stopPropagation();\n            e.stopImmediatePropagation();\n        }\n        var tdElement = dragCue.parentElement;\n        if (!tdElement || !tdElement.parentElement) {\n            return;\n        }\n        var oldWidth = tdElement.clientWidth;\n        var newWidth;\n        if (this.isRtl) {\n            newWidth = (dragCue.getBoundingClientRect().right - (dragCue.offsetWidth / 2)) - event.clientX;\n            newWidth += oldWidth;\n        }\n        else {\n            newWidth = oldWidth + event.clientX - dragCue.getBoundingClientRect().left - (dragCue.offsetWidth / 2);\n        }\n        if (!end && Math.abs(newWidth - oldWidth) < 1) {\n            return;\n        }\n        this.setWidths(column, Math.floor(newWidth) / oldWidth);\n        var index = this.columns.filter(function (c) { return !c.children.length; }).indexOf(column);\n        this.onResize(index, oldWidth, newWidth, e, end);\n    };\n    ColumnResize.prototype.setWidths = function (column, coef) {\n        var indexInOriginal = this.columns.indexOf(column);\n        var toAdjust = [];\n        var more = column.children.length;\n        for (var i = indexInOriginal + 1; more > 0 && i < this.columns.length; i++, more--) {\n            var cc = this.columns[i];\n            if (!cc.children.length) {\n                toAdjust.push(cc);\n            }\n            else {\n                more += cc.children.length;\n            }\n        }\n        if (toAdjust.length === 0) {\n            toAdjust.push(column);\n        }\n        toAdjust.forEach(function (colToAdjust) {\n            var targetWidth = colToAdjust.width ? parseFloat(colToAdjust.width.toString()) * coef : 0;\n            var min = colToAdjust.minResizableWidth === undefined ? 10 : colToAdjust.minResizableWidth;\n            if (targetWidth < min) {\n                targetWidth = min;\n            }\n            colToAdjust.width = targetWidth;\n        });\n        this.updateColElements(toAdjust);\n    };\n    ColumnResize.prototype.updateColElements = function (affectedColumns) {\n        var columns = this.columns.filter(function (c) { return !c.children.length; });\n        var difference = 1e-10;\n        for (var i = 0; i < affectedColumns.length; i++) {\n            var colIndex = columns.indexOf(affectedColumns[i]);\n            var currentColumnFloatWidth = parseFloat((affectedColumns[i].width || 0).toString());\n            difference += currentColumnFloatWidth - Math.floor(currentColumnFloatWidth);\n            var currentWidth = Math.floor(currentColumnFloatWidth) + Math.floor(difference);\n            difference -= Math.floor(difference);\n            this.setColWidth(this.colGroupMain && this.colGroupMain.children[colIndex], currentWidth);\n            this.setColWidth(this.colGroupHeader && this.colGroupHeader.children[colIndex], currentWidth);\n            this.setColWidth(this.colGroupFooter && this.colGroupFooter.children[colIndex], currentWidth);\n        }\n    };\n    ColumnResize.prototype.setColWidth = function (col, width) {\n        if (col) {\n            col.style.width = width + 'px';\n        }\n    };\n    return ColumnResize;\n}());\nexport { ColumnResize };\n//# sourceMappingURL=ColumnResize.js.map"]},"metadata":{},"sourceType":"module"}