{"ast":null,"code":"import { Class } from '../common';\n\nvar QuadRoot = function (Class) {\n  function QuadRoot() {\n    Class.call(this);\n    this.shapes = [];\n  }\n\n  if (Class) QuadRoot.__proto__ = Class;\n  QuadRoot.prototype = Object.create(Class && Class.prototype);\n  QuadRoot.prototype.constructor = QuadRoot;\n\n  QuadRoot.prototype._add = function _add(shape, bbox) {\n    this.shapes.push({\n      bbox: bbox,\n      shape: shape\n    });\n    shape._quadNode = this;\n  };\n\n  QuadRoot.prototype.pointShapes = function pointShapes(point) {\n    var shapes = this.shapes;\n    var length = shapes.length;\n    var result = [];\n\n    for (var idx = 0; idx < length; idx++) {\n      if (shapes[idx].bbox.containsPoint(point)) {\n        result.push(shapes[idx].shape);\n      }\n    }\n\n    return result;\n  };\n\n  QuadRoot.prototype.insert = function insert(shape, bbox) {\n    this._add(shape, bbox);\n  };\n\n  QuadRoot.prototype.remove = function remove(shape) {\n    var shapes = this.shapes;\n    var length = shapes.length;\n\n    for (var idx = 0; idx < length; idx++) {\n      if (shapes[idx].shape === shape) {\n        shapes.splice(idx, 1);\n        break;\n      }\n    }\n  };\n\n  return QuadRoot;\n}(Class);\n\nexport default QuadRoot;","map":{"version":3,"sources":["/home/infinity/Desktop/supermarket/NTUA-Databases/app/client/node_modules/@progress/kendo-drawing/dist/es/search/quad-root.js"],"names":["Class","QuadRoot","call","shapes","__proto__","prototype","Object","create","constructor","_add","shape","bbox","push","_quadNode","pointShapes","point","length","result","idx","containsPoint","insert","remove","splice"],"mappings":"AAAA,SAASA,KAAT,QAAsB,WAAtB;;AAEA,IAAIC,QAAQ,GAAI,UAAUD,KAAV,EAAiB;AAC7B,WAASC,QAAT,GAAoB;AAChBD,IAAAA,KAAK,CAACE,IAAN,CAAW,IAAX;AAEA,SAAKC,MAAL,GAAc,EAAd;AACH;;AAED,MAAKH,KAAL,EAAaC,QAAQ,CAACG,SAAT,GAAqBJ,KAArB;AACbC,EAAAA,QAAQ,CAACI,SAAT,GAAqBC,MAAM,CAACC,MAAP,CAAeP,KAAK,IAAIA,KAAK,CAACK,SAA9B,CAArB;AACAJ,EAAAA,QAAQ,CAACI,SAAT,CAAmBG,WAAnB,GAAiCP,QAAjC;;AAEAA,EAAAA,QAAQ,CAACI,SAAT,CAAmBI,IAAnB,GAA0B,SAASA,IAAT,CAAeC,KAAf,EAAsBC,IAAtB,EAA4B;AAClD,SAAKR,MAAL,CAAYS,IAAZ,CAAiB;AACbD,MAAAA,IAAI,EAAEA,IADO;AAEbD,MAAAA,KAAK,EAAEA;AAFM,KAAjB;AAIAA,IAAAA,KAAK,CAACG,SAAN,GAAkB,IAAlB;AACH,GAND;;AAQAZ,EAAAA,QAAQ,CAACI,SAAT,CAAmBS,WAAnB,GAAiC,SAASA,WAAT,CAAsBC,KAAtB,EAA6B;AAC1D,QAAIZ,MAAM,GAAG,KAAKA,MAAlB;AACA,QAAIa,MAAM,GAAGb,MAAM,CAACa,MAApB;AACA,QAAIC,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,MAAxB,EAAgCE,GAAG,EAAnC,EAAuC;AACnC,UAAIf,MAAM,CAACe,GAAD,CAAN,CAAYP,IAAZ,CAAiBQ,aAAjB,CAA+BJ,KAA/B,CAAJ,EAA2C;AACvCE,QAAAA,MAAM,CAACL,IAAP,CAAYT,MAAM,CAACe,GAAD,CAAN,CAAYR,KAAxB;AACH;AACJ;;AACD,WAAOO,MAAP;AACH,GAVD;;AAYAhB,EAAAA,QAAQ,CAACI,SAAT,CAAmBe,MAAnB,GAA4B,SAASA,MAAT,CAAiBV,KAAjB,EAAwBC,IAAxB,EAA8B;AACtD,SAAKF,IAAL,CAAUC,KAAV,EAAiBC,IAAjB;AACH,GAFD;;AAIAV,EAAAA,QAAQ,CAACI,SAAT,CAAmBgB,MAAnB,GAA4B,SAASA,MAAT,CAAiBX,KAAjB,EAAwB;AAChD,QAAIP,MAAM,GAAG,KAAKA,MAAlB;AACA,QAAIa,MAAM,GAAGb,MAAM,CAACa,MAApB;;AAEA,SAAK,IAAIE,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGF,MAAxB,EAAgCE,GAAG,EAAnC,EAAuC;AACnC,UAAIf,MAAM,CAACe,GAAD,CAAN,CAAYR,KAAZ,KAAsBA,KAA1B,EAAiC;AAC7BP,QAAAA,MAAM,CAACmB,MAAP,CAAcJ,GAAd,EAAmB,CAAnB;AACA;AACH;AACJ;AACJ,GAVD;;AAYA,SAAOjB,QAAP;AACH,CAhDe,CAgDdD,KAhDc,CAAhB;;AAkDA,eAAeC,QAAf","sourcesContent":["import { Class } from '../common';\n\nvar QuadRoot = (function (Class) {\n    function QuadRoot() {\n        Class.call(this);\n\n        this.shapes = [];\n    }\n\n    if ( Class ) QuadRoot.__proto__ = Class;\n    QuadRoot.prototype = Object.create( Class && Class.prototype );\n    QuadRoot.prototype.constructor = QuadRoot;\n\n    QuadRoot.prototype._add = function _add (shape, bbox) {\n        this.shapes.push({\n            bbox: bbox,\n            shape: shape\n        });\n        shape._quadNode = this;\n    };\n\n    QuadRoot.prototype.pointShapes = function pointShapes (point) {\n        var shapes = this.shapes;\n        var length = shapes.length;\n        var result = [];\n        for (var idx = 0; idx < length; idx++) {\n            if (shapes[idx].bbox.containsPoint(point)) {\n                result.push(shapes[idx].shape);\n            }\n        }\n        return result;\n    };\n\n    QuadRoot.prototype.insert = function insert (shape, bbox) {\n        this._add(shape, bbox);\n    };\n\n    QuadRoot.prototype.remove = function remove (shape) {\n        var shapes = this.shapes;\n        var length = shapes.length;\n\n        for (var idx = 0; idx < length; idx++) {\n            if (shapes[idx].shape === shape) {\n                shapes.splice(idx, 1);\n                break;\n            }\n        }\n    };\n\n    return QuadRoot;\n}(Class));\n\nexport default QuadRoot;"]},"metadata":{},"sourceType":"module"}