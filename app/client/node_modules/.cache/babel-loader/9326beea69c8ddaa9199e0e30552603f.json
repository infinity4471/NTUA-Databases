{"ast":null,"code":"/**\n * Bundle of @devexpress/dx-react-grid\n * Generated: 2020-05-14\n * Version: 2.6.3\n * License: https://js.devexpress.com/Licensing\n */\nimport { memo, createElement, useCallback, PureComponent, Fragment, createRef, Component } from 'react';\nimport { Plugin, Getter, Template, TemplatePlaceholder, PluginHost, TemplateConnector, createStateHelper, Action, DragDropProvider as DragDropProvider$1, withComponents, DropTarget, DragSource, RefHolder, Sizer, connectProps } from '@devexpress/dx-react-core';\nimport { tableColumnsWithGrouping, rowIdGetter, cellValueGetter, tableColumnsWithDataRows, checkTableColumnExtensions, visibleTableColumns, orderedColumns, columnChooserItems, changeColumnFilter, getColumnExtensionValueGetter, filterExpression, defaultFilterPredicate, filteredCollapsedRowsGetter, unwrappedFilteredRows, filteredRows, getColumnExtension, startEditRows, stopEditRows, startEditCells, stopEditCells, changeRow, cancelChanges, changedRowsByIds, addRow, changeAddedRow, cancelAddedRows, addedRowsByIds, deleteRows, cancelDeletedRows, createRowChangeGetter, setCurrentPage, setPageSize, rowsWithPageHeaders, rowCount, paginatedRows, currentPage, toggleExpandedGroups, draftColumnGrouping, cancelColumnGroupingDraft, adjustSortIndex, changeColumnGrouping, groupRowChecker, groupRowLevelKeyGetter, groupCollapsedRowsGetter, expandedGroupRows, groupedRows, customGroupingRowIdGetter, customGroupedRows, toggleSelection, rowsWithAvailableToSelect, allSelected, someSelected, unwrapSelectedRows, getPersistentSortedColumns, calculateKeepOther, changeColumnSorting, sortedRows, draftOrder, TABLE_DATA_TYPE, getTableTargetColumnIndex, changeColumnOrder, TABLE_REORDERING_TYPE, tableHeaderRowsWithReordering, tableCellColSpanGetter, isHeaderStubTableCell, isDataTableCell, isNoDataTableRow, isNoDataTableCell, isDataTableRow, TABLE_NODATA_TYPE, tableRowsWithDataRows, isSelectAllTableCell, isSelectTableCell, isRowHighlighted, TABLE_SELECT_TYPE, tableColumnsWithSelection, toggleDetailRowExpanded, isDetailToggleTableCell, isDetailRowExpanded, isDetailTableRow, isDetailTableCell, TABLE_DETAIL_TYPE, tableDetailCellColSpanGetter, tableColumnsWithDetail, tableRowsWithExpandedDetail, defaultFormatlessSummaries, getGroupInlineSummaries, isGroupTableRow, isGroupTableCell, calculateGroupCellIndent, isGroupIndentTableCell, isGroupIndentStubTableCell, isGroupRowOrdinaryCell, isRowSummaryCell, getColumnSummaries, isPreviousCellContainSummary, TABLE_FLEX_TYPE, TABLE_GROUP_TYPE, tableRowsWithGrouping, tableGroupCellColSpanGetter, isHeadingTableCell, getNextColumnName, getColumnSortingDirection, isHeadingTableRow, TABLE_HEADING_TYPE, tableRowsWithHeading, columnBandLevels, isBandedOrHeaderRow, getBandComponent, BAND_FILL_LEVEL_CELL, BAND_HEADER_CELL, BAND_GROUP_CELL, BAND_EMPTY_CELL, BAND_DUPLICATE_RENDER, isBandedTableRow, TABLE_BAND_TYPE, bandLevelsVisibility, columnVisibleIntervals, tableRowsWithBands, tableHeaderColumnChainsWithBands, isFilterTableCell, getColumnFilterConfig, getColumnFilterOperations, getSelectedFilterOperation, isFilterTableRow, TABLE_FILTER_TYPE, tableHeaderRowsWithFilter, TOP_POSITION, isFilterValueEmpty, isEditTableCell, isAddedTableRow, getRowChange, isEditTableRow, TABLE_ADDED_TYPE, TABLE_EDIT_TYPE, tableRowsWithEditing, isHeadingEditCommandsTableCell, isEditCommandsTableCell, TABLE_EDIT_COMMAND_TYPE, tableColumnsWithEditing, tableColumnsWithWidths, tableColumnsWithDraftWidths, changeTableColumnWidth, draftTableColumnWidth, cancelTableColumnWidthDraft, pageCount, getGroupCellTargetIndex, groupingPanelItems, getAvailableFilterOperationsGetter, toggleColumn, tableDataColumnsExist, toggleRowExpanded, expandedTreeRows, customTreeRowIdGetter, customTreeRowLevelKeyGetter, isTreeRowLeafGetter, getTreeRowLevelGetter, collapsedTreeRowsGetter, unwrappedCustomTreeRows, customTreeRowsWithMeta, isTreeTableCell, changeSearchValue, searchFilterExpression, calculateFixedColumnProps, isFixedTableRow, tableHeaderRowsWithFixed, tableHeaderColumnChainsWithFixed, tableColumnsWithFixed, prepareGroupSummaryItems, defaultSummaryCalculator, totalSummaryValues, groupSummaryValues, treeSummaryValues, isTotalSummaryTableCell, isGroupSummaryTableCell, isFooterSummary, isTreeSummaryTableCell, isTotalSummaryTableRow, isGroupSummaryTableRow, isTreeSummaryTableRow, TABLE_TREE_SUMMARY_TYPE, TABLE_GROUP_SUMMARY_TYPE, TABLE_TOTAL_SUMMARY_TYPE, tableRowsWithSummaries, tableRowsWithTotalSummaries, getReferenceIndex, needFetchMorePages, getRequestMeta, shouldSendRequest, emptyVirtualRows, trimRowsToInterval, getAvailableRowCount, virtualRowsWithCache, plainRows, loadedRowsStart, rowsWithEditingCells, columnsWithEditingCells, getAnimations, filterActiveAnimations, evalAnimations, TABLE_STUB_TYPE, getViewport, getCollapsedGrids, getColumnWidthGetter, getTopRowId, getScrollTop, isStubTableCell, BOTTOM_POSITION, checkColumnWidths } from '@devexpress/dx-grid-core';\nimport { getMessagesFormatter, memoize, shallowEqual } from '@devexpress/dx-core';\nimport { createPortal, findDOMNode } from 'react-dom';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\n\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n}\n\nvar showColumnWhenGroupedGetter = function (showColumnsWhenGrouped, columnExtensions) {\n  if (columnExtensions === void 0) {\n    columnExtensions = [];\n  }\n\n  var map = columnExtensions.reduce(function (acc, columnExtension) {\n    acc[columnExtension.columnName] = columnExtension.showWhenGrouped;\n    return acc;\n  }, {});\n  return function (columnName) {\n    return map[columnName] || showColumnsWhenGrouped;\n  };\n};\n/** @internal */\n\n\nvar TableColumnsWithGrouping = memo(function (_a) {\n  var indentColumnWidth = _a.indentColumnWidth,\n      showColumnsWhenGrouped = _a.showColumnsWhenGrouped,\n      columnExtensions = _a.columnExtensions;\n\n  var tableColumnsComputed = function (_a) {\n    var columns = _a.columns,\n        tableColumns = _a.tableColumns,\n        grouping = _a.grouping,\n        draftGrouping = _a.draftGrouping;\n    return tableColumnsWithGrouping(columns, tableColumns, grouping, draftGrouping, indentColumnWidth, showColumnWhenGroupedGetter(showColumnsWhenGrouped, columnExtensions));\n  };\n\n  return createElement(Plugin, null, createElement(Getter, {\n    name: \"tableColumns\",\n    computed: tableColumnsComputed\n  }));\n});\nTableColumnsWithGrouping.defaultProps = {\n  indentColumnWidth: 0\n};\nvar GridCoreGetters = memo(function (_a) {\n  var rows = _a.rows,\n      columns = _a.columns,\n      getRowId = _a.getRowId,\n      getCellValue = _a.getCellValue;\n  return createElement(Plugin, null, createElement(Getter, {\n    name: \"rows\",\n    value: rows\n  }), createElement(Getter, {\n    name: \"getRowId\",\n    value: rowIdGetter(getRowId, rows)\n  }), createElement(Getter, {\n    name: \"columns\",\n    value: columns\n  }), createElement(Getter, {\n    name: \"getCellValue\",\n    value: cellValueGetter(getCellValue, columns)\n  }));\n});\nvar TableColumnsWithDataRowsGetter = memo(function (_a) {\n  var columnExtensions = _a.columnExtensions;\n  var tableColumnsComputed = useCallback(function (_a) {\n    var columns = _a.columns;\n    return tableColumnsWithDataRows(columns, columnExtensions);\n  }, [columnExtensions]);\n  checkTableColumnExtensions(columnExtensions);\n  return createElement(Plugin, null, createElement(Getter, {\n    name: \"tableColumns\",\n    computed: tableColumnsComputed\n  }));\n});\n\nvar visibleTableColumnsComputed = function (_a) {\n  var tableColumns = _a.tableColumns,\n      hiddenColumnNames = _a.hiddenColumnNames;\n  return visibleTableColumns(tableColumns, hiddenColumnNames);\n};\n/** @internal */\n\n\nvar VisibleTableColumns = memo(function (_a) {\n  var hiddenColumnNames = _a.hiddenColumnNames;\n  return createElement(Plugin, null, createElement(Getter, {\n    name: \"hiddenColumnNames\",\n    value: hiddenColumnNames\n  }), createElement(Getter, {\n    name: \"tableColumns\",\n    computed: visibleTableColumnsComputed\n  }));\n});\nVisibleTableColumns.defaultProps = {\n  hiddenColumnNames: []\n};\n/** @internal */\n\nvar OrderedTableColumns = function (_a) {\n  var order = _a.order;\n\n  var columnsComputed = function (_a) {\n    var tableColumns = _a.tableColumns;\n    return orderedColumns(tableColumns, order);\n  };\n\n  return createElement(Plugin, null, createElement(Getter, {\n    name: \"tableColumns\",\n    computed: columnsComputed\n  }));\n};\n\nOrderedTableColumns.defaultProps = {\n  order: []\n};\n\nvar GridCore = /*#__PURE__*/function (_super) {\n  __extends(GridCore, _super);\n\n  function GridCore() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GridCore.prototype.render = function () {\n    var _a = this.props,\n        Root = _a.rootComponent,\n        restProps = __rest(_a, [\"rootComponent\"]);\n\n    return createElement(Plugin, null, createElement(Getter, {\n      name: \"skip\",\n      value: 0\n    }), createElement(Getter, {\n      name: \"loadedRowsStart\",\n      value: 0\n    }), createElement(GridCoreGetters, __assign({}, restProps)), createElement(Template, {\n      name: \"root\"\n    }, createElement(Root, null, createElement(TemplatePlaceholder, {\n      name: \"header\"\n    }), createElement(TemplatePlaceholder, {\n      name: \"body\"\n    }), createElement(TemplatePlaceholder, {\n      name: \"footer\"\n    }))));\n  };\n\n  return GridCore;\n}(PureComponent);\n\nvar GridBase = function (_a) {\n  var rows = _a.rows,\n      columns = _a.columns,\n      getRowId = _a.getRowId,\n      getCellValue = _a.getCellValue,\n      rootComponent = _a.rootComponent,\n      children = _a.children;\n  return createElement(PluginHost, null, createElement(GridCore, {\n    rows: rows,\n    columns: columns,\n    getRowId: getRowId,\n    getCellValue: getCellValue,\n    rootComponent: rootComponent\n  }), children);\n};\n/***\r\n * The Grid is a root container component designed to process and display data specified via\r\n * the `rows` property. You can configure columns using the `columns` property. The Grid's\r\n * functionality  is implemented in several plugins specified as child components.\r\n * See the plugins concept for details.\r\n * */\n\n\nvar Grid = GridBase;\nvar pluginDependencies = [{\n  name: 'TableColumnVisibility'\n}, {\n  name: 'Toolbar'\n}];\n\nvar ColumnChooserBase = /*#__PURE__*/function (_super) {\n  __extends(ColumnChooserBase, _super);\n\n  function ColumnChooserBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      visible: false\n    };\n    _this.handleToggle = _this.handleToggle.bind(_this);\n    _this.handleHide = _this.handleHide.bind(_this);\n    _this.setButtonRef = _this.setButtonRef.bind(_this);\n    return _this;\n  }\n\n  ColumnChooserBase.prototype.setButtonRef = function (button) {\n    this.button = button;\n  };\n\n  ColumnChooserBase.prototype.handleToggle = function () {\n    var visible = this.state.visible;\n    this.setState({\n      visible: !visible\n    });\n  };\n\n  ColumnChooserBase.prototype.handleHide = function () {\n    this.setState({\n      visible: false\n    });\n  };\n\n  ColumnChooserBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        Overlay = _a.overlayComponent,\n        Container = _a.containerComponent,\n        Item = _a.itemComponent,\n        ToggleButton = _a.toggleButtonComponent,\n        messages = _a.messages;\n    var getMessage = getMessagesFormatter(messages);\n    var visible = this.state.visible;\n    return createElement(Plugin, {\n      name: \"ColumnChooser\",\n      dependencies: pluginDependencies\n    }, createElement(Template, {\n      name: \"toolbarContent\"\n    }, createElement(TemplatePlaceholder, null), createElement(TemplateConnector, null, function (_a, _b) {\n      var columns = _a.columns,\n          hiddenColumnNames = _a.hiddenColumnNames,\n          isColumnTogglingEnabled = _a.isColumnTogglingEnabled;\n      var toggleColumnVisibility = _b.toggleColumnVisibility;\n      return createElement(Fragment, null, createElement(ToggleButton, {\n        buttonRef: _this.setButtonRef,\n        onToggle: _this.handleToggle,\n        getMessage: getMessage,\n        active: visible\n      }), createElement(Overlay, {\n        visible: visible,\n        target: _this.button,\n        onHide: _this.handleHide\n      }, createElement(Container, null, columnChooserItems(columns, hiddenColumnNames).map(function (item) {\n        var columnName = item.column.name;\n        var togglingEnabled = isColumnTogglingEnabled(columnName);\n        return createElement(Item, {\n          key: columnName,\n          item: item,\n          disabled: !togglingEnabled,\n          onToggle: function () {\n            return toggleColumnVisibility(columnName);\n          }\n        });\n      }))));\n    })));\n  };\n\n  ColumnChooserBase.defaultProps = {\n    messages: {}\n  };\n  ColumnChooserBase.components = {\n    overlayComponent: 'Overlay',\n    containerComponent: 'Container',\n    itemComponent: 'Item',\n    toggleButtonComponent: 'ToggleButton'\n  };\n  return ColumnChooserBase;\n}(PureComponent);\n/***\r\n * The ColumnChooser plugin allows a user to toggle grid columns' visibility at runtime.\r\n * The column chooser lists columns with checkboxes that control a corresponding\r\n * column's visibility.\r\n * */\n\n\nvar ColumnChooser = ColumnChooserBase;\n\nvar columnExtensionValueGetter = function (columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'filteringEnabled', defaultValue);\n};\n\nvar filterExpressionComputed = function (_a) {\n  var filters = _a.filters,\n      filterExpressionValue = _a.filterExpression;\n  return filterExpression(filters, filterExpressionValue);\n};\n\nvar FilteringStateBase = /*#__PURE__*/function (_super) {\n  __extends(FilteringStateBase, _super);\n\n  function FilteringStateBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      filters: props.filters || props.defaultFilters\n    };\n    var stateHelper = createStateHelper(_this, {\n      filters: function () {\n        var onFiltersChange = _this.props.onFiltersChange;\n        return onFiltersChange;\n      }\n    });\n    _this.changeColumnFilter = stateHelper.applyFieldReducer.bind(stateHelper, 'filters', changeColumnFilter);\n    return _this;\n  } // tslint:disable-next-line:member-ordering\n\n\n  FilteringStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.filters,\n        filters = _a === void 0 ? prevState.filters : _a;\n    return {\n      filters: filters\n    };\n  };\n\n  FilteringStateBase.prototype.render = function () {\n    var filters = this.state.filters;\n    var _a = this.props,\n        columnExtensions = _a.columnExtensions,\n        columnFilteringEnabled = _a.columnFilteringEnabled;\n    return createElement(Plugin, {\n      name: \"FilteringState\"\n    }, createElement(Getter, {\n      name: \"filters\",\n      value: filters\n    }), createElement(Getter, {\n      name: \"filterExpression\",\n      computed: filterExpressionComputed\n    }), createElement(Getter, {\n      name: \"isColumnFilteringEnabled\",\n      value: columnExtensionValueGetter(columnExtensions, columnFilteringEnabled)\n    }), createElement(Action, {\n      name: \"changeColumnFilter\",\n      action: this.changeColumnFilter\n    }));\n  };\n\n  FilteringStateBase.defaultProps = {\n    defaultFilters: [],\n    columnFilteringEnabled: true\n  };\n  return FilteringStateBase;\n}(PureComponent);\n/** A plugin that manages the filtering state. */\n\n\nvar FilteringState = FilteringStateBase;\nvar pluginDependencies$1 = [{\n  name: 'FilteringState',\n  optional: true\n}, {\n  name: 'SearchState',\n  optional: true\n}];\n\nvar getCollapsedRowsComputed = function (_a) {\n  var rows = _a.rows;\n  return filteredCollapsedRowsGetter(rows);\n};\n\nvar unwrappedRowsComputed = function (_a) {\n  var rows = _a.rows;\n  return unwrappedFilteredRows(rows);\n};\n\nvar IntegratedFilteringBase = /*#__PURE__*/function (_super) {\n  __extends(IntegratedFilteringBase, _super);\n\n  function IntegratedFilteringBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  IntegratedFilteringBase.prototype.render = function () {\n    var columnExtensions = this.props.columnExtensions;\n\n    var getColumnPredicate = function (columnName) {\n      return getColumnExtension(columnExtensions, columnName).predicate;\n    };\n\n    var rowsComputed = function (_a) {\n      var rows = _a.rows,\n          filterExpression = _a.filterExpression,\n          getCellValue = _a.getCellValue,\n          getRowLevelKey = _a.getRowLevelKey,\n          getCollapsedRows = _a.getCollapsedRows;\n      return filteredRows(rows, filterExpression, getCellValue, getColumnPredicate, getRowLevelKey, getCollapsedRows);\n    };\n\n    return createElement(Plugin, {\n      name: \"IntegratedFiltering\",\n      dependencies: pluginDependencies$1\n    }, createElement(Getter, {\n      name: \"rows\",\n      computed: rowsComputed\n    }), createElement(Getter, {\n      name: \"getCollapsedRows\",\n      computed: getCollapsedRowsComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: unwrappedRowsComputed\n    }));\n  };\n\n  return IntegratedFilteringBase;\n}(PureComponent);\n\nIntegratedFilteringBase.defaultPredicate = defaultFilterPredicate;\nvar IntegratedFiltering = IntegratedFilteringBase;\n\nvar columnExtensionValueGetter$1 = function (columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'editingEnabled', defaultValue);\n};\n\nvar EditingStateBase = /*#__PURE__*/function (_super) {\n  __extends(EditingStateBase, _super);\n\n  function EditingStateBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    var rowChanges = props.rowChanges || props.defaultRowChanges;\n    var addedRows = props.addedRows || props.defaultAddedRows;\n\n    var getRowChanges = function () {\n      var stateRowChanges = _this.state.rowChanges;\n      return stateRowChanges;\n    };\n\n    var getAddedRows = function () {\n      var stateAddedRows = _this.state.addedRows;\n      return stateAddedRows;\n    };\n\n    _this.state = {\n      addedRows: addedRows,\n      rowChanges: rowChanges,\n      editingRowIds: props.editingRowIds || props.defaultEditingRowIds,\n      deletedRowIds: props.deletedRowIds || props.defaultDeletedRowIds,\n      editingCells: props.editingCells || props.defaultEditingCells\n    };\n    var stateHelper = createStateHelper(_this, {\n      editingRowIds: function () {\n        var onEditingRowIdsChange = _this.props.onEditingRowIdsChange;\n        return onEditingRowIdsChange;\n      },\n      editingCells: function () {\n        var onEditingCellsChange = _this.props.onEditingCellsChange;\n        return onEditingCellsChange;\n      },\n      addedRows: function () {\n        var onAddedRowsChange = _this.props.onAddedRowsChange;\n        return onAddedRowsChange;\n      },\n      rowChanges: function () {\n        var onRowChangesChange = _this.props.onRowChangesChange;\n        return onRowChangesChange;\n      },\n      deletedRowIds: function () {\n        var onDeletedRowIdsChange = _this.props.onDeletedRowIdsChange;\n        return onDeletedRowIdsChange;\n      }\n    });\n    _this.startEditRows = stateHelper.applyFieldReducer.bind(stateHelper, 'editingRowIds', startEditRows);\n    _this.stopEditRows = stateHelper.applyFieldReducer.bind(stateHelper, 'editingRowIds', stopEditRows);\n    _this.startEditCells = stateHelper.applyFieldReducer.bind(stateHelper, 'editingCells', startEditCells);\n    _this.stopEditCells = stateHelper.applyFieldReducer.bind(stateHelper, 'editingCells', stopEditCells);\n    _this.changeRow = stateHelper.applyFieldReducer.bind(stateHelper, 'rowChanges', changeRow);\n    _this.cancelChangedRows = stateHelper.applyFieldReducer.bind(stateHelper, 'rowChanges', cancelChanges);\n\n    _this.commitChangedRows = function (_a) {\n      var rowIds = _a.rowIds;\n      var onCommitChanges = _this.props.onCommitChanges;\n      onCommitChanges({\n        changed: changedRowsByIds(getRowChanges(), rowIds)\n      });\n\n      _this.cancelChangedRows({\n        rowIds: rowIds\n      });\n    };\n\n    _this.addRow = stateHelper.applyFieldReducer.bind(stateHelper, 'addedRows', addRow);\n    _this.changeAddedRow = stateHelper.applyFieldReducer.bind(stateHelper, 'addedRows', changeAddedRow);\n    _this.cancelAddedRows = stateHelper.applyFieldReducer.bind(stateHelper, 'addedRows', cancelAddedRows);\n\n    _this.commitAddedRows = function (_a) {\n      var rowIds = _a.rowIds;\n      var onCommitChanges = _this.props.onCommitChanges;\n      onCommitChanges({\n        added: addedRowsByIds(getAddedRows(), rowIds)\n      });\n\n      _this.cancelAddedRows({\n        rowIds: rowIds\n      });\n    };\n\n    _this.deleteRows = stateHelper.applyFieldReducer.bind(stateHelper, 'deletedRowIds', deleteRows);\n    _this.cancelDeletedRows = stateHelper.applyFieldReducer.bind(stateHelper, 'deletedRowIds', cancelDeletedRows);\n\n    _this.commitDeletedRows = function (_a) {\n      var rowIds = _a.rowIds;\n      var onCommitChanges = _this.props.onCommitChanges;\n      onCommitChanges({\n        deleted: rowIds\n      });\n\n      _this.cancelDeletedRows({\n        rowIds: rowIds\n      });\n    };\n\n    return _this;\n  }\n\n  EditingStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.editingRowIds,\n        editingRowIds = _a === void 0 ? prevState.editingRowIds : _a,\n        _b = nextProps.editingCells,\n        editingCells = _b === void 0 ? prevState.editingCells : _b,\n        _c = nextProps.rowChanges,\n        rowChanges = _c === void 0 ? prevState.rowChanges : _c,\n        _d = nextProps.addedRows,\n        addedRows = _d === void 0 ? prevState.addedRows : _d,\n        _e = nextProps.deletedRowIds,\n        deletedRowIds = _e === void 0 ? prevState.deletedRowIds : _e;\n    return {\n      editingRowIds: editingRowIds,\n      editingCells: editingCells,\n      rowChanges: rowChanges,\n      addedRows: addedRows,\n      deletedRowIds: deletedRowIds\n    };\n  };\n\n  EditingStateBase.prototype.render = function () {\n    var _a = this.props,\n        createRowChange = _a.createRowChange,\n        columnExtensions = _a.columnExtensions,\n        columnEditingEnabled = _a.columnEditingEnabled;\n    var _b = this.state,\n        editingRowIds = _b.editingRowIds,\n        editingCells = _b.editingCells,\n        rowChanges = _b.rowChanges,\n        addedRows = _b.addedRows,\n        deletedRowIds = _b.deletedRowIds;\n    return createElement(Plugin, {\n      name: \"EditingState\"\n    }, createElement(Getter, {\n      name: \"createRowChange\",\n      value: createRowChangeGetter(createRowChange, columnExtensions)\n    }), createElement(Getter, {\n      name: \"editingRowIds\",\n      value: editingRowIds\n    }), createElement(Action, {\n      name: \"startEditRows\",\n      action: this.startEditRows\n    }), createElement(Action, {\n      name: \"stopEditRows\",\n      action: this.stopEditRows\n    }), createElement(Getter, {\n      name: \"editingCells\",\n      value: editingCells\n    }), createElement(Action, {\n      name: \"startEditCells\",\n      action: this.startEditCells\n    }), createElement(Action, {\n      name: \"stopEditCells\",\n      action: this.stopEditCells\n    }), createElement(Getter, {\n      name: \"rowChanges\",\n      value: rowChanges\n    }), createElement(Action, {\n      name: \"changeRow\",\n      action: this.changeRow\n    }), createElement(Action, {\n      name: \"cancelChangedRows\",\n      action: this.cancelChangedRows\n    }), createElement(Action, {\n      name: \"commitChangedRows\",\n      action: this.commitChangedRows\n    }), createElement(Getter, {\n      name: \"addedRows\",\n      value: addedRows\n    }), createElement(Action, {\n      name: \"addRow\",\n      action: this.addRow\n    }), createElement(Action, {\n      name: \"changeAddedRow\",\n      action: this.changeAddedRow\n    }), createElement(Action, {\n      name: \"cancelAddedRows\",\n      action: this.cancelAddedRows\n    }), createElement(Action, {\n      name: \"commitAddedRows\",\n      action: this.commitAddedRows\n    }), createElement(Getter, {\n      name: \"deletedRowIds\",\n      value: deletedRowIds\n    }), createElement(Action, {\n      name: \"deleteRows\",\n      action: this.deleteRows\n    }), createElement(Action, {\n      name: \"cancelDeletedRows\",\n      action: this.cancelDeletedRows\n    }), createElement(Action, {\n      name: \"commitDeletedRows\",\n      action: this.commitDeletedRows\n    }), createElement(Getter, {\n      name: \"isColumnEditingEnabled\",\n      value: columnExtensionValueGetter$1(columnExtensions, columnEditingEnabled)\n    }));\n  };\n\n  EditingStateBase.defaultProps = {\n    columnEditingEnabled: true,\n    defaultEditingRowIds: [],\n    defaultEditingCells: [],\n    defaultRowChanges: {},\n    defaultAddedRows: [],\n    defaultDeletedRowIds: []\n  };\n  return EditingStateBase;\n}(PureComponent);\n/***\r\n * A plugin that manages grid rows' editing state. It arranges grid rows\r\n * by different lists depending on a row's state.\r\n * */\n\n\nvar EditingState = EditingStateBase;\n\nvar PagingStateBase = /*#__PURE__*/function (_super) {\n  __extends(PagingStateBase, _super);\n\n  function PagingStateBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      currentPage: props.currentPage || props.defaultCurrentPage,\n      pageSize: props.pageSize !== undefined ? props.pageSize : props.defaultPageSize\n    };\n    var stateHelper = createStateHelper(_this, {\n      currentPage: function () {\n        var onCurrentPageChange = _this.props.onCurrentPageChange;\n        return onCurrentPageChange;\n      },\n      pageSize: function () {\n        var onPageSizeChange = _this.props.onPageSizeChange;\n        return onPageSizeChange;\n      }\n    });\n    _this.setCurrentPage = stateHelper.applyFieldReducer.bind(stateHelper, 'currentPage', setCurrentPage);\n    _this.setPageSize = stateHelper.applyFieldReducer.bind(stateHelper, 'pageSize', setPageSize);\n    return _this;\n  }\n\n  PagingStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.currentPage,\n        currentPage = _a === void 0 ? prevState.currentPage : _a,\n        _b = nextProps.pageSize,\n        pageSize = _b === void 0 ? prevState.pageSize : _b;\n    return {\n      currentPage: currentPage,\n      pageSize: pageSize\n    };\n  };\n\n  PagingStateBase.prototype.render = function () {\n    var _a = this.state,\n        pageSize = _a.pageSize,\n        currentPage = _a.currentPage;\n    return createElement(Plugin, {\n      name: \"PagingState\"\n    }, createElement(Getter, {\n      name: \"currentPage\",\n      value: currentPage\n    }), createElement(Getter, {\n      name: \"pageSize\",\n      value: pageSize\n    }), createElement(Action, {\n      name: \"setCurrentPage\",\n      action: this.setCurrentPage\n    }), createElement(Action, {\n      name: \"setPageSize\",\n      action: this.setPageSize\n    }));\n  };\n\n  PagingStateBase.defaultProps = {\n    defaultPageSize: 10,\n    defaultCurrentPage: 0\n  };\n  return PagingStateBase;\n}(PureComponent);\n/***\r\n * A plugin that manages the paging state. It controls the total page count depending on the\r\n * total row count and the specified page size, controls the currently selected page number\r\n * and changes it in response to the corresponding actions.\r\n * */\n\n\nvar PagingState = PagingStateBase;\nvar pluginDependencies$2 = [{\n  name: 'PagingState'\n}];\n\nvar rowsWithHeadersComputed = function (_a) {\n  var rows = _a.rows,\n      pageSize = _a.pageSize,\n      getRowLevelKey = _a.getRowLevelKey;\n  return rowsWithPageHeaders(rows, pageSize, getRowLevelKey);\n};\n\nvar totalCountComputed = function (_a) {\n  var rows = _a.rows;\n  return rowCount(rows);\n};\n\nvar paginatedRowsComputed = function (_a) {\n  var rows = _a.rows,\n      pageSize = _a.pageSize,\n      page = _a.currentPage;\n  return paginatedRows(rows, pageSize, page);\n};\n\nvar currentPageComputed = function (_a, _b) {\n  var page = _a.currentPage,\n      totalCount = _a.totalCount,\n      pageSize = _a.pageSize;\n  var setCurrentPage = _b.setCurrentPage;\n  return currentPage(page, totalCount, pageSize, setCurrentPage);\n}; // eslint-disable-next-line react/prefer-stateless-function\n\n\nvar IntegratedPagingBase = /*#__PURE__*/function (_super) {\n  __extends(IntegratedPagingBase, _super);\n\n  function IntegratedPagingBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  IntegratedPagingBase.prototype.render = function () {\n    return createElement(Plugin, {\n      name: \"IntegratedPaging\",\n      dependencies: pluginDependencies$2\n    }, createElement(Getter, {\n      name: \"rows\",\n      computed: rowsWithHeadersComputed\n    }), createElement(Getter, {\n      name: \"totalCount\",\n      computed: totalCountComputed\n    }), createElement(Getter, {\n      name: \"currentPage\",\n      computed: currentPageComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: paginatedRowsComputed\n    }));\n  };\n\n  return IntegratedPagingBase;\n}(PureComponent);\n/***\r\n * A plugin that performs built-in data paging. It also changes the current page if the provided\r\n * one cannot be applied due to fewer available pages.\r\n * */\n\n\nvar IntegratedPaging = IntegratedPagingBase;\nvar pluginDependencies$3 = [{\n  name: 'PagingState'\n}];\n\nvar CustomPagingBase = /*#__PURE__*/function (_super) {\n  __extends(CustomPagingBase, _super);\n\n  function CustomPagingBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CustomPagingBase.prototype.render = function () {\n    var totalCount = this.props.totalCount;\n    return createElement(Plugin, {\n      name: \"CustomPaging\",\n      dependencies: pluginDependencies$3\n    }, createElement(Getter, {\n      name: \"totalCount\",\n      value: totalCount\n    }));\n  };\n\n  CustomPagingBase.defaultProps = {\n    totalCount: 0\n  };\n  return CustomPagingBase;\n}(PureComponent);\n/** A plugin that allows implementing a custom totalCount calculation logic. */\n\n\nvar CustomPaging = CustomPagingBase;\nvar dependencies = [{\n  name: 'SortingState',\n  optional: true\n}];\n\nvar columnExtensionValueGetter$2 = function (columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'groupingEnabled', defaultValue);\n};\n\nvar GroupingStateBase = /*#__PURE__*/function (_super) {\n  __extends(GroupingStateBase, _super);\n\n  function GroupingStateBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      grouping: props.grouping || props.defaultGrouping,\n      draftGrouping: null,\n      expandedGroups: props.expandedGroups || props.defaultExpandedGroups\n    };\n    _this.stateHelper = createStateHelper(_this, {\n      grouping: function () {\n        var onGroupingChange = _this.props.onGroupingChange;\n        return onGroupingChange;\n      },\n      expandedGroups: function () {\n        var onExpandedGroupsChange = _this.props.onExpandedGroupsChange;\n        return onExpandedGroupsChange;\n      }\n    });\n    _this.changeColumnGrouping = _this.changeColumnGrouping.bind(_this);\n    _this.toggleGroupExpanded = _this.stateHelper.applyReducer.bind(_this.stateHelper, toggleExpandedGroups);\n    _this.draftColumnGrouping = _this.stateHelper.applyReducer.bind(_this.stateHelper, draftColumnGrouping);\n    _this.cancelColumnGroupingDraft = _this.stateHelper.applyReducer.bind(_this.stateHelper, cancelColumnGroupingDraft);\n    _this.changeColumnSorting = _this.changeColumnSorting.bind(_this);\n    return _this;\n  }\n\n  GroupingStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.grouping,\n        grouping = _a === void 0 ? prevState.grouping : _a,\n        _b = nextProps.expandedGroups,\n        expandedGroups = _b === void 0 ? prevState.expandedGroups : _b;\n    return {\n      grouping: grouping,\n      expandedGroups: expandedGroups\n    };\n  };\n\n  GroupingStateBase.prototype.changeColumnSorting = function (_a, _b, _c) {\n    var sorting = _b.sorting;\n    var changeColumnSorting = _c.changeColumnSorting;\n\n    var columnName = _a.columnName,\n        keepOther = _a.keepOther,\n        restParams = __rest(_a, [\"columnName\", \"keepOther\"]);\n\n    var grouping = this.state.grouping;\n    var groupingIndex = grouping.findIndex(function (columnGrouping) {\n      return columnGrouping.columnName === columnName;\n    });\n\n    if (groupingIndex === -1) {\n      changeColumnSorting(__assign({\n        columnName: columnName,\n        keepOther: keepOther || grouping.map(function (columnGrouping) {\n          return columnGrouping.columnName;\n        })\n      }, restParams));\n      return false;\n    }\n\n    var sortIndex = adjustSortIndex(groupingIndex, grouping, sorting);\n    changeColumnSorting(__assign({\n      columnName: columnName,\n      sortIndex: sortIndex,\n      keepOther: true\n    }, restParams));\n    return false;\n  };\n\n  GroupingStateBase.prototype.changeColumnGrouping = function (_a, getters, actions) {\n    var columnName = _a.columnName,\n        groupIndex = _a.groupIndex;\n    this.stateHelper.applyReducer(changeColumnGrouping, {\n      columnName: columnName,\n      groupIndex: groupIndex\n    }, function (nextState, state) {\n      var grouping = nextState.grouping;\n      var prevGrouping = state.grouping;\n      var sorting = getters.sorting;\n      var changeColumnSorting = actions.changeColumnSorting;\n      if (!sorting) return;\n      var columnSortingIndex = sorting.findIndex(function (columnSorting) {\n        return columnSorting.columnName === columnName;\n      });\n      var prevGroupingIndex = prevGrouping.findIndex(function (columnGrouping) {\n        return columnGrouping.columnName === columnName;\n      });\n      var groupingIndex = grouping.findIndex(function (columnGrouping) {\n        return columnGrouping.columnName === columnName;\n      });\n      if (columnSortingIndex === -1 || prevGroupingIndex === prevGrouping.length - 1 && groupingIndex === -1) return;\n      var sortIndex = adjustSortIndex(groupingIndex === -1 ? grouping.length : groupingIndex, grouping, sorting);\n      if (columnSortingIndex === sortIndex) return;\n      changeColumnSorting(__assign({\n        sortIndex: sortIndex,\n        keepOther: true\n      }, sorting[columnSortingIndex]));\n    });\n  };\n\n  GroupingStateBase.prototype.render = function () {\n    var _a = this.state,\n        grouping = _a.grouping,\n        draftGrouping = _a.draftGrouping,\n        expandedGroups = _a.expandedGroups;\n    var _b = this.props,\n        columnExtensions = _b.columnExtensions,\n        columnGroupingEnabled = _b.columnGroupingEnabled;\n    return createElement(Plugin, {\n      name: \"GroupingState\",\n      dependencies: dependencies\n    }, createElement(Getter, {\n      name: \"grouping\",\n      value: grouping\n    }), createElement(Getter, {\n      name: \"draftGrouping\",\n      value: draftGrouping || grouping\n    }), createElement(Getter, {\n      name: \"isColumnGroupingEnabled\",\n      value: columnExtensionValueGetter$2(columnExtensions, columnGroupingEnabled)\n    }), createElement(Action, {\n      name: \"changeColumnGrouping\",\n      action: this.changeColumnGrouping\n    }), createElement(Action, {\n      name: \"draftColumnGrouping\",\n      action: this.draftColumnGrouping\n    }), createElement(Action, {\n      name: \"cancelColumnGroupingDraft\",\n      action: this.cancelColumnGroupingDraft\n    }), createElement(Getter, {\n      name: \"expandedGroups\",\n      value: expandedGroups\n    }), createElement(Action, {\n      name: \"toggleGroupExpanded\",\n      action: this.toggleGroupExpanded\n    }), createElement(Action, {\n      name: \"changeColumnSorting\",\n      action: this.changeColumnSorting\n    }));\n  };\n\n  GroupingStateBase.defaultProps = {\n    defaultGrouping: [],\n    defaultExpandedGroups: [],\n    columnGroupingEnabled: true\n  };\n  return GroupingStateBase;\n}(PureComponent);\n/***\r\n * A plugin that manages the grouping state. It lists columns used for grouping and stores\r\n * information about expanded/collapsed groups.\r\n * */\n\n\nvar GroupingState = GroupingStateBase;\nvar pluginDependencies$4 = [{\n  name: 'GroupingState'\n}];\n\nvar getCollapsedRowsComputed$1 = function (_a) {\n  var getCollapsedRows = _a.getCollapsedRows;\n  return groupCollapsedRowsGetter(getCollapsedRows);\n};\n\nvar expandedGroupedRowsComputed = function (_a) {\n  var rows = _a.rows,\n      grouping = _a.grouping,\n      expandedGroups = _a.expandedGroups,\n      isExporting = _a.isExporting;\n  return expandedGroupRows(rows, grouping, expandedGroups, isExporting);\n};\n\nvar IntegratedGroupingBase = /*#__PURE__*/function (_super) {\n  __extends(IntegratedGroupingBase, _super);\n\n  function IntegratedGroupingBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  IntegratedGroupingBase.prototype.render = function () {\n    var columnExtensions = this.props.columnExtensions;\n\n    var getColumnCriteria = function (columnName) {\n      return getColumnExtension(columnExtensions, columnName).criteria;\n    };\n\n    var groupedRowsComputed = function (_a) {\n      var rows = _a.rows,\n          grouping = _a.grouping,\n          getCellValue = _a.getCellValue;\n      return groupedRows(rows, grouping, getCellValue, getColumnCriteria);\n    };\n\n    return createElement(Plugin, {\n      name: \"IntegratedGrouping\",\n      dependencies: pluginDependencies$4\n    }, createElement(Getter, {\n      name: \"isGroupRow\",\n      value: groupRowChecker\n    }), createElement(Getter, {\n      name: \"getRowLevelKey\",\n      value: groupRowLevelKeyGetter\n    }), createElement(Getter, {\n      name: \"getCollapsedRows\",\n      computed: getCollapsedRowsComputed$1\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: groupedRowsComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: expandedGroupedRowsComputed\n    }));\n  };\n\n  return IntegratedGroupingBase;\n}(PureComponent);\n/* tslint:disable: max-line-length */\n\n/** A plugin that performs built-in grouping and group expanding/collapsing. */\n\n\nvar IntegratedGrouping = IntegratedGroupingBase;\n/* tslint:enable: max-line-length */\n\nvar pluginDependencies$5 = [{\n  name: 'GroupingState'\n}];\n\nvar getCollapsedRowsComputed$2 = function (_a) {\n  var getCollapsedRows = _a.getCollapsedRows;\n  return groupCollapsedRowsGetter(getCollapsedRows);\n};\n\nvar expandedGroupedRowsComputed$1 = function (_a) {\n  var rows = _a.rows,\n      grouping = _a.grouping,\n      expandedGroups = _a.expandedGroups,\n      isExporting = _a.isExporting;\n  return expandedGroupRows(rows, grouping, expandedGroups, isExporting);\n};\n\nvar getRowIdComputed = function (_a) {\n  var getRowId = _a.getRowId,\n      rows = _a.rows;\n  return customGroupingRowIdGetter(getRowId, rows);\n};\n\nvar CustomGroupingBase = /*#__PURE__*/function (_super) {\n  __extends(CustomGroupingBase, _super);\n\n  function CustomGroupingBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CustomGroupingBase.prototype.render = function () {\n    var _a = this.props,\n        getChildGroups = _a.getChildGroups,\n        appliedGrouping = _a.grouping,\n        appliedExpandedGroups = _a.expandedGroups;\n\n    var groupedRowsComputed = function (_a) {\n      var rows = _a.rows,\n          grouping = _a.grouping;\n      return customGroupedRows(rows, grouping, getChildGroups);\n    };\n\n    return createElement(Plugin, {\n      name: \"CustomGrouping\",\n      dependencies: pluginDependencies$5\n    }, appliedGrouping && createElement(Getter, {\n      name: \"grouping\",\n      value: appliedGrouping\n    }), appliedExpandedGroups && createElement(Getter, {\n      name: \"expandedGroups\",\n      value: appliedExpandedGroups\n    }), createElement(Getter, {\n      name: \"isGroupRow\",\n      value: groupRowChecker\n    }), createElement(Getter, {\n      name: \"getRowLevelKey\",\n      value: groupRowLevelKeyGetter\n    }), createElement(Getter, {\n      name: \"getCollapsedRows\",\n      computed: getCollapsedRowsComputed$2\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: groupedRowsComputed\n    }), createElement(Getter, {\n      name: \"getRowId\",\n      computed: getRowIdComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: expandedGroupedRowsComputed$1\n    }));\n  };\n\n  return CustomGroupingBase;\n}(PureComponent); // tslint:disable-next-line: max-line-length\n\n/** A plugin that converts custom formatted grouped data to a supported format and performs local group expanding/collapsing. */\n\n\nvar CustomGrouping = CustomGroupingBase;\n\nvar SelectionStateBase = /*#__PURE__*/function (_super) {\n  __extends(SelectionStateBase, _super);\n\n  function SelectionStateBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      selection: props.selection || props.defaultSelection\n    };\n    var stateHelper = createStateHelper(_this, {\n      selection: function () {\n        var onSelectionChange = _this.props.onSelectionChange;\n        return onSelectionChange;\n      }\n    });\n    _this.toggleSelection = stateHelper.applyFieldReducer.bind(stateHelper, 'selection', toggleSelection);\n    return _this;\n  }\n\n  SelectionStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.selection,\n        selection = _a === void 0 ? prevState.selection : _a;\n    return {\n      selection: selection\n    };\n  };\n\n  SelectionStateBase.prototype.render = function () {\n    var selection = this.state.selection;\n    return createElement(Plugin, {\n      name: \"SelectionState\"\n    }, createElement(Getter, {\n      name: \"selection\",\n      value: selection\n    }), createElement(Action, {\n      name: \"toggleSelection\",\n      action: this.toggleSelection\n    }));\n  };\n\n  SelectionStateBase.defaultProps = {\n    defaultSelection: []\n  };\n  return SelectionStateBase;\n}(PureComponent);\n/** A plugin that manages the selection state. */\n\n\nvar SelectionState = SelectionStateBase;\n\nvar rowsWithAvailableToSelectComputed = function (_a) {\n  var rows = _a.rows,\n      getRowId = _a.getRowId,\n      isGroupRow = _a.isGroupRow;\n  return rowsWithAvailableToSelect(rows, getRowId, isGroupRow);\n};\n\nvar allSelectedComputed = function (_a) {\n  var rows = _a.rows,\n      selection = _a.selection;\n  return allSelected(rows, selection);\n};\n\nvar someSelectedComputed = function (_a) {\n  var rows = _a.rows,\n      selection = _a.selection;\n  return someSelected(rows, selection);\n};\n\nvar selectAllAvailableComputed = function (_a) {\n  var availableToSelect = _a.rows.availableToSelect;\n  return !!availableToSelect.length;\n};\n\nvar toggleSelectAll = function (state, _a, _b) {\n  var availableToSelect = _a.rows.availableToSelect;\n  var toggleSelection = _b.toggleSelection;\n  toggleSelection({\n    state: state,\n    rowIds: availableToSelect\n  });\n};\n\nvar unwrapRowsComputed = function (_a) {\n  var rows = _a.rows;\n  return unwrapSelectedRows(rows);\n};\n\nvar pluginDependencies$6 = [{\n  name: 'SelectionState'\n}]; // eslint-disable-next-line react/prefer-stateless-function\n\nvar IntegratedSelectionBase = /*#__PURE__*/function (_super) {\n  __extends(IntegratedSelectionBase, _super);\n\n  function IntegratedSelectionBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  IntegratedSelectionBase.prototype.render = function () {\n    return createElement(Plugin, {\n      name: \"IntegratedSelection\",\n      dependencies: pluginDependencies$6\n    }, createElement(Getter, {\n      name: \"rows\",\n      computed: rowsWithAvailableToSelectComputed\n    }), createElement(Getter, {\n      name: \"allSelected\",\n      computed: allSelectedComputed\n    }), createElement(Getter, {\n      name: \"someSelected\",\n      computed: someSelectedComputed\n    }), createElement(Getter, {\n      name: \"selectAllAvailable\",\n      computed: selectAllAvailableComputed\n    }), createElement(Action, {\n      name: \"toggleSelectAll\",\n      action: toggleSelectAll\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: unwrapRowsComputed\n    }));\n  };\n\n  return IntegratedSelectionBase;\n}(PureComponent);\n/* tslint:disable: max-line-length */\n\n/** A plugin that performs built-in selection. */\n\n\nvar IntegratedSelection = IntegratedSelectionBase;\n/* tslint:enable: max-line-length */\n\nvar columnExtensionValueGetter$3 = function (columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'sortingEnabled', defaultValue);\n};\n\nvar SortingStateBase = /*#__PURE__*/function (_super) {\n  __extends(SortingStateBase, _super);\n\n  function SortingStateBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      sorting: props.sorting || props.defaultSorting\n    };\n    var stateHelper = createStateHelper(_this, {\n      sorting: function () {\n        var onSortingChange = _this.props.onSortingChange;\n        return onSortingChange;\n      }\n    });\n    _this.changeColumnSorting = stateHelper.applyReducer.bind(stateHelper, function (prevState, payload) {\n      var _a = _this.props.sorting,\n          sorting = _a === void 0 ? prevState.sorting : _a;\n      var persistentSortedColumns = getPersistentSortedColumns(sorting, props.columnExtensions);\n      var keepOther = calculateKeepOther(prevState.sorting, payload.keepOther, persistentSortedColumns);\n      return changeColumnSorting(prevState, __assign(__assign({}, payload), {\n        keepOther: keepOther\n      }));\n    });\n    return _this;\n  }\n\n  SortingStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.sorting,\n        sorting = _a === void 0 ? prevState.sorting : _a;\n    return {\n      sorting: sorting\n    };\n  };\n\n  SortingStateBase.prototype.render = function () {\n    var sorting = this.state.sorting;\n    var _a = this.props,\n        columnExtensions = _a.columnExtensions,\n        columnSortingEnabled = _a.columnSortingEnabled;\n    return createElement(Plugin, {\n      name: \"SortingState\"\n    }, createElement(Getter, {\n      name: \"sorting\",\n      value: sorting\n    }), createElement(Getter, {\n      name: \"isColumnSortingEnabled\",\n      value: columnExtensionValueGetter$3(columnExtensions, columnSortingEnabled)\n    }), createElement(Action, {\n      name: \"changeColumnSorting\",\n      action: this.changeColumnSorting\n    }));\n  };\n\n  SortingStateBase.defaultProps = {\n    defaultSorting: [],\n    columnSortingEnabled: true\n  };\n  return SortingStateBase;\n}(PureComponent); // tslint:disable-next-line: max-line-length\n\n/** A plugin that manages the sorting state. It controls the list of columns that participate in sorting. */\n\n\nvar SortingState = SortingStateBase;\nvar pluginDependencies$7 = [{\n  name: 'SortingState'\n}];\n\nvar IntegratedSortingBase = /*#__PURE__*/function (_super) {\n  __extends(IntegratedSortingBase, _super);\n\n  function IntegratedSortingBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  IntegratedSortingBase.prototype.render = function () {\n    var columnExtensions = this.props.columnExtensions;\n\n    var getColumnCompare = function (columnName) {\n      return getColumnExtension(columnExtensions, columnName).compare;\n    };\n\n    var rowsComputed = function (_a) {\n      var rows = _a.rows,\n          sorting = _a.sorting,\n          getCellValue = _a.getCellValue,\n          isGroupRow = _a.isGroupRow,\n          getRowLevelKey = _a.getRowLevelKey;\n      return sortedRows(rows, sorting, getCellValue, getColumnCompare, isGroupRow, getRowLevelKey);\n    };\n\n    return createElement(Plugin, {\n      name: \"IntegratedSorting\",\n      dependencies: pluginDependencies$7\n    }, createElement(Getter, {\n      name: \"rows\",\n      computed: rowsComputed\n    }));\n  };\n\n  return IntegratedSortingBase;\n}(PureComponent);\n/** A plugin that performs built-in data sorting. */\n\n\nvar IntegratedSorting = IntegratedSortingBase;\n\nvar getTargetColumns = function (payload, columns) {\n  return payload.filter(function (item) {\n    return item.type === 'column';\n  }).map(function (item) {\n    return columns.find(function (column) {\n      return column.name === item.columnName;\n    });\n  });\n}; // tslint:disable-next-line: max-line-length\n\n\nvar DragDropProviderBase = /*#__PURE__*/function (_super) {\n  __extends(DragDropProviderBase, _super);\n\n  function DragDropProviderBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      payload: null,\n      clientOffset: null\n    };\n\n    _this.change = function (_a) {\n      var payload = _a.payload,\n          clientOffset = _a.clientOffset;\n      return _this.setState({\n        payload: payload,\n        clientOffset: clientOffset\n      });\n    };\n\n    return _this;\n  }\n\n  DragDropProviderBase.prototype.componentDidMount = function () {\n    this.bodyRef = document.body;\n  };\n\n  DragDropProviderBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        Container = _a.containerComponent,\n        Column = _a.columnComponent;\n    var _b = this.state,\n        payload = _b.payload,\n        clientOffset = _b.clientOffset;\n    return createElement(Plugin, {\n      name: \"DragDropProvider\"\n    }, createElement(Getter, {\n      name: \"draggingEnabled\",\n      value: true\n    }), createElement(Template, {\n      name: \"root\"\n    }, createElement(DragDropProvider$1, {\n      onChange: this.change\n    }, createElement(TemplatePlaceholder, null)), payload && createElement(TemplateConnector, null, function (_a) {\n      var columns = _a.columns;\n      return createPortal(createElement(Container, {\n        clientOffset: clientOffset\n      }, getTargetColumns(payload, columns).map(function (column) {\n        return createElement(Column, {\n          key: column.name,\n          column: column\n        });\n      })), _this.bodyRef);\n    })));\n  };\n\n  DragDropProviderBase.components = {\n    containerComponent: 'Container',\n    columnComponent: 'Column'\n  };\n  return DragDropProviderBase;\n}(PureComponent); // tslint:disable-next-line: max-line-length\n\n/** A plugin that implements the drag-and-drop functionality and visualizes columns that are being dragged. */\n\n\nvar DragDropProvider = DragDropProviderBase;\nvar pluginDependencies$8 = [{\n  name: 'Table'\n}, {\n  name: 'DragDropProvider',\n  optional: true\n}];\n\nvar tableHeaderRowsComputed = function (_a) {\n  var tableHeaderRows = _a.tableHeaderRows;\n  return tableHeaderRowsWithReordering(tableHeaderRows);\n}; // tslint:disable-next-line: max-line-length\n\n\nvar TableColumnReorderingRaw = /*#__PURE__*/function (_super) {\n  __extends(TableColumnReorderingRaw, _super);\n\n  function TableColumnReorderingRaw(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.cellDimensionGetters = {};\n    _this.cellDimensions = [];\n    _this.state = {\n      order: props.defaultOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1\n    };\n    _this.onOver = _this.handleOver.bind(_this);\n    _this.onLeave = _this.handleLeave.bind(_this);\n    _this.onDrop = _this.handleDrop.bind(_this);\n    return _this;\n  }\n\n  TableColumnReorderingRaw.prototype.getState = function () {\n    var orderState = this.state.order;\n    var _a = this.props.order,\n        order = _a === void 0 ? orderState : _a;\n    return __assign(__assign({}, this.state), {\n      order: order\n    });\n  };\n\n  TableColumnReorderingRaw.prototype.getDraftOrder = function () {\n    var _a = this.getState(),\n        order = _a.order,\n        sourceColumnIndex = _a.sourceColumnIndex,\n        targetColumnIndex = _a.targetColumnIndex;\n\n    return draftOrder(order, sourceColumnIndex, targetColumnIndex);\n  };\n\n  TableColumnReorderingRaw.prototype.getAvailableColumns = function () {\n    var _this = this;\n\n    return this.getDraftOrder().filter(function (columnName) {\n      return !!_this.cellDimensionGetters[columnName];\n    });\n  };\n\n  TableColumnReorderingRaw.prototype.cacheCellDimensions = function () {\n    var _this = this;\n\n    this.cellDimensions = this.cellDimensions && this.cellDimensions.length ? this.cellDimensions : this.getAvailableColumns().map(function (columnName) {\n      return _this.cellDimensionGetters[columnName]();\n    });\n  };\n\n  TableColumnReorderingRaw.prototype.resetCellDimensions = function () {\n    this.cellDimensions = [];\n  };\n\n  TableColumnReorderingRaw.prototype.ensureCellDimensionGetters = function (tableColumns) {\n    var _this = this;\n\n    Object.keys(this.cellDimensionGetters).forEach(function (columnName) {\n      var columnIndex = tableColumns.findIndex(function (_a) {\n        var type = _a.type,\n            column = _a.column;\n        return type === TABLE_DATA_TYPE && column.name === columnName;\n      });\n\n      if (columnIndex === -1) {\n        delete _this.cellDimensionGetters[columnName];\n      }\n    });\n  }; // tslint:disable-next-line: max-line-length\n\n\n  TableColumnReorderingRaw.prototype.storeCellDimensionsGetter = function (tableColumn, getter, tableColumns) {\n    if (tableColumn.type === TABLE_DATA_TYPE) {\n      this.cellDimensionGetters[tableColumn.column.name] = getter;\n    }\n\n    this.ensureCellDimensionGetters(tableColumns);\n  };\n\n  TableColumnReorderingRaw.prototype.handleOver = function (_a) {\n    var payload = _a.payload,\n        x = _a.clientOffset.x;\n    var sourceColumnName = payload[0].columnName;\n    var availableColumns = this.getAvailableColumns();\n    var relativeSourceColumnIndex = availableColumns.indexOf(sourceColumnName);\n    if (relativeSourceColumnIndex === -1) return;\n    this.cacheCellDimensions();\n    var cellDimensions = this.cellDimensions;\n    var overlappedColumns = cellDimensions.filter(function (_a) {\n      var left = _a.left,\n          right = _a.right;\n      return left <= x && x <= right;\n    });\n    if (overlappedColumns.length > 1) return;\n    var relativeTargetIndex = getTableTargetColumnIndex(cellDimensions, relativeSourceColumnIndex, x);\n    if (relativeTargetIndex === -1) return;\n\n    var _b = this.getState(),\n        prevSourceColumnIndex = _b.sourceColumnIndex,\n        prevTargetColumnIndex = _b.targetColumnIndex;\n\n    var draftOrder = this.getDraftOrder();\n    var targetColumnIndex = draftOrder.indexOf(availableColumns[relativeTargetIndex]);\n    if (targetColumnIndex === prevTargetColumnIndex) return;\n    var sourceColumnIndex = prevSourceColumnIndex === -1 ? draftOrder.indexOf(sourceColumnName) : prevSourceColumnIndex;\n    this.setState({\n      sourceColumnIndex: sourceColumnIndex,\n      targetColumnIndex: targetColumnIndex\n    });\n  };\n\n  TableColumnReorderingRaw.prototype.handleLeave = function () {\n    this.setState({\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1\n    });\n    this.resetCellDimensions();\n  };\n\n  TableColumnReorderingRaw.prototype.handleDrop = function () {\n    var _a = this.getState(),\n        sourceColumnIndex = _a.sourceColumnIndex,\n        targetColumnIndex = _a.targetColumnIndex,\n        order = _a.order;\n\n    var onOrderChange = this.props.onOrderChange;\n    if (sourceColumnIndex === -1 && targetColumnIndex === -1) return;\n    var nextOrder = changeColumnOrder(order, {\n      sourceColumnName: order[sourceColumnIndex],\n      targetColumnName: order[targetColumnIndex]\n    });\n    this.setState({\n      order: nextOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1\n    });\n\n    if (onOrderChange) {\n      onOrderChange(nextOrder);\n    }\n\n    this.resetCellDimensions();\n  };\n\n  TableColumnReorderingRaw.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        Container = _a.tableContainerComponent,\n        Row = _a.rowComponent,\n        Cell = _a.cellComponent;\n    this.cellDimensionGetters = {};\n    return createElement(Plugin, {\n      name: \"TableColumnReordering\",\n      dependencies: pluginDependencies$8\n    }, createElement(OrderedTableColumns, {\n      order: this.getDraftOrder()\n    }), createElement(Getter, {\n      name: \"tableHeaderRows\",\n      computed: tableHeaderRowsComputed\n    }), createElement(Template, {\n      name: \"table\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var draggingEnabled = _a.draggingEnabled;\n        return createElement(Container, __assign({}, params, {\n          onOver: _this.onOver,\n          onLeave: _this.onLeave,\n          onDrop: _this.onDrop,\n          draggingEnabled: draggingEnabled\n        }), createElement(TemplatePlaceholder, null));\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return tableRow.type === TABLE_REORDERING_TYPE;\n      }\n    }, function (params) {\n      return createElement(Row, __assign({}, params));\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return tableRow.type === TABLE_REORDERING_TYPE;\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var tableColumns = _a.tableColumns;\n        return createElement(Cell, __assign({}, params, {\n          getCellDimensions: function (getter) {\n            return _this.storeCellDimensionsGetter(params.tableColumn, getter, tableColumns);\n          }\n        }));\n      });\n    }));\n  };\n\n  TableColumnReorderingRaw.defaultProps = {\n    defaultOrder: []\n  };\n  TableColumnReorderingRaw.components = {\n    tableContainerComponent: 'TableContainer',\n    rowComponent: 'Row',\n    cellComponent: 'Cell'\n  };\n  return TableColumnReorderingRaw;\n}(PureComponent);\n\nvar TableContainer = function (_a) {\n  var onOver = _a.onOver,\n      onLeave = _a.onLeave,\n      onDrop = _a.onDrop,\n      children = _a.children,\n      draggingEnabled = _a.draggingEnabled;\n  return draggingEnabled ? createElement(DropTarget, {\n    onOver: onOver,\n    onLeave: onLeave,\n    onDrop: onDrop\n  }, children) : children;\n};\n/** A plugin that manages the displayed columns' order. */\n\n\nvar TableColumnReordering = withComponents({\n  TableContainer: TableContainer\n})(TableColumnReorderingRaw);\n\nvar RowPlaceholder = function (props) {\n  return createElement(TemplatePlaceholder, {\n    name: \"tableRow\",\n    params: props\n  });\n};\n\nvar CellPlaceholder = function (props) {\n  return createElement(TemplatePlaceholder, {\n    name: \"tableCell\",\n    params: props\n  });\n};\n\nvar tableHeaderRows = [];\n\nvar tableBodyRowsComputed = function (_a) {\n  var rows = _a.rows,\n      getRowId = _a.getRowId,\n      isDataLoading = _a.isDataLoading;\n  return tableRowsWithDataRows(rows, getRowId, isDataLoading);\n};\n\nvar tableFooterRows = [];\nvar defaultMessages = {\n  noData: 'No data'\n};\n\nvar TableBase = /*#__PURE__*/function (_super) {\n  __extends(TableBase, _super);\n\n  function TableBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TableBase.prototype.render = function () {\n    var _a = this.props,\n        Layout = _a.layoutComponent,\n        Cell = _a.cellComponent,\n        Row = _a.rowComponent,\n        NoDataRow = _a.noDataRowComponent,\n        NoDataCell = _a.noDataCellComponent,\n        StubRow = _a.stubRowComponent,\n        StubCell = _a.stubCellComponent,\n        StubHeaderCell = _a.stubHeaderCellComponent,\n        columnExtensions = _a.columnExtensions,\n        messages = _a.messages,\n        containerComponent = _a.containerComponent,\n        tableComponent = _a.tableComponent,\n        headComponent = _a.headComponent,\n        bodyComponent = _a.bodyComponent,\n        footerComponent = _a.footerComponent;\n    var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages), messages));\n    return createElement(Plugin, {\n      name: \"Table\"\n    }, createElement(Getter, {\n      name: \"tableHeaderRows\",\n      value: tableHeaderRows\n    }), createElement(Getter, {\n      name: \"tableBodyRows\",\n      computed: tableBodyRowsComputed\n    }), createElement(Getter, {\n      name: \"tableFooterRows\",\n      value: tableFooterRows\n    }), createElement(TableColumnsWithDataRowsGetter, {\n      columnExtensions: columnExtensions\n    }), createElement(Getter, {\n      name: \"getTableCellColSpan\",\n      value: tableCellColSpanGetter\n    }), createElement(Template, {\n      name: \"body\"\n    }, createElement(TemplatePlaceholder, {\n      name: \"table\"\n    })), createElement(Template, {\n      name: \"table\"\n    }, createElement(TemplateConnector, null, function (_a) {\n      var headerRows = _a.tableHeaderRows,\n          bodyRows = _a.tableBodyRows,\n          footerRows = _a.tableFooterRows,\n          columns = _a.tableColumns,\n          getTableCellColSpan = _a.getTableCellColSpan;\n      return createElement(TemplatePlaceholder, {\n        name: \"tableLayout\",\n        params: {\n          tableComponent: tableComponent,\n          headComponent: headComponent,\n          bodyComponent: bodyComponent,\n          footerComponent: footerComponent,\n          containerComponent: containerComponent,\n          headerRows: headerRows,\n          bodyRows: bodyRows,\n          footerRows: footerRows,\n          columns: columns,\n          rowComponent: RowPlaceholder,\n          cellComponent: CellPlaceholder,\n          getCellColSpan: getTableCellColSpan\n        }\n      });\n    })), createElement(Template, {\n      name: \"tableLayout\"\n    }, function (params) {\n      return createElement(Layout, __assign({}, params));\n    }), createElement(Template, {\n      name: \"tableCell\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var headerRows = _a.tableHeaderRows;\n        return isHeaderStubTableCell(params.tableRow, headerRows) ? createElement(StubHeaderCell, __assign({}, params)) : createElement(StubCell, __assign({}, params));\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n            tableColumn = _a.tableColumn;\n        return isDataTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var getCellValue = _a.getCellValue;\n        var columnName = params.tableColumn.column.name;\n        var value = getCellValue(params.tableRow.row, columnName);\n        return createElement(TemplatePlaceholder, {\n          name: \"valueFormatter\",\n          params: {\n            value: value,\n            row: params.tableRow.row,\n            column: params.tableColumn.column\n          }\n        }, function (content) {\n          return createElement(Cell, __assign({}, params, {\n            row: params.tableRow.row,\n            column: params.tableColumn.column,\n            value: value\n          }), content);\n        });\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isNoDataTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var tableColumns = _a.tableColumns;\n\n        if (isNoDataTableCell(params.tableColumn, tableColumns)) {\n          return createElement(NoDataCell, __assign({}, params, {\n            getMessage: getMessage\n          }));\n        }\n\n        return null;\n      });\n    }), createElement(Template, {\n      name: \"tableRow\"\n    }, function (params) {\n      return createElement(StubRow, __assign({}, params));\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isDataTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(Row, __assign({}, params, {\n        row: params.tableRow.row\n      }));\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isNoDataTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(NoDataRow, __assign({}, params));\n    }));\n  };\n\n  TableBase.COLUMN_TYPE = TABLE_DATA_TYPE;\n  TableBase.ROW_TYPE = TABLE_DATA_TYPE;\n  TableBase.NODATA_ROW_TYPE = TABLE_NODATA_TYPE;\n  TableBase.defaultProps = {\n    messages: {}\n  };\n  TableBase.components = {\n    tableComponent: 'Table',\n    headComponent: 'TableHead',\n    bodyComponent: 'TableBody',\n    footerComponent: 'TableFooter',\n    containerComponent: 'Container',\n    layoutComponent: 'Layout',\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    noDataRowComponent: 'NoDataRow',\n    noDataCellComponent: 'NoDataCell',\n    stubRowComponent: 'StubRow',\n    stubCellComponent: 'StubCell',\n    stubHeaderCellComponent: 'StubHeaderCell'\n  };\n  return TableBase;\n}(PureComponent);\n/***\r\n * A plugin that renders Grid data as a table. This plugin enables you to customize\r\n * table rows and columns, and contains the Table Row and Table Cell components\r\n * that can be extended by other plugins\r\n * */\n\n\nvar Table = TableBase;\n\nvar TableSelectionBase = /*#__PURE__*/function (_super) {\n  __extends(TableSelectionBase, _super);\n\n  function TableSelectionBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TableSelectionBase.prototype.render = function () {\n    var _a = this.props,\n        highlightRow = _a.highlightRow,\n        selectByRowClick = _a.selectByRowClick,\n        showSelectionColumn = _a.showSelectionColumn,\n        showSelectAll = _a.showSelectAll,\n        HeaderCell = _a.headerCellComponent,\n        Cell = _a.cellComponent,\n        Row = _a.rowComponent,\n        selectionColumnWidth = _a.selectionColumnWidth;\n\n    var tableColumnsComputed = function (_a) {\n      var tableColumns = _a.tableColumns;\n      return tableColumnsWithSelection(tableColumns, selectionColumnWidth);\n    };\n\n    return createElement(Plugin, {\n      name: \"TableSelection\",\n      dependencies: [{\n        name: 'Table'\n      }, {\n        name: 'SelectionState'\n      }, {\n        name: 'IntegratedSelection',\n        optional: !showSelectAll\n      }]\n    }, showSelectionColumn && createElement(Getter, {\n      name: \"tableColumns\",\n      computed: tableColumnsComputed\n    }), highlightRow && createElement(Getter, {\n      name: \"highlightSelectedRow\",\n      value: true\n    }), showSelectionColumn && showSelectAll && createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n            tableColumn = _a.tableColumn;\n        return isSelectAllTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var selectAllAvailable = _a.selectAllAvailable,\n            allSelected = _a.allSelected,\n            someSelected = _a.someSelected;\n        var toggleSelectAll = _b.toggleSelectAll;\n        return createElement(HeaderCell, __assign({}, params, {\n          disabled: !selectAllAvailable,\n          allSelected: allSelected,\n          someSelected: someSelected,\n          onToggle: function (select) {\n            return toggleSelectAll(select);\n          }\n        }));\n      });\n    }), showSelectionColumn && createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n            tableColumn = _a.tableColumn;\n        return isSelectTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var selection = _a.selection;\n        var toggleSelection = _b.toggleSelection;\n        return createElement(Cell, __assign({}, params, {\n          row: params.tableRow.row,\n          selected: selection.indexOf(params.tableRow.rowId) !== -1,\n          onToggle: function () {\n            return toggleSelection({\n              rowIds: [params.tableRow.rowId]\n            });\n          }\n        }));\n      });\n    }), (highlightRow || selectByRowClick) && createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isDataTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var selection = _a.selection;\n        var toggleSelection = _b.toggleSelection;\n        return createElement(Row, __assign({}, params, {\n          selectByRowClick: selectByRowClick,\n          highlighted: isRowHighlighted(highlightRow, selection, params.tableRow),\n          onToggle: function () {\n            return toggleSelection({\n              rowIds: [params.tableRow.rowId]\n            });\n          }\n        }));\n      });\n    }));\n  };\n\n  TableSelectionBase.defaultProps = {\n    highlightRow: false,\n    selectByRowClick: false,\n    showSelectAll: false,\n    showSelectionColumn: true\n  };\n  TableSelectionBase.components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    headerCellComponent: 'HeaderCell'\n  };\n  TableSelectionBase.COLUMN_TYPE = TABLE_SELECT_TYPE;\n  return TableSelectionBase;\n}(PureComponent);\n/***\r\n * A plugin that visualizes table rows' selection state by rendering selection checkboxes\r\n * and highlighting the selected rows.\r\n * */\n\n\nvar TableSelection = TableSelectionBase; // tslint:disable-next-line: max-line-length\n\nvar RowDetailStateBase = /*#__PURE__*/function (_super) {\n  __extends(RowDetailStateBase, _super);\n\n  function RowDetailStateBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds\n    };\n    var stateHelper = createStateHelper(_this, {\n      expandedRowIds: function () {\n        var onExpandedRowIdsChange = _this.props.onExpandedRowIdsChange;\n        return onExpandedRowIdsChange;\n      }\n    });\n    _this.toggleDetailRowExpanded = stateHelper.applyFieldReducer.bind(stateHelper, 'expandedRowIds', toggleDetailRowExpanded);\n    return _this;\n  }\n\n  RowDetailStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.expandedRowIds,\n        expandedRowIds = _a === void 0 ? prevState.expandedRowIds : _a;\n    return {\n      expandedRowIds: expandedRowIds\n    };\n  };\n\n  RowDetailStateBase.prototype.render = function () {\n    var expandedRowIds = this.state.expandedRowIds;\n    return createElement(Plugin, {\n      name: \"RowDetailState\"\n    }, createElement(Getter, {\n      name: \"expandedDetailRowIds\",\n      value: expandedRowIds\n    }), createElement(Action, {\n      name: \"toggleDetailRowExpanded\",\n      action: this.toggleDetailRowExpanded\n    }));\n  };\n\n  RowDetailStateBase.defaultProps = {\n    defaultExpandedRowIds: []\n  };\n  return RowDetailStateBase;\n}(PureComponent);\n/** A plugin that manages the expanded state for table row details. */\n\n\nvar RowDetailState = RowDetailStateBase;\n\nvar getCellColSpanComputed = function (_a) {\n  var getTableCellColSpan = _a.getTableCellColSpan;\n  return tableDetailCellColSpanGetter(getTableCellColSpan);\n};\n\nvar pluginDependencies$9 = [{\n  name: 'RowDetailState'\n}, {\n  name: 'Table'\n}];\n\nvar TableRowDetailBase = /*#__PURE__*/function (_super) {\n  __extends(TableRowDetailBase, _super);\n\n  function TableRowDetailBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TableRowDetailBase.prototype.render = function () {\n    var _a = this.props,\n        rowHeight = _a.rowHeight,\n        Content = _a.contentComponent,\n        ToggleCell = _a.toggleCellComponent,\n        Cell = _a.cellComponent,\n        Row = _a.rowComponent,\n        toggleColumnWidth = _a.toggleColumnWidth;\n\n    var tableColumnsComputed = function (_a) {\n      var tableColumns = _a.tableColumns;\n      return tableColumnsWithDetail(tableColumns, toggleColumnWidth);\n    };\n\n    var tableBodyRowsComputed = function (_a) {\n      var tableBodyRows = _a.tableBodyRows,\n          expandedDetailRowIds = _a.expandedDetailRowIds;\n      return tableRowsWithExpandedDetail(tableBodyRows, expandedDetailRowIds, rowHeight);\n    };\n\n    return createElement(Plugin, {\n      name: \"TableRowDetail\",\n      dependencies: pluginDependencies$9\n    }, createElement(Getter, {\n      name: \"tableColumns\",\n      computed: tableColumnsComputed\n    }), createElement(Getter, {\n      name: \"tableBodyRows\",\n      computed: tableBodyRowsComputed\n    }), createElement(Getter, {\n      name: \"getTableCellColSpan\",\n      computed: getCellColSpanComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n            tableColumn = _a.tableColumn;\n        return isDetailToggleTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var expandedDetailRowIds = _a.expandedDetailRowIds;\n        var toggleDetailRowExpanded = _b.toggleDetailRowExpanded;\n        return createElement(ToggleCell, __assign({}, params, {\n          row: params.tableRow.row,\n          expanded: isDetailRowExpanded(expandedDetailRowIds, params.tableRow.rowId),\n          onToggle: function () {\n            return toggleDetailRowExpanded({\n              rowId: params.tableRow.rowId\n            });\n          }\n        }));\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isDetailTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var tableColumns = _a.tableColumns;\n\n        if (isDetailTableCell(params.tableColumn, tableColumns)) {\n          return createElement(Cell, __assign({}, params, {\n            row: params.tableRow.row\n          }), Content && createElement(Content, {\n            row: params.tableRow.row\n          }));\n        }\n\n        return null;\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isDetailTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(Row, __assign({}, params, {\n        row: params.tableRow.row\n      }));\n    }));\n  };\n\n  TableRowDetailBase.ROW_TYPE = TABLE_DETAIL_TYPE;\n  TableRowDetailBase.COLUMN_TYPE = TABLE_DETAIL_TYPE;\n  TableRowDetailBase.defaultProps = {\n    contentComponent: function () {\n      return null;\n    }\n  };\n  TableRowDetailBase.components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    toggleCellComponent: 'ToggleCell'\n  };\n  return TableRowDetailBase;\n}(PureComponent);\n/** A plugin that renders detail rows. */\n\n\nvar TableRowDetail = TableRowDetailBase;\nvar defaultSummaryMessages = {\n  sum: 'Sum',\n  min: 'Min',\n  max: 'Max',\n  avg: 'Avg',\n  count: 'Count'\n};\n\nvar TableSummaryContent = function (_a) {\n  var column = _a.column,\n      columnSummaries = _a.columnSummaries,\n      formatlessSummaryTypes = _a.formatlessSummaryTypes,\n      Item = _a.itemComponent,\n      messages = _a.messages;\n  var getMessage = getMessagesFormatter(__assign(__assign({}, defaultSummaryMessages), messages));\n\n  var SummaryItem = function (_a) {\n    var summary = _a.summary,\n        children = _a.children;\n    return createElement(Item, {\n      getMessage: getMessage,\n      type: summary.type,\n      value: summary.value\n    }, children || String(summary.value));\n  };\n\n  var isFormatlessSummary = function (summary) {\n    return summary.value === null || formatlessSummaryTypes.includes(summary.type) || defaultFormatlessSummaries.includes(summary.type);\n  };\n\n  return createElement(Fragment, null, columnSummaries.map(function (summary) {\n    if (isFormatlessSummary(summary)) {\n      return createElement(SummaryItem, {\n        key: summary.type,\n        summary: summary\n      });\n    }\n\n    return createElement(TemplatePlaceholder, {\n      key: summary.type,\n      name: \"valueFormatter\",\n      params: {\n        column: column,\n        value: summary.value\n      }\n    }, function (content) {\n      return createElement(SummaryItem, {\n        summary: summary\n      }, content);\n    });\n  }));\n};\n\nvar getInlineSummaryComponent = function (column, summary, formatlessSummaries) {\n  return function () {\n    return summary.value === null || formatlessSummaries.includes(summary.type) ? createElement(Fragment, null, summary.value) : createElement(TemplatePlaceholder, {\n      key: summary.type,\n      name: \"valueFormatter\",\n      params: {\n        column: column,\n        value: summary.value\n      }\n    }, function (content) {\n      return content || summary.value;\n    });\n  };\n};\n\nvar flattenGroupInlineSummaries = function (columns, tableRow, groupSummaryItems, groupSummaryValues, formatlessSummaries) {\n  return getGroupInlineSummaries(groupSummaryItems, columns, groupSummaryValues[tableRow.row.compoundKey]).map(function (colSummaries) {\n    return __spread(colSummaries.summaries.map(function (summary) {\n      return __assign(__assign({}, summary), {\n        columnTitle: colSummaries.column.title,\n        messageKey: summary.type + \"Of\",\n        component: getInlineSummaryComponent(colSummaries.column, summary, formatlessSummaries)\n      });\n    }));\n  }).reduce(function (acc, summaries) {\n    return acc.concat(summaries);\n  }, []);\n};\n\nvar pluginDependencies$a = [{\n  name: 'GroupingState'\n}, {\n  name: 'Table'\n}, {\n  name: 'DataTypeProvider',\n  optional: true\n}, {\n  name: 'SummaryState',\n  optional: true\n}, {\n  name: 'CustomSummary',\n  optional: true\n}, {\n  name: 'IntegratedSummary',\n  optional: true\n}, {\n  name: 'Table'\n}, {\n  name: 'DataTypeProvider',\n  optional: true\n}, {\n  name: 'TableSelection',\n  optional: true\n}];\nvar side = 'left';\n/** @internal */\n\nvar defaultMessages$1 = {\n  countOf: 'Count: ',\n  sumOf: 'Sum of {columnTitle} is ',\n  maxOf: 'Max of {columnTitle} is ',\n  minOf: 'Min of {columnTitle} is ',\n  avgOf: 'Avg of {columnTitle} is '\n};\n\nvar tableBodyRowsComputed$1 = function (_a) {\n  var tableBodyRows = _a.tableBodyRows,\n      isGroupRow = _a.isGroupRow;\n  return tableRowsWithGrouping(tableBodyRows, isGroupRow);\n};\n\nvar getCellColSpanComputed$1 = function (_a) {\n  var getTableCellColSpan = _a.getTableCellColSpan,\n      groupSummaryItems = _a.groupSummaryItems;\n  return tableGroupCellColSpanGetter(getTableCellColSpan, groupSummaryItems);\n};\n\nvar TableGroupRowBase = /*#__PURE__*/function (_super) {\n  __extends(TableGroupRowBase, _super);\n\n  function TableGroupRowBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TableGroupRowBase.prototype.render = function () {\n    var _a = this.props,\n        GroupCell = _a.cellComponent,\n        Content = _a.contentComponent,\n        Icon = _a.iconComponent,\n        GroupRow = _a.rowComponent,\n        Container = _a.containerComponent,\n        GroupIndentCell = _a.indentCellComponent,\n        InlineSummary = _a.inlineSummaryComponent,\n        InlineSummaryItem = _a.inlineSummaryItemComponent,\n        SummaryCell = _a.summaryCellComponent,\n        SummaryItem = _a.summaryItemComponent,\n        StubCell = _a.stubCellComponent,\n        indentColumnWidth = _a.indentColumnWidth,\n        contentCellPadding = _a.contentCellPadding,\n        showColumnsWhenGrouped = _a.showColumnsWhenGrouped,\n        columnExtensions = _a.columnExtensions,\n        messages = _a.messages,\n        formatlessSummaryTypes = _a.formatlessSummaryTypes;\n    var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages$1), messages));\n    return createElement(Plugin, {\n      name: \"TableGroupRow\",\n      dependencies: pluginDependencies$a\n    }, createElement(TableColumnsWithGrouping, {\n      columnExtensions: columnExtensions,\n      showColumnsWhenGrouped: showColumnsWhenGrouped,\n      indentColumnWidth: indentColumnWidth\n    }), createElement(Getter, {\n      name: \"tableBodyRows\",\n      computed: tableBodyRowsComputed$1\n    }), createElement(Getter, {\n      name: \"getTableCellColSpan\",\n      computed: getCellColSpanComputed$1\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return isGroupTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var grouping = _a.grouping,\n            expandedGroups = _a.expandedGroups,\n            groupSummaryItems = _a.groupSummaryItems,\n            groupSummaryValues = _a.groupSummaryValues,\n            columns = _a.columns;\n        var toggleGroupExpanded = _b.toggleGroupExpanded;\n\n        if (isGroupTableCell(params.tableRow, params.tableColumn)) {\n          var formatlessSummaries = defaultFormatlessSummaries.concat(formatlessSummaryTypes);\n          var inlineSummaries_1 = groupSummaryItems ? flattenGroupInlineSummaries(columns, params.tableRow, groupSummaryItems, groupSummaryValues, formatlessSummaries) : [];\n          var cellIndent = calculateGroupCellIndent(params.tableColumn, grouping, indentColumnWidth);\n          var contentIndent_1 = \"calc(\" + cellIndent + \"px + \" + contentCellPadding + \")\";\n          return createElement(TemplatePlaceholder, {\n            name: \"valueFormatter\",\n            params: {\n              column: params.tableColumn.column,\n              value: params.tableRow.row.value\n            }\n          }, function (content) {\n            return createElement(GroupCell, __assign({}, params, {\n              contentComponent: Content,\n              iconComponent: Icon,\n              containerComponent: Container,\n              row: params.tableRow.row,\n              column: params.tableColumn.column,\n              expanded: expandedGroups.indexOf(params.tableRow.row.compoundKey) !== -1,\n              onToggle: function () {\n                return toggleGroupExpanded({\n                  groupKey: params.tableRow.row.compoundKey\n                });\n              },\n              inlineSummaries: inlineSummaries_1,\n              inlineSummaryComponent: InlineSummary,\n              inlineSummaryItemComponent: InlineSummaryItem,\n              getMessage: getMessage,\n              position: contentIndent_1,\n              side: side\n            }), content);\n          });\n        }\n\n        if (isGroupIndentTableCell(params.tableRow, params.tableColumn, grouping)) {\n          var fixedProps = {\n            side: side,\n            position: calculateGroupCellIndent(params.tableColumn, grouping, indentColumnWidth)\n          };\n\n          if (GroupIndentCell) {\n            return createElement(GroupIndentCell, __assign({}, params, fixedProps, {\n              row: params.tableRow.row,\n              column: params.tableColumn.column\n            }));\n          }\n\n          return createElement(TemplatePlaceholder, {\n            params: fixedProps\n          });\n        }\n\n        if (isGroupIndentStubTableCell(params.tableRow, params.tableColumn, grouping)) {\n          return createElement(TemplatePlaceholder, {\n            params: params\n          });\n        }\n\n        return null;\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n            tableColumn = _a.tableColumn;\n        return isGroupRowOrdinaryCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var groupSummaryItems = _a.groupSummaryItems,\n            groupSummaryValues = _a.groupSummaryValues,\n            grouping = _a.grouping,\n            tableColumns = _a.tableColumns;\n        var toggleGroupExpanded = _b.toggleGroupExpanded;\n        var tableColumn = params.tableColumn,\n            tableRow = params.tableRow;\n\n        var onToggle = function () {\n          return toggleGroupExpanded({\n            groupKey: tableRow.row.compoundKey\n          });\n        };\n\n        if (isRowSummaryCell(tableRow, tableColumn, grouping, groupSummaryItems)) {\n          var columnSummaries = getColumnSummaries(groupSummaryItems, tableColumn.column.name, groupSummaryValues[tableRow.row.compoundKey], function (summaryItem) {\n            return !summaryItem.showInGroupFooter && summaryItem.alignByColumn;\n          });\n          return createElement(SummaryCell, __assign({}, params, {\n            row: params.tableRow.row,\n            column: params.tableColumn.column,\n            onToggle: onToggle\n          }), createElement(TableSummaryContent, {\n            column: tableColumn.column,\n            columnSummaries: columnSummaries,\n            formatlessSummaryTypes: formatlessSummaryTypes,\n            itemComponent: SummaryItem,\n            messages: messages\n          }));\n        } // NOTE: ensure that right-aligned summary will fit into a column\n\n\n        if (isPreviousCellContainSummary(tableRow, tableColumn, tableColumns, grouping, groupSummaryItems) || TABLE_FLEX_TYPE === tableColumn.type) {\n          return createElement(StubCell, __assign({}, params, {\n            onToggle: onToggle\n          }));\n        }\n\n        return createElement(TemplatePlaceholder, null);\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return isGroupTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(GroupRow, __assign({}, params, {\n        row: params.tableRow.row\n      }));\n    }));\n  };\n\n  TableGroupRowBase.ROW_TYPE = TABLE_GROUP_TYPE;\n  TableGroupRowBase.COLUMN_TYPE = TABLE_GROUP_TYPE;\n  TableGroupRowBase.defaultProps = {\n    showColumnsWhenGrouped: false,\n    formatlessSummaryTypes: []\n  };\n  TableGroupRowBase.components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    contentComponent: 'Content',\n    iconComponent: 'Icon',\n    containerComponent: 'Container',\n    indentCellComponent: 'IndentCell',\n    inlineSummaryComponent: 'InlineSummary',\n    inlineSummaryItemComponent: 'InlineSummaryItem',\n    summaryCellComponent: 'SummaryCell',\n    summaryItemComponent: 'SummaryItem',\n    stubCellComponent: 'StubCell'\n  };\n  return TableGroupRowBase;\n}(PureComponent);\n/** A plugin that renders group rows and enables them to expand and collapse. */\n\n\nvar TableGroupRow = TableGroupRowBase;\n\nvar tableHeaderRowsComputed$1 = function (_a) {\n  var tableHeaderRows = _a.tableHeaderRows;\n  return tableRowsWithHeading(tableHeaderRows || []);\n};\n\nvar TableHeaderRowBase = /*#__PURE__*/function (_super) {\n  __extends(TableHeaderRowBase, _super);\n\n  function TableHeaderRowBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TableHeaderRowBase.prototype.render = function () {\n    var _a = this.props,\n        showSortingControls = _a.showSortingControls,\n        showGroupingControls = _a.showGroupingControls,\n        HeaderCell = _a.cellComponent,\n        HeaderRow = _a.rowComponent,\n        Content = _a.contentComponent,\n        SortLabel = _a.sortLabelComponent,\n        GroupButton = _a.groupButtonComponent,\n        Title = _a.titleComponent,\n        messages = _a.messages;\n    var getMessage = getMessagesFormatter(messages);\n    return createElement(Plugin, {\n      name: \"TableHeaderRow\",\n      dependencies: [{\n        name: 'Table'\n      }, {\n        name: 'SortingState',\n        optional: !showSortingControls\n      }, {\n        name: 'GroupingState',\n        optional: !showGroupingControls\n      }, {\n        name: 'DragDropProvider',\n        optional: true\n      }, {\n        name: 'TableColumnResizing',\n        optional: true\n      }]\n    }, createElement(Getter, {\n      name: \"tableHeaderRows\",\n      computed: tableHeaderRowsComputed$1\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n            tableColumn = _a.tableColumn;\n        return isHeadingTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var sorting = _a.sorting,\n            tableColumns = _a.tableColumns,\n            draggingEnabled = _a.draggingEnabled,\n            tableColumnResizingEnabled = _a.tableColumnResizingEnabled,\n            isColumnSortingEnabled = _a.isColumnSortingEnabled,\n            isColumnGroupingEnabled = _a.isColumnGroupingEnabled,\n            columnResizingMode = _a.columnResizingMode;\n        var changeColumnSorting = _b.changeColumnSorting,\n            changeColumnGrouping = _b.changeColumnGrouping,\n            changeTableColumnWidth = _b.changeTableColumnWidth,\n            draftTableColumnWidth = _b.draftTableColumnWidth,\n            cancelTableColumnWidthDraft = _b.cancelTableColumnWidthDraft,\n            _c = _b.storeWidthGetters,\n            storeWidthGetters = _c === void 0 ? function () {} : _c;\n        var _d = params.tableColumn.column,\n            columnName = _d.name,\n            columnTitle = _d.title;\n        var atLeastOneDataColumn = tableColumns.filter(function (_a) {\n          var type = _a.type;\n          return type === TABLE_DATA_TYPE;\n        }).length > 1;\n        var sortingEnabled = isColumnSortingEnabled && isColumnSortingEnabled(columnName);\n        var groupingEnabled = isColumnGroupingEnabled && isColumnGroupingEnabled(columnName) && atLeastOneDataColumn;\n        var nextColumnName = getNextColumnName(tableColumns, columnName);\n        return createElement(HeaderCell, __assign({}, params, {\n          column: params.tableColumn.column,\n          draggingEnabled: draggingEnabled && atLeastOneDataColumn,\n          resizingEnabled: tableColumnResizingEnabled && (!!nextColumnName || columnResizingMode === 'widget'),\n          onWidthChange: function (_a) {\n            var shift = _a.shift;\n            return changeTableColumnWidth({\n              columnName: columnName,\n              nextColumnName: nextColumnName,\n              shift: shift\n            });\n          },\n          onWidthDraft: function (_a) {\n            var shift = _a.shift;\n            return draftTableColumnWidth({\n              columnName: columnName,\n              nextColumnName: nextColumnName,\n              shift: shift\n            });\n          },\n          onWidthDraftCancel: function () {\n            return cancelTableColumnWidthDraft();\n          },\n          getCellWidth: function (getter) {\n            return storeWidthGetters({\n              tableColumn: params.tableColumn,\n              getter: getter,\n              tableColumns: tableColumns\n            });\n          }\n        }), createElement(TemplatePlaceholder, {\n          name: \"tableHeaderCellBefore\",\n          params: {\n            column: params.tableColumn.column\n          }\n        }), createElement(Content, {\n          column: params.tableColumn.column,\n          align: params.tableColumn.align\n        }, showSortingControls ? createElement(SortLabel, {\n          column: params.tableColumn.column,\n          align: params.tableColumn.align,\n          direction: getColumnSortingDirection(sorting, columnName) || null,\n          disabled: !sortingEnabled,\n          onSort: function (_a) {\n            var direction = _a.direction,\n                keepOther = _a.keepOther;\n            changeColumnSorting({\n              columnName: columnName,\n              direction: direction,\n              keepOther: keepOther\n            });\n          },\n          getMessage: getMessage\n        }, createElement(Title, null, columnTitle || columnName)) : createElement(Title, null, columnTitle || columnName)), showGroupingControls ? createElement(GroupButton, {\n          disabled: !groupingEnabled,\n          onGroup: function () {\n            return changeColumnGrouping({\n              columnName: columnName\n            });\n          }\n        }) : null);\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isHeadingTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(HeaderRow, __assign({}, params));\n    }));\n  };\n\n  TableHeaderRowBase.ROW_TYPE = TABLE_HEADING_TYPE;\n  TableHeaderRowBase.defaultProps = {\n    showSortingControls: false,\n    showGroupingControls: false,\n    messages: {}\n  };\n  TableHeaderRowBase.components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n    contentComponent: 'Content',\n    sortLabelComponent: 'SortLabel',\n    titleComponent: 'Title',\n    groupButtonComponent: 'GroupButton'\n  };\n  return TableHeaderRowBase;\n}(PureComponent);\n\nTableHeaderRowBase.components = {\n  cellComponent: 'Cell',\n  rowComponent: 'Row',\n  contentComponent: 'Content',\n  sortLabelComponent: 'SortLabel',\n  titleComponent: 'Title',\n  groupButtonComponent: 'GroupButton'\n};\n/***\r\n * A plugin that renders the table's header row. The Column's `title` field specifies the\r\n * column's title in the header row.The plugin also allows you to manage a column's sorting\r\n * and grouping state and initiate column dragging.\r\n * */\n\nvar TableHeaderRow = TableHeaderRowBase;\n\nvar CellPlaceholder$1 = function (props) {\n  return createElement(TemplatePlaceholder, {\n    params: props\n  });\n};\n\nvar bandLevelsVisibilityComputed = function (_a) {\n  var columnIntervals = _a.columnVisibleIntervals,\n      tableHeaderColumnChains = _a.tableHeaderColumnChains,\n      bandLevels = _a.bandLevels;\n  return bandLevelsVisibility(columnIntervals, tableHeaderColumnChains, bandLevels);\n};\n\nvar columnVisibleIntervalsComputed = function (_a) {\n  var viewport = _a.viewport,\n      tableColumns = _a.tableColumns;\n  return columnVisibleIntervals(viewport, tableColumns);\n};\n\nvar TableBandHeaderBase = /*#__PURE__*/function (_super) {\n  __extends(TableBandHeaderBase, _super);\n\n  function TableBandHeaderBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TableBandHeaderBase.prototype.render = function () {\n    var _a = this.props,\n        Cell = _a.cellComponent,\n        Row = _a.rowComponent,\n        HeaderCell = _a.bandedHeaderCellComponent,\n        InvisibleCell = _a.invisibleCellComponent,\n        columnBands = _a.columnBands;\n\n    var tableHeaderRowsComputed = function (_a) {\n      var tableHeaderRows = _a.tableHeaderRows,\n          tableColumns = _a.tableColumns;\n      return tableRowsWithBands(tableHeaderRows, columnBands, tableColumns);\n    };\n\n    var tableHeaderColumnChainsComputed = function (_a) {\n      var tableHeaderRows = _a.tableHeaderRows,\n          tableColumns = _a.tableColumns;\n      return tableHeaderColumnChainsWithBands(tableHeaderRows, tableColumns, columnBands);\n    };\n\n    var bandLevels = columnBandLevels(columnBands);\n    return createElement(Plugin, {\n      name: \"TableBandHeader\",\n      dependencies: [{\n        name: 'Table'\n      }, {\n        name: 'TableHeaderRow'\n      }, {\n        name: 'TableSelection',\n        optional: true\n      }, {\n        name: 'TableEditColumn',\n        optional: true\n      }]\n    }, createElement(Getter, {\n      name: \"tableHeaderRows\",\n      computed: tableHeaderRowsComputed\n    }), createElement(Getter, {\n      name: \"columnVisibleIntervals\",\n      computed: columnVisibleIntervalsComputed\n    }), createElement(Getter, {\n      name: \"tableHeaderColumnChains\",\n      computed: tableHeaderColumnChainsComputed\n    }), createElement(Getter, {\n      name: \"bandLevels\",\n      value: bandLevels\n    }), createElement(Getter, {\n      name: \"bandLevelsVisibility\",\n      computed: bandLevelsVisibilityComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isBandedOrHeaderRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var tableColumns = _a.tableColumns,\n            tableHeaderRows = _a.tableHeaderRows,\n            tableHeaderColumnChains = _a.tableHeaderColumnChains,\n            columnIntervals = _a.columnVisibleIntervals,\n            levelsVisibility = _a.bandLevelsVisibility;\n        var bandComponent = getBandComponent(params, tableHeaderRows, tableColumns, columnBands, tableHeaderColumnChains, columnIntervals, levelsVisibility);\n\n        switch (bandComponent.type) {\n          case BAND_DUPLICATE_RENDER:\n            return createElement(TemplatePlaceholder, {\n              params: __assign({}, params)\n            });\n\n          case BAND_EMPTY_CELL:\n            return createElement(InvisibleCell, null);\n\n          case BAND_GROUP_CELL:\n            {\n              var _b = bandComponent.payload,\n                  value = _b.value,\n                  payload = __rest(_b, [\"value\"]);\n\n              return createElement(Cell, __assign({}, params, payload), value);\n            }\n\n          case BAND_HEADER_CELL:\n            return createElement(TemplatePlaceholder, {\n              name: \"tableCell\",\n              params: __assign(__assign({}, params), bandComponent.payload)\n            });\n\n          case BAND_FILL_LEVEL_CELL:\n            return createElement(Cell, __assign({}, params, bandComponent.payload, {\n              style: {\n                whiteSpace: 'pre'\n              }\n            }), ' ');\n\n          default:\n            return null;\n        }\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n            tableColumn = _a.tableColumn;\n        return isHeadingTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(HeaderCell, __assign({\n        component: CellPlaceholder$1\n      }, params));\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isBandedTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(Row, __assign({}, params));\n    }));\n  };\n\n  TableBandHeaderBase.ROW_TYPE = TABLE_BAND_TYPE;\n  TableBandHeaderBase.components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n    bandedHeaderCellComponent: 'BandedHeaderCell',\n    invisibleCellComponent: 'InvisibleCell'\n  };\n  return TableBandHeaderBase;\n}(PureComponent);\n\nTableBandHeaderBase.components = {\n  cellComponent: 'Cell',\n  rowComponent: 'Row',\n  bandedHeaderCellComponent: 'BandedHeaderCell',\n  invisibleCellComponent: 'InvisibleCell'\n};\n/** A plugin that renders the banded cells. */\n\nvar TableBandHeader = TableBandHeaderBase;\nvar pluginDependencies$b = [{\n  name: 'FilteringState'\n}, {\n  name: 'Table'\n}, {\n  name: 'DataTypeProvider',\n  optional: true\n}];\nvar defaultMessages$2 = {\n  filterPlaceholder: 'Filter...',\n  contains: 'Contains',\n  notContains: 'Does not contain',\n  startsWith: 'Starts with',\n  endsWith: 'Ends with',\n  equal: 'Equals',\n  notEqual: 'Does not equal',\n  greaterThan: 'Greater than',\n  greaterThanOrEqual: 'Greater than or equal to',\n  lessThan: 'Less than',\n  lessThanOrEqual: 'Less than or equal to'\n};\n\nvar TableFilterRowBase = /*#__PURE__*/function (_super) {\n  __extends(TableFilterRowBase, _super);\n\n  function TableFilterRowBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      filterOperations: {}\n    };\n    return _this;\n  }\n\n  TableFilterRowBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        rowHeight = _a.rowHeight,\n        showFilterSelector = _a.showFilterSelector,\n        FilterCell = _a.cellComponent,\n        FilterRow = _a.rowComponent,\n        FilterSelector = _a.filterSelectorComponent,\n        iconComponent = _a.iconComponent,\n        toggleButtonComponent = _a.toggleButtonComponent,\n        EditorComponent = _a.editorComponent,\n        messages = _a.messages;\n    var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages$2), messages));\n\n    var tableHeaderRowsComputed = function (_a) {\n      var tableHeaderRows = _a.tableHeaderRows;\n      return tableHeaderRowsWithFilter(tableHeaderRows, rowHeight);\n    };\n\n    return createElement(Plugin, {\n      name: \"TableFilterRow\",\n      dependencies: pluginDependencies$b\n    }, createElement(Getter, {\n      name: \"tableHeaderRows\",\n      computed: tableHeaderRowsComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n            tableColumn = _a.tableColumn;\n        return isFilterTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var filters = _a.filters,\n            isColumnFilteringEnabled = _a.isColumnFilteringEnabled,\n            getAvailableFilterOperations = _a.getAvailableFilterOperations,\n            isDataRemote = _a.isDataRemote;\n        var changeColumnFilter = _b.changeColumnFilter,\n            scrollToRow = _b.scrollToRow;\n        var filterOperations = _this.state.filterOperations;\n        var columnName = params.tableColumn.column.name;\n        var filter = getColumnFilterConfig(filters, columnName);\n\n        var onFilter = function (config) {\n          if (isDataRemote) {\n            scrollToRow(TOP_POSITION);\n          }\n\n          changeColumnFilter({\n            columnName: columnName,\n            config: config\n          });\n        };\n\n        var columnFilterOperations = getColumnFilterOperations(getAvailableFilterOperations, columnName);\n        var selectedFilterOperation = getSelectedFilterOperation(filterOperations, columnName, filter, columnFilterOperations);\n\n        var handleFilterOperationChange = function (value) {\n          var _a;\n\n          _this.setState({\n            filterOperations: __assign(__assign({}, filterOperations), (_a = {}, _a[columnName] = value, _a))\n          });\n\n          if (filter && !isFilterValueEmpty(filter.value)) {\n            onFilter({\n              value: filter.value,\n              operation: value\n            });\n          }\n        };\n\n        var handleFilterValueChange = function (value) {\n          return onFilter(!isFilterValueEmpty(value) ? {\n            value: value,\n            operation: selectedFilterOperation\n          } : null);\n        };\n\n        var filteringEnabled = isColumnFilteringEnabled(columnName);\n        return createElement(TemplatePlaceholder, {\n          name: \"valueEditor\",\n          params: {\n            column: params.tableColumn.column,\n            value: filter ? filter.value : undefined,\n            onValueChange: handleFilterValueChange,\n            disabled: !filteringEnabled\n          }\n        }, function (content) {\n          return createElement(FilterCell, __assign({}, params, {\n            getMessage: getMessage,\n            column: params.tableColumn.column,\n            filter: filter,\n            filteringEnabled: filteringEnabled,\n            onFilter: onFilter\n          }), showFilterSelector ? createElement(FilterSelector, {\n            toggleButtonComponent: toggleButtonComponent,\n            iconComponent: iconComponent,\n            value: selectedFilterOperation,\n            availableValues: columnFilterOperations,\n            onChange: handleFilterOperationChange,\n            disabled: !filteringEnabled,\n            getMessage: getMessage\n          }) : null, content || createElement(EditorComponent, {\n            value: filter ? filter.value : undefined,\n            disabled: !filteringEnabled,\n            getMessage: getMessage,\n            onChange: handleFilterValueChange\n          }));\n        });\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isFilterTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(FilterRow, __assign({}, params));\n    }));\n  };\n\n  TableFilterRowBase.ROW_TYPE = TABLE_FILTER_TYPE;\n  TableFilterRowBase.defaultProps = {\n    showFilterSelector: false,\n    messages: {}\n  };\n  TableFilterRowBase.components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    filterSelectorComponent: 'FilterSelector',\n    iconComponent: 'Icon',\n    editorComponent: 'Editor',\n    toggleButtonComponent: 'ToggleButton'\n  };\n  return TableFilterRowBase;\n}(PureComponent);\n/** A plugin that renders a filter row. */\n\n\nvar TableFilterRow = TableFilterRowBase;\nvar pluginDependencies$c = [{\n  name: 'EditingState'\n}, {\n  name: 'Table'\n}, {\n  name: 'DataTypeProvider',\n  optional: true\n}];\n\nvar TableEditRowBase = /*#__PURE__*/function (_super) {\n  __extends(TableEditRowBase, _super);\n\n  function TableEditRowBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TableEditRowBase.prototype.render = function () {\n    var _a = this.props,\n        EditCell = _a.cellComponent,\n        EditRow = _a.rowComponent,\n        rowHeight = _a.rowHeight;\n\n    var tableBodyRowsComputed = function (_a) {\n      var tableBodyRows = _a.tableBodyRows,\n          editingRowIds = _a.editingRowIds,\n          addedRows = _a.addedRows;\n      return tableRowsWithEditing(tableBodyRows, editingRowIds, addedRows, rowHeight);\n    };\n\n    return createElement(Plugin, {\n      name: \"TableEditRow\",\n      dependencies: pluginDependencies$c\n    }, createElement(Getter, {\n      name: \"tableBodyRows\",\n      computed: tableBodyRowsComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n            tableColumn = _a.tableColumn;\n        return isEditTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var getCellValue = _a.getCellValue,\n            createRowChange = _a.createRowChange,\n            rowChanges = _a.rowChanges,\n            isColumnEditingEnabled = _a.isColumnEditingEnabled;\n        var changeAddedRow = _b.changeAddedRow,\n            changeRow = _b.changeRow;\n        var _c = params.tableRow,\n            rowId = _c.rowId,\n            row = _c.row;\n        var column = params.tableColumn.column;\n        var columnName = column.name;\n        var isNew = isAddedTableRow(params.tableRow);\n        var changedRow = isNew ? row : __assign(__assign({}, row), getRowChange(rowChanges, rowId));\n        var value = getCellValue(changedRow, columnName);\n\n        var onValueChange = function (newValue) {\n          var changeArgs = {\n            rowId: rowId,\n            change: createRowChange(changedRow, newValue, columnName)\n          };\n\n          if (isNew) {\n            changeAddedRow(changeArgs);\n          } else {\n            changeRow(changeArgs);\n          }\n        };\n\n        var editingEnabled = isColumnEditingEnabled(columnName);\n        return createElement(TemplatePlaceholder, {\n          name: \"valueEditor\",\n          params: {\n            column: column,\n            row: row,\n            value: value,\n            onValueChange: onValueChange,\n            disabled: !editingEnabled\n          }\n        }, function (content) {\n          return createElement(EditCell, __assign({}, params, {\n            row: row,\n            column: column,\n            value: value,\n            editingEnabled: editingEnabled,\n            onValueChange: onValueChange\n          }), content);\n        });\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!(isEditTableRow(tableRow) || isAddedTableRow(tableRow));\n      }\n    }, function (params) {\n      return createElement(EditRow, __assign({}, params, {\n        row: params.tableRow.row\n      }));\n    }));\n  };\n\n  TableEditRowBase.ADDED_ROW_TYPE = TABLE_ADDED_TYPE;\n  TableEditRowBase.EDIT_ROW_TYPE = TABLE_EDIT_TYPE;\n  TableEditRowBase.components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell'\n  };\n  return TableEditRowBase;\n}(PureComponent);\n/** A plugin that renders a row being edited. */\n\n\nvar TableEditRow = TableEditRowBase;\nvar pluginDependencies$d = [{\n  name: 'EditingState'\n}, {\n  name: 'Table'\n}];\nvar defaultMessages$3 = {\n  addCommand: 'New',\n  editCommand: 'Edit',\n  deleteCommand: 'Delete',\n  commitCommand: 'Save',\n  cancelCommand: 'Cancel'\n};\n\nvar TableEditColumnBase = /*#__PURE__*/function (_super) {\n  __extends(TableEditColumnBase, _super);\n\n  function TableEditColumnBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TableEditColumnBase.prototype.render = function () {\n    var _a = this.props,\n        Cell = _a.cellComponent,\n        HeaderCell = _a.headerCellComponent,\n        Command = _a.commandComponent,\n        showAddCommand = _a.showAddCommand,\n        showEditCommand = _a.showEditCommand,\n        showDeleteCommand = _a.showDeleteCommand,\n        width = _a.width,\n        messages = _a.messages;\n    var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages$3), messages));\n\n    var tableColumnsComputed = function (_a) {\n      var tableColumns = _a.tableColumns;\n      return tableColumnsWithEditing(tableColumns, width);\n    };\n\n    return createElement(Plugin, {\n      name: \"TableEditColumn\",\n      dependencies: pluginDependencies$d\n    }, createElement(Getter, {\n      name: \"tableColumns\",\n      computed: tableColumnsComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n            tableColumn = _a.tableColumn;\n        return isHeadingEditCommandsTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (getters, actions) {\n        return createElement(HeaderCell, __assign({}, params), showAddCommand && createElement(Command, {\n          id: \"add\",\n          text: getMessage('addCommand'),\n          onExecute: function () {\n            return actions.addRow();\n          }\n        }));\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n            tableColumn = _a.tableColumn;\n        return isEditCommandsTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (getters, actions) {\n        var isEdit = isEditTableRow(params.tableRow);\n        var isNew = isAddedTableRow(params.tableRow);\n        var isEditing = isEdit || isNew;\n        var rowIds = [params.tableRow.rowId];\n        return createElement(Cell, __assign({}, params, {\n          row: params.tableRow.row\n        }), showEditCommand && !isEditing && createElement(Command, {\n          id: \"edit\",\n          text: getMessage('editCommand'),\n          onExecute: function () {\n            return actions.startEditRows({\n              rowIds: rowIds\n            });\n          }\n        }), showDeleteCommand && !isEditing && createElement(Command, {\n          id: \"delete\",\n          text: getMessage('deleteCommand'),\n          onExecute: function () {\n            actions.deleteRows({\n              rowIds: rowIds\n            });\n            actions.commitDeletedRows({\n              rowIds: rowIds\n            });\n          }\n        }), isEditing && createElement(Command, {\n          id: \"commit\",\n          text: getMessage('commitCommand'),\n          onExecute: function () {\n            if (isNew) {\n              actions.commitAddedRows({\n                rowIds: rowIds\n              });\n            } else {\n              actions.stopEditRows({\n                rowIds: rowIds\n              });\n              actions.commitChangedRows({\n                rowIds: rowIds\n              });\n            }\n          }\n        }), isEditing && createElement(Command, {\n          id: \"cancel\",\n          text: getMessage('cancelCommand'),\n          onExecute: function () {\n            if (isNew) {\n              actions.cancelAddedRows({\n                rowIds: rowIds\n              });\n            } else {\n              actions.stopEditRows({\n                rowIds: rowIds\n              });\n              actions.cancelChangedRows({\n                rowIds: rowIds\n              });\n            }\n          }\n        }));\n      });\n    }));\n  };\n\n  TableEditColumnBase.COLUMN_TYPE = TABLE_EDIT_COMMAND_TYPE;\n  TableEditColumnBase.defaultProps = {\n    showAddCommand: false,\n    showEditCommand: false,\n    showDeleteCommand: false,\n    width: 140,\n    messages: {}\n  };\n  TableEditColumnBase.components = {\n    cellComponent: 'Cell',\n    headerCellComponent: 'HeaderCell',\n    commandComponent: 'Command'\n  };\n  return TableEditColumnBase;\n}(PureComponent);\n/***\r\n * A plugin that renders a command column. This column contains controls used for row editing,\r\n * creating, or deleting and committing/canceling changes.\r\n * */\n\n\nvar TableEditColumn = TableEditColumnBase;\nvar pluginDependencies$e = [{\n  name: 'Table'\n}]; // tslint:disable-next-line: max-line-length\n\nvar TableColumnResizingBase = /*#__PURE__*/function (_super) {\n  __extends(TableColumnResizingBase, _super);\n\n  function TableColumnResizingBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.widthGetters = {};\n    _this.cachedWidths = {};\n    _this.state = {\n      columnWidths: props.columnWidths || props.defaultColumnWidths,\n      draftColumnWidths: []\n    };\n    var stateHelper = createStateHelper(_this, {\n      columnWidths: function () {\n        var onColumnWidthsChange = _this.props.onColumnWidthsChange;\n        return onColumnWidthsChange;\n      }\n    });\n    _this.tableColumnsComputed = memoize(function (columnWidths) {\n      return function (_a) {\n        var tableColumns = _a.tableColumns;\n        return tableColumnsWithWidths(tableColumns, columnWidths, _this.props.resizingMode);\n      };\n    });\n    _this.tableColumnsDraftComputed = memoize(function (draftColumnWidths) {\n      return function (_a) {\n        var tableColumns = _a.tableColumns;\n        return tableColumnsWithDraftWidths(tableColumns, draftColumnWidths, _this.props.resizingMode);\n      };\n    });\n    _this.changeTableColumnWidth = stateHelper.applyReducer.bind(stateHelper, function (prevState, payload) {\n      var cachedWidths = __assign({}, _this.cachedWidths);\n\n      var _a = _this.props,\n          minColumnWidth = _a.minColumnWidth,\n          maxColumnWidth = _a.maxColumnWidth,\n          columnExtensions = _a.columnExtensions,\n          resizingMode = _a.resizingMode;\n      return changeTableColumnWidth(prevState, __assign(__assign({}, payload), {\n        cachedWidths: cachedWidths,\n        resizingMode: resizingMode,\n        minColumnWidth: minColumnWidth,\n        maxColumnWidth: maxColumnWidth,\n        columnExtensions: columnExtensions\n      }));\n    });\n    _this.draftTableColumnWidth = stateHelper.applyReducer.bind(stateHelper, function (prevState, payload) {\n      _this.storeCache(payload);\n\n      var cachedWidths = _this.cachedWidths;\n      var _a = _this.props,\n          minColumnWidth = _a.minColumnWidth,\n          maxColumnWidth = _a.maxColumnWidth,\n          columnExtensions = _a.columnExtensions,\n          resizingMode = _a.resizingMode;\n      return draftTableColumnWidth(prevState, __assign(__assign({}, payload), {\n        cachedWidths: cachedWidths,\n        resizingMode: resizingMode,\n        minColumnWidth: minColumnWidth,\n        maxColumnWidth: maxColumnWidth,\n        columnExtensions: columnExtensions\n      }));\n    });\n    _this.cancelTableColumnWidthDraft = stateHelper.applyReducer.bind(stateHelper, cancelTableColumnWidthDraft);\n\n    _this.storeCache = function (_a) {\n      var columnName = _a.columnName,\n          nextColumnName = _a.nextColumnName;\n\n      if (Object.keys(_this.cachedWidths).length === 0) {\n        _this.cachedWidths[columnName] = _this.widthGetters[columnName]();\n\n        if (nextColumnName) {\n          _this.cachedWidths[nextColumnName] = _this.widthGetters[nextColumnName]();\n        }\n      }\n    };\n\n    _this.clearCache = function () {\n      Object.keys(_this.cachedWidths).forEach(function (columnName) {\n        return delete _this.cachedWidths[columnName];\n      });\n    };\n\n    _this.storeWidthGetters = memoize(function (_a) {\n      var tableColumn = _a.tableColumn,\n          getter = _a.getter,\n          tableColumns = _a.tableColumns;\n\n      if (tableColumn.type === TABLE_DATA_TYPE) {\n        _this.widthGetters[tableColumn.column.name] = getter;\n      }\n\n      Object.keys(_this.widthGetters).forEach(function (columnName) {\n        var columnIndex = tableColumns.findIndex(function (_a) {\n          var type = _a.type,\n              column = _a.column;\n          return type === TABLE_DATA_TYPE && column.name === columnName;\n        });\n\n        if (columnIndex === -1) {\n          delete _this.widthGetters[columnName];\n        }\n      });\n    });\n    return _this;\n  }\n\n  TableColumnResizingBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.columnWidths,\n        columnWidths = _a === void 0 ? prevState.columnWidths : _a;\n    return {\n      columnWidths: columnWidths\n    };\n  };\n\n  TableColumnResizingBase.prototype.componentDidUpdate = function (_, prevState) {\n    var currentWidths = this.state.columnWidths;\n    var prevWidths = prevState.columnWidths;\n\n    if (currentWidths !== prevWidths) {\n      this.clearCache();\n    }\n  };\n\n  TableColumnResizingBase.prototype.render = function () {\n    var _a = this.state,\n        columnWidths = _a.columnWidths,\n        draftColumnWidths = _a.draftColumnWidths;\n    var resizingMode = this.props.resizingMode;\n    var tableColumnsComputed = this.tableColumnsComputed(columnWidths);\n    var tableColumnsDraftComputed = this.tableColumnsDraftComputed(draftColumnWidths);\n    return createElement(Plugin, {\n      name: \"TableColumnResizing\",\n      dependencies: pluginDependencies$e\n    }, createElement(Getter, {\n      name: \"tableColumnResizingEnabled\",\n      value: true\n    }), createElement(Getter, {\n      name: \"tableColumns\",\n      computed: tableColumnsComputed\n    }), createElement(Getter, {\n      name: \"tableColumns\",\n      computed: tableColumnsDraftComputed\n    }), createElement(Getter, {\n      name: \"columnResizingMode\",\n      value: resizingMode\n    }), createElement(Action, {\n      name: \"changeTableColumnWidth\",\n      action: this.changeTableColumnWidth\n    }), createElement(Action, {\n      name: \"draftTableColumnWidth\",\n      action: this.draftTableColumnWidth\n    }), createElement(Action, {\n      name: \"cancelTableColumnWidthDraft\",\n      action: this.cancelTableColumnWidthDraft\n    }), createElement(Action, {\n      name: \"storeWidthGetters\",\n      action: this.storeWidthGetters\n    }));\n  };\n\n  TableColumnResizingBase.defaultProps = {\n    defaultColumnWidths: [],\n    resizingMode: 'widget'\n  };\n  return TableColumnResizingBase;\n}(PureComponent);\n/* tslint:disable: max-line-length */\n\n/** A plugin that manages table column widths. */\n\n\nvar TableColumnResizing = TableColumnResizingBase;\n/* tslint:enable: max-line-length */\n\nvar pluginDependencies$f = [{\n  name: 'PagingState'\n}];\nvar defaultMessages$4 = {\n  showAll: 'All',\n  info: function (_a) {\n    var from = _a.from,\n        to = _a.to,\n        count = _a.count;\n    return \"\" + from + (from < to ? \"-\" + to : '') + \" of \" + count;\n  }\n};\n\nvar PagingPanelBase = /*#__PURE__*/function (_super) {\n  __extends(PagingPanelBase, _super);\n\n  function PagingPanelBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  PagingPanelBase.prototype.render = function () {\n    var _a = this.props,\n        Pager = _a.containerComponent,\n        pageSizes = _a.pageSizes,\n        messages = _a.messages;\n    var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages$4), messages));\n    return createElement(Plugin, {\n      name: \"PagingPanel\",\n      dependencies: pluginDependencies$f\n    }, createElement(Template, {\n      name: \"footer\"\n    }, createElement(TemplatePlaceholder, null), createElement(TemplateConnector, null, function (_a, _b) {\n      var currentPage = _a.currentPage,\n          pageSize = _a.pageSize,\n          totalCount = _a.totalCount;\n      var setCurrentPage = _b.setCurrentPage,\n          setPageSize = _b.setPageSize;\n      return createElement(Pager, {\n        currentPage: currentPage,\n        pageSize: pageSize,\n        totalCount: totalCount,\n        totalPages: pageCount(totalCount, pageSize),\n        pageSizes: pageSizes,\n        getMessage: getMessage,\n        onCurrentPageChange: setCurrentPage,\n        onPageSizeChange: setPageSize\n      });\n    })));\n  };\n\n  PagingPanelBase.defaultProps = {\n    pageSizes: [],\n    messages: {}\n  };\n  PagingPanelBase.components = {\n    containerComponent: 'Container'\n  };\n  return PagingPanelBase;\n}(PureComponent);\n/** A plugin that renders the paging panel used for navigation through data pages. */\n\n\nvar PagingPanel = PagingPanelBase;\nvar defaultProps = {\n  draggingEnabled: false,\n  onDragStart: function () {},\n  onDragEnd: function () {}\n}; // tslint:disable-next-line: max-line-length\n\nvar ItemLayout = /*#__PURE__*/function (_super) {\n  __extends(ItemLayout, _super);\n\n  function ItemLayout(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      dragging: false\n    };\n    return _this;\n  }\n\n  ItemLayout.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        item = _a.item,\n        Item = _a.itemComponent,\n        draggingEnabled = _a.draggingEnabled,\n        onDragStart = _a.onDragStart,\n        onDragEnd = _a.onDragEnd;\n    var dragging = this.state.dragging;\n    var itemElement = createElement(Item, {\n      item: __assign(__assign({}, item), {\n        draft: dragging || item.draft\n      })\n    });\n    return draggingEnabled ? createElement(DragSource, {\n      payload: [{\n        type: 'column',\n        columnName: item.column.name\n      }],\n      onStart: function () {\n        _this.setState({\n          dragging: true\n        });\n\n        onDragStart();\n      },\n      onEnd: function () {\n        _this.setState({\n          dragging: false\n        });\n\n        onDragEnd();\n      }\n    }, itemElement) : itemElement;\n  };\n\n  ItemLayout.defaultProps = defaultProps;\n  return ItemLayout;\n}(PureComponent);\n\nvar defaultProps$1 = {\n  onGroup: function () {},\n  draggingEnabled: false,\n  isColumnGroupingEnabled: function () {\n    return false;\n  },\n  onGroupDraft: function () {},\n  onGroupDraftCancel: function () {}\n}; // tslint:disable-next-line: max-line-length\n\nvar GroupPanelLayoutBase = /*#__PURE__*/function (_super) {\n  __extends(GroupPanelLayoutBase, _super);\n\n  function GroupPanelLayoutBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.itemRefs = [];\n    _this.draggingColumnName = null;\n    _this.state = {\n      sourceColumnName: null,\n      targetItemIndex: -1\n    };\n\n    _this.handleDragEvent = function (eventHandler, _a) {\n      var payload = _a.payload,\n          restArgs = __rest(_a, [\"payload\"]);\n\n      var isColumnGroupingEnabled = _this.props.isColumnGroupingEnabled;\n      var columnName = payload[0].columnName;\n\n      if (isColumnGroupingEnabled(columnName)) {\n        eventHandler(__assign({\n          payload: payload\n        }, restArgs));\n      }\n    };\n\n    _this.onEnter = function (_a) {\n      var payload = _a.payload;\n\n      _this.setState({\n        sourceColumnName: payload[0].columnName\n      });\n    };\n\n    _this.onOver = function (_a) {\n      var clientOffset = _a.clientOffset;\n      var _b = _this.props,\n          onGroupDraft = _b.onGroupDraft,\n          items = _b.items;\n      var _c = _this.state,\n          sourceColumnName = _c.sourceColumnName,\n          prevTargetItemIndex = _c.targetItemIndex; // eslint-disable-next-line react/no-find-dom-node\n\n      var itemGeometries = _this.itemRefs.map(function (ref) {\n        return findDOMNode(ref).getBoundingClientRect();\n      });\n\n      var sourceItemIndex = items.findIndex(function (_a) {\n        var column = _a.column;\n        return column.name === sourceColumnName;\n      });\n      var targetItemIndex = getGroupCellTargetIndex(itemGeometries, sourceItemIndex, clientOffset);\n      if (prevTargetItemIndex === targetItemIndex) return;\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex\n      });\n\n      _this.setState({\n        targetItemIndex: targetItemIndex\n      });\n    };\n\n    _this.onLeave = function () {\n      var onGroupDraft = _this.props.onGroupDraft;\n      var sourceColumnName = _this.state.sourceColumnName;\n\n      if (!_this.draggingColumnName) {\n        _this.resetState();\n\n        return;\n      }\n\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: -1\n      });\n\n      _this.setState({\n        targetItemIndex: -1\n      });\n    };\n\n    _this.onDrop = function () {\n      var onGroup = _this.props.onGroup;\n      var _a = _this.state,\n          sourceColumnName = _a.sourceColumnName,\n          targetItemIndex = _a.targetItemIndex;\n\n      _this.resetState();\n\n      onGroup({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex\n      });\n    };\n\n    _this.onDragStart = function (columnName) {\n      _this.draggingColumnName = columnName;\n    };\n\n    _this.onDragEnd = function () {\n      _this.draggingColumnName = null;\n      var _a = _this.state,\n          sourceColumnName = _a.sourceColumnName,\n          targetItemIndex = _a.targetItemIndex;\n      var onGroup = _this.props.onGroup;\n\n      if (sourceColumnName && targetItemIndex === -1) {\n        onGroup({\n          columnName: sourceColumnName\n        });\n      }\n\n      _this.resetState();\n    };\n\n    return _this;\n  }\n\n  GroupPanelLayoutBase.prototype.resetState = function () {\n    var onGroupDraftCancel = this.props.onGroupDraftCancel;\n    onGroupDraftCancel();\n    this.setState({\n      sourceColumnName: null,\n      targetItemIndex: -1\n    });\n  };\n\n  GroupPanelLayoutBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        items = _a.items,\n        EmptyMessage = _a.emptyMessageComponent,\n        Container = _a.containerComponent,\n        Item = _a.itemComponent,\n        draggingEnabled = _a.draggingEnabled,\n        isColumnGroupingEnabled = _a.isColumnGroupingEnabled;\n    this.itemRefs = [];\n    var groupPanel = items.length ? createElement(Container, null, items.map(function (item) {\n      var columnName = item.column.name;\n      return createElement(ItemLayout, {\n        key: columnName,\n        ref: function (element) {\n          return element && _this.itemRefs.push(element);\n        },\n        item: item,\n        itemComponent: Item,\n        draggingEnabled: draggingEnabled && isColumnGroupingEnabled(columnName),\n        onDragStart: function () {\n          return _this.onDragStart(columnName);\n        },\n        onDragEnd: _this.onDragEnd\n      });\n    })) : createElement(EmptyMessage, null);\n    return draggingEnabled ? createElement(DropTarget, {\n      onEnter: function (args) {\n        return _this.handleDragEvent(_this.onEnter, args);\n      },\n      onOver: function (args) {\n        return _this.handleDragEvent(_this.onOver, args);\n      },\n      onLeave: function (args) {\n        return _this.handleDragEvent(_this.onLeave, args);\n      },\n      onDrop: function (args) {\n        return _this.handleDragEvent(_this.onDrop, args);\n      }\n    }, groupPanel) : groupPanel;\n  };\n\n  GroupPanelLayoutBase.defaultProps = defaultProps$1;\n  return GroupPanelLayoutBase;\n}(PureComponent);\n/** @internal */\n\n\nvar GroupPanelLayout = GroupPanelLayoutBase;\nvar defaultMessages$5 = {\n  groupByColumn: 'Drag a column header here to group by that column'\n};\nvar defaultProps$2 = {\n  showSortingControls: false,\n  showGroupingControls: false,\n  messages: {}\n};\n\nvar GroupingPanelRaw = /*#__PURE__*/function (_super) {\n  __extends(GroupingPanelRaw, _super);\n\n  function GroupingPanelRaw() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GroupingPanelRaw.prototype.render = function () {\n    var _a = this.props,\n        LayoutComponent = _a.layoutComponent,\n        Container = _a.containerComponent,\n        Item = _a.itemComponent,\n        EmptyMessage = _a.emptyMessageComponent,\n        showSortingControls = _a.showSortingControls,\n        showGroupingControls = _a.showGroupingControls,\n        messages = _a.messages;\n    var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages$5), messages));\n\n    var EmptyMessagePlaceholder = function () {\n      return createElement(EmptyMessage, {\n        getMessage: getMessage\n      });\n    };\n\n    var ItemPlaceholder = function (_a) {\n      var item = _a.item;\n      var columnName = item.column.name;\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var sorting = _a.sorting,\n            isColumnSortingEnabled = _a.isColumnSortingEnabled,\n            isColumnGroupingEnabled = _a.isColumnGroupingEnabled;\n        var changeColumnGrouping = _b.changeColumnGrouping,\n            changeColumnSorting = _b.changeColumnSorting;\n        var sortingEnabled = isColumnSortingEnabled && isColumnSortingEnabled(columnName);\n        var groupingEnabled = isColumnGroupingEnabled && isColumnGroupingEnabled(columnName);\n        return createElement(Item, {\n          item: item,\n          sortingEnabled: sortingEnabled,\n          groupingEnabled: groupingEnabled,\n          showSortingControls: showSortingControls,\n          sortingDirection: showSortingControls ? getColumnSortingDirection(sorting, columnName) : undefined,\n          showGroupingControls: showGroupingControls,\n          onGroup: function () {\n            return changeColumnGrouping({\n              columnName: columnName\n            });\n          },\n          onSort: function (_a) {\n            var direction = _a.direction,\n                keepOther = _a.keepOther;\n            return changeColumnSorting({\n              columnName: columnName,\n              direction: direction,\n              keepOther: keepOther\n            });\n          }\n        });\n      });\n    };\n\n    return createElement(Plugin, {\n      name: \"GroupingPanel\",\n      dependencies: [{\n        name: 'GroupingState'\n      }, {\n        name: 'Toolbar'\n      }, {\n        name: 'SortingState',\n        optional: !showSortingControls\n      }]\n    }, createElement(Template, {\n      name: \"toolbarContent\"\n    }, createElement(TemplateConnector, null, function (_a, _b) {\n      var columns = _a.columns,\n          grouping = _a.grouping,\n          draftGrouping = _a.draftGrouping,\n          draggingEnabled = _a.draggingEnabled,\n          isColumnGroupingEnabled = _a.isColumnGroupingEnabled;\n      var changeColumnGrouping = _b.changeColumnGrouping,\n          draftColumnGrouping = _b.draftColumnGrouping,\n          cancelColumnGroupingDraft = _b.cancelColumnGroupingDraft;\n      return createElement(LayoutComponent, {\n        items: groupingPanelItems(columns, grouping, draftGrouping),\n        isColumnGroupingEnabled: isColumnGroupingEnabled,\n        draggingEnabled: draggingEnabled,\n        onGroup: changeColumnGrouping,\n        onGroupDraft: draftColumnGrouping,\n        onGroupDraftCancel: cancelColumnGroupingDraft,\n        itemComponent: ItemPlaceholder,\n        emptyMessageComponent: EmptyMessagePlaceholder,\n        containerComponent: Container\n      });\n    }), createElement(TemplatePlaceholder, null)));\n  };\n\n  GroupingPanelRaw.defaultProps = defaultProps$2;\n  GroupingPanelRaw.components = {\n    layoutComponent: 'Layout',\n    containerComponent: 'Container',\n    itemComponent: 'Item',\n    emptyMessageComponent: 'EmptyMessage'\n  };\n  return GroupingPanelRaw;\n}(PureComponent);\n/***\r\n * A plugin that renders the Grouping Panel in the Grid's header. This panel displays grouped\r\n * columns and allows a user to modify grouping options.Optionally, the plugin allows an end-user\r\n * to change grouped columns' sorting order and render sorting indicators.\r\n * */\n\n\nvar GroupingPanel = withComponents({\n  Layout: GroupPanelLayout\n})(GroupingPanelRaw);\n\nvar DataTypeProviderBase = /*#__PURE__*/function (_super) {\n  __extends(DataTypeProviderBase, _super);\n\n  function DataTypeProviderBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DataTypeProviderBase.prototype.render = function () {\n    var _a = this.props,\n        columnNames = _a.for,\n        Formatter = _a.formatterComponent,\n        Editor = _a.editorComponent,\n        availableFilterOperations = _a.availableFilterOperations;\n\n    var getAvailableFilterOperationsComputed = function (_a) {\n      var getAvailableFilterOperations = _a.getAvailableFilterOperations;\n      return getAvailableFilterOperationsGetter(getAvailableFilterOperations, availableFilterOperations, columnNames);\n    };\n\n    return createElement(Plugin, {\n      name: \"DataTypeProvider\",\n      key: columnNames.join('_')\n    }, createElement(Getter, {\n      name: \"getAvailableFilterOperations\",\n      computed: getAvailableFilterOperationsComputed\n    }), Formatter ? createElement(Template, {\n      name: \"valueFormatter\",\n      predicate: function (_a) {\n        var column = _a.column;\n        return columnNames.includes(column.name);\n      }\n    }, function (params) {\n      return createElement(Formatter, __assign({}, params));\n    }) : null, Editor ? createElement(Template, {\n      name: \"valueEditor\",\n      predicate: function (_a) {\n        var column = _a.column;\n        return columnNames.includes(column.name);\n      }\n    }, function (params) {\n      return createElement(Editor, __assign({}, params));\n    }) : null);\n  };\n\n  return DataTypeProviderBase;\n}(PureComponent); // tslint:disable-next-line: max-line-length\n\n/** A plugin that allows you to customize formatting options and editors depending on the data type. */\n\n\nvar DataTypeProvider = DataTypeProviderBase;\nvar pluginDependencies$g = [{\n  name: 'Table'\n}];\nvar defaultMessages$6 = {\n  noColumns: 'Nothing to show'\n};\n\nvar columnExtensionValueGetter$4 = function (columnExtensions, defaultValue) {\n  return getColumnExtensionValueGetter(columnExtensions, 'togglingEnabled', defaultValue);\n}; // tslint:disable-next-line: max-line-length\n\n\nvar TableColumnVisibilityBase = /*#__PURE__*/function (_super) {\n  __extends(TableColumnVisibilityBase, _super);\n\n  function TableColumnVisibilityBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      hiddenColumnNames: props.hiddenColumnNames || props.defaultHiddenColumnNames\n    };\n    var stateHelper = createStateHelper(_this, {\n      hiddenColumnNames: function () {\n        var onHiddenColumnNamesChange = _this.props.onHiddenColumnNamesChange;\n        return onHiddenColumnNamesChange;\n      }\n    });\n    _this.toggleColumnVisibility = stateHelper.applyFieldReducer.bind(stateHelper, 'hiddenColumnNames', toggleColumn);\n    return _this;\n  }\n\n  TableColumnVisibilityBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.hiddenColumnNames,\n        hiddenColumnNames = _a === void 0 ? prevState.hiddenColumnNames : _a;\n    return {\n      hiddenColumnNames: hiddenColumnNames\n    };\n  };\n\n  TableColumnVisibilityBase.prototype.render = function () {\n    var _a = this.props,\n        EmptyMessage = _a.emptyMessageComponent,\n        messages = _a.messages;\n    var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages$6), messages));\n    var hiddenColumnNames = this.state.hiddenColumnNames;\n    var _b = this.props,\n        columnExtensions = _b.columnExtensions,\n        columnTogglingEnabled = _b.columnTogglingEnabled;\n    return createElement(Plugin, {\n      name: \"TableColumnVisibility\",\n      dependencies: pluginDependencies$g\n    }, createElement(VisibleTableColumns, {\n      hiddenColumnNames: hiddenColumnNames\n    }), createElement(Getter, {\n      name: \"isColumnTogglingEnabled\",\n      value: columnExtensionValueGetter$4(columnExtensions, columnTogglingEnabled)\n    }), createElement(Action, {\n      name: \"toggleColumnVisibility\",\n      action: this.toggleColumnVisibility\n    }), createElement(Template, {\n      name: \"table\"\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var tableColumns = _a.tableColumns;\n        return tableDataColumnsExist(tableColumns) ? createElement(TemplatePlaceholder, null) : createElement(EmptyMessage, __assign({\n          getMessage: getMessage\n        }, params));\n      });\n    }));\n  };\n\n  TableColumnVisibilityBase.defaultProps = {\n    defaultHiddenColumnNames: [],\n    messages: {},\n    columnTogglingEnabled: true\n  };\n  TableColumnVisibilityBase.components = {\n    emptyMessageComponent: 'EmptyMessage'\n  };\n  return TableColumnVisibilityBase;\n}(PureComponent);\n\nTableColumnVisibilityBase.components = {\n  emptyMessageComponent: 'EmptyMessage'\n};\n/* tslint:disable: max-line-length */\n\n/** A plugin that manages Grid columns' visibility. */\n\nvar TableColumnVisibility = TableColumnVisibilityBase;\n/* tslint:enable: max-line-length */\n\nvar ToolbarBase = /*#__PURE__*/function (_super) {\n  __extends(ToolbarBase, _super);\n\n  function ToolbarBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ToolbarBase.prototype.render = function () {\n    var _a = this.props,\n        Root = _a.rootComponent,\n        FlexibleSpaceComponent = _a.flexibleSpaceComponent;\n    return createElement(Plugin, {\n      name: \"Toolbar\"\n    }, createElement(Template, {\n      name: \"header\"\n    }, createElement(Root, null, createElement(TemplatePlaceholder, {\n      name: \"toolbarContent\"\n    })), createElement(TemplatePlaceholder, null)), createElement(Template, {\n      name: \"toolbarContent\"\n    }, createElement(FlexibleSpaceComponent, null)));\n  };\n\n  ToolbarBase.components = {\n    rootComponent: 'Root',\n    flexibleSpaceComponent: 'FlexibleSpace'\n  };\n  return ToolbarBase;\n}(PureComponent);\n/** A plugin that renders the Grid toolbar. */\n\n\nvar Toolbar = ToolbarBase;\n\nvar TreeDataStateBase = /*#__PURE__*/function (_super) {\n  __extends(TreeDataStateBase, _super);\n\n  function TreeDataStateBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds\n    };\n    var stateHelper = createStateHelper(_this, {\n      expandedRowIds: function () {\n        var onExpandedRowIdsChange = _this.props.onExpandedRowIdsChange;\n        return onExpandedRowIdsChange;\n      }\n    });\n    _this.toggleRowExpanded = stateHelper.applyFieldReducer.bind(stateHelper, 'expandedRowIds', toggleRowExpanded);\n    return _this;\n  }\n\n  TreeDataStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.expandedRowIds,\n        expandedRowIds = _a === void 0 ? prevState.expandedRowIds : _a;\n    return {\n      expandedRowIds: expandedRowIds\n    };\n  };\n\n  TreeDataStateBase.prototype.render = function () {\n    var expandedRowIds = this.state.expandedRowIds;\n    return createElement(Plugin, {\n      name: \"TreeDataState\"\n    }, createElement(Getter, {\n      name: \"expandedRowIds\",\n      value: expandedRowIds\n    }), ' ', createElement(Action, {\n      name: \"toggleRowExpanded\",\n      action: this.toggleRowExpanded\n    }));\n  };\n\n  TreeDataStateBase.defaultProps = {\n    defaultExpandedRowIds: []\n  };\n  return TreeDataStateBase;\n}(PureComponent);\n/** A plugin that manages the expanded state for tree rows. */\n\n\nvar TreeDataState = TreeDataStateBase;\nvar pluginDependencies$h = [{\n  name: 'TreeDataState'\n}];\n\nvar expandedTreeRowsComputed = function (_a) {\n  var rows = _a.rows,\n      getRowId = _a.getRowId,\n      expandedRowIds = _a.expandedRowIds;\n  return expandedTreeRows(rows, getRowId, expandedRowIds);\n};\n\nvar getRowIdComputed$1 = function (_a) {\n  var getRowId = _a.getRowId,\n      rows = _a.rows;\n  return customTreeRowIdGetter(getRowId, rows);\n};\n\nvar getRowLevelKeyComputed = function (_a) {\n  var getRowLevelKey = _a.getRowLevelKey,\n      rows = _a.rows;\n  return customTreeRowLevelKeyGetter(getRowLevelKey, rows);\n};\n\nvar isTreeRowLeafComputed = function (_a) {\n  var rows = _a.rows;\n  return isTreeRowLeafGetter(rows);\n};\n\nvar getTreeRowLevelComputed = function (_a) {\n  var rows = _a.rows;\n  return getTreeRowLevelGetter(rows);\n};\n\nvar collapsedTreeRowsGetterComputed = function (_a) {\n  var rows = _a.rows,\n      getCollapsedRows = _a.getCollapsedRows;\n  return collapsedTreeRowsGetter(getCollapsedRows, rows);\n};\n\nvar unwrappedTreeRowsComputed = function (_a) {\n  var rows = _a.rows;\n  return unwrappedCustomTreeRows(rows);\n};\n\nvar CustomTreeDataBase = /*#__PURE__*/function (_super) {\n  __extends(CustomTreeDataBase, _super);\n\n  function CustomTreeDataBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CustomTreeDataBase.prototype.render = function () {\n    var getChildRows = this.props.getChildRows;\n\n    var treeRowsComputed = function (_a) {\n      var rows = _a.rows;\n      return customTreeRowsWithMeta(rows, getChildRows);\n    };\n\n    return createElement(Plugin, {\n      name: \"CustomTreeData\",\n      dependencies: pluginDependencies$h\n    }, createElement(Getter, {\n      name: \"rows\",\n      computed: treeRowsComputed\n    }), createElement(Getter, {\n      name: \"getRowId\",\n      computed: getRowIdComputed$1\n    }), createElement(Getter, {\n      name: \"getRowLevelKey\",\n      computed: getRowLevelKeyComputed\n    }), createElement(Getter, {\n      name: \"isTreeRowLeaf\",\n      computed: isTreeRowLeafComputed\n    }), createElement(Getter, {\n      name: \"getTreeRowLevel\",\n      computed: getTreeRowLevelComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: expandedTreeRowsComputed\n    }), createElement(Getter, {\n      name: \"getCollapsedRows\",\n      computed: collapsedTreeRowsGetterComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: unwrappedTreeRowsComputed\n    }));\n  };\n\n  return CustomTreeDataBase;\n}(PureComponent);\n/***\r\n * A plugin that converts custom formatted tree data to a supported format and performs\r\n * local row expanding/collapsing.\r\n * */\n\n\nvar CustomTreeData = CustomTreeDataBase;\n\nvar TableTreeColumnBase = /*#__PURE__*/function (_super) {\n  __extends(TableTreeColumnBase, _super);\n\n  function TableTreeColumnBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TableTreeColumnBase.prototype.render = function () {\n    var _a = this.props,\n        forColumnName = _a.for,\n        showSelectionControls = _a.showSelectionControls,\n        showSelectAll = _a.showSelectAll,\n        Indent = _a.indentComponent,\n        ExpandButton = _a.expandButtonComponent,\n        Checkbox = _a.checkboxComponent,\n        Content = _a.contentComponent,\n        Cell = _a.cellComponent;\n    return createElement(Plugin, {\n      name: \"TableTreeColumn\",\n      dependencies: [{\n        name: 'DataTypeProvider',\n        optional: true\n      }, {\n        name: 'TreeDataState'\n      }, {\n        name: 'SelectionState',\n        optional: !showSelectionControls\n      }, {\n        name: 'IntegratedSelection',\n        optional: !showSelectAll\n      }, {\n        name: 'Table'\n      }, {\n        name: 'TableHeaderRow',\n        optional: true\n      }],\n      key: forColumnName\n    }, createElement(Getter, {\n      name: \"tableTreeColumnName\",\n      value: forColumnName\n    }), createElement(Template, {\n      name: \"tableHeaderCellBefore\",\n      predicate: function (_a) {\n        var column = _a.column;\n        return column.name === forColumnName;\n      }\n    }, createElement(ExpandButton, {\n      visible: false,\n      expanded: false,\n      onToggle: function () {}\n    }), showSelectionControls && showSelectAll && createElement(TemplateConnector, null, function (_a, _b) {\n      var selectAllAvailable = _a.selectAllAvailable,\n          allSelected = _a.allSelected,\n          someSelected = _a.someSelected;\n      var toggleSelectAll = _b.toggleSelectAll;\n      return createElement(Checkbox, {\n        disabled: !selectAllAvailable,\n        checked: allSelected,\n        indeterminate: someSelected,\n        onChange: toggleSelectAll\n      });\n    })), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n            tableColumn = _a.tableColumn;\n        return isTreeTableCell(tableRow, tableColumn, forColumnName);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a, _b) {\n        var getCollapsedRows = _a.getCollapsedRows,\n            expandedRowIds = _a.expandedRowIds,\n            selection = _a.selection,\n            isTreeRowLeaf = _a.isTreeRowLeaf,\n            getTreeRowLevel = _a.getTreeRowLevel,\n            getCellValue = _a.getCellValue;\n        var toggleRowExpanded = _b.toggleRowExpanded,\n            toggleSelection = _b.toggleSelection;\n        var _c = params.tableRow,\n            row = _c.row,\n            rowId = _c.rowId;\n        var columnName = params.tableColumn.column.name;\n        var value = getCellValue(row, columnName);\n        var collapsedRows = getCollapsedRows(row);\n        return createElement(TemplatePlaceholder, {\n          name: \"valueFormatter\",\n          params: {\n            value: value,\n            row: row,\n            column: params.tableColumn.column\n          }\n        }, function (content) {\n          return createElement(Cell, __assign({}, params, {\n            row: row,\n            column: params.tableColumn.column,\n            value: value\n          }), createElement(Indent, {\n            level: getTreeRowLevel(row)\n          }), createElement(ExpandButton, {\n            visible: collapsedRows ? !!collapsedRows.length : !isTreeRowLeaf(row),\n            expanded: expandedRowIds.indexOf(rowId) > -1,\n            onToggle: function () {\n              return toggleRowExpanded({\n                rowId: rowId\n              });\n            }\n          }), showSelectionControls && createElement(Checkbox, {\n            disabled: false,\n            checked: selection.indexOf(rowId) > -1,\n            indeterminate: false,\n            onChange: function () {\n              return toggleSelection({\n                rowIds: [rowId]\n              });\n            }\n          }), createElement(Content, null, content || value));\n        });\n      });\n    }));\n  };\n\n  TableTreeColumnBase.defaultProps = {\n    showSelectionControls: false,\n    showSelectAll: false\n  };\n  TableTreeColumnBase.components = {\n    cellComponent: 'Cell',\n    contentComponent: 'Content',\n    indentComponent: 'Indent',\n    expandButtonComponent: 'ExpandButton',\n    checkboxComponent: 'Checkbox'\n  };\n  return TableTreeColumnBase;\n}(PureComponent);\n/** A plugin that renders a table column with a toggle button and sorting indicators. */\n\n\nvar TableTreeColumn = TableTreeColumnBase;\n\nvar SearchStateBase = /*#__PURE__*/function (_super) {\n  __extends(SearchStateBase, _super);\n\n  function SearchStateBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      value: props.value || props.defaultValue\n    };\n    var stateHelper = createStateHelper(_this, {\n      value: function () {\n        var onValueChange = _this.props.onValueChange;\n        return onValueChange;\n      }\n    });\n    _this.changeValue = stateHelper.applyFieldReducer.bind(stateHelper, 'value', changeSearchValue);\n    return _this;\n  }\n\n  SearchStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.value,\n        value = _a === void 0 ? prevState.value : _a;\n    return {\n      value: value\n    };\n  };\n\n  SearchStateBase.prototype.render = function () {\n    var value = this.state.value;\n\n    var filterExpressionComputed = function (_a) {\n      var filterExpression = _a.filterExpression,\n          columns = _a.columns;\n      return searchFilterExpression(value, columns, filterExpression);\n    };\n\n    return createElement(Plugin, {\n      name: \"SearchState\"\n    }, createElement(Getter, {\n      name: \"filterExpression\",\n      computed: filterExpressionComputed\n    }), createElement(Getter, {\n      name: \"searchValue\",\n      value: value\n    }), createElement(Action, {\n      name: \"changeSearchValue\",\n      action: this.changeValue\n    }));\n  };\n\n  SearchStateBase.defaultProps = {\n    defaultValue: ''\n  };\n  return SearchStateBase;\n}(PureComponent);\n/** A plugin that manages the search state. */\n\n\nvar SearchState = SearchStateBase;\nvar pluginDependencies$i = [{\n  name: 'Toolbar'\n}, {\n  name: 'SearchState'\n}];\nvar defaultMessages$7 = {\n  searchPlaceholder: 'Search...'\n};\n\nvar SearchPanelBase = /*#__PURE__*/function (_super) {\n  __extends(SearchPanelBase, _super);\n\n  function SearchPanelBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SearchPanelBase.prototype.render = function () {\n    var _a = this.props,\n        Input = _a.inputComponent,\n        messages = _a.messages;\n    var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages$7), messages));\n    return createElement(Plugin, {\n      name: \"SearchPanel\",\n      dependencies: pluginDependencies$i\n    }, createElement(Template, {\n      name: \"toolbarContent\"\n    }, createElement(TemplatePlaceholder, null), createElement(TemplateConnector, null, function (_a, _b) {\n      var searchValue = _a.searchValue;\n      var changeSearchValue = _b.changeSearchValue;\n      return createElement(Input, {\n        value: searchValue,\n        onValueChange: changeSearchValue,\n        getMessage: getMessage\n      });\n    })));\n  };\n\n  SearchPanelBase.defaultProps = {\n    messages: {}\n  };\n  SearchPanelBase.components = {\n    inputComponent: 'Input'\n  };\n  return SearchPanelBase;\n}(PureComponent);\n/** A plugin that renders the Search Panel. */\n\n\nvar SearchPanel = SearchPanelBase;\n\nvar tableHeaderRowsComputed$2 = function (_a) {\n  var tableHeaderRows = _a.tableHeaderRows;\n  return tableHeaderRowsWithFixed(tableHeaderRows);\n};\n\nvar tableHeaderColumnChainsComputed = function (_a) {\n  var tableColumns = _a.tableColumns,\n      tableHeaderRows = _a.tableHeaderRows,\n      tableHeaderColumnChains = _a.tableHeaderColumnChains;\n  return tableHeaderColumnChainsWithFixed(tableHeaderColumnChains, tableHeaderRows, tableColumns);\n};\n\nvar CellPlaceholder$2 = function (props) {\n  return createElement(TemplatePlaceholder, {\n    params: props\n  });\n};\n\nvar pluginDependencies$j = [{\n  name: 'Table'\n}, {\n  name: 'TableBandHeader',\n  optional: true\n}, {\n  name: 'TableColumnReordering',\n  optional: true\n}, {\n  name: 'TableEditColumn',\n  optional: true\n}, {\n  name: 'TableEditRow',\n  optional: true\n}, {\n  name: 'TableFilterRow',\n  optional: true\n}, {\n  name: 'TableGroupRow',\n  optional: true\n}, {\n  name: 'TableHeaderRow',\n  optional: true\n}, {\n  name: 'TableRowDetail',\n  optional: true\n}, {\n  name: 'TableSelection',\n  optional: true\n}, {\n  name: 'TableSummaryRow',\n  optional: true\n}, {\n  name: 'TableTreeColumn',\n  optional: true\n}]; // tslint:disable-next-line: max-line-length\n\nvar TableFixedColumnsBase = /*#__PURE__*/function (_super) {\n  __extends(TableFixedColumnsBase, _super);\n\n  function TableFixedColumnsBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.state = {\n      tableColumnDimensions: {}\n    };\n    return _this;\n  }\n\n  TableFixedColumnsBase.prototype.handleListenerSizeChange = function (key, width) {\n    var tableColumnDimensions = this.state.tableColumnDimensions;\n\n    if (tableColumnDimensions[key] !== width) {\n      this.setState(function (state) {\n        var _a;\n\n        return {\n          tableColumnDimensions: __assign(__assign({}, state.tableColumnDimensions), (_a = {}, _a[key] = width, _a))\n        };\n      });\n    }\n  };\n\n  TableFixedColumnsBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        Cell = _a.cellComponent,\n        ListenerRow = _a.listenerRowComponent,\n        ListenerCell = _a.listenerCellComponent;\n    var leftColumns = this.props.leftColumns;\n    var rightColumns = this.props.rightColumns;\n\n    var tableColumnsComputed = function (_a) {\n      var tableColumns = _a.tableColumns;\n      return tableColumnsWithFixed(tableColumns, leftColumns, rightColumns);\n    };\n\n    return createElement(Plugin, {\n      name: \"TableFixedColumns\",\n      dependencies: pluginDependencies$j\n    }, createElement(Getter, {\n      name: \"tableHeaderRows\",\n      computed: tableHeaderRowsComputed$2\n    }), createElement(Getter, {\n      name: \"tableColumns\",\n      computed: tableColumnsComputed\n    }), createElement(Getter, {\n      name: \"tableHeaderColumnChains\",\n      computed: tableHeaderColumnChainsComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableColumn = _a.tableColumn;\n        return !!tableColumn.fixed;\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var tableColumns = _a.tableColumns,\n            tableHeaderColumnChains = _a.tableHeaderColumnChains,\n            selection = _a.selection,\n            highlightSelectedRow = _a.highlightSelectedRow;\n        var selected = isRowHighlighted(highlightSelectedRow, selection, params.tableRow);\n        var tableColumnDimensions = _this.state.tableColumnDimensions;\n        var fixedColumnProps = calculateFixedColumnProps(params, {\n          leftColumns: leftColumns,\n          rightColumns: rightColumns\n        }, tableColumns, tableColumnDimensions, tableHeaderColumnChains);\n        return createElement(Cell, __assign({}, params, fixedColumnProps, {\n          component: CellPlaceholder$2,\n          selected: selected\n        }));\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isFixedTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(ListenerRow, __assign({}, params));\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isFixedTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(ListenerCell, __assign({}, params, {\n        listen: !!params.tableColumn.fixed,\n        onSizeChange: function (_a) {\n          var width = _a.width;\n          return _this.handleListenerSizeChange(params.tableColumn.key, width);\n        }\n      }));\n    }));\n  };\n\n  TableFixedColumnsBase.components = {\n    cellComponent: 'Cell',\n    listenerRowComponent: 'ListenerRow',\n    listenerCellComponent: 'ListenerCell'\n  };\n  TableFixedColumnsBase.defaultProps = {\n    leftColumns: [],\n    rightColumns: []\n  };\n  return TableFixedColumnsBase;\n}(PureComponent);\n/** A plugin that enables you to fix columns to the left and right sides of the grid. */\n\n\nvar TableFixedColumns = TableFixedColumnsBase;\n\nvar groupSummaryItemsComputed = function (_a) {\n  var groupSummaryItems = _a.groupSummaryItems;\n  return prepareGroupSummaryItems(groupSummaryItems);\n};\n\nvar SummaryStateBase = /*#__PURE__*/function (_super) {\n  __extends(SummaryStateBase, _super);\n\n  function SummaryStateBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SummaryStateBase.prototype.render = function () {\n    var _a = this.props,\n        totalItems = _a.totalItems,\n        groupItems = _a.groupItems,\n        treeItems = _a.treeItems;\n    return createElement(Plugin, {\n      name: \"SummaryState\"\n    }, createElement(Getter, {\n      name: \"totalSummaryItems\",\n      value: totalItems\n    }), createElement(Getter, {\n      name: \"groupSummaryItems\",\n      value: groupItems\n    }), createElement(Getter, {\n      name: \"groupSummaryItems\",\n      computed: groupSummaryItemsComputed\n    }), createElement(Getter, {\n      name: \"treeSummaryItems\",\n      value: treeItems\n    }));\n  };\n\n  return SummaryStateBase;\n}(PureComponent);\n/** A plugin that provides items for total, group, and tree summaries. */\n\n\nvar SummaryState = SummaryStateBase;\nvar pluginDependencies$k = [{\n  name: 'SummaryState'\n}, {\n  name: 'IntegratedGrouping',\n  optional: true\n}];\n\nvar IntegratedSummaryBase = /*#__PURE__*/function (_super) {\n  __extends(IntegratedSummaryBase, _super);\n\n  function IntegratedSummaryBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  IntegratedSummaryBase.prototype.render = function () {\n    var calculator = this.props.calculator;\n\n    var totalSummaryValuesComputed = function (_a) {\n      var rows = _a.rows,\n          totalSummaryItems = _a.totalSummaryItems,\n          getCellValue = _a.getCellValue,\n          getRowLevelKey = _a.getRowLevelKey,\n          isGroupRow = _a.isGroupRow,\n          getCollapsedRows = _a.getCollapsedRows;\n      return totalSummaryValues(rows, totalSummaryItems, getCellValue, getRowLevelKey, isGroupRow, getCollapsedRows, calculator);\n    };\n\n    var groupSummaryValuesComputed = function (_a) {\n      var rows = _a.rows,\n          groupSummaryItems = _a.groupSummaryItems,\n          getCellValue = _a.getCellValue,\n          getRowLevelKey = _a.getRowLevelKey,\n          isGroupRow = _a.isGroupRow,\n          getCollapsedRows = _a.getCollapsedRows;\n      return groupSummaryValues(rows, groupSummaryItems, getCellValue, getRowLevelKey, isGroupRow, getCollapsedRows, calculator);\n    };\n\n    var treeSummaryValuesComputed = function (_a) {\n      var rows = _a.rows,\n          treeSummaryItems = _a.treeSummaryItems,\n          getCellValue = _a.getCellValue,\n          getRowLevelKey = _a.getRowLevelKey,\n          isGroupRow = _a.isGroupRow,\n          getRowId = _a.getRowId;\n      return treeSummaryValues(rows, treeSummaryItems, getCellValue, getRowLevelKey, isGroupRow, getRowId, calculator);\n    };\n\n    return createElement(Plugin, {\n      name: \"IntegratedSummary\",\n      dependencies: pluginDependencies$k\n    }, createElement(Getter, {\n      name: \"totalSummaryValues\",\n      computed: totalSummaryValuesComputed\n    }), createElement(Getter, {\n      name: \"groupSummaryValues\",\n      computed: groupSummaryValuesComputed\n    }), createElement(Getter, {\n      name: \"treeSummaryValues\",\n      computed: treeSummaryValuesComputed\n    }));\n  };\n\n  IntegratedSummaryBase.defaultCalculator = defaultSummaryCalculator;\n  return IntegratedSummaryBase;\n}(PureComponent);\n/** A plugin that performs a built-in data summary calculation. */\n\n\nvar IntegratedSummary = IntegratedSummaryBase;\nvar pluginDependencies$l = [{\n  name: 'SummaryState'\n}];\n\nvar CustomSummaryBase = /*#__PURE__*/function (_super) {\n  __extends(CustomSummaryBase, _super);\n\n  function CustomSummaryBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CustomSummaryBase.prototype.render = function () {\n    var _a = this.props,\n        totalValues = _a.totalValues,\n        groupValues = _a.groupValues,\n        treeValues = _a.treeValues;\n    return createElement(Plugin, {\n      name: \"CustomSummary\",\n      dependencies: pluginDependencies$l\n    }, createElement(Getter, {\n      name: \"totalSummaryValues\",\n      value: totalValues\n    }), createElement(Getter, {\n      name: \"groupSummaryValues\",\n      value: groupValues\n    }), createElement(Getter, {\n      name: \"treeSummaryValues\",\n      value: treeValues\n    }));\n  };\n\n  return CustomSummaryBase;\n}(PureComponent);\n/** A plugin that allows you to calculate a custom summary. */\n\n\nvar CustomSummary = CustomSummaryBase;\nvar dependencies$1 = [{\n  name: 'DataTypeProvider',\n  optional: true\n}, {\n  name: 'SummaryState'\n}, {\n  name: 'CustomSummary',\n  optional: true\n}, {\n  name: 'IntegratedSummary',\n  optional: true\n}, {\n  name: 'Table'\n}, {\n  name: 'TableTreeColumn',\n  optional: true\n}];\n\nvar tableBodyRowsComputed$2 = function (_a) {\n  var tableBodyRows = _a.tableBodyRows,\n      getRowLevelKey = _a.getRowLevelKey,\n      isGroupRow = _a.isGroupRow,\n      getRowId = _a.getRowId,\n      groupSummaryItems = _a.groupSummaryItems,\n      treeSummaryItems = _a.treeSummaryItems;\n  return tableRowsWithSummaries(tableBodyRows, groupSummaryItems, treeSummaryItems, getRowLevelKey, isGroupRow, getRowId);\n};\n\nvar tableFooterRowsComputed = function (_a) {\n  var tableFooterRows = _a.tableFooterRows;\n  return tableRowsWithTotalSummaries(tableFooterRows);\n};\n\nvar TableSummaryRowBase = /*#__PURE__*/function (_super) {\n  __extends(TableSummaryRowBase, _super);\n\n  function TableSummaryRowBase() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TableSummaryRowBase.prototype.renderContent = function (column, columnSummaries) {\n    var _a = this.props,\n        formatlessSummaryTypes = _a.formatlessSummaryTypes,\n        Item = _a.itemComponent,\n        messages = _a.messages;\n    return createElement(TableSummaryContent, {\n      column: column,\n      columnSummaries: columnSummaries,\n      formatlessSummaryTypes: formatlessSummaryTypes,\n      itemComponent: Item,\n      messages: messages\n    });\n  };\n\n  TableSummaryRowBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        TotalRow = _a.totalRowComponent,\n        GroupRow = _a.groupRowComponent,\n        TreeRow = _a.treeRowComponent,\n        TotalCell = _a.totalCellComponent,\n        GroupCell = _a.groupCellComponent,\n        TreeCell = _a.treeCellComponent,\n        TreeColumnCell = _a.treeColumnCellComponent,\n        TreeColumnContent = _a.treeColumnContentComponent,\n        TreeColumnIndent = _a.treeColumnIndentComponent;\n    return createElement(Plugin, {\n      name: \"TableSummaryRow\",\n      dependencies: dependencies$1\n    }, createElement(Getter, {\n      name: \"tableBodyRows\",\n      computed: tableBodyRowsComputed$2\n    }), createElement(Getter, {\n      name: \"tableFooterRows\",\n      computed: tableFooterRowsComputed\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n            tableColumn = _a.tableColumn;\n        return isTotalSummaryTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var totalSummaryItems = _a.totalSummaryItems,\n            totalSummaryValues = _a.totalSummaryValues;\n        var columnSummaries = getColumnSummaries(totalSummaryItems, params.tableColumn.column.name, totalSummaryValues);\n        return createElement(TotalCell, __assign({}, params, {\n          column: params.tableColumn.column\n        }), _this.renderContent(params.tableColumn.column, columnSummaries));\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n            tableColumn = _a.tableColumn;\n        return isGroupSummaryTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var groupSummaryItems = _a.groupSummaryItems,\n            groupSummaryValues = _a.groupSummaryValues;\n        var columnSummaries = getColumnSummaries(groupSummaryItems, params.tableColumn.column.name, groupSummaryValues[params.tableRow.row.compoundKey], function (summaryItem) {\n          return isFooterSummary(summaryItem);\n        });\n        return createElement(GroupCell, __assign({}, params, {\n          column: params.tableColumn.column\n        }), _this.renderContent(params.tableColumn.column, columnSummaries));\n      });\n    }), createElement(Template, {\n      name: \"tableCell\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow,\n            tableColumn = _a.tableColumn;\n        return isTreeSummaryTableCell(tableRow, tableColumn);\n      }\n    }, function (params) {\n      return createElement(TemplateConnector, null, function (_a) {\n        var treeSummaryItems = _a.treeSummaryItems,\n            treeSummaryValues = _a.treeSummaryValues,\n            tableTreeColumnName = _a.tableTreeColumnName,\n            getRowId = _a.getRowId,\n            getTreeRowLevel = _a.getTreeRowLevel;\n        var columnSummaries = getColumnSummaries(treeSummaryItems, params.tableColumn.column.name, treeSummaryValues[getRowId(params.tableRow.row)]);\n\n        if (tableTreeColumnName === params.tableColumn.column.name) {\n          return createElement(TreeColumnCell, __assign({}, params, {\n            column: params.tableColumn.column\n          }), createElement(TreeColumnIndent, {\n            level: getTreeRowLevel(params.tableRow.row)\n          }), createElement(TreeColumnContent, null, _this.renderContent(params.tableColumn.column, columnSummaries)));\n        }\n\n        return createElement(TreeCell, __assign({}, params, {\n          column: params.tableColumn.column\n        }), _this.renderContent(params.tableColumn.column, columnSummaries));\n      });\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isTotalSummaryTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TotalRow, __assign({}, params));\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isGroupSummaryTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(GroupRow, __assign({}, params));\n    }), createElement(Template, {\n      name: \"tableRow\",\n      predicate: function (_a) {\n        var tableRow = _a.tableRow;\n        return !!isTreeSummaryTableRow(tableRow);\n      }\n    }, function (params) {\n      return createElement(TreeRow, __assign({}, params));\n    }));\n  };\n\n  TableSummaryRowBase.TREE_ROW_TYPE = TABLE_TREE_SUMMARY_TYPE;\n  TableSummaryRowBase.GROUP_ROW_TYPE = TABLE_GROUP_SUMMARY_TYPE;\n  TableSummaryRowBase.TOTAL_ROW_TYPE = TABLE_TOTAL_SUMMARY_TYPE;\n  TableSummaryRowBase.defaultProps = {\n    formatlessSummaryTypes: [],\n    messages: {}\n  };\n  TableSummaryRowBase.components = {\n    totalRowComponent: 'TotalRow',\n    groupRowComponent: 'GroupRow',\n    treeRowComponent: 'TreeRow',\n    totalCellComponent: 'TotalCell',\n    groupCellComponent: 'GroupCell',\n    treeCellComponent: 'TreeCell',\n    treeColumnCellComponent: 'TableTreeCell',\n    treeColumnContentComponent: 'TableTreeContent',\n    treeColumnIndentComponent: 'TableTreeIndent',\n    itemComponent: 'Item'\n  };\n  return TableSummaryRowBase;\n}(PureComponent);\n/** A plugin that renders table rows that display a total, group, and tree summary. */\n\n\nvar TableSummaryRow = TableSummaryRowBase;\n\nvar virtualRowsComputed = function (_a) {\n  var skip = _a.skip,\n      rows = _a.rows,\n      virtualRowsCache = _a.virtualRowsCache;\n  return virtualRowsWithCache(skip, rows, virtualRowsCache);\n};\n\nvar rowsComputed = function (_a) {\n  var virtualRows = _a.virtualRows,\n      availableRowCount = _a.availableRowCount;\n  return plainRows(virtualRows, availableRowCount);\n};\n\nvar loadedRowsStartComputed = function (_a) {\n  var virtualRows = _a.virtualRows;\n  return loadedRowsStart(virtualRows);\n}; // tslint:disable-next-line: max-line-length\n\n\nvar VirtualTableStateBase = /*#__PURE__*/function (_super) {\n  __extends(VirtualTableStateBase, _super);\n\n  function VirtualTableStateBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.requestTimer = 0;\n\n    _this.setViewport = function (viewport, _a, _b) {\n      var virtualRows = _a.virtualRows;\n      var requestNextPage = _b.requestNextPage;\n      var pageSize = _this.props.pageSize;\n      var referenceIndex = getReferenceIndex(viewport);\n\n      if (needFetchMorePages(virtualRows, referenceIndex, pageSize)) {\n        requestNextPage({\n          referenceIndex: referenceIndex\n        });\n      }\n    };\n\n    _this.requestNextPageAction = function (_a, _b) {\n      var referenceIndex = _a.referenceIndex,\n          forceReload = _a.forceReload;\n      var virtualRows = _b.virtualRows;\n      var _c = _this.props,\n          pageSize = _c.pageSize,\n          totalRowCount = _c.totalRowCount,\n          infiniteScrolling = _c.infiniteScrolling;\n      var requestedStartIndex = _this.state.requestedStartIndex;\n      var actualVirtualRows = forceReload ? emptyVirtualRows : virtualRows;\n\n      var _d = getRequestMeta(referenceIndex, virtualRows, pageSize, totalRowCount, forceReload, infiniteScrolling),\n          requestedRange = _d.requestedRange,\n          actualBounds = _d.actualBounds;\n\n      if (forceReload || shouldSendRequest(requestedRange, requestedStartIndex)) {\n        _this.requestNextPage(requestedRange, actualVirtualRows, actualBounds);\n      }\n    };\n\n    _this.clearRowsCacheAction = function (_, __, _a) {\n      var requestNextPage = _a.requestNextPage;\n\n      _this.setState({\n        virtualRowsCache: emptyVirtualRows\n      });\n\n      requestNextPage({\n        forceReload: true\n      });\n    };\n\n    _this.changeColumnFilterAction = function () {\n      return _this.requestFirstPage();\n    };\n\n    _this.state = {\n      virtualRowsCache: emptyVirtualRows,\n      requestedStartIndex: -1,\n      availableRowCount: props.totalRowCount || 0\n    };\n    return _this;\n  }\n\n  VirtualTableStateBase.prototype.requestNextPage = function (requestedRange, virtualRows, actualBounds) {\n    var _this = this;\n\n    var _a = this.props,\n        getRows = _a.getRows,\n        infiniteScrolling = _a.infiniteScrolling,\n        totalRowCount = _a.totalRowCount;\n    var stateAvailableCount = this.state.availableRowCount;\n\n    if (this.requestTimer !== 0) {\n      clearTimeout(this.requestTimer);\n    }\n\n    this.requestTimer = window.setTimeout(function () {\n      var requestedStartIndex = requestedRange.start,\n          end = requestedRange.end;\n      var loadCount = end - requestedStartIndex;\n      var virtualRowsCache = trimRowsToInterval(virtualRows, actualBounds);\n      var availableRowCount = getAvailableRowCount(infiniteScrolling, actualBounds.end, stateAvailableCount, totalRowCount);\n      getRows(requestedStartIndex, loadCount);\n\n      _this.setState({\n        virtualRowsCache: virtualRowsCache,\n        availableRowCount: availableRowCount,\n        requestedStartIndex: requestedStartIndex\n      });\n    }, 50);\n  };\n\n  VirtualTableStateBase.prototype.requestFirstPage = function () {\n    var _this = this;\n\n    var _a = this.props,\n        getRows = _a.getRows,\n        pageSize = _a.pageSize;\n\n    if (this.requestTimer !== 0) {\n      clearTimeout(this.requestTimer);\n    }\n\n    this.requestTimer = window.setTimeout(function () {\n      getRows(0, 2 * pageSize);\n\n      _this.setState({\n        virtualRowsCache: emptyVirtualRows,\n        requestedStartIndex: 0\n      });\n    }, 50);\n  };\n\n  VirtualTableStateBase.getDerivedStateFromProps = function (nextProps, prevState) {\n    var _a = nextProps.availableRowCount,\n        availableRowCount = _a === void 0 ? prevState.availableRowCount : _a,\n        totalRowCount = nextProps.totalRowCount,\n        pageSize = nextProps.pageSize,\n        infiniteScrolling = nextProps.infiniteScrolling;\n    return {\n      availableRowCount: getAvailableRowCount(infiniteScrolling, pageSize * 2, availableRowCount, totalRowCount)\n    };\n  };\n\n  VirtualTableStateBase.prototype.componentDidMount = function () {\n    var _a = this.props,\n        getRows = _a.getRows,\n        pageSize = _a.pageSize,\n        infiniteScrolling = _a.infiniteScrolling,\n        totalRowCount = _a.totalRowCount;\n    getRows(0, 2 * pageSize);\n    var newRowCount = infiniteScrolling ? 2 * pageSize : totalRowCount;\n    this.setState({\n      availableRowCount: newRowCount\n    });\n  };\n\n  VirtualTableStateBase.prototype.componentWillUnmount = function () {\n    if (this.requestTimer !== 0) {\n      window.clearTimeout(this.requestTimer);\n    }\n  };\n\n  VirtualTableStateBase.prototype.render = function () {\n    var _a = this.state,\n        virtualRowsCache = _a.virtualRowsCache,\n        availableRowCount = _a.availableRowCount;\n    var _b = this.props,\n        skip = _b.skip,\n        pageSize = _b.pageSize,\n        loading = _b.loading,\n        infiniteScrolling = _b.infiniteScrolling;\n    return createElement(Plugin, {\n      name: \"VirtualTableState\"\n    }, createElement(Getter, {\n      name: \"isDataRemote\",\n      value: true\n    }), createElement(Getter, {\n      name: \"isDataLoading\",\n      value: loading\n    }), createElement(Getter, {\n      name: \"isScrollingInfinite\",\n      value: infiniteScrolling\n    }), createElement(Getter, {\n      name: \"skip\",\n      value: skip\n    }), createElement(Getter, {\n      name: \"virtualRowsCache\",\n      value: virtualRowsCache\n    }), createElement(Getter, {\n      name: \"pageSize\",\n      value: pageSize\n    }), createElement(Getter, {\n      name: \"availableRowCount\",\n      value: availableRowCount\n    }), createElement(Getter, {\n      name: \"virtualRows\",\n      computed: virtualRowsComputed\n    }), createElement(Getter, {\n      name: \"rows\",\n      computed: rowsComputed\n    }), createElement(Getter, {\n      name: \"loadedRowsStart\",\n      computed: loadedRowsStartComputed\n    }), createElement(Action, {\n      name: \"requestNextPage\",\n      action: this.requestNextPageAction\n    }), createElement(Action, {\n      name: \"setViewport\",\n      action: this.setViewport\n    }), createElement(Action, {\n      name: \"clearRowCache\",\n      action: this.clearRowsCacheAction\n    }), createElement(Action, {\n      name: \"changeColumnSorting\",\n      action: this.clearRowsCacheAction\n    }), createElement(Action, {\n      name: \"changeColumnFilter\",\n      action: this.changeColumnFilterAction\n    }));\n  };\n\n  VirtualTableStateBase.defaultProps = {\n    pageSize: 100\n  };\n  return VirtualTableStateBase;\n}(PureComponent);\n\nvar VirtualTableState = VirtualTableStateBase;\nvar pluginDependencies$m = [{\n  name: 'EditingState'\n}, {\n  name: 'Table'\n}, {\n  name: 'DataTypeProvider',\n  optional: true\n}];\n\nvar rowsWithEditingCellsComputed = function (_a) {\n  var tableBodyRows = _a.tableBodyRows,\n      editingCells = _a.editingCells;\n  return rowsWithEditingCells(tableBodyRows, editingCells);\n};\n\nvar columnsWithEditingCellsComputed = function (_a) {\n  var tableColumns = _a.tableColumns,\n      editingCells = _a.editingCells;\n  return columnsWithEditingCells(tableColumns, editingCells);\n};\n/* tslint:disable-next-line max-line-length*/\n\n\nvar INLINE_CELL_EDITING_ERROR = 'The startEditAction property of the InlineCellEditing plugin is given an invalid value.'; // tslint:disable-next-line: max-line-length\n\nvar TableInlineCellEditingBase = function (props) {\n  var EditCell = props.cellComponent,\n      startEditAction = props.startEditAction,\n      selectTextOnEditStart = props.selectTextOnEditStart;\n  return createElement(Plugin, {\n    name: \"TableInlineCellEditing\",\n    dependencies: pluginDependencies$m\n  }, createElement(Getter, {\n    name: \"tableBodyRows\",\n    computed: rowsWithEditingCellsComputed\n  }), createElement(Getter, {\n    name: \"tableColumns\",\n    computed: columnsWithEditingCellsComputed\n  }), createElement(Template, {\n    name: \"tableCell\",\n    predicate: function (_a) {\n      var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n      return tableRow.type === TABLE_DATA_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n    }\n  }, function (params) {\n    return createElement(TemplateConnector, null, function (_a, _b) {\n      var _c;\n\n      var startEditCells = _b.startEditCells;\n      var rowId = params.tableRow.rowId,\n          column = params.tableColumn.column;\n      var columnName = column.name;\n\n      if (startEditAction !== 'click' && startEditAction !== 'doubleClick') {\n        throw new Error(INLINE_CELL_EDITING_ERROR);\n      }\n\n      var startEditCellCallback = function () {\n        return startEditCells({\n          editingCells: [{\n            rowId: rowId,\n            columnName: columnName\n          }]\n        });\n      };\n\n      var eventName = startEditAction === 'click' ? 'onClick' : 'onDoubleClick';\n\n      var newParams = __assign(__assign({}, params), (_c = {}, _c[eventName] = startEditCellCallback, _c));\n\n      return createElement(TemplatePlaceholder, {\n        params: newParams\n      });\n    });\n  }), createElement(Template, {\n    name: \"tableCell\",\n    predicate: function (_a) {\n      var tableRow = _a.tableRow,\n          tableColumn = _a.tableColumn;\n      return tableRow.hasEditCell && tableColumn.hasEditCell;\n    }\n  }, function (params) {\n    return createElement(TemplateConnector, null, function (_a, _b) {\n      var getCellValue = _a.getCellValue,\n          createRowChange = _a.createRowChange,\n          rowChanges = _a.rowChanges,\n          isColumnEditingEnabled = _a.isColumnEditingEnabled;\n      var changeRow = _b.changeRow,\n          stopEditCells = _b.stopEditCells,\n          commitChangedRows = _b.commitChangedRows,\n          cancelChangedRows = _b.cancelChangedRows;\n      var _c = params.tableRow,\n          rowId = _c.rowId,\n          row = _c.row,\n          column = params.tableColumn.column;\n      var columnName = column.name;\n\n      var changedRow = __assign(__assign({}, row), getRowChange(rowChanges, rowId));\n\n      var value = getCellValue(changedRow, columnName);\n\n      var onValueChange = function (newValue) {\n        var changeArgs = {\n          rowId: rowId,\n          change: createRowChange(changedRow, newValue, columnName)\n        };\n        changeRow(changeArgs);\n      };\n\n      var onKeyDown = function (_a) {\n        var key = _a.key;\n\n        if (key === 'Enter') {\n          commitChangedRows({\n            rowIds: [rowId]\n          });\n          stopEditCells({\n            editingCells: [{\n              rowId: rowId,\n              columnName: columnName\n            }]\n          });\n        } else if (key === 'Escape') {\n          cancelChangedRows({\n            rowIds: [rowId]\n          });\n          stopEditCells({\n            editingCells: [{\n              rowId: rowId,\n              columnName: columnName\n            }]\n          });\n        }\n      };\n\n      var onBlur = function () {\n        commitChangedRows({\n          rowIds: [rowId]\n        });\n        stopEditCells({\n          editingCells: [{\n            rowId: rowId,\n            columnName: columnName\n          }]\n        });\n      };\n\n      var onFocus = selectTextOnEditStart ? function (e) {\n        return e.target.select();\n      } : function () {};\n      var editingEnabled = isColumnEditingEnabled(columnName);\n      return createElement(TemplatePlaceholder, {\n        name: \"valueEditor\",\n        params: {\n          column: column,\n          row: row,\n          value: value,\n          onValueChange: onValueChange,\n          disabled: !editingEnabled\n        }\n      }, function (content) {\n        return createElement(EditCell, __assign({}, params, {\n          row: row,\n          column: column,\n          value: value,\n          editingEnabled: editingEnabled,\n          onValueChange: onValueChange,\n          autoFocus: true,\n          onKeyDown: onKeyDown,\n          onBlur: onBlur,\n          onFocus: onFocus\n        }), content);\n      });\n    });\n  }));\n};\n\nTableInlineCellEditingBase.components = {\n  cellComponent: 'Cell'\n};\nTableInlineCellEditingBase.defaultProps = {\n  startEditAction: 'click',\n  selectTextOnEditStart: false\n}; // tslint:disable-next-line: max-line-length\n\nvar TableInlineCellEditing = TableInlineCellEditingBase;\nvar defaultMessages$8 = {\n  showExportMenu: 'Export',\n  exportAll: 'Export all data',\n  exportSelected: 'Export selected rows'\n};\n\nvar ExportPanelBase = /*#__PURE__*/function (_super) {\n  __extends(ExportPanelBase, _super);\n\n  function ExportPanelBase() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      visible: false\n    };\n\n    _this.setButtonRef = function (button) {\n      return _this.button = button;\n    };\n\n    _this.handleToggle = function () {\n      var visible = _this.state.visible;\n\n      _this.setState({\n        visible: !visible\n      });\n    };\n\n    _this.handleHide = function () {\n      return _this.setState({\n        visible: false\n      });\n    };\n\n    return _this;\n  }\n\n  ExportPanelBase.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        ToggleButton = _a.toggleButtonComponent,\n        Menu = _a.menuComponent,\n        MenuItem = _a.menuItemComponent,\n        messages = _a.messages,\n        startExport = _a.startExport;\n    var visible = this.state.visible;\n    var getMessage = getMessagesFormatter(__assign(__assign({}, defaultMessages$8), messages));\n    return createElement(Plugin, {\n      name: \"ExportPanel\",\n      dependencies: [{\n        name: 'SelectionState',\n        optional: true\n      }, {\n        name: 'Toolbar'\n      }]\n    }, createElement(Template, {\n      name: \"toolbarContent\"\n    }, createElement(TemplatePlaceholder, null), createElement(TemplateConnector, null, function (_a) {\n      var selection = _a.selection;\n      return createElement(Fragment, null, createElement(ToggleButton, {\n        buttonRef: _this.setButtonRef,\n        onToggle: _this.handleToggle,\n        getMessage: getMessage\n      }), createElement(Menu, {\n        visible: visible,\n        onHide: _this.handleHide,\n        target: _this.button\n      }, createElement(MenuItem, {\n        key: \"exportAll\",\n        text: getMessage('exportAll'),\n        onClick: function () {\n          _this.handleHide();\n\n          startExport();\n        }\n      }), (selection === null || selection === void 0 ? void 0 : selection.length) ? createElement(MenuItem, {\n        key: \"exportSelected\",\n        text: getMessage('exportSelected'),\n        onClick: function () {\n          _this.handleHide();\n\n          startExport({\n            selectedOnly: true\n          });\n        }\n      }) : null));\n    })));\n  };\n\n  ExportPanelBase.components = {\n    toggleButtonComponent: 'ToggleButton',\n    menuComponent: 'Menu',\n    menuItemComponent: 'MenuItem'\n  };\n  return ExportPanelBase;\n}(PureComponent);\n\nvar ExportPanel = ExportPanelBase;\n/* globals requestAnimationFrame cancelAnimationFrame */\n\nvar TableLayoutBase = /*#__PURE__*/function (_super) {\n  __extends(TableLayoutBase, _super);\n\n  function TableLayoutBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.savedOffsetWidth = -1;\n    _this.raf = -1;\n    _this.state = {\n      animationState: new Map()\n    };\n    _this.animations = new Map();\n    _this.savedScrollWidth = {};\n    _this.tableRef = createRef();\n    return _this;\n  }\n\n  TableLayoutBase.prototype.componentDidUpdate = function (prevProps) {\n    var columns = this.props.columns;\n    var prevColumns = prevProps.columns;\n    var animationState = this.state.animationState;\n    var activeAnimationExists = !shallowEqual(columns, prevColumns) || !!animationState.size || !!this.animations.size; // NOTE: animation should be recomputed only when columns are changed or\n    // an active animation is in progress. Otherwise it will be recalculated on\n    // each scroll event.\n\n    if (activeAnimationExists) {\n      this.processAnimation(prevColumns);\n    }\n  };\n\n  TableLayoutBase.prototype.processAnimation = function (prevColumns) {\n    var columns = this.props.columns;\n    var tableWidth = this.getTableWidth(prevColumns, columns);\n    this.animations = getAnimations(prevColumns, columns, tableWidth, this.animations);\n    cancelAnimationFrame(this.raf);\n    this.raf = requestAnimationFrame(this.processAnimationFrame.bind(this));\n  };\n\n  TableLayoutBase.prototype.getTableWidth = function (prevColumns, columns) {\n    var _a = this.tableRef.current,\n        offsetWidth = _a.offsetWidth,\n        scrollWidth = _a.scrollWidth;\n    var animationState = this.state.animationState;\n    var widthChanged = this.savedOffsetWidth !== offsetWidth || !this.savedScrollWidth[columns.length];\n    var columnCountChanged = columns.length !== prevColumns.length;\n\n    if (columnCountChanged || widthChanged && !animationState.size) {\n      this.savedScrollWidth = {};\n      this.savedScrollWidth[columns.length] = scrollWidth;\n      this.savedOffsetWidth = offsetWidth;\n    }\n\n    return this.savedScrollWidth[columns.length];\n  };\n\n  TableLayoutBase.prototype.getColumns = function () {\n    var columns = this.props.columns;\n    var animationState = this.state.animationState;\n    var result = columns;\n    var isFixedWidth = columns.filter(function (column) {\n      return column.width === undefined || column.width === 'auto';\n    }).length === 0;\n\n    if (isFixedWidth) {\n      // presumably a flex column added here instead of in a getter in the Table plugin\n      // to make sure that all manipulations on taleColumns have already done earlier\n      result = __spread(result, [{\n        key: TABLE_FLEX_TYPE.toString(),\n        type: TABLE_FLEX_TYPE\n      }]);\n    }\n\n    if (animationState.size) {\n      result = result.map(function (column) {\n        return animationState.has(column.key) ? __assign(__assign({}, column), {\n          animationState: animationState.get(column.key)\n        }) : column;\n      });\n    }\n\n    return result;\n  };\n\n  TableLayoutBase.prototype.processAnimationFrame = function () {\n    var animationComponentState = this.state.animationState;\n    this.animations = filterActiveAnimations(this.animations);\n\n    if (!this.animations.size) {\n      if (animationComponentState.size) {\n        this.setState({\n          animationState: new Map()\n        });\n      }\n\n      return;\n    }\n\n    var animationState = evalAnimations(this.animations);\n    this.setState({\n      animationState: animationState\n    });\n  };\n\n  TableLayoutBase.prototype.render = function () {\n    var _a = this.props,\n        Layout = _a.layoutComponent,\n        minColumnWidth = _a.minColumnWidth,\n        restProps = __rest(_a, [\"layoutComponent\", \"minColumnWidth\"]);\n\n    var columns = this.getColumns();\n    var minWidth = columns.map(function (column) {\n      return column.width || (column.type === TABLE_FLEX_TYPE ? 0 : minColumnWidth);\n    }).reduce(function (acc, width) {\n      return acc + width;\n    }, 0);\n    return createElement(Layout, __assign({}, restProps, {\n      tableRef: this.tableRef,\n      columns: columns,\n      minWidth: minWidth,\n      minColumnWidth: minColumnWidth\n    }));\n  };\n\n  return TableLayoutBase;\n}(PureComponent);\n/** @internal */\n\n\nvar TableLayout = TableLayoutBase;\n/** @internal */\n\nvar ColumnGroup = /*#__PURE__*/function (_super) {\n  __extends(ColumnGroup, _super);\n\n  function ColumnGroup() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ColumnGroup.prototype.render = function () {\n    var columns = this.props.columns;\n    return createElement(\"colgroup\", null, columns.map(function (_a) {\n      var key = _a.key,\n          width = _a.width;\n      var styleWidth = typeof width === 'number' ? width + \"px\" : width;\n      return createElement(\"col\", {\n        key: key,\n        style: width !== undefined ? {\n          width: styleWidth\n        } : undefined\n      });\n    }));\n  };\n\n  return ColumnGroup;\n}(PureComponent);\n\nvar getRowStyle = function (_a) {\n  var row = _a.row;\n  return row.height !== undefined ? {\n    height: row.height + \"px\"\n  } : undefined;\n};\n\nvar VirtualRowLayout = /*#__PURE__*/function (_super) {\n  __extends(VirtualRowLayout, _super);\n\n  function VirtualRowLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  VirtualRowLayout.prototype.shouldComponentUpdate = function (nextProps) {\n    var _a = this.props,\n        prevCells = _a.cells,\n        prevRow = _a.row;\n    var nextCells = nextProps.cells,\n        nextRow = nextProps.row;\n\n    if (prevRow !== nextRow || prevCells.length !== nextCells.length) {\n      return true;\n    }\n\n    var propsAreNotEqual = nextCells.some(function (nextCell, i) {\n      var prevCell = prevCells[i];\n      return prevCell.column !== nextCell.column || prevCell.colSpan !== nextCell.colSpan;\n    });\n    return propsAreNotEqual;\n  };\n\n  VirtualRowLayout.prototype.render = function () {\n    var _a = this.props,\n        row = _a.row,\n        cells = _a.cells,\n        Row = _a.rowComponent,\n        Cell = _a.cellComponent;\n    return createElement(Row, {\n      tableRow: row,\n      style: getRowStyle({\n        row: row\n      })\n    }, cells.map(function (_a) {\n      var column = _a.column,\n          colSpan = _a.colSpan;\n      return createElement(Cell, {\n        key: column.key,\n        tableRow: row,\n        tableColumn: column,\n        colSpan: colSpan\n      });\n    }));\n  };\n\n  return VirtualRowLayout;\n}(Component); // tslint:disable-next-line: max-line-length\n\n\nvar VirtualTableLayoutBlock = /*#__PURE__*/function (_super) {\n  __extends(VirtualTableLayoutBlock, _super);\n\n  function VirtualTableLayoutBlock() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  VirtualTableLayoutBlock.prototype.render = function () {\n    var _a = this.props,\n        name = _a.name,\n        tableRef = _a.tableRef,\n        collapsedGrid = _a.collapsedGrid,\n        minWidth = _a.minWidth,\n        blockRefsHandler = _a.blockRefsHandler,\n        rowRefsHandler = _a.rowRefsHandler,\n        Table = _a.tableComponent,\n        Body = _a.bodyComponent,\n        cellComponent = _a.cellComponent,\n        rowComponent = _a.rowComponent,\n        marginBottom = _a.marginBottom;\n    return createElement(RefHolder, {\n      ref: function (ref) {\n        return blockRefsHandler(name, ref);\n      }\n    }, createElement(Table, {\n      tableRef: tableRef,\n      style: __assign({\n        minWidth: minWidth + \"px\"\n      }, marginBottom ? {\n        marginBottom: marginBottom + \"px\"\n      } : null)\n    }, createElement(ColumnGroup, {\n      columns: collapsedGrid.columns\n    }), createElement(Body, null, collapsedGrid.rows.map(function (visibleRow) {\n      var row = visibleRow.row,\n          _a = visibleRow.cells,\n          cells = _a === void 0 ? [] : _a;\n      return createElement(RefHolder, {\n        key: row.key,\n        ref: function (ref) {\n          return rowRefsHandler(row, ref);\n        }\n      }, createElement(VirtualRowLayout, {\n        row: row,\n        cells: cells,\n        rowComponent: rowComponent,\n        cellComponent: cellComponent\n      }));\n    }))));\n  };\n\n  VirtualTableLayoutBlock.defaultProps = {\n    blockRefsHandler: function () {},\n    rowRefsHandler: function () {},\n    tableRef: createRef()\n  };\n  return VirtualTableLayoutBlock;\n}(PureComponent);\n\nvar AUTO_HEIGHT = 'auto';\nvar defaultProps$3 = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: function () {\n    return null;\n  },\n  headTableComponent: function () {\n    return null;\n  },\n  footerComponent: function () {\n    return null;\n  },\n  footerTableComponent: function () {\n    return null;\n  }\n};\n/** @internal */\n// tslint:disable-next-line: max-line-length\n\nvar VirtualTableLayout = /*#__PURE__*/function (_super) {\n  __extends(VirtualTableLayout, _super);\n\n  function VirtualTableLayout(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.rowRefs = new Map();\n    _this.blockRefs = new Map();\n    _this.viewportTop = 0;\n    _this.containerHeight = 600;\n    _this.containerWidth = 800;\n    _this.viewportLeft = 0;\n\n    _this.getRowHeight = function (row) {\n      var rowHeights = _this.state.rowHeights;\n      var estimatedRowHeight = _this.props.estimatedRowHeight;\n\n      if (row) {\n        var storedHeight = rowHeights.get(row.key);\n        if (storedHeight !== undefined) return storedHeight;\n        if (row.height) return row.height;\n      }\n\n      return estimatedRowHeight;\n    };\n\n    _this.registerRowRef = function (row, ref) {\n      if (ref === null) {\n        _this.rowRefs.delete(row);\n      } else {\n        _this.rowRefs.set(row, ref);\n      }\n    };\n\n    _this.registerBlockRef = function (name, ref) {\n      if (ref === null) {\n        _this.blockRefs.delete(name);\n      } else {\n        _this.blockRefs.set(name, ref);\n      }\n    };\n\n    _this.onScroll = function (e) {\n      var node = e.target;\n\n      if (_this.shouldSkipScrollEvent(e)) {\n        return;\n      }\n\n      var viewportTop = node.scrollTop,\n          viewportLeft = node.scrollLeft;\n      _this.viewportTop = viewportTop;\n      _this.viewportLeft = viewportLeft;\n\n      _this.updateViewport();\n    };\n\n    _this.handleContainerSizeChange = function (_a) {\n      var width = _a.width,\n          height = _a.height;\n      _this.containerHeight = height;\n      _this.containerWidth = width;\n\n      _this.updateViewport();\n    };\n\n    _this.state = {\n      rowHeights: new Map(),\n      height: 0,\n      headerHeight: 0,\n      bodyHeight: 0,\n      footerHeight: 0,\n      visibleRowBoundaries: {}\n    };\n    var headerHeight = props.headerRows.reduce(function (acc, row) {\n      return acc + _this.getRowHeight(row);\n    }, 0);\n    var footerHeight = props.footerRows.reduce(function (acc, row) {\n      return acc + _this.getRowHeight(row);\n    }, 0);\n    _this.state = __assign({\n      headerHeight: headerHeight,\n      footerHeight: footerHeight\n    }, _this.state);\n    _this.getColumnWidthGetter = memoize(function (tableColumns, tableWidth, minColumnWidth) {\n      return getColumnWidthGetter(tableColumns, tableWidth, minColumnWidth);\n    });\n    return _this;\n  }\n\n  VirtualTableLayout.prototype.componentDidMount = function () {\n    this.storeRowHeights();\n    this.storeBlockHeights();\n  };\n\n  VirtualTableLayout.prototype.componentDidUpdate = function (prevProps) {\n    this.storeRowHeights();\n    this.storeBlockHeights();\n    var _a = this.props,\n        bodyRows = _a.bodyRows,\n        columns = _a.columns; // NOTE: the boundaries depend not only on scroll position and container dimensions\n    // but on body rows too. This boundaries update is especially important when\n    // lazy loading is used because by the time that all involved events are handled\n    // no rows are loaded yet.\n\n    var bodyRowsChanged = prevProps.bodyRows !== bodyRows; // Also it's the only place where we can respond to the column count change\n\n    var columnCountChanged = prevProps.columns.length !== columns.length;\n\n    if (bodyRowsChanged || columnCountChanged) {\n      this.updateViewport();\n    }\n  };\n\n  VirtualTableLayout.getDerivedStateFromProps = function (nextProps, prevState) {\n    var prevRowHeight = prevState.rowHeights;\n\n    var rowHeights = __spread(nextProps.headerRows, nextProps.bodyRows, nextProps.footerRows).reduce(function (acc, row) {\n      var rowHeight = prevRowHeight.get(row.key);\n\n      if (rowHeight !== undefined) {\n        acc.set(row.key, rowHeight);\n      }\n\n      return acc;\n    }, new Map());\n\n    return {\n      rowHeights: rowHeights\n    };\n  };\n\n  VirtualTableLayout.prototype.storeRowHeights = function () {\n    var _this = this;\n\n    var rowsWithChangedHeights = Array.from(this.rowRefs.entries()).map(function (_a) {\n      var _b = __read(_a, 2),\n          row = _b[0],\n          ref = _b[1];\n\n      return [row, findDOMNode(ref)];\n    }).filter(function (_a) {\n      var _b = __read(_a, 2),\n          node = _b[1];\n\n      return !!node;\n    }).map(function (_a) {\n      var _b = __read(_a, 2),\n          row = _b[0],\n          node = _b[1];\n\n      return [row, node.getBoundingClientRect().height];\n    }).filter(function (_a) {\n      var _b = __read(_a, 1),\n          row = _b[0];\n\n      return row.type !== TABLE_STUB_TYPE;\n    }).filter(function (_a) {\n      var _b = __read(_a, 2),\n          row = _b[0],\n          height = _b[1];\n\n      return height !== _this.getRowHeight(row);\n    });\n\n    if (rowsWithChangedHeights.length) {\n      var rowHeights_1 = this.state.rowHeights;\n      rowsWithChangedHeights.forEach(function (_a) {\n        var _b = __read(_a, 2),\n            row = _b[0],\n            height = _b[1];\n\n        return rowHeights_1.set(row.key, height);\n      });\n      this.setState({\n        rowHeights: rowHeights_1\n      });\n    }\n  };\n\n  VirtualTableLayout.prototype.storeBlockHeights = function () {\n    var _this = this;\n\n    var getBlockHeight = function (blockName) {\n      return _this.blockRefs.get(blockName) ? findDOMNode(_this.blockRefs.get(blockName)).getBoundingClientRect().height : 0;\n    };\n\n    var headerHeight = getBlockHeight('header');\n    var bodyHeight = getBlockHeight('body');\n    var footerHeight = getBlockHeight('footer');\n    var _a = this.state,\n        prevHeaderHeight = _a.headerHeight,\n        prevBodyHeight = _a.bodyHeight,\n        prevFooterHeight = _a.footerHeight;\n\n    if (prevHeaderHeight !== headerHeight || prevBodyHeight !== bodyHeight || prevFooterHeight !== footerHeight) {\n      this.setState({\n        headerHeight: headerHeight,\n        bodyHeight: bodyHeight,\n        footerHeight: footerHeight\n      });\n    }\n  };\n\n  VirtualTableLayout.prototype.shouldSkipScrollEvent = function (e) {\n    var node = e.target; // NOTE: prevent nested scroll to update viewport\n\n    if (node !== e.currentTarget) {\n      return true;\n    } // NOTE: normalize position:\n    // in Firefox and Chrome (zoom > 100%) when scrolled to the bottom\n    // in Edge when scrolled to the right edge\n\n\n    var correction = 1;\n    var nodeHorizontalOffset = parseInt(node.scrollLeft + node.clientWidth, 10) - correction;\n    var nodeVerticalOffset = parseInt(node.scrollTop + node.clientHeight, 10) - correction; // NOTE: prevent iOS to flicker in bounces and correct rendering on high dpi screens\n\n    if (node.scrollTop < 0 || node.scrollLeft < 0 || nodeHorizontalOffset > Math.max(node.scrollWidth, node.clientWidth) || nodeVerticalOffset > Math.max(node.scrollHeight, node.clientHeight)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  VirtualTableLayout.prototype.updateViewport = function () {\n    var _a = this.props,\n        viewport = _a.viewport,\n        setViewport = _a.setViewport;\n    var newViewport = this.calculateViewport();\n\n    if (viewport !== newViewport) {\n      setViewport(newViewport);\n    }\n  };\n\n  VirtualTableLayout.prototype.calculateViewport = function () {\n    var _a = this,\n        state = _a.state,\n        viewportTop = _a.viewportTop,\n        viewportLeft = _a.viewportLeft,\n        containerHeight = _a.containerHeight,\n        containerWidth = _a.containerWidth;\n\n    var _b = this.props,\n        loadedRowsStart = _b.loadedRowsStart,\n        bodyRows = _b.bodyRows,\n        headerRows = _b.headerRows,\n        footerRows = _b.footerRows,\n        estimatedRowHeight = _b.estimatedRowHeight,\n        columns = _b.columns,\n        minColumnWidth = _b.minColumnWidth,\n        isDataRemote = _b.isDataRemote,\n        viewport = _b.viewport;\n    var getColumnWidth = this.getColumnWidthGetter(columns, containerWidth, minColumnWidth);\n    return getViewport(__assign(__assign({}, state), {\n      viewportTop: viewportTop,\n      viewportLeft: viewportLeft,\n      containerHeight: containerHeight,\n      containerWidth: containerWidth\n    }), {\n      loadedRowsStart: loadedRowsStart,\n      columns: columns,\n      bodyRows: bodyRows,\n      headerRows: headerRows,\n      footerRows: footerRows,\n      isDataRemote: isDataRemote,\n      viewport: viewport\n    }, estimatedRowHeight, this.getRowHeight, getColumnWidth);\n  };\n\n  VirtualTableLayout.prototype.getCollapsedGrids = function (viewport) {\n    var _a = this,\n        containerWidth = _a.containerWidth,\n        viewportLeft = _a.viewportLeft;\n\n    var _b = this.props,\n        headerRows = _b.headerRows,\n        bodyRows = _b.bodyRows,\n        footerRows = _b.footerRows,\n        columns = _b.columns,\n        loadedRowsStart = _b.loadedRowsStart,\n        totalRowCount = _b.totalRowCount,\n        getCellColSpan = _b.getCellColSpan,\n        minColumnWidth = _b.minColumnWidth;\n    var getColumnWidth = this.getColumnWidthGetter(columns, containerWidth, minColumnWidth);\n    return getCollapsedGrids({\n      headerRows: headerRows,\n      bodyRows: bodyRows,\n      footerRows: footerRows,\n      columns: columns,\n      loadedRowsStart: loadedRowsStart,\n      totalRowCount: totalRowCount,\n      getCellColSpan: getCellColSpan,\n      viewportLeft: viewportLeft,\n      containerWidth: containerWidth,\n      viewport: viewport,\n      getRowHeight: this.getRowHeight,\n      getColumnWidth: getColumnWidth\n    });\n  };\n\n  VirtualTableLayout.prototype.render = function () {\n    var _a = this.props,\n        Container = _a.containerComponent,\n        HeadTable = _a.headTableComponent,\n        FootTable = _a.footerTableComponent,\n        Table = _a.tableComponent,\n        Head = _a.headComponent,\n        Body = _a.bodyComponent,\n        Footer = _a.footerComponent,\n        tableRef = _a.tableRef,\n        height = _a.height,\n        headerRows = _a.headerRows,\n        footerRows = _a.footerRows,\n        minColumnWidth = _a.minColumnWidth,\n        minWidth = _a.minWidth,\n        cellComponent = _a.cellComponent,\n        rowComponent = _a.rowComponent,\n        viewport = _a.viewport,\n        scrollTop = _a.scrollTop;\n    var _b = this.state,\n        headerHeight = _b.headerHeight,\n        bodyHeight = _b.bodyHeight,\n        footerHeight = _b.footerHeight;\n    var containerHeight = this.containerHeight;\n    var collapsedGrids = this.getCollapsedGrids(viewport);\n    var commonProps = {\n      cellComponent: cellComponent,\n      rowComponent: rowComponent,\n      minColumnWidth: minColumnWidth,\n      minWidth: minWidth,\n      blockRefsHandler: this.registerBlockRef,\n      rowRefsHandler: this.registerRowRef\n    };\n    var sizerHeight = height === AUTO_HEIGHT ? null : height;\n    return createElement(Sizer, {\n      onSizeChange: this.handleContainerSizeChange,\n      containerComponent: Container,\n      style: {\n        height: sizerHeight\n      },\n      onScroll: this.onScroll,\n      scrollTop: scrollTop\n    }, !!headerRows.length && createElement(VirtualTableLayoutBlock, __assign({}, commonProps, {\n      name: \"header\",\n      collapsedGrid: collapsedGrids.headerGrid,\n      tableComponent: HeadTable,\n      bodyComponent: Head\n    })), createElement(VirtualTableLayoutBlock, __assign({}, commonProps, {\n      name: \"body\",\n      collapsedGrid: collapsedGrids.bodyGrid,\n      tableComponent: Table,\n      bodyComponent: Body,\n      tableRef: tableRef,\n      marginBottom: Math.max(0, containerHeight - headerHeight - bodyHeight - footerHeight)\n    })), !!footerRows.length && createElement(VirtualTableLayoutBlock, __assign({}, commonProps, {\n      name: \"footer\",\n      collapsedGrid: collapsedGrids.footerGrid,\n      tableComponent: FootTable,\n      bodyComponent: Footer\n    })));\n  };\n\n  VirtualTableLayout.defaultProps = defaultProps$3;\n  return VirtualTableLayout;\n}(PureComponent);\n\nvar getColumnStyle = function (_a) {\n  var column = _a.column;\n  return column.animationState;\n};\n/** @internal */\n\n\nvar RowLayout = memo(function (props) {\n  var row = props.row,\n      columns = props.columns,\n      Row = props.rowComponent,\n      Cell = props.cellComponent,\n      getCellColSpan = props.getCellColSpan;\n  var getColSpan = useCallback(function (tableRow, tableColumn) {\n    return getCellColSpan({\n      tableRow: tableRow,\n      tableColumn: tableColumn,\n      tableColumns: columns\n    });\n  }, [columns, getCellColSpan]);\n  return createElement(Row, {\n    tableRow: row,\n    style: getRowStyle({\n      row: row\n    })\n  }, columns.map(function (column) {\n    return createElement(Cell, {\n      key: column.key,\n      tableRow: row,\n      tableColumn: column,\n      style: getColumnStyle({\n        column: column\n      }),\n      colSpan: getColSpan(row, column)\n    });\n  }));\n});\n/** @internal */\n\nvar RowsBlockLayout = /*#__PURE__*/function (_super) {\n  __extends(RowsBlockLayout, _super);\n\n  function RowsBlockLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  RowsBlockLayout.prototype.render = function () {\n    var _a = this.props,\n        rows = _a.rows,\n        columns = _a.columns,\n        Block = _a.blockComponent,\n        rowComponent = _a.rowComponent,\n        cellComponent = _a.cellComponent,\n        getCellColSpan = _a.getCellColSpan;\n    return createElement(Block, null, rows.map(function (row) {\n      return createElement(RowLayout, {\n        key: row.key,\n        row: row,\n        columns: columns,\n        rowComponent: rowComponent,\n        cellComponent: cellComponent,\n        getCellColSpan: getCellColSpan\n      });\n    }));\n  };\n\n  return RowsBlockLayout;\n}(PureComponent);\n\nvar defaultProps$4 = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: function () {\n    return null;\n  },\n  footerComponent: function () {\n    return null;\n  }\n};\n/** @internal */\n\nvar StaticTableLayout = /*#__PURE__*/function (_super) {\n  __extends(StaticTableLayout, _super);\n\n  function StaticTableLayout() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  StaticTableLayout.prototype.render = function () {\n    var _a = this.props,\n        headerRows = _a.headerRows,\n        bodyRows = _a.bodyRows,\n        footerRows = _a.footerRows,\n        columns = _a.columns,\n        minWidth = _a.minWidth,\n        Container = _a.containerComponent,\n        Table = _a.tableComponent,\n        headComponent = _a.headComponent,\n        bodyComponent = _a.bodyComponent,\n        footerComponent = _a.footerComponent,\n        rowComponent = _a.rowComponent,\n        cellComponent = _a.cellComponent,\n        getCellColSpan = _a.getCellColSpan,\n        tableRef = _a.tableRef;\n    var commonProps = {\n      columns: columns,\n      rowComponent: rowComponent,\n      cellComponent: cellComponent,\n      getCellColSpan: getCellColSpan\n    };\n    return createElement(Container, null, createElement(Table, {\n      tableRef: tableRef,\n      style: {\n        minWidth: minWidth + \"px\"\n      }\n    }, createElement(ColumnGroup, {\n      columns: columns\n    }), !!headerRows.length && createElement(RowsBlockLayout, __assign({\n      rows: headerRows,\n      blockComponent: headComponent\n    }, commonProps)), createElement(RowsBlockLayout, __assign({\n      rows: bodyRows,\n      blockComponent: bodyComponent\n    }, commonProps)), !!footerRows.length && createElement(RowsBlockLayout, __assign({\n      rows: footerRows,\n      blockComponent: footerComponent\n    }, commonProps))));\n  };\n\n  StaticTableLayout.defaultProps = defaultProps$4;\n  return StaticTableLayout;\n}(PureComponent);\n/** @internal */\n\n\nvar emptyViewport = {\n  columns: [[0, 0]],\n  rows: [0, 0],\n  headerRows: [0, 0],\n  footerRows: [0, 0],\n  top: 0,\n  left: 0,\n  width: 800,\n  height: 600\n};\n\nvar tableColumnsComputed = function (_a) {\n  var tableColumns = _a.tableColumns;\n  return checkColumnWidths(tableColumns);\n};\n/** @internal */\n\n\nvar makeVirtualTable = function (Table, _a) {\n  var VirtualLayout = _a.VirtualLayout,\n      FixedHeader = _a.FixedHeader,\n      FixedFooter = _a.FixedFooter,\n      SkeletonCell = _a.SkeletonCell,\n      defaultEstimatedRowHeight = _a.defaultEstimatedRowHeight,\n      defaultHeight = _a.defaultHeight;\n\n  var VirtualTable = /*#__PURE__*/function (_super) {\n    __extends(VirtualTable, _super);\n\n    function VirtualTable(props) {\n      var _this = _super.call(this, props) || this;\n\n      _this.setViewport = function (viewport) {\n        _this.setState({\n          viewport: viewport\n        });\n      };\n\n      _this.state = {\n        viewport: emptyViewport,\n        nextRowId: undefined\n      };\n      _this.layoutRenderComponent = connectProps(VirtualLayout, function () {\n        var _a = _this.props,\n            headTableComponent = _a.headTableComponent,\n            footerTableComponent = _a.footerTableComponent;\n        return {\n          headTableComponent: headTableComponent,\n          footerTableComponent: footerTableComponent\n        };\n      });\n\n      _this.scrollToRow = function (nextRowId) {\n        return _this.setState({\n          nextRowId: nextRowId\n        });\n      };\n\n      return _this;\n    }\n\n    VirtualTable.prototype.componentDidUpdate = function (prevProps, prevState) {\n      var prevId = prevState.nextRowId;\n      var currentId = this.state.nextRowId;\n      var areIdsEqual = currentId !== undefined && currentId === prevId;\n      this.layoutRenderComponent.update();\n\n      if (areIdsEqual) {\n        this.setState({\n          nextRowId: undefined\n        });\n      }\n    };\n\n    VirtualTable.prototype.render = function () {\n      var _this = this;\n\n      var _a = this.props,\n          height = _a.height,\n          estimatedRowHeight = _a.estimatedRowHeight,\n          SkeletonStubCell = _a.skeletonCellComponent,\n          children = _a.children,\n          restProps = __rest(_a, [\"height\", \"estimatedRowHeight\", \"skeletonCellComponent\", \"children\"]);\n\n      var _b = this.state,\n          stateViewport = _b.viewport,\n          nextId = _b.nextRowId;\n      return createElement(Plugin, {\n        name: \"VirtualTable\"\n      }, createElement(Table, __assign({\n        layoutComponent: this.layoutRenderComponent\n      }, restProps)), createElement(Action, {\n        name: \"setViewport\",\n        action: this.setViewport\n      }), createElement(Action, {\n        name: \"scrollToRow\",\n        action: this.scrollToRow\n      }), createElement(Getter, {\n        name: \"viewport\",\n        value: stateViewport\n      }), createElement(Getter, {\n        name: \"tableColumns\",\n        computed: tableColumnsComputed\n      }), createElement(Template, {\n        name: \"tableLayout\"\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_a, _b) {\n          var availableRowCount = _a.availableRowCount,\n              loadedRowsStart = _a.loadedRowsStart,\n              tableBodyRows = _a.tableBodyRows,\n              isDataRemote = _a.isDataRemote,\n              viewport = _a.viewport;\n          var setViewport = _b.setViewport;\n          var onTopRowChange = _this.props.onTopRowChange;\n          var rowId = getTopRowId(viewport, tableBodyRows, isDataRemote);\n          onTopRowChange(rowId);\n          var totalRowCount = availableRowCount || tableBodyRows.length;\n          var scrollTop = getScrollTop(tableBodyRows, totalRowCount, nextId, estimatedRowHeight, isDataRemote);\n          return createElement(TemplatePlaceholder, {\n            params: __assign(__assign({}, params), {\n              totalRowCount: totalRowCount,\n              loadedRowsStart: loadedRowsStart,\n              isDataRemote: isDataRemote,\n              height: height,\n              estimatedRowHeight: estimatedRowHeight,\n              setViewport: setViewport,\n              viewport: viewport,\n              scrollTop: scrollTop\n            })\n          });\n        });\n      }), createElement(Template, {\n        name: \"tableCell\",\n        predicate: function (_a) {\n          var tableRow = _a.tableRow;\n          return !!isStubTableCell(tableRow);\n        }\n      }, function (params) {\n        return createElement(TemplateConnector, null, function (_a) {\n          var isDataRemote = _a.isDataRemote;\n          return isDataRemote ? createElement(SkeletonStubCell, __assign({}, params)) : createElement(TemplatePlaceholder, null);\n        });\n      }));\n    };\n\n    VirtualTable.defaultProps = {\n      estimatedRowHeight: defaultEstimatedRowHeight,\n      height: defaultHeight,\n      headTableComponent: FixedHeader,\n      footerTableComponent: FixedFooter,\n      skeletonCellComponent: SkeletonCell,\n      onTopRowChange: function () {}\n    };\n    VirtualTable.TOP_POSITION = TOP_POSITION;\n    VirtualTable.BOTTOM_POSITION = BOTTOM_POSITION;\n    return VirtualTable;\n  }(PureComponent);\n\n  Object.values(Table.components).forEach(function (name) {\n    VirtualTable[name] = Table[name];\n  });\n  VirtualTable.FixedHeader = FixedHeader;\n  VirtualTable.FixedFooter = FixedFooter;\n  VirtualTable.SkeletonCell = SkeletonCell;\n  return VirtualTable;\n};\n\nvar Node = /*#__PURE__*/function () {\n  function Node(start, rows) {\n    this.prev = null;\n    this.next = null;\n    this.start = start;\n    this.rows = rows;\n  }\n\n  return Node;\n}(); // tslint:disable-next-line:max-classes-per-file\n\n\nvar LRUCache = /*#__PURE__*/function () {\n  function LRUCache(pageSize, capacity) {\n    if (capacity === void 0) {\n      capacity = Number.POSITIVE_INFINITY;\n    }\n\n    this.pages = new Map();\n    this.pageSize = pageSize;\n    this.capacity = capacity;\n    this.initList();\n  }\n\n  LRUCache.prototype.initList = function () {\n    this.head = new Node(-1, []);\n    this.tail = new Node(-1, []);\n    this.head.next = this.tail;\n    this.tail.prev = this.head;\n  };\n\n  LRUCache.prototype.addPage = function (pageStart, rows) {\n    if (this.pages.has(pageStart)) {\n      this.removePage(pageStart);\n    }\n\n    var node = new Node(pageStart, rows);\n    var last = this.tail.prev;\n    last.next = node;\n    node.next = this.tail;\n    node.prev = last;\n    this.tail.prev = node;\n    this.pages.set(pageStart, node);\n\n    if (this.pages.size > this.capacity) {\n      this.removePage(this.head.next.start);\n    }\n  };\n\n  LRUCache.prototype.removePage = function (start) {\n    var node = this.pages.get(start);\n    node.prev.next = node.next;\n    node.next.prev = node.prev;\n    this.pages.delete(start);\n  };\n\n  LRUCache.prototype.getPage = function (pageStart) {\n    if (!this.pages.has(pageStart)) {\n      return null;\n    }\n\n    var rows = this.pages.get(pageStart).rows;\n    this.removePage(pageStart);\n    this.addPage(pageStart, rows);\n    return rows;\n  };\n\n  LRUCache.prototype.clear = function () {\n    this.pages.clear();\n    this.initList();\n  };\n\n  return LRUCache;\n}();\n\nvar createRowCache = function (pageSize, capacity) {\n  if (pageSize === void 0) {\n    pageSize = 100;\n  }\n\n  if (capacity === void 0) {\n    capacity = Number.POSITIVE_INFINITY;\n  }\n\n  var cache = new LRUCache(pageSize, capacity / pageSize);\n  return {\n    getRows: function (skip, take) {\n      var result = [];\n      var pageCount = Math.ceil(take / pageSize);\n\n      for (var i = 0; i < pageCount; i += 1) {\n        var pageStart = skip + i * pageSize;\n        var chunk = cache.getPage(pageStart);\n\n        if (chunk !== null) {\n          result = result.concat(chunk);\n        } // yield if last page is incomplete\n\n\n        if (chunk === null || i !== pageCount - 1 && chunk.length !== pageSize) {\n          return result;\n        }\n      }\n\n      return result;\n    },\n    setRows: function (skip, rows) {\n      var pageCount = Math.ceil(rows.length / pageSize);\n\n      for (var i = 0; i < pageCount; i += 1) {\n        var pageStart = i * pageSize;\n        var rowsChunk = rows.slice(pageStart, pageStart + pageSize); // put incomplete page only if it is last one\n\n        if (rowsChunk.length === pageSize || i === pageCount - 1) {\n          cache.addPage(pageStart + skip, rowsChunk);\n        }\n      }\n    },\n    invalidate: function () {\n      return cache.clear();\n    }\n  };\n};\n\nvar InlineSummaryItem = memo(function (_a) {\n  var _b = _a.summary,\n      messageKey = _b.messageKey,\n      columnTitle = _b.columnTitle,\n      SummaryComponent = _b.component,\n      getMessage = _a.getMessage;\n  return createElement(Fragment, null, getMessage(messageKey, {\n    columnTitle: columnTitle\n  }), createElement(SummaryComponent, null));\n});\nexport { ColumnChooser, CustomGrouping, CustomPaging, CustomSummary, CustomTreeData, DataTypeProvider, DragDropProvider, EditingState, ExportPanel, FilteringState, Grid, GroupPanelLayout, GroupingPanel, GroupingState, InlineSummaryItem, IntegratedFiltering, IntegratedGrouping, IntegratedPaging, IntegratedSelection, IntegratedSorting, IntegratedSummary, PagingPanel, PagingState, RowDetailState, SearchPanel, SearchState, SelectionState, SortingState, StaticTableLayout, SummaryState, Table, TableBandHeader, TableColumnReordering, TableColumnResizing, TableColumnVisibility, TableEditColumn, TableEditRow, TableFilterRow, TableFixedColumns, TableGroupRow, TableHeaderRow, TableInlineCellEditing, TableLayout, TableRowDetail, TableSelection, TableSummaryRow, TableSummaryRowBase, TableTreeColumn, Toolbar, TreeDataState, VirtualTableLayout, VirtualTableState, createRowCache, defaultMessages$1 as defaultMessages, emptyViewport, makeVirtualTable };","map":{"version":3,"sources":["../src/plugins/internal/table-group-row-columns.tsx","../src/plugins/internal/grid-core-getters.tsx","../src/plugins/internal/table-columns-getter.tsx","../src/plugins/internal/visible-table-columns.tsx","../src/plugins/internal/ordered-table-columns.tsx","../src/plugins/grid-core.tsx","../src/grid.tsx","../src/plugins/column-chooser.tsx","../src/plugins/filtering-state.tsx","../src/plugins/integrated-filtering.tsx","../src/plugins/editing-state.tsx","../src/plugins/paging-state.tsx","../src/plugins/integrated-paging.tsx","../src/plugins/custom-paging.tsx","../src/plugins/grouping-state.tsx","../src/plugins/integrated-grouping.tsx","../src/plugins/custom-grouping.tsx","../src/plugins/selection-state.tsx","../src/plugins/integrated-selection.tsx","../src/plugins/sorting-state.tsx","../src/plugins/integrated-sorting.tsx","../src/plugins/drag-drop-provider.tsx","../src/plugins/table-column-reordering.tsx","../src/plugins/table.tsx","../src/plugins/table-selection.tsx","../src/plugins/row-detail-state.tsx","../src/plugins/table-row-detail.tsx","../src/components/summary/constants.ts","../src/components/summary/table-summary-content.tsx","../src/components/summary/group-summaries.tsx","../src/plugins/table-group-row.tsx","../src/plugins/table-header-row.tsx","../src/plugins/table-band-header.tsx","../src/plugins/table-filter-row.tsx","../src/plugins/table-edit-row.tsx","../src/plugins/table-edit-column.tsx","../src/plugins/table-column-resizing.tsx","../src/plugins/paging-panel.tsx","../src/components/group-panel-layout/item-layout.tsx","../src/components/group-panel-layout.tsx","../src/plugins/grouping-panel.tsx","../src/plugins/data-type-provider.tsx","../src/plugins/table-column-visibility.tsx","../src/plugins/toolbar.tsx","../src/plugins/tree-data-state.tsx","../src/plugins/custom-tree-data.tsx","../src/plugins/table-tree-column.tsx","../src/plugins/search-state.tsx","../src/plugins/search-panel.tsx","../src/plugins/table-fixed-columns.tsx","../src/plugins/summary-state.tsx","../src/plugins/integrated-summary.tsx","../src/plugins/custom-summary.tsx","../src/plugins/table-summary-row.tsx","../src/plugins/virtual-table/virtual-table-state.tsx","../src/plugins/table-inline-cell-editing.tsx","../src/plugins/export-panel.tsx","../src/components/table-layout.tsx","../src/components/table-layout/column-group.tsx","../src/utils/helpers.ts","../src/components/table-layout/virtual-row-layout.tsx","../src/components/table-layout/virtual-table-layout-block.tsx","../src/components/table-layout/virtual-table-layout.tsx","../src/components/table-layout/row-layout.tsx","../src/components/table-layout/rows-block-layout.tsx","../src/components/table-layout/static-table-layout.tsx","../src/plugins/virtual-table/virtual-table.tsx","../src/utils/row-cache.ts","../src/components/summary/inline-summary-item.tsx"],"names":["React.memo","React.createElement","React.useCallback","React.PureComponent","React.Fragment","pluginDependencies","columnExtensionValueGetter","getCollapsedRowsComputed","expandedGroupedRowsComputed","DragDropProviderCore","draftOrderComputed","defaultMessages","tableBodyRowsComputed","getCellColSpanComputed","tableHeaderRowsComputed","CellPlaceholder","defaultProps","getRowIdComputed","dependencies","React.createRef","React.Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Getter, Plugin, Getters,\n} from '@devexpress/dx-react-core';\nimport { tableColumnsWithGrouping } from '@devexpress/dx-grid-core';\nimport { ShowColumnWhenGroupedGetterFn, TableColumnsWithGroupingProps } from '../../types';\n\nconst showColumnWhenGroupedGetter: ShowColumnWhenGroupedGetterFn = (\n  showColumnsWhenGrouped, columnExtensions = [],\n) => {\n  const map = columnExtensions.reduce((acc, columnExtension) => {\n    acc[columnExtension.columnName] = columnExtension.showWhenGrouped;\n    return acc;\n  }, {});\n\n  return columnName => map[columnName] || showColumnsWhenGrouped;\n};\n\n/** @internal */\nexport const TableColumnsWithGrouping: React.FunctionComponent<\n  TableColumnsWithGroupingProps\n> = React.memo(({\n  indentColumnWidth, showColumnsWhenGrouped, columnExtensions,\n}) => {\n  const tableColumnsComputed = ({\n    columns, tableColumns, grouping, draftGrouping,\n  }: Getters) => tableColumnsWithGrouping(\n    columns,\n    tableColumns,\n    grouping,\n    draftGrouping,\n    indentColumnWidth!,\n    showColumnWhenGroupedGetter(showColumnsWhenGrouped!, columnExtensions),\n  );\n\n  return (\n    <Plugin>\n      <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n    </Plugin>\n  );\n});\n\nTableColumnsWithGrouping.defaultProps = {\n  indentColumnWidth: 0,\n};\n","import * as React from 'react';\nimport {\n  Getter, Plugin,\n} from '@devexpress/dx-react-core';\nimport { rowIdGetter, cellValueGetter } from '@devexpress/dx-grid-core';\nimport { GridCoreGettersProps } from '../../types';\n\nexport const GridCoreGetters: React.FunctionComponent<GridCoreGettersProps> = React.memo(({\n  rows,\n  columns,\n  getRowId,\n  getCellValue,\n}) => (\n  <Plugin>\n    <Getter name=\"rows\" value={rows} />\n    <Getter name=\"getRowId\" value={rowIdGetter(getRowId!, rows)} />\n    <Getter name=\"columns\" value={columns} />\n    <Getter name=\"getCellValue\" value={cellValueGetter(getCellValue!, columns)} />\n  </Plugin>\n));\n","import * as React from 'react';\nimport {\n  Getter, Plugin,\n} from '@devexpress/dx-react-core';\nimport { tableColumnsWithDataRows, checkTableColumnExtensions } from '@devexpress/dx-grid-core';\nimport { Table } from '../../types';\n\nexport const TableColumnsWithDataRowsGetter: React.FunctionComponent<\n  { columnExtensions?: Table.ColumnExtension[]; }\n> = React.memo(({ columnExtensions }) => {\n  const tableColumnsComputed = React.useCallback(\n    ({ columns }) => (\n      tableColumnsWithDataRows(columns, columnExtensions!)\n    ), [columnExtensions]);\n  checkTableColumnExtensions(columnExtensions!);\n\n  return (\n    <Plugin>\n      <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n    </Plugin>\n  );\n});\n","import * as React from 'react';\nimport {\n  Getter,\n  Plugin,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  visibleTableColumns,\n} from '@devexpress/dx-grid-core';\nimport { VisibleTableColumnsProps } from '../../types';\n\nconst visibleTableColumnsComputed = (\n  { tableColumns, hiddenColumnNames }: Getters,\n) => visibleTableColumns(tableColumns, hiddenColumnNames);\n\n/** @internal */\nexport const VisibleTableColumns: React.FunctionComponent<\n  VisibleTableColumnsProps\n> = React.memo(({\n  hiddenColumnNames,\n}) => (\n  <Plugin>\n    <Getter name=\"hiddenColumnNames\" value={hiddenColumnNames} />\n    <Getter name=\"tableColumns\" computed={visibleTableColumnsComputed} />\n  </Plugin>\n));\n\nVisibleTableColumns.defaultProps = {\n  hiddenColumnNames: [],\n};\n","import * as React from 'react';\nimport {\n  Getter,\n  Plugin,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  orderedColumns,\n} from '@devexpress/dx-grid-core';\nimport { OrderedTableColumnsProps } from '../../types';\n\n/** @internal */\nexport const OrderedTableColumns: React.FunctionComponent<\n  OrderedTableColumnsProps\n> = ({\n  order,\n}) => {\n  const columnsComputed = (\n    { tableColumns }: Getters,\n  ) => orderedColumns(tableColumns, order!);\n\n  return (\n    <Plugin>\n      <Getter name=\"tableColumns\" computed={columnsComputed} />\n    </Plugin>\n  );\n};\n\nOrderedTableColumns.defaultProps = {\n  order: [],\n};\n","import * as React from 'react';\nimport {\n  Plugin, Getter, Template, TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { GridProps } from '../types';\nimport { GridCoreGetters } from './internal';\n\nexport class GridCore extends React.PureComponent<GridProps, any> {\n  render() {\n    const {\n      rootComponent: Root,\n      ...restProps\n    } = this.props;\n\n    return (\n      <Plugin>\n        <Getter name=\"skip\" value={0} />\n        <Getter name=\"loadedRowsStart\" value={0} />\n        <GridCoreGetters {...restProps} />\n\n        <Template name=\"root\">\n          <Root>\n            <TemplatePlaceholder name=\"header\" />\n            <TemplatePlaceholder name=\"body\" />\n            <TemplatePlaceholder name=\"footer\" />\n          </Root>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n","import * as React from 'react';\nimport { PluginHost } from '@devexpress/dx-react-core';\nimport { GridCore } from './plugins/grid-core';\nimport { GridProps } from './types';\n\nconst GridBase: React.SFC<GridProps> = ({\n  rows,\n  columns,\n  getRowId,\n  getCellValue,\n  rootComponent,\n  children,\n}) => (\n  <PluginHost>\n    <GridCore\n      rows={rows}\n      columns={columns}\n      getRowId={getRowId}\n      getCellValue={getCellValue}\n      rootComponent={rootComponent}\n    />\n    {children}\n  </PluginHost>\n);\n\n/***\n * The Grid is a root container component designed to process and display data specified via\n * the `rows` property. You can configure columns using the `columns` property. The Grid's\n * functionality  is implemented in several plugins specified as child components.\n * See the plugins concept for details.\n * */\nexport const Grid: React.ComponentType<GridProps> = GridBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template, TemplatePlaceholder, Plugin, TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { columnChooserItems } from '@devexpress/dx-grid-core';\nimport { ColumnChooserState, ColumnChooserProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'TableColumnVisibility' },\n  { name: 'Toolbar' },\n];\n\nclass ColumnChooserBase extends React.PureComponent<ColumnChooserProps, ColumnChooserState> {\n  static defaultProps = {\n    messages: {},\n  };\n  static components = {\n    overlayComponent: 'Overlay',\n    containerComponent: 'Container',\n    itemComponent: 'Item',\n    toggleButtonComponent: 'ToggleButton',\n  };\n  button!: React.ReactInstance;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visible: false,\n    };\n\n    this.handleToggle = this.handleToggle.bind(this);\n    this.handleHide = this.handleHide.bind(this);\n    this.setButtonRef = this.setButtonRef.bind(this);\n  }\n\n  setButtonRef(button) {\n    this.button = button;\n  }\n\n  handleToggle() {\n    const { visible } = this.state;\n    this.setState({ visible: !visible });\n  }\n\n  handleHide() {\n    this.setState({ visible: false });\n  }\n\n  render() {\n    const {\n      overlayComponent: Overlay,\n      containerComponent: Container,\n      itemComponent: Item,\n      toggleButtonComponent: ToggleButton,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages!);\n    const { visible } = this.state;\n\n    return (\n      <Plugin\n        name=\"ColumnChooser\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {(\n              { columns, hiddenColumnNames, isColumnTogglingEnabled },\n              { toggleColumnVisibility },\n            ) => (\n              <React.Fragment>\n                <ToggleButton\n                  buttonRef={this.setButtonRef}\n                  onToggle={this.handleToggle}\n                  getMessage={getMessage}\n                  active={visible}\n                />\n                <Overlay\n                  visible={visible}\n                  target={this.button}\n                  onHide={this.handleHide}\n                >\n                  <Container>\n                    {columnChooserItems(columns, hiddenColumnNames)\n                      .map((item) => {\n                        const { name: columnName } = item.column;\n                        const togglingEnabled = isColumnTogglingEnabled(columnName);\n                        return (\n                          <Item\n                            key={columnName}\n                            item={item}\n                            disabled={!togglingEnabled}\n                            onToggle={() => toggleColumnVisibility(columnName)}\n                          />\n                        );\n                      })}\n                  </Container>\n                </Overlay>\n              </React.Fragment>\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * The ColumnChooser plugin allows a user to toggle grid columns' visibility at runtime.\n * The column chooser lists columns with checkboxes that control a corresponding\n * column's visibility.\n * */\nexport const ColumnChooser: React.ComponentType<ColumnChooserProps> = ColumnChooserBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnFilter,\n  getColumnExtensionValueGetter,\n  filterExpression,\n  ChangeFilterPayload,\n} from '@devexpress/dx-grid-core';\nimport { FilteringStateProps, FilteringStateState } from '../types';\n\nconst columnExtensionValueGetter = (columnExtensions, defaultValue) => (\n  getColumnExtensionValueGetter(columnExtensions, 'filteringEnabled', defaultValue)\n);\nconst filterExpressionComputed = (\n  { filters, filterExpression: filterExpressionValue }: Getters,\n) => filterExpression(filters, filterExpressionValue);\n\nclass FilteringStateBase extends React.PureComponent<FilteringStateProps, FilteringStateState> {\n  static defaultProps = {\n    defaultFilters: [],\n    columnFilteringEnabled: true,\n  };\n  changeColumnFilter: (payload: ChangeFilterPayload) => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      filters: props.filters || props.defaultFilters,\n    };\n    const stateHelper = createStateHelper(\n      this,\n      {\n        filters: () => {\n          const { onFiltersChange } = this.props;\n          return onFiltersChange;\n        },\n      },\n    );\n\n    this.changeColumnFilter = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'filters', changeColumnFilter);\n  }\n\n  // tslint:disable-next-line:member-ordering\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      filters = prevState.filters,\n    } = nextProps;\n\n    return {\n      filters,\n    };\n  }\n\n  render() {\n    const { filters } = this.state;\n    const { columnExtensions, columnFilteringEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"FilteringState\"\n      >\n        <Getter name=\"filters\" value={filters} />\n        <Getter name=\"filterExpression\" computed={filterExpressionComputed} />\n        <Getter\n          name=\"isColumnFilteringEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnFilteringEnabled)}\n        />\n        <Action name=\"changeColumnFilter\" action={this.changeColumnFilter} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the filtering state. */\nexport const FilteringState: React.ComponentType<FilteringStateProps> = FilteringStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  filteredRows,\n  filteredCollapsedRowsGetter,\n  unwrappedFilteredRows,\n  getColumnExtension,\n  defaultFilterPredicate,\n  FilterPredicate,\n} from '@devexpress/dx-grid-core';\nimport { PureComputed } from '@devexpress/dx-core';\nimport { IntegratedFilteringProps, DefaultPredicateFn } from '../types';\n\nconst pluginDependencies = [\n  { name: 'FilteringState', optional: true },\n  { name: 'SearchState', optional: true },\n];\n\nconst getCollapsedRowsComputed = ({ rows }: Getters) => filteredCollapsedRowsGetter(rows);\nconst unwrappedRowsComputed = ({ rows }: Getters) => unwrappedFilteredRows(rows);\n\nclass IntegratedFilteringBase extends React.PureComponent<IntegratedFilteringProps> {\n  static defaultPredicate: DefaultPredicateFn;\n\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnPredicate: PureComputed<\n      [string], FilterPredicate\n    > = columnName => getColumnExtension(\n      columnExtensions, columnName,\n    ).predicate!;\n\n    const rowsComputed = ({\n      rows,\n      filterExpression,\n      getCellValue,\n      getRowLevelKey,\n      getCollapsedRows,\n    }: Getters) => filteredRows(\n      rows,\n      filterExpression,\n      getCellValue,\n      getColumnPredicate,\n      getRowLevelKey,\n      getCollapsedRows,\n    );\n\n    return (\n      <Plugin\n        name=\"IntegratedFiltering\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsComputed} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={unwrappedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\nIntegratedFilteringBase.defaultPredicate = defaultFilterPredicate;\n\nexport const IntegratedFiltering: React.ComponentType<IntegratedFilteringProps> & {\n  /***\n   * The built-in filter predicate.\n   * The `filter` parameter accepts an object containing the 'value' field.\n   **/\n  defaultPredicate: DefaultPredicateFn;\n} = IntegratedFilteringBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, StateHelper,\n} from '@devexpress/dx-react-core';\nimport {\n  createRowChangeGetter,\n  startEditRows,\n  stopEditRows,\n  addRow,\n  changeAddedRow,\n  cancelAddedRows,\n  addedRowsByIds,\n  changeRow,\n  cancelChanges,\n  changedRowsByIds,\n  deleteRows,\n  cancelDeletedRows,\n  getColumnExtensionValueGetter,\n  startEditCells,\n  stopEditCells,\n} from '@devexpress/dx-grid-core';\nimport { EditingStateProps, EditingStateState } from '../types';\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'editingEnabled', defaultValue);\n\nclass EditingStateBase extends React.PureComponent<EditingStateProps, EditingStateState> {\n  static defaultProps = {\n    columnEditingEnabled: true,\n    defaultEditingRowIds: [],\n    defaultEditingCells: [],\n    defaultRowChanges: {},\n    defaultAddedRows: [],\n    defaultDeletedRowIds: [],\n  };\n  startEditRows: (payload: any) => void;\n  stopEditRows: (payload: any) => void;\n  startEditCells: (payload: any) => void;\n  stopEditCells: (payload: any) => void;\n  changeRow: (payload: any) => void;\n  cancelChangedRows: (payload: any) => void;\n  commitChangedRows: ({ rowIds }: { rowIds: any; }) => void;\n  addRow: (payload: any) => void;\n  changeAddedRow: (payload: any) => void;\n  cancelAddedRows: (payload: any) => void;\n  commitAddedRows: ({ rowIds }: { rowIds: any; }) => void;\n  deleteRows: (payload: any) => void;\n  cancelDeletedRows: (payload: any) => void;\n  commitDeletedRows: ({ rowIds }: { rowIds: any; }) => void;\n\n  constructor(props) {\n    super(props);\n    const rowChanges = props.rowChanges || props.defaultRowChanges;\n    const addedRows = props.addedRows || props.defaultAddedRows;\n    const getRowChanges = () => {\n      const { rowChanges: stateRowChanges } = this.state;\n      return stateRowChanges;\n    };\n    const getAddedRows = () => {\n      const { addedRows: stateAddedRows } = this.state;\n      return stateAddedRows;\n    };\n\n    this.state = {\n      addedRows,\n      rowChanges,\n      editingRowIds: props.editingRowIds || props.defaultEditingRowIds,\n      deletedRowIds: props.deletedRowIds || props.defaultDeletedRowIds,\n      editingCells: props.editingCells || props.defaultEditingCells,\n    };\n\n    const stateHelper: StateHelper = createStateHelper(\n      this,\n      {\n        editingRowIds: () => {\n          const { onEditingRowIdsChange } = this.props;\n          return onEditingRowIdsChange;\n        },\n        editingCells: () => {\n          const { onEditingCellsChange } = this.props;\n          return onEditingCellsChange;\n        },\n        addedRows: () => {\n          const { onAddedRowsChange } = this.props;\n          return onAddedRowsChange;\n        },\n        rowChanges: () => {\n          const { onRowChangesChange } = this.props;\n          return onRowChangesChange;\n        },\n        deletedRowIds: () => {\n          const { onDeletedRowIdsChange } = this.props;\n          return onDeletedRowIdsChange;\n        },\n      },\n    );\n\n    this.startEditRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingRowIds', startEditRows);\n    this.stopEditRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingRowIds', stopEditRows);\n\n    this.startEditCells = stateHelper.applyFieldReducer\n    .bind(stateHelper, 'editingCells', startEditCells);\n    this.stopEditCells = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingCells', stopEditCells);\n\n    this.changeRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'rowChanges', changeRow);\n    this.cancelChangedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'rowChanges', cancelChanges);\n    this.commitChangedRows = ({ rowIds }) => {\n      const { onCommitChanges } = this.props;\n      onCommitChanges({\n        changed: changedRowsByIds(getRowChanges(), rowIds),\n      });\n      this.cancelChangedRows({ rowIds });\n    };\n\n    this.addRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', addRow);\n    this.changeAddedRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', changeAddedRow);\n    this.cancelAddedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', cancelAddedRows);\n    this.commitAddedRows = ({ rowIds }) => {\n      const { onCommitChanges } = this.props;\n      onCommitChanges({\n        added: addedRowsByIds(getAddedRows(), rowIds),\n      });\n      this.cancelAddedRows({ rowIds });\n    };\n\n    this.deleteRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'deletedRowIds', deleteRows);\n    this.cancelDeletedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'deletedRowIds', cancelDeletedRows);\n    this.commitDeletedRows = ({ rowIds }) => {\n      const { onCommitChanges } = this.props;\n      onCommitChanges({ deleted: rowIds });\n      this.cancelDeletedRows({ rowIds });\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      editingRowIds = prevState.editingRowIds,\n      editingCells = prevState.editingCells,\n      rowChanges = prevState.rowChanges,\n      addedRows = prevState.addedRows,\n      deletedRowIds = prevState.deletedRowIds,\n    } = nextProps;\n\n    return {\n      editingRowIds,\n      editingCells,\n      rowChanges,\n      addedRows,\n      deletedRowIds,\n    };\n  }\n\n  render() {\n    const { createRowChange, columnExtensions, columnEditingEnabled } = this.props;\n    const {\n      editingRowIds, editingCells, rowChanges, addedRows, deletedRowIds,\n    } = this.state;\n\n    return (\n      <Plugin\n        name=\"EditingState\"\n      >\n        <Getter\n          name=\"createRowChange\"\n          value={createRowChangeGetter(createRowChange, columnExtensions)}\n        />\n\n        <Getter name=\"editingRowIds\" value={editingRowIds} />\n        <Action name=\"startEditRows\" action={this.startEditRows} />\n        <Action name=\"stopEditRows\" action={this.stopEditRows} />\n\n        <Getter name=\"editingCells\" value={editingCells} />\n        <Action name=\"startEditCells\" action={this.startEditCells} />\n        <Action name=\"stopEditCells\" action={this.stopEditCells} />\n\n        <Getter name=\"rowChanges\" value={rowChanges} />\n        <Action name=\"changeRow\" action={this.changeRow} />\n        <Action name=\"cancelChangedRows\" action={this.cancelChangedRows} />\n        <Action name=\"commitChangedRows\" action={this.commitChangedRows} />\n\n        <Getter name=\"addedRows\" value={addedRows} />\n        <Action name=\"addRow\" action={this.addRow} />\n        <Action name=\"changeAddedRow\" action={this.changeAddedRow} />\n        <Action name=\"cancelAddedRows\" action={this.cancelAddedRows} />\n        <Action name=\"commitAddedRows\" action={this.commitAddedRows} />\n\n        <Getter name=\"deletedRowIds\" value={deletedRowIds} />\n        <Action name=\"deleteRows\" action={this.deleteRows} />\n        <Action name=\"cancelDeletedRows\" action={this.cancelDeletedRows} />\n        <Action name=\"commitDeletedRows\" action={this.commitDeletedRows} />\n\n        <Getter\n          name=\"isColumnEditingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnEditingEnabled)}\n        />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that manages grid rows' editing state. It arranges grid rows\n * by different lists depending on a row's state.\n * */\nexport const EditingState: React.ComponentType<EditingStateProps> = EditingStateBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport { setCurrentPage, setPageSize } from '@devexpress/dx-grid-core';\nimport { PagingStateProps, PagingStateState } from '../types';\n\nclass PagingStateBase extends React.PureComponent<PagingStateProps, PagingStateState> {\n  static defaultProps = {\n    defaultPageSize: 10,\n    defaultCurrentPage: 0,\n  };\n  setCurrentPage: (payload: any) => void;\n  setPageSize: (payload: any) => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentPage: props.currentPage || props.defaultCurrentPage,\n      pageSize: props.pageSize !== undefined ? props.pageSize : props.defaultPageSize,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        currentPage: () => {\n          const { onCurrentPageChange } = this.props;\n          return onCurrentPageChange;\n        },\n        pageSize: () => {\n          const { onPageSizeChange } = this.props;\n          return onPageSizeChange;\n        },\n      },\n    );\n\n    this.setCurrentPage = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'currentPage', setCurrentPage);\n    this.setPageSize = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'pageSize', setPageSize);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      currentPage = prevState.currentPage,\n      pageSize = prevState.pageSize,\n    } = nextProps;\n\n    return {\n      currentPage,\n      pageSize,\n    };\n  }\n\n  render() {\n    const { pageSize, currentPage } = this.state;\n\n    return (\n      <Plugin\n        name=\"PagingState\"\n      >\n        <Getter name=\"currentPage\" value={currentPage} />\n        <Getter name=\"pageSize\" value={pageSize} />\n        <Action name=\"setCurrentPage\" action={this.setCurrentPage} />\n        <Action name=\"setPageSize\" action={this.setPageSize} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that manages the paging state. It controls the total page count depending on the\n * total row count and the specified page size, controls the currently selected page number\n * and changes it in response to the corresponding actions.\n * */\nexport const PagingState: React.ComponentType<PagingStateProps> = PagingStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters, Actions } from '@devexpress/dx-react-core';\nimport {\n  paginatedRows, rowsWithPageHeaders, rowCount, currentPage,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedPagingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nconst rowsWithHeadersComputed = (\n  { rows, pageSize, getRowLevelKey }: Getters,\n) => rowsWithPageHeaders(rows, pageSize, getRowLevelKey);\nconst totalCountComputed = ({ rows }: Getters) => rowCount(rows);\nconst paginatedRowsComputed = (\n  { rows, pageSize, currentPage: page }: Getters,\n) => paginatedRows(rows, pageSize, page);\nconst currentPageComputed = (\n  { currentPage: page, totalCount, pageSize }: Getters, { setCurrentPage }: Actions,\n) => currentPage(page, totalCount, pageSize, setCurrentPage);\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass IntegratedPagingBase extends React.PureComponent<IntegratedPagingProps> {\n  render() {\n    return (\n      <Plugin\n        name=\"IntegratedPaging\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsWithHeadersComputed} />\n        <Getter name=\"totalCount\" computed={totalCountComputed} />\n        <Getter name=\"currentPage\" computed={currentPageComputed} />\n        <Getter name=\"rows\" computed={paginatedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that performs built-in data paging. It also changes the current page if the provided\n * one cannot be applied due to fewer available pages.\n * */\nexport const IntegratedPaging: React.ComponentType<IntegratedPagingProps> = IntegratedPagingBase;\n","import * as React from 'react';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport { CustomPagingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nclass CustomPagingBase extends React.PureComponent<CustomPagingProps> {\n  static defaultProps = {\n    totalCount: 0,\n  };\n\n  render() {\n    const { totalCount } = this.props;\n\n    return (\n      <Plugin\n        name=\"CustomPaging\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalCount\" value={totalCount} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that allows implementing a custom totalCount calculation logic. */\nexport const CustomPaging: React.ComponentType<CustomPagingProps> = CustomPagingBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, StateHelper, ActionFn, Getters, Actions,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnGrouping,\n  toggleExpandedGroups,\n  draftColumnGrouping,\n  cancelColumnGroupingDraft,\n  getColumnExtensionValueGetter,\n  adjustSortIndex,\n  ChangeGroupingPayload,\n  ToggleGroupPayload,\n  ChangeSortingPayload,\n} from '@devexpress/dx-grid-core';\nimport { GroupingStateProps, GroupingStateState } from '../types';\n\nconst dependencies = [\n  { name: 'SortingState', optional: true },\n];\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'groupingEnabled', defaultValue);\n\nclass GroupingStateBase extends React.PureComponent<GroupingStateProps, GroupingStateState> {\n  static defaultProps = {\n    defaultGrouping: [],\n    defaultExpandedGroups: [],\n    columnGroupingEnabled: true,\n  };\n  stateHelper: StateHelper;\n  draftColumnGrouping: ActionFn<ChangeGroupingPayload>;\n  toggleGroupExpanded: ActionFn<ToggleGroupPayload>;\n  cancelColumnGroupingDraft: ActionFn<void>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      grouping: props.grouping || props.defaultGrouping,\n      draftGrouping: null,\n      expandedGroups: props.expandedGroups || props.defaultExpandedGroups,\n    };\n\n    this.stateHelper = createStateHelper(\n      this,\n      {\n        grouping: () => {\n          const { onGroupingChange } = this.props;\n          return onGroupingChange;\n        },\n        expandedGroups: () => {\n          const { onExpandedGroupsChange } = this.props;\n          return onExpandedGroupsChange;\n        },\n      },\n    );\n\n    this.changeColumnGrouping = this.changeColumnGrouping.bind(this);\n    this.toggleGroupExpanded = this.stateHelper.applyReducer\n      .bind(this.stateHelper, toggleExpandedGroups);\n    this.draftColumnGrouping = this.stateHelper.applyReducer\n      .bind(this.stateHelper, draftColumnGrouping);\n    this.cancelColumnGroupingDraft = this.stateHelper.applyReducer\n      .bind(this.stateHelper, cancelColumnGroupingDraft);\n    this.changeColumnSorting = this.changeColumnSorting.bind(this);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      grouping = prevState.grouping,\n      expandedGroups = prevState.expandedGroups,\n    } = nextProps;\n\n    return {\n      grouping,\n      expandedGroups,\n    };\n  }\n\n  changeColumnSorting(\n    { columnName, keepOther, ...restParams }: ChangeSortingPayload,\n    { sorting }: Getters,\n    { changeColumnSorting }: Actions,\n  ) {\n    const { grouping } = this.state;\n    const groupingIndex = grouping\n      .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n    if (groupingIndex === -1) {\n      changeColumnSorting({\n        columnName,\n        keepOther: keepOther || grouping.map(columnGrouping => columnGrouping.columnName),\n        ...restParams,\n      });\n      return false;\n    }\n\n    const sortIndex = adjustSortIndex(groupingIndex, grouping, sorting);\n    changeColumnSorting({\n      columnName,\n      sortIndex,\n      keepOther: true,\n      ...restParams,\n    });\n    return false;\n  }\n\n  changeColumnGrouping(\n    { columnName, groupIndex }: ChangeGroupingPayload,\n    getters?: Getters,\n    actions?: Actions,\n  ) {\n    this.stateHelper.applyReducer(\n      changeColumnGrouping,\n      { columnName, groupIndex },\n      (nextState, state) => {\n        const { grouping } = nextState;\n        const { grouping: prevGrouping } = state;\n        const { sorting } = getters!;\n        const { changeColumnSorting } = actions!;\n\n        if (!sorting) return;\n\n        const columnSortingIndex = sorting\n          .findIndex(columnSorting => columnSorting.columnName === columnName);\n        const prevGroupingIndex = prevGrouping\n          .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n        const groupingIndex = grouping\n          .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n\n        if (columnSortingIndex === -1\n          || (prevGroupingIndex === prevGrouping.length - 1 && groupingIndex === -1)) return;\n\n        const sortIndex = adjustSortIndex(\n          groupingIndex === -1 ? grouping.length : groupingIndex,\n          grouping,\n          sorting,\n        );\n\n        if (columnSortingIndex === sortIndex) return;\n\n        changeColumnSorting({\n          sortIndex,\n          keepOther: true,\n          ...sorting[columnSortingIndex],\n        });\n      },\n    );\n  }\n\n  render() {\n    const { grouping, draftGrouping, expandedGroups } = this.state;\n    const { columnExtensions, columnGroupingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"GroupingState\"\n        dependencies={dependencies}\n      >\n        <Getter name=\"grouping\" value={grouping} />\n        <Getter name=\"draftGrouping\" value={draftGrouping || grouping} />\n        <Getter\n          name=\"isColumnGroupingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnGroupingEnabled)}\n        />\n        <Action name=\"changeColumnGrouping\" action={this.changeColumnGrouping} />\n        <Action name=\"draftColumnGrouping\" action={this.draftColumnGrouping} />\n        <Action name=\"cancelColumnGroupingDraft\" action={this.cancelColumnGroupingDraft} />\n\n        <Getter name=\"expandedGroups\" value={expandedGroups} />\n        <Action name=\"toggleGroupExpanded\" action={this.toggleGroupExpanded} />\n\n        <Action name=\"changeColumnSorting\" action={this.changeColumnSorting} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that manages the grouping state. It lists columns used for grouping and stores\n * information about expanded/collapsed groups.\n * */\nexport const GroupingState: React.ComponentType<GroupingStateProps> = GroupingStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  groupRowChecker,\n  groupRowLevelKeyGetter,\n  groupCollapsedRowsGetter,\n  groupedRows,\n  expandedGroupRows,\n  getColumnExtension,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedGroupingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n];\n\nconst getCollapsedRowsComputed = (\n  { getCollapsedRows }: Getters,\n) => groupCollapsedRowsGetter(getCollapsedRows);\nconst expandedGroupedRowsComputed = (\n  { rows, grouping, expandedGroups, isExporting }: Getters,\n) => expandedGroupRows(rows, grouping, expandedGroups, isExporting);\n\nclass IntegratedGroupingBase extends React.PureComponent<IntegratedGroupingProps> {\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnCriteria = columnName => (getColumnExtension(\n      columnExtensions, columnName,\n    ) as any).criteria;\n\n    const groupedRowsComputed = (\n      { rows, grouping, getCellValue }: Getters,\n    ) => groupedRows(rows, grouping, getCellValue, getColumnCriteria);\n\n    return (\n      <Plugin\n        name=\"IntegratedGrouping\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"isGroupRow\" value={groupRowChecker} />\n        <Getter name=\"getRowLevelKey\" value={groupRowLevelKeyGetter} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={groupedRowsComputed} />\n        <Getter name=\"rows\" computed={expandedGroupedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/* tslint:disable: max-line-length */\n/** A plugin that performs built-in grouping and group expanding/collapsing. */\nexport const IntegratedGrouping: React.ComponentType<IntegratedGroupingProps> = IntegratedGroupingBase;\n/* tslint:enable: max-line-length */\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  groupRowChecker,\n  groupRowLevelKeyGetter,\n  groupCollapsedRowsGetter,\n  customGroupingRowIdGetter,\n  customGroupedRows,\n  expandedGroupRows,\n} from '@devexpress/dx-grid-core';\nimport { CustomGroupingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n];\n\nconst getCollapsedRowsComputed = (\n  { getCollapsedRows }: Getters,\n) => groupCollapsedRowsGetter(getCollapsedRows);\nconst expandedGroupedRowsComputed = (\n  { rows, grouping, expandedGroups, isExporting }: Getters,\n) => expandedGroupRows(rows, grouping, expandedGroups, isExporting);\nconst getRowIdComputed = ({ getRowId, rows }: Getters) => customGroupingRowIdGetter(getRowId, rows);\n\nclass CustomGroupingBase extends React.PureComponent<CustomGroupingProps> {\n  render() {\n    const {\n      getChildGroups,\n      grouping: appliedGrouping,\n      expandedGroups: appliedExpandedGroups,\n    } = this.props;\n    const groupedRowsComputed = (\n      { rows, grouping }: Getters,\n    ) => customGroupedRows(rows, grouping, getChildGroups);\n\n    return (\n      <Plugin\n        name=\"CustomGrouping\"\n        dependencies={pluginDependencies}\n      >\n        {appliedGrouping && (\n          <Getter name=\"grouping\" value={appliedGrouping} />\n        )}\n        {appliedExpandedGroups && (\n          <Getter name=\"expandedGroups\" value={appliedExpandedGroups} />\n        )}\n        <Getter name=\"isGroupRow\" value={groupRowChecker} />\n        <Getter name=\"getRowLevelKey\" value={groupRowLevelKeyGetter} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={groupedRowsComputed} />\n        <Getter name=\"getRowId\" computed={getRowIdComputed} />\n        <Getter name=\"rows\" computed={expandedGroupedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that converts custom formatted grouped data to a supported format and performs local group expanding/collapsing. */\nexport const CustomGrouping: React.ComponentType<CustomGroupingProps> = CustomGroupingBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport { toggleSelection } from '@devexpress/dx-grid-core';\nimport { SelectionStateProps, SelectionStateState } from '../types';\n\nclass SelectionStateBase extends React.PureComponent<SelectionStateProps, SelectionStateState> {\n  static defaultProps = {\n    defaultSelection: [],\n  };\n  toggleSelection: ActionFn<any>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selection: props.selection || props.defaultSelection,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        selection: () => {\n          const { onSelectionChange } = this.props;\n          return onSelectionChange;\n        },\n      },\n    );\n\n    this.toggleSelection = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'selection', toggleSelection);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      selection = prevState.selection,\n    } = nextProps;\n\n    return {\n      selection,\n    };\n  }\n\n  render() {\n    const { selection } = this.state;\n\n    return (\n      <Plugin\n        name=\"SelectionState\"\n      >\n        <Getter name=\"selection\" value={selection} />\n        <Action name=\"toggleSelection\" action={this.toggleSelection} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the selection state. */\nexport const SelectionState: React.ComponentType<SelectionStateProps> = SelectionStateBase;\n","import * as React from 'react';\nimport { Getter, Action, Plugin, Getters, Actions } from '@devexpress/dx-react-core';\nimport {\n  rowsWithAvailableToSelect,\n  someSelected,\n  allSelected,\n  unwrapSelectedRows,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedSelectionProps } from '../types';\n\nconst rowsWithAvailableToSelectComputed = (\n  { rows, getRowId, isGroupRow }: Getters,\n) => rowsWithAvailableToSelect(rows, getRowId, isGroupRow);\nconst allSelectedComputed = ({ rows, selection }: Getters) => allSelected(rows, selection);\nconst someSelectedComputed = ({ rows, selection }: Getters) => someSelected(rows, selection);\nconst selectAllAvailableComputed = (\n  { rows: { availableToSelect } }: Getters,\n) => !!availableToSelect.length;\n\nconst toggleSelectAll = (\n  state, { rows: { availableToSelect } }: Getters, { toggleSelection }: Actions,\n) => {\n  toggleSelection({ state, rowIds: availableToSelect });\n};\nconst unwrapRowsComputed = ({ rows }: Getters) => unwrapSelectedRows(rows);\n\nconst pluginDependencies = [\n  { name: 'SelectionState' },\n];\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass IntegratedSelectionBase extends React.PureComponent<IntegratedSelectionProps> {\n  render() {\n    return (\n      <Plugin\n        name=\"IntegratedSelection\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsWithAvailableToSelectComputed} />\n        <Getter name=\"allSelected\" computed={allSelectedComputed} />\n        <Getter name=\"someSelected\" computed={someSelectedComputed} />\n        <Getter name=\"selectAllAvailable\" computed={selectAllAvailableComputed} />\n        <Action name=\"toggleSelectAll\" action={toggleSelectAll} />\n        <Getter name=\"rows\" computed={unwrapRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/* tslint:disable: max-line-length */\n/** A plugin that performs built-in selection. */\nexport const IntegratedSelection: React.ComponentType<IntegratedSelectionProps> = IntegratedSelectionBase;\n/* tslint:enable: max-line-length */\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnSorting,\n  getColumnExtensionValueGetter,\n  getPersistentSortedColumns,\n  calculateKeepOther,\n  ChangeSortingPayload,\n} from '@devexpress/dx-grid-core';\nimport { SortingStateProps, SortingStateState } from '../types';\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'sortingEnabled', defaultValue);\n\nclass SortingStateBase extends React.PureComponent<SortingStateProps, SortingStateState> {\n  static defaultProps = {\n    defaultSorting: [],\n    columnSortingEnabled: true,\n  };\n  changeColumnSorting: ActionFn<ChangeSortingPayload>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sorting: props.sorting || props.defaultSorting,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        sorting: () => {\n          const { onSortingChange } = this.props;\n          return onSortingChange;\n        },\n      },\n    );\n\n    this.changeColumnSorting = stateHelper.applyReducer\n      .bind(stateHelper, (prevState, payload) => {\n        const { sorting = prevState.sorting } = this.props;\n        const persistentSortedColumns = getPersistentSortedColumns(sorting, props.columnExtensions);\n        const keepOther = calculateKeepOther(\n          prevState.sorting, payload.keepOther, persistentSortedColumns,\n        );\n        return changeColumnSorting(prevState, { ...payload, keepOther });\n      });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      sorting = prevState.sorting,\n    } = nextProps;\n\n    return {\n      sorting,\n    };\n  }\n\n  render() {\n    const { sorting } = this.state;\n    const { columnExtensions, columnSortingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"SortingState\"\n      >\n        <Getter name=\"sorting\" value={sorting} />\n        <Getter\n          name=\"isColumnSortingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnSortingEnabled)}\n        />\n        <Action name=\"changeColumnSorting\" action={this.changeColumnSorting} />\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that manages the sorting state. It controls the list of columns that participate in sorting. */\nexport const SortingState: React.ComponentType<SortingStateProps> = SortingStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport { sortedRows, getColumnExtension } from '@devexpress/dx-grid-core';\nimport { IntegratedSortingProps, IntegratedSorting as IntegratedSortingNs } from '../types';\n\nconst pluginDependencies = [\n  { name: 'SortingState' },\n];\n\nclass IntegratedSortingBase extends React.PureComponent<IntegratedSortingProps> {\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnCompare = columnName => (\n      getColumnExtension(columnExtensions, columnName) as IntegratedSortingNs.ColumnExtension\n    ).compare!;\n\n    const rowsComputed = (\n      { rows, sorting, getCellValue, isGroupRow, getRowLevelKey }: Getters,\n    ) => sortedRows(rows, sorting, getCellValue, getColumnCompare, isGroupRow, getRowLevelKey);\n\n    return (\n      <Plugin\n        name=\"IntegratedSorting\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that performs built-in data sorting. */\nexport const IntegratedSorting: React.ComponentType<IntegratedSortingProps> = IntegratedSortingBase;\n","import * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport {\n  Plugin, Getter, Template, TemplatePlaceholder,\n  TemplateConnector,\n  DragDropProvider as DragDropProviderCore,\n} from '@devexpress/dx-react-core';\nimport { DragDropProviderProps, DragDropProviderState } from '../types';\n\nconst getTargetColumns = (payload, columns) => payload\n  .filter(item => item.type === 'column')\n  .map(item => columns.find(column => column.name === item.columnName));\n\n// tslint:disable-next-line: max-line-length\nclass DragDropProviderBase extends React.PureComponent<DragDropProviderProps, DragDropProviderState> {\n  static components = {\n    containerComponent: 'Container',\n    columnComponent: 'Column',\n  };\n  change: (object) => void;\n  bodyRef!: HTMLElement;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      payload: null,\n      clientOffset: null,\n    };\n\n    this.change = ({ payload, clientOffset }) => this.setState({ payload, clientOffset });\n  }\n\n  componentDidMount() {\n    this.bodyRef = document.body;\n  }\n\n  render() {\n    const {\n      containerComponent: Container,\n      columnComponent: Column,\n    } = this.props;\n    const {\n      payload,\n      clientOffset,\n    } = this.state;\n\n    return (\n      <Plugin\n        name=\"DragDropProvider\"\n      >\n        <Getter name=\"draggingEnabled\" value />\n        <Template name=\"root\">\n          <DragDropProviderCore\n            onChange={this.change}\n          >\n            <TemplatePlaceholder />\n          </DragDropProviderCore>\n          {payload && (\n            <TemplateConnector>\n              {({ columns }) => (\n                createPortal(\n                  <Container\n                    clientOffset={clientOffset!}\n                  >\n                    {getTargetColumns(payload, columns)\n                      .map(column => (\n                        <Column\n                          key={column.name}\n                          column={column}\n                        />\n                      ))\n                    }\n                  </Container>,\n                  this.bodyRef,\n                )\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that implements the drag-and-drop functionality and visualizes columns that are being dragged. */\nexport const DragDropProvider: React.ComponentType<DragDropProviderProps> = DragDropProviderBase;\n","import * as React from 'react';\nimport {\n  Getter,\n  Plugin,\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n  DropTarget,\n  withComponents,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_DATA_TYPE,\n  TABLE_REORDERING_TYPE,\n  changeColumnOrder,\n  getTableTargetColumnIndex,\n  tableHeaderRowsWithReordering,\n  draftOrder as draftOrderComputed,\n  TargetColumnGeometry,\n  TableColumn,\n} from '@devexpress/dx-grid-core';\nimport { OrderedTableColumns } from './internal/ordered-table-columns';\nimport {\n  Table as TableNS, CellDimensionsGetter, TableColumnReorderingProps,\n  DragOverArgs, TableColumnReorderingState,\n} from '../types';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n  { name: 'DragDropProvider', optional: true },\n];\n\nconst tableHeaderRowsComputed = (\n  { tableHeaderRows }: Getters,\n) => tableHeaderRowsWithReordering(tableHeaderRows);\n\n// tslint:disable-next-line: max-line-length\nclass TableColumnReorderingRaw extends React.PureComponent<TableColumnReorderingProps, TableColumnReorderingState> {\n  static defaultProps = {\n    defaultOrder: [],\n  };\n  static components = {\n    tableContainerComponent: 'TableContainer',\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n  };\n  cellDimensionGetters: { [colName: string]: CellDimensionsGetter } = {};\n  cellDimensions: TargetColumnGeometry[] = [];\n  onOver: (arg: DragOverArgs) => void;\n  onLeave: () => void;\n  onDrop: () => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      order: props.defaultOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    };\n\n    this.onOver = this.handleOver.bind(this);\n    this.onLeave = this.handleLeave.bind(this);\n    this.onDrop = this.handleDrop.bind(this);\n  }\n\n  getState() {\n    const { order: orderState } = this.state;\n    const {\n      order = orderState,\n    } = this.props;\n    return {\n      ...this.state,\n      order,\n    };\n  }\n\n  getDraftOrder() {\n    const { order, sourceColumnIndex, targetColumnIndex } = this.getState();\n    return draftOrderComputed(order, sourceColumnIndex, targetColumnIndex);\n  }\n\n  getAvailableColumns() {\n    return this.getDraftOrder()\n      .filter(columnName => !!this.cellDimensionGetters[columnName]);\n  }\n\n  cacheCellDimensions() {\n    this.cellDimensions = (this.cellDimensions && this.cellDimensions.length)\n      ? this.cellDimensions\n      : this.getAvailableColumns()\n        .map(columnName => this.cellDimensionGetters[columnName]());\n  }\n\n  resetCellDimensions() {\n    this.cellDimensions = [];\n  }\n\n  ensureCellDimensionGetters(tableColumns: ReadonlyArray<TableColumn>) {\n    Object.keys(this.cellDimensionGetters)\n      .forEach((columnName) => {\n        const columnIndex = tableColumns\n          .findIndex(({ type, column }) => type === TABLE_DATA_TYPE && column!.name === columnName);\n        if (columnIndex === -1) {\n          delete this.cellDimensionGetters[columnName];\n        }\n      });\n  }\n\n// tslint:disable-next-line: max-line-length\n  storeCellDimensionsGetter(tableColumn: Readonly<TableColumn>, getter: CellDimensionsGetter, tableColumns: ReadonlyArray<TableColumn>) {\n    if (tableColumn.type === TABLE_DATA_TYPE) {\n      this.cellDimensionGetters[tableColumn.column!.name] = getter;\n    }\n    this.ensureCellDimensionGetters(tableColumns);\n  }\n\n  handleOver({ payload, clientOffset: { x } }: DragOverArgs) {\n    const sourceColumnName = payload[0].columnName;\n    const availableColumns = this.getAvailableColumns();\n    const relativeSourceColumnIndex = availableColumns.indexOf(sourceColumnName);\n\n    if (relativeSourceColumnIndex === -1) return;\n\n    this.cacheCellDimensions();\n    const cellDimensions = this.cellDimensions;\n\n    const overlappedColumns = cellDimensions\n      .filter(({ left, right }) => left <= x && x <= right);\n\n    if (overlappedColumns.length > 1) return;\n\n    const relativeTargetIndex = getTableTargetColumnIndex(\n      cellDimensions,\n      relativeSourceColumnIndex,\n      x,\n    );\n\n    if (relativeTargetIndex === -1) return;\n\n    const {\n      sourceColumnIndex: prevSourceColumnIndex,\n      targetColumnIndex: prevTargetColumnIndex,\n    } = this.getState();\n    const draftOrder = this.getDraftOrder();\n    const targetColumnIndex = draftOrder.indexOf(availableColumns[relativeTargetIndex]);\n\n    if (targetColumnIndex === prevTargetColumnIndex) return;\n\n    const sourceColumnIndex = prevSourceColumnIndex === -1\n      ? draftOrder.indexOf(sourceColumnName)\n      : prevSourceColumnIndex;\n\n    this.setState({\n      sourceColumnIndex,\n      targetColumnIndex,\n    });\n  }\n\n  handleLeave() {\n    this.setState({\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    });\n\n    this.resetCellDimensions();\n  }\n\n  handleDrop() {\n    const { sourceColumnIndex, targetColumnIndex, order } = this.getState();\n    const { onOrderChange } = this.props;\n\n    if (sourceColumnIndex === -1 && targetColumnIndex === -1) return;\n\n    const nextOrder = changeColumnOrder(order, {\n      sourceColumnName: order[sourceColumnIndex],\n      targetColumnName: order[targetColumnIndex],\n    }) as string[];\n\n    this.setState({\n      order: nextOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    });\n\n    if (onOrderChange) {\n      onOrderChange(nextOrder);\n    }\n\n    this.resetCellDimensions();\n  }\n\n  render() {\n    const {\n      tableContainerComponent: Container,\n      rowComponent: Row,\n      cellComponent: Cell,\n    } = this.props;\n\n    this.cellDimensionGetters = {};\n\n    return (\n      <Plugin\n        name=\"TableColumnReordering\"\n        dependencies={pluginDependencies}\n      >\n        <OrderedTableColumns order={this.getDraftOrder()} />\n\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Template name=\"table\">\n          {params => (\n            <TemplateConnector>\n              {({ draggingEnabled }) => (\n                <Container\n                  {...params}\n                  onOver={this.onOver}\n                  onLeave={this.onLeave}\n                  onDrop={this.onDrop}\n                  draggingEnabled={draggingEnabled}\n                >\n                  <TemplatePlaceholder />\n                </Container>\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: Getters) => tableRow.type === TABLE_REORDERING_TYPE}\n        >\n          {params => (\n            <Row {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: Getters) => tableRow.type === TABLE_REORDERING_TYPE}\n        >\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {({ tableColumns }: Getters) => (\n                <Cell\n                  {...params}\n                  getCellDimensions={getter => this.storeCellDimensionsGetter(\n                    params.tableColumn, getter, tableColumns,\n                  )}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nconst TableContainer = ({\n  onOver, onLeave, onDrop, children, draggingEnabled,\n}) => (\n  draggingEnabled ? (\n    <DropTarget\n      onOver={onOver}\n      onLeave={onLeave}\n      onDrop={onDrop}\n    >\n      {children}\n    </DropTarget>\n  ) : children\n);\n\n/** A plugin that manages the displayed columns' order. */\nexport const TableColumnReordering: React.ComponentType<TableColumnReorderingProps>\n  = withComponents({ TableContainer })(TableColumnReorderingRaw);\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Getter,\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n  Plugin,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithDataRows,\n  tableCellColSpanGetter,\n  isNoDataTableRow,\n  isNoDataTableCell,\n  isDataTableCell,\n  isHeaderStubTableCell,\n  isDataTableRow,\n  TABLE_DATA_TYPE,\n  TABLE_NODATA_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableProps, Table as TableNS, TableLayoutProps } from '../types';\nimport { TableColumnsWithDataRowsGetter } from './internal/table-columns-getter';\n\nconst RowPlaceholder = props => <TemplatePlaceholder name=\"tableRow\" params={props} />;\nconst CellPlaceholder = props => <TemplatePlaceholder name=\"tableCell\" params={props} />;\n\nconst tableHeaderRows = [];\nconst tableBodyRowsComputed = ({ rows, getRowId, isDataLoading }: Getters) => (\n  tableRowsWithDataRows(rows, getRowId, isDataLoading)\n);\nconst tableFooterRows = [];\n\nconst defaultMessages = {\n  noData: 'No data',\n};\n\nclass TableBase extends React.PureComponent<TableProps> {\n  static COLUMN_TYPE = TABLE_DATA_TYPE;\n  static ROW_TYPE = TABLE_DATA_TYPE;\n  static NODATA_ROW_TYPE = TABLE_NODATA_TYPE;\n  static defaultProps = {\n    messages: {},\n  };\n  static components = {\n    tableComponent: 'Table',\n    headComponent: 'TableHead',\n    bodyComponent: 'TableBody',\n    footerComponent: 'TableFooter',\n    containerComponent: 'Container',\n    layoutComponent: 'Layout',\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    noDataRowComponent: 'NoDataRow',\n    noDataCellComponent: 'NoDataCell',\n    stubRowComponent: 'StubRow',\n    stubCellComponent: 'StubCell',\n    stubHeaderCellComponent: 'StubHeaderCell',\n  };\n\n  render() {\n    const {\n      layoutComponent: Layout,\n      cellComponent: Cell,\n      rowComponent: Row,\n      noDataRowComponent: NoDataRow,\n      noDataCellComponent: NoDataCell,\n      stubRowComponent: StubRow,\n      stubCellComponent: StubCell,\n      stubHeaderCellComponent: StubHeaderCell,\n      columnExtensions,\n      messages,\n      containerComponent,\n      tableComponent,\n      headComponent,\n      bodyComponent,\n      footerComponent,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"Table\"\n      >\n        <Getter name=\"tableHeaderRows\" value={tableHeaderRows} />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"tableFooterRows\" value={tableFooterRows} />\n        <TableColumnsWithDataRowsGetter columnExtensions={columnExtensions} />\n        <Getter name=\"getTableCellColSpan\" value={tableCellColSpanGetter} />\n\n        <Template name=\"body\">\n          <TemplatePlaceholder name=\"table\" />\n        </Template>\n        <Template name=\"table\">\n          <TemplateConnector>\n            {({\n              tableHeaderRows: headerRows,\n              tableBodyRows: bodyRows,\n              tableFooterRows: footerRows,\n              tableColumns: columns,\n              getTableCellColSpan,\n            }) => (\n              <TemplatePlaceholder\n                name=\"tableLayout\"\n                params={{\n                  tableComponent,\n                  headComponent,\n                  bodyComponent,\n                  footerComponent,\n                  containerComponent,\n                  headerRows,\n                  bodyRows,\n                  footerRows,\n                  columns,\n                  rowComponent: RowPlaceholder,\n                  cellComponent: CellPlaceholder,\n                  getCellColSpan: getTableCellColSpan,\n                }}\n              />\n            )}\n          </TemplateConnector>\n        </Template>\n        <Template name=\"tableLayout\">\n          {(params: TableLayoutProps) => (\n            <Layout {...params} />\n          )}\n        </Template>\n        <Template name=\"tableCell\">\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {(\n                { tableHeaderRows: headerRows },\n              ) => (isHeaderStubTableCell(params.tableRow, headerRows)\n                ? <StubHeaderCell {...params} />\n                : <StubCell {...params} />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isDataTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {({ getCellValue }) => {\n                const columnName = params.tableColumn.column!.name;\n                const value = getCellValue(params.tableRow.row, columnName);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueFormatter\"\n                    params={{\n                      value,\n                      row: params.tableRow.row,\n                      column: params.tableColumn.column,\n                    }}\n                  >\n                    {content => (\n                      <Cell\n                        {...params}\n                        row={params.tableRow.row}\n                        column={params.tableColumn.column!}\n                        value={value}\n                      >\n                        {content}\n                      </Cell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => !!isNoDataTableRow(tableRow)}\n        >\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {({ tableColumns }) => {\n                if (isNoDataTableCell(params.tableColumn, tableColumns)) {\n                  return (\n                    <NoDataCell\n                      {...params}\n                      getMessage={getMessage}\n                    />\n                  );\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template name=\"tableRow\">\n          {(params: TableNS.RowProps) => (\n            <StubRow {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isDataTableRow(tableRow)}\n        >\n          {(params: TableNS.RowProps) => (\n            <Row\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isNoDataTableRow(tableRow)}\n        >\n          {(params: TableNS.RowProps) => <NoDataRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that renders Grid data as a table. This plugin enables you to customize\n * table rows and columns, and contains the Table Row and Table Cell components\n * that can be extended by other plugins\n * */\nexport const Table: React.ComponentType<TableProps> & {\n  /** The data column type's indentifier. */\n  COLUMN_TYPE: symbol;\n  /** The data row type's indentifier. */\n  ROW_TYPE: symbol;\n  /** The nodata row type's indentifier. */\n  NODATA_ROW_TYPE: symbol;\n} = TableBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, Plugin,\n  TemplateConnector,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_SELECT_TYPE,\n  tableColumnsWithSelection,\n  isSelectTableCell,\n  isSelectAllTableCell,\n  isDataTableRow,\n  isRowHighlighted,\n} from '@devexpress/dx-grid-core';\nimport { TableSelectionProps, TableCellProps, TableRowProps } from '../types';\n\nclass TableSelectionBase extends React.PureComponent<TableSelectionProps> {\n  static defaultProps = {\n    highlightRow: false,\n    selectByRowClick: false,\n    showSelectAll: false,\n    showSelectionColumn: true,\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    headerCellComponent: 'HeaderCell',\n  };\n  static COLUMN_TYPE = TABLE_SELECT_TYPE;\n\n  render() {\n    const {\n      highlightRow,\n      selectByRowClick,\n      showSelectionColumn,\n      showSelectAll,\n      headerCellComponent: HeaderCell,\n      cellComponent: Cell,\n      rowComponent: Row,\n      selectionColumnWidth,\n    } = this.props;\n\n    const tableColumnsComputed = (\n      { tableColumns }: Getters,\n    ) => tableColumnsWithSelection(tableColumns, selectionColumnWidth);\n\n    return (\n      <Plugin\n        name=\"TableSelection\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'SelectionState' },\n          { name: 'IntegratedSelection', optional: !showSelectAll },\n        ]}\n      >\n        {showSelectionColumn && (\n          <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        )}\n        {highlightRow && (\n          <Getter name=\"highlightSelectedRow\" value />\n        )}\n\n        {(showSelectionColumn && showSelectAll) && (\n          <Template\n            name=\"tableCell\"\n            predicate={({\n              tableRow, tableColumn,\n            }: any) => isSelectAllTableCell(tableRow, tableColumn)}\n          >\n            {(params: TableCellProps) => (\n              <TemplateConnector>\n                {({ selectAllAvailable, allSelected, someSelected }, { toggleSelectAll }) => (\n                  <HeaderCell\n                    {...params}\n                    disabled={!selectAllAvailable}\n                    allSelected={allSelected}\n                    someSelected={someSelected}\n                    onToggle={select => toggleSelectAll(select)}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n        {showSelectionColumn && (\n          <Template\n            name=\"tableCell\"\n            predicate={({ tableRow, tableColumn }: any) => isSelectTableCell(tableRow, tableColumn)}\n          >\n            {(params: TableCellProps) => (\n              <TemplateConnector>\n                {({ selection }, { toggleSelection }) => (\n                  <Cell\n                    {...params}\n                    row={params.tableRow.row}\n                    selected={selection.indexOf(params.tableRow.rowId) !== -1}\n                    onToggle={() => toggleSelection({ rowIds: [params.tableRow.rowId] })}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n        {(highlightRow || selectByRowClick) && (\n          <Template\n            name=\"tableRow\"\n            predicate={({ tableRow }: any) => !!isDataTableRow(tableRow)}\n          >\n            {(params: TableRowProps) => (\n              <TemplateConnector>\n                {({ selection }, { toggleSelection }) => (\n                  <Row\n                    {...params}\n                    selectByRowClick={selectByRowClick}\n                    highlighted={isRowHighlighted(highlightRow!, selection, params.tableRow)}\n                    onToggle={() => toggleSelection({ rowIds: [params.tableRow.rowId] })}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that visualizes table rows' selection state by rendering selection checkboxes\n * and highlighting the selected rows.\n * */\nexport const TableSelection: React.ComponentType<TableSelectionProps> & {\n  /** The selection column type's indentifier. */\n  COLUMN_TYPE: symbol;\n} = TableSelectionBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport { toggleDetailRowExpanded, ToggleRowPayload } from '@devexpress/dx-grid-core';\nimport { RowDetailStateProps, RowDetailStateState } from '../types';\n\n// tslint:disable-next-line: max-line-length\nclass RowDetailStateBase extends React.PureComponent<RowDetailStateProps, RowDetailStateState> {\n  static defaultProps = {\n    defaultExpandedRowIds: [],\n  };\n  toggleDetailRowExpanded: ActionFn<ToggleRowPayload>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        expandedRowIds: () => {\n          const { onExpandedRowIdsChange } = this.props;\n          return onExpandedRowIdsChange;\n        },\n      },\n    );\n\n    this.toggleDetailRowExpanded = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'expandedRowIds', toggleDetailRowExpanded);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      expandedRowIds = prevState.expandedRowIds,\n    } = nextProps;\n\n    return {\n      expandedRowIds,\n    };\n  }\n\n  render() {\n    const { expandedRowIds } = this.state;\n\n    return (\n      <Plugin\n        name=\"RowDetailState\"\n      >\n        <Getter name=\"expandedDetailRowIds\" value={expandedRowIds} />\n        <Action name=\"toggleDetailRowExpanded\" action={this.toggleDetailRowExpanded} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the expanded state for table row details. */\nexport const RowDetailState: React.ComponentType<RowDetailStateProps> = RowDetailStateBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, Plugin, TemplateConnector, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithExpandedDetail,\n  tableDetailCellColSpanGetter,\n  isDetailRowExpanded,\n  tableColumnsWithDetail,\n  isDetailToggleTableCell,\n  isDetailTableRow,\n  isDetailTableCell,\n  TABLE_DETAIL_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableRowDetailProps, TableCellProps, TableRowProps } from '../types';\n\nconst getCellColSpanComputed = (\n  { getTableCellColSpan }: Getters,\n) => tableDetailCellColSpanGetter(getTableCellColSpan);\n\nconst pluginDependencies = [\n  { name: 'RowDetailState' },\n  { name: 'Table' },\n];\n\nclass TableRowDetailBase extends React.PureComponent<TableRowDetailProps> {\n  static ROW_TYPE = TABLE_DETAIL_TYPE;\n  static COLUMN_TYPE = TABLE_DETAIL_TYPE;\n  static defaultProps = {\n    contentComponent: () => null,\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    toggleCellComponent: 'ToggleCell',\n  };\n\n  render() {\n    const {\n      rowHeight,\n      contentComponent: Content,\n      toggleCellComponent: ToggleCell,\n      cellComponent: Cell,\n      rowComponent: Row,\n      toggleColumnWidth,\n    } = this.props;\n\n    const tableColumnsComputed = (\n      { tableColumns }: Getters,\n    ) => tableColumnsWithDetail(tableColumns, toggleColumnWidth);\n    const tableBodyRowsComputed = (\n      { tableBodyRows, expandedDetailRowIds }: Getters,\n    ) => tableRowsWithExpandedDetail(tableBodyRows, expandedDetailRowIds, rowHeight!);\n\n    return (\n      <Plugin\n        name=\"TableRowDetail\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"getTableCellColSpan\" computed={getCellColSpanComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isDetailToggleTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ expandedDetailRowIds }, { toggleDetailRowExpanded }) => (\n                <ToggleCell\n                  {...params}\n                  row={params.tableRow.row}\n                  expanded={isDetailRowExpanded(expandedDetailRowIds, params.tableRow.rowId!)}\n                  onToggle={() => toggleDetailRowExpanded({ rowId: params.tableRow.rowId })}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => !!isDetailTableRow(tableRow)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ tableColumns }) => {\n                if (isDetailTableCell(params.tableColumn, tableColumns)) {\n                  return (\n                    <Cell\n                      {...params}\n                      row={params.tableRow.row}\n                    >\n                      {Content && <Content row={params.tableRow.row} />}\n                    </Cell>\n                  );\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isDetailTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <Row\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders detail rows. */\nexport const TableRowDetail: React.ComponentType<TableRowDetailProps> & {\n  /** The detail column type's identifier. */\n  COLUMN_TYPE: symbol;\n  /** The detail row type's indentifier. */\n  ROW_TYPE: symbol;\n} = TableRowDetailBase;\n","export const defaultSummaryMessages = {\n  sum: 'Sum',\n  min: 'Min',\n  max: 'Max',\n  avg: 'Avg',\n  count: 'Count',\n};\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  defaultFormatlessSummaries, ColumnSummary,\n} from '@devexpress/dx-grid-core';\nimport { TemplatePlaceholder } from '@devexpress/dx-react-core';\nimport { TableSummaryContentProps, SummaryItemProps } from '../../types';\nimport { defaultSummaryMessages } from './constants';\n\nexport const TableSummaryContent: React.SFC<TableSummaryContentProps> = ({\n  column, columnSummaries, formatlessSummaryTypes,\n  itemComponent: Item,\n  messages,\n}) => {\n  const getMessage = getMessagesFormatter({ ...defaultSummaryMessages, ...messages });\n  const SummaryItem: React.SFC<SummaryItemProps> = ({ summary, children }) => (\n    <Item\n      getMessage={getMessage}\n      type={summary.type}\n      value={summary.value}\n    >\n      {children || String(summary.value)}\n    </Item>\n  );\n  const isFormatlessSummary = (summary: ColumnSummary) => (\n    summary.value === null\n    || formatlessSummaryTypes.includes(summary.type)\n    || defaultFormatlessSummaries.includes(summary.type)\n  );\n\n  return (\n    <React.Fragment>\n      {columnSummaries.map((summary) => {\n        if (isFormatlessSummary(summary)) {\n          return <SummaryItem key={summary.type} summary={summary} />;\n        }\n        return (\n          <TemplatePlaceholder\n            key={summary.type}\n            name=\"valueFormatter\"\n            params={{\n              column,\n              value: summary.value,\n            }}\n          >\n            {content => (\n              <SummaryItem summary={summary}>\n                {content}\n              </SummaryItem>\n            )}\n          </TemplatePlaceholder>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n","import * as React from 'react';\nimport { TemplatePlaceholder } from '@devexpress/dx-react-core';\nimport { getGroupInlineSummaries } from '@devexpress/dx-grid-core';\nimport { GetInlineSummaryComponent, FlattenGroupInlineSummariesFn } from '../../types';\n\nconst getInlineSummaryComponent: GetInlineSummaryComponent = (\n  column, summary, formatlessSummaries,\n) => () => (\n  (summary.value === null || formatlessSummaries.includes(summary.type))\n    ? <>{summary.value}</>\n    : (\n      <TemplatePlaceholder\n        key={summary.type}\n        name=\"valueFormatter\"\n        params={{\n          column,\n          value: summary.value,\n        }}\n      >\n        {content => content || summary.value}\n      </TemplatePlaceholder>\n    )\n);\n\nexport const flattenGroupInlineSummaries: FlattenGroupInlineSummariesFn = (\n  columns, tableRow, groupSummaryItems, groupSummaryValues,\n  formatlessSummaries,\n) => (\n  getGroupInlineSummaries(\n    groupSummaryItems, columns,\n    groupSummaryValues[tableRow.row.compoundKey],\n  )\n    .map(colSummaries => ([\n      ...colSummaries.summaries.map(summary => ({\n        ...summary,\n        columnTitle: colSummaries.column.title,\n        messageKey: `${summary.type}Of`,\n        component: getInlineSummaryComponent(\n          colSummaries.column, summary, formatlessSummaries,\n        ),\n      })),\n    ]))\n    .reduce((acc, summaries) => acc.concat(summaries), [])\n);\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Getter, Template, Plugin, TemplatePlaceholder, TemplateConnector, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithGrouping,\n  tableGroupCellColSpanGetter,\n  isGroupTableCell,\n  isGroupIndentTableCell,\n  isGroupTableRow,\n  TABLE_GROUP_TYPE,\n  getColumnSummaries,\n  defaultFormatlessSummaries,\n  isPreviousCellContainSummary,\n  isRowSummaryCell,\n  isGroupRowOrdinaryCell,\n  calculateGroupCellIndent,\n  isGroupIndentStubTableCell,\n  GroupSummaryItem,\n  TABLE_FLEX_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableColumnsWithGrouping } from './internal';\nimport {\n  TableGroupRowProps, TableCellProps, TableRowProps,\n} from '../types';\nimport { TableSummaryContent } from '../components/summary/table-summary-content';\nimport { flattenGroupInlineSummaries } from '../components/summary/group-summaries';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n  { name: 'SummaryState', optional: true },\n  { name: 'CustomSummary', optional: true },\n  { name: 'IntegratedSummary', optional: true },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n  { name: 'TableSelection', optional: true },\n];\nconst side = 'left';\n\n/** @internal */\nexport const defaultMessages = {\n  countOf: 'Count: ',\n  sumOf: 'Sum of {columnTitle} is ',\n  maxOf: 'Max of {columnTitle} is ',\n  minOf: 'Min of {columnTitle} is ',\n  avgOf: 'Avg of {columnTitle} is ',\n};\n\nconst tableBodyRowsComputed = (\n  { tableBodyRows, isGroupRow }: Getters,\n) => tableRowsWithGrouping(tableBodyRows, isGroupRow);\nconst getCellColSpanComputed = (\n  { getTableCellColSpan, groupSummaryItems }: Getters,\n) => tableGroupCellColSpanGetter(getTableCellColSpan, groupSummaryItems);\n\nclass TableGroupRowBase extends React.PureComponent<TableGroupRowProps> {\n  static ROW_TYPE = TABLE_GROUP_TYPE;\n  static COLUMN_TYPE = TABLE_GROUP_TYPE;\n  static defaultProps = {\n    showColumnsWhenGrouped: false,\n    formatlessSummaryTypes: [],\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    contentComponent: 'Content',\n    iconComponent: 'Icon',\n    containerComponent: 'Container',\n    indentCellComponent: 'IndentCell',\n    inlineSummaryComponent: 'InlineSummary',\n    inlineSummaryItemComponent: 'InlineSummaryItem',\n    summaryCellComponent: 'SummaryCell',\n    summaryItemComponent: 'SummaryItem',\n    stubCellComponent: 'StubCell',\n  };\n\n  render() {\n    const {\n      cellComponent: GroupCell,\n      contentComponent: Content,\n      iconComponent: Icon,\n      rowComponent: GroupRow,\n      containerComponent: Container,\n      indentCellComponent: GroupIndentCell,\n      inlineSummaryComponent: InlineSummary,\n      inlineSummaryItemComponent: InlineSummaryItem,\n      summaryCellComponent: SummaryCell,\n      summaryItemComponent: SummaryItem,\n      stubCellComponent: StubCell,\n      indentColumnWidth,\n      contentCellPadding,\n      showColumnsWhenGrouped,\n      columnExtensions,\n      messages,\n      formatlessSummaryTypes,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"TableGroupRow\"\n        dependencies={pluginDependencies}\n      >\n        <TableColumnsWithGrouping\n          columnExtensions={columnExtensions}\n          showColumnsWhenGrouped={showColumnsWhenGrouped}\n          indentColumnWidth={indentColumnWidth}\n        />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"getTableCellColSpan\" computed={getCellColSpanComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => isGroupTableRow(tableRow)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(\n                {\n                  grouping, expandedGroups, groupSummaryItems, groupSummaryValues, columns,\n                },\n                { toggleGroupExpanded },\n              ) => {\n                if (isGroupTableCell(params.tableRow, params.tableColumn)) {\n                  const formatlessSummaries = defaultFormatlessSummaries\n                    .concat(formatlessSummaryTypes!);\n\n                  const inlineSummaries = groupSummaryItems\n                    ? flattenGroupInlineSummaries(\n                      columns, params.tableRow, groupSummaryItems,\n                      groupSummaryValues, formatlessSummaries,\n                    ) : [];\n                  const cellIndent = calculateGroupCellIndent(\n                    params.tableColumn, grouping, indentColumnWidth,\n                  );\n                  const contentIndent = `calc(${cellIndent}px + ${contentCellPadding})`;\n\n                  return (\n                    <TemplatePlaceholder\n                      name=\"valueFormatter\"\n                      params={{\n                        column: params.tableColumn.column,\n                        value: params.tableRow.row.value,\n                      }}\n                    >\n                      {content => (\n                        <GroupCell\n                          {...params}\n                          contentComponent={Content}\n                          iconComponent={Icon}\n                          containerComponent={Container}\n                          row={params.tableRow.row}\n                          column={params.tableColumn.column!}\n                          expanded={expandedGroups.indexOf(params.tableRow.row.compoundKey) !== -1}\n                          onToggle={\n                            () => toggleGroupExpanded({ groupKey: params.tableRow.row.compoundKey })\n                          }\n                          inlineSummaries={inlineSummaries}\n                          inlineSummaryComponent={InlineSummary}\n                          inlineSummaryItemComponent={InlineSummaryItem}\n                          getMessage={getMessage}\n                          position={contentIndent}\n                          side={side}\n                        >\n                          {content}\n                        </GroupCell>\n                      )}\n                    </TemplatePlaceholder>\n                  );\n                }\n                if (isGroupIndentTableCell(params.tableRow, params.tableColumn, grouping)) {\n                  const fixedProps = {\n                    side,\n                    position: calculateGroupCellIndent(\n                      params.tableColumn, grouping, indentColumnWidth,\n                    ),\n                  };\n                  if (GroupIndentCell) {\n                    return (\n                      <GroupIndentCell\n                        {...params}\n                        {...fixedProps}\n                        row={params.tableRow.row}\n                        column={params.tableColumn.column!}\n                      />\n                    );\n                  }\n                  return <TemplatePlaceholder params={fixedProps} />;\n                }\n                if (isGroupIndentStubTableCell(params.tableRow, params.tableColumn, grouping)) {\n                  return <TemplatePlaceholder params={params} />;\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({\n            tableRow, tableColumn,\n          }: any) => (isGroupRowOrdinaryCell(tableRow, tableColumn))}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(\n                {\n                  groupSummaryItems, groupSummaryValues, grouping, tableColumns,\n                },\n                { toggleGroupExpanded },\n              ) => {\n                const { tableColumn, tableRow } = params;\n                const onToggle = () => toggleGroupExpanded({ groupKey: tableRow.row.compoundKey });\n\n                if (isRowSummaryCell(tableRow, tableColumn, grouping, groupSummaryItems)) {\n                  const columnSummaries = getColumnSummaries(\n                    groupSummaryItems,\n                    tableColumn.column!.name,\n                    groupSummaryValues[tableRow.row.compoundKey],\n                    summaryItem => (\n                      !(summaryItem as GroupSummaryItem).showInGroupFooter! &&\n                      (summaryItem as GroupSummaryItem).alignByColumn!\n                    ),\n                  );\n\n                  return (\n                    <SummaryCell\n                      {...params}\n                      row={params.tableRow.row}\n                      column={params.tableColumn.column!}\n                      onToggle={onToggle}\n                    >\n                      <TableSummaryContent\n                        column={tableColumn.column!}\n                        columnSummaries={columnSummaries}\n                        formatlessSummaryTypes={formatlessSummaryTypes!}\n                        itemComponent={SummaryItem}\n                        messages={messages!}\n                      />\n                    </SummaryCell>\n                  );\n                }\n\n                // NOTE: ensure that right-aligned summary will fit into a column\n                if (isPreviousCellContainSummary(\n                  tableRow, tableColumn, tableColumns, grouping, groupSummaryItems,\n                ) || TABLE_FLEX_TYPE === tableColumn.type) {\n                  return <StubCell {...params} onToggle={onToggle} />;\n                }\n\n                return <TemplatePlaceholder />;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => isGroupTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <GroupRow\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders group rows and enables them to expand and collapse. */\nexport const TableGroupRow: React.ComponentType<TableGroupRowProps> & {\n  /** The group column type's identifier. */\n  COLUMN_TYPE: symbol;\n  /** The group row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableGroupRowBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, Plugin, TemplateConnector, TemplatePlaceholder, Getters,\n} from '@devexpress/dx-react-core';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  getColumnSortingDirection,\n  tableRowsWithHeading,\n  isHeadingTableCell,\n  isHeadingTableRow,\n  getNextColumnName,\n  TABLE_DATA_TYPE,\n  TABLE_HEADING_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableHeaderRowProps, TableCellProps, TableRowProps } from '../types';\n\nconst tableHeaderRowsComputed = (\n  { tableHeaderRows }: Getters,\n) => tableRowsWithHeading(tableHeaderRows || []);\n\nclass TableHeaderRowBase extends React.PureComponent<TableHeaderRowProps> {\n  static ROW_TYPE = TABLE_HEADING_TYPE;\n  static defaultProps = {\n    showSortingControls: false,\n    showGroupingControls: false,\n    messages: {},\n  };\n  static components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n    contentComponent: 'Content',\n    sortLabelComponent: 'SortLabel',\n    titleComponent: 'Title',\n    groupButtonComponent: 'GroupButton',\n  };\n\n  render() {\n    const {\n      showSortingControls,\n      showGroupingControls,\n      cellComponent: HeaderCell,\n      rowComponent: HeaderRow,\n      contentComponent: Content,\n      sortLabelComponent: SortLabel,\n      groupButtonComponent: GroupButton,\n      titleComponent: Title,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages!);\n\n    return (\n      <Plugin\n        name=\"TableHeaderRow\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'SortingState', optional: !showSortingControls },\n          { name: 'GroupingState', optional: !showGroupingControls },\n          { name: 'DragDropProvider', optional: true },\n          { name: 'TableColumnResizing', optional: true },\n        ]}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isHeadingTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                sorting, tableColumns, draggingEnabled, tableColumnResizingEnabled,\n                isColumnSortingEnabled, isColumnGroupingEnabled, columnResizingMode,\n              }, {\n                changeColumnSorting, changeColumnGrouping,\n                changeTableColumnWidth, draftTableColumnWidth, cancelTableColumnWidthDraft,\n                storeWidthGetters = () => {},\n              }) => {\n                const { name: columnName, title: columnTitle } = params.tableColumn.column!;\n                const atLeastOneDataColumn = tableColumns\n                  .filter(({ type }) => type === TABLE_DATA_TYPE).length > 1;\n                const sortingEnabled = isColumnSortingEnabled\n                  && isColumnSortingEnabled(columnName);\n                const groupingEnabled = isColumnGroupingEnabled\n                  && isColumnGroupingEnabled(columnName)\n                  && atLeastOneDataColumn;\n                const nextColumnName = getNextColumnName(tableColumns, columnName);\n\n                return (\n                  <HeaderCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                    draggingEnabled={draggingEnabled && atLeastOneDataColumn}\n                    resizingEnabled={\n                      tableColumnResizingEnabled\n                      && (!!nextColumnName || columnResizingMode === 'widget')\n                    }\n                    onWidthChange={({ shift }) => changeTableColumnWidth({\n                      columnName, nextColumnName, shift,\n                    })}\n                    onWidthDraft={({ shift }) => draftTableColumnWidth({\n                      columnName, nextColumnName, shift,\n                    })}\n                    onWidthDraftCancel={() => cancelTableColumnWidthDraft()}\n                    getCellWidth={getter => storeWidthGetters({\n                      tableColumn: params.tableColumn , getter, tableColumns,\n                    })}\n                  >\n                    <TemplatePlaceholder\n                      name=\"tableHeaderCellBefore\"\n                      params={{\n                        column: params.tableColumn.column,\n                      }}\n                    />\n                    <Content\n                      column={params.tableColumn.column!}\n                      align={params.tableColumn.align!}\n                    >\n                      {showSortingControls ? (\n                        <SortLabel\n                          column={params.tableColumn.column!}\n                          align={params.tableColumn.align!}\n                          direction={getColumnSortingDirection(sorting, columnName) || null}\n                          disabled={!sortingEnabled}\n                          onSort={({ direction, keepOther }) => {\n                            changeColumnSorting({ columnName, direction, keepOther });\n                          }}\n                          getMessage={getMessage}\n                        >\n                          <Title>\n                            {columnTitle || columnName}\n                          </Title>\n                        </SortLabel>\n                      ) : (\n                        <Title>\n                          {columnTitle || columnName}\n                        </Title>\n                      )}\n                    </Content>\n                    {showGroupingControls ? (\n                      <GroupButton\n                        disabled={!groupingEnabled}\n                        onGroup={() => changeColumnGrouping({ columnName })}\n                      />\n                    ) : null}\n                  </HeaderCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isHeadingTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => <HeaderRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableHeaderRowBase.components = {\n  cellComponent: 'Cell',\n  rowComponent: 'Row',\n  contentComponent: 'Content',\n  sortLabelComponent: 'SortLabel',\n  titleComponent: 'Title',\n  groupButtonComponent: 'GroupButton',\n};\n\n/***\n * A plugin that renders the table's header row. The Column's `title` field specifies the\n * column's title in the header row.The plugin also allows you to manage a column's sorting\n * and grouping state and initiate column dragging.\n * */\nexport const TableHeaderRow: React.ComponentType<TableHeaderRowProps> & {\n  /** The header row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableHeaderRowBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, Plugin,\n  TemplateConnector, TemplatePlaceholder, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  getBandComponent, tableHeaderColumnChainsWithBands,\n  isBandedTableRow, isBandedOrHeaderRow,\n  tableRowsWithBands, isHeadingTableCell,\n  BAND_GROUP_CELL, BAND_HEADER_CELL,\n  BAND_EMPTY_CELL, BAND_DUPLICATE_RENDER,\n  TABLE_BAND_TYPE,\n  BAND_FILL_LEVEL_CELL,\n  bandLevelsVisibility,\n  columnBandLevels,\n  columnVisibleIntervals,\n} from '@devexpress/dx-grid-core';\nimport { TableBandHeaderProps, TableBandHeader as BandHeaderNS, TableRowProps } from '../types';\n\nconst CellPlaceholder = (props: BandHeaderNS.CellProps) => <TemplatePlaceholder params={props} />;\n\nconst bandLevelsVisibilityComputed = (\n  { columnVisibleIntervals: columnIntervals, tableHeaderColumnChains, bandLevels }: Getters,\n) => bandLevelsVisibility(\n  columnIntervals, tableHeaderColumnChains, bandLevels,\n);\n\nconst columnVisibleIntervalsComputed = (\n  { viewport, tableColumns }: Getters,\n) => columnVisibleIntervals(viewport, tableColumns);\n\nclass TableBandHeaderBase extends React.PureComponent<TableBandHeaderProps> {\n  static ROW_TYPE = TABLE_BAND_TYPE;\n  static components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n    bandedHeaderCellComponent: 'BandedHeaderCell',\n    invisibleCellComponent: 'InvisibleCell',\n  };\n\n  render() {\n    const {\n      cellComponent: Cell,\n      rowComponent: Row,\n      bandedHeaderCellComponent: HeaderCell,\n      invisibleCellComponent: InvisibleCell,\n      columnBands,\n    } = this.props;\n\n    const tableHeaderRowsComputed = (\n      { tableHeaderRows, tableColumns }: Getters,\n    ) => tableRowsWithBands(\n      tableHeaderRows, columnBands, tableColumns,\n    );\n    const tableHeaderColumnChainsComputed = (\n      { tableHeaderRows, tableColumns }: Getters,\n    ) => tableHeaderColumnChainsWithBands(\n      tableHeaderRows, tableColumns, columnBands,\n    );\n    const bandLevels = columnBandLevels(columnBands);\n\n    return (\n      <Plugin\n        name=\"TableBandHeader\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'TableHeaderRow' },\n          { name: 'TableSelection', optional: true },\n          { name: 'TableEditColumn', optional: true },\n        ]}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        {/* internal */}\n        <Getter name=\"columnVisibleIntervals\" computed={columnVisibleIntervalsComputed} />\n        <Getter name=\"tableHeaderColumnChains\" computed={tableHeaderColumnChainsComputed} />\n        <Getter name=\"bandLevels\" value={bandLevels} />\n        <Getter name=\"bandLevelsVisibility\" computed={bandLevelsVisibilityComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => !!isBandedOrHeaderRow(tableRow)}\n        >\n          {(params: BandHeaderNS.CellProps) => (\n            <TemplateConnector>\n              {({\n                tableColumns,\n                tableHeaderRows,\n                tableHeaderColumnChains,\n                columnVisibleIntervals: columnIntervals, bandLevelsVisibility: levelsVisibility,\n              }) => {\n                const bandComponent = getBandComponent(\n                  params,\n                  tableHeaderRows, tableColumns,\n                  columnBands, tableHeaderColumnChains, columnIntervals,\n                  levelsVisibility,\n                );\n                switch (bandComponent.type) {\n                  case BAND_DUPLICATE_RENDER:\n                    return <TemplatePlaceholder params={{ ...params }} />;\n\n                  case BAND_EMPTY_CELL:\n                    return <InvisibleCell />;\n\n                  case BAND_GROUP_CELL: {\n                    const { value, ...payload } = bandComponent.payload!;\n                    return (\n                      <Cell {...params} {...payload}>\n                        {value}\n                      </Cell>\n                    );\n                  }\n\n                  case BAND_HEADER_CELL:\n                    return (\n                      <TemplatePlaceholder\n                        name=\"tableCell\"\n                        params={{ ...params, ...bandComponent.payload }}\n                      />\n                    );\n\n                  case BAND_FILL_LEVEL_CELL:\n                    return (\n                      <Cell\n                        {...params}\n                        {...bandComponent.payload}\n                        style={{ whiteSpace: 'pre' }}\n                      >\n                        {' '}\n                      </Cell>\n                    );\n                  default:\n                    return null;\n                }\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isHeadingTableCell(tableRow, tableColumn)}\n        >\n          {(params: BandHeaderNS.CellProps) => (\n            <HeaderCell component={CellPlaceholder} {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isBandedTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => <Row {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableBandHeaderBase.components = {\n  cellComponent: 'Cell',\n  rowComponent: 'Row',\n  bandedHeaderCellComponent: 'BandedHeaderCell',\n  invisibleCellComponent: 'InvisibleCell',\n};\n\n/** A plugin that renders the banded cells. */\nexport const TableBandHeader: React.ComponentType<TableBandHeaderProps> & {\n  /** The band row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableBandHeaderBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, TemplatePlaceholder, TemplateConnector, Plugin, Getters, Actions,\n} from '@devexpress/dx-react-core';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  getColumnFilterConfig,\n  tableHeaderRowsWithFilter,\n  isFilterTableCell,\n  isFilterTableRow,\n  getColumnFilterOperations,\n  isFilterValueEmpty,\n  getSelectedFilterOperation,\n  TABLE_FILTER_TYPE,\n  FilterConfig,\n  TOP_POSITION,\n} from '@devexpress/dx-grid-core';\nimport { TableFilterRowProps, TableFilterRowState, TableCellProps, TableRowProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'FilteringState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nconst defaultMessages = {\n  filterPlaceholder: 'Filter...',\n  contains: 'Contains',\n  notContains: 'Does not contain',\n  startsWith: 'Starts with',\n  endsWith: 'Ends with',\n  equal: 'Equals',\n  notEqual: 'Does not equal',\n  greaterThan: 'Greater than',\n  greaterThanOrEqual: 'Greater than or equal to',\n  lessThan: 'Less than',\n  lessThanOrEqual: 'Less than or equal to',\n};\n\nclass TableFilterRowBase extends React.PureComponent<TableFilterRowProps, TableFilterRowState> {\n  static ROW_TYPE = TABLE_FILTER_TYPE;\n  static defaultProps = {\n    showFilterSelector: false,\n    messages: {},\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    filterSelectorComponent: 'FilterSelector',\n    iconComponent: 'Icon',\n    editorComponent: 'Editor',\n    toggleButtonComponent: 'ToggleButton',\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      filterOperations: {},\n    };\n  }\n\n  render() {\n    const {\n      rowHeight,\n      showFilterSelector,\n      cellComponent: FilterCell,\n      rowComponent: FilterRow,\n      filterSelectorComponent: FilterSelector,\n      iconComponent,\n      toggleButtonComponent,\n      editorComponent: EditorComponent,\n      messages,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    const tableHeaderRowsComputed = (\n      { tableHeaderRows }: Getters,\n    ) => tableHeaderRowsWithFilter(tableHeaderRows, rowHeight!);\n\n    return (\n      <Plugin\n        name=\"TableFilterRow\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isFilterTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(\n                { filters, isColumnFilteringEnabled, getAvailableFilterOperations, isDataRemote },\n                { changeColumnFilter, scrollToRow }: Actions,\n              ) => {\n                const { filterOperations } = this.state;\n                const { name: columnName } = params.tableColumn.column!;\n                const filter = getColumnFilterConfig(filters, columnName)!;\n                const onFilter = (\n                  config: FilterConfig | null,\n                ) => {\n                  if (isDataRemote) {\n                    scrollToRow(TOP_POSITION);\n                  }\n                  changeColumnFilter({ columnName, config });\n                };\n                const columnFilterOperations = getColumnFilterOperations(\n                  getAvailableFilterOperations, columnName,\n                );\n                const selectedFilterOperation = getSelectedFilterOperation(\n                  filterOperations, columnName, filter, columnFilterOperations,\n                );\n                const handleFilterOperationChange = (value: string) => {\n                  this.setState({\n                    filterOperations: {\n                      ...filterOperations,\n                      [columnName]: value,\n                    },\n                  });\n                  if (filter && !isFilterValueEmpty(filter.value)) {\n                    onFilter({ value: filter.value, operation: value });\n                  }\n                };\n                const handleFilterValueChange = (value: any) => onFilter(!isFilterValueEmpty(value)\n                  ? { value, operation: selectedFilterOperation }\n                  : null);\n                const filteringEnabled = isColumnFilteringEnabled(columnName);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueEditor\"\n                    params={{\n                      column: params.tableColumn.column,\n                      value: filter ? filter.value : undefined,\n                      onValueChange: handleFilterValueChange,\n                      disabled: !filteringEnabled,\n                    }}\n                  >\n                    {content => (\n                      <FilterCell\n                        {...params}\n                        getMessage={getMessage}\n                        column={params.tableColumn.column!}\n                        filter={filter}\n                        filteringEnabled={filteringEnabled}\n                        onFilter={onFilter}\n                      >\n                        {showFilterSelector\n                          ? (\n                            <FilterSelector\n                              toggleButtonComponent={toggleButtonComponent}\n                              iconComponent={iconComponent}\n                              value={selectedFilterOperation}\n                              availableValues={columnFilterOperations as string[]}\n                              onChange={handleFilterOperationChange}\n                              disabled={!filteringEnabled}\n                              getMessage={getMessage}\n                            />\n                          ) : null\n                        }\n                        {content || (\n                          <EditorComponent\n                            value={filter ? filter.value : undefined}\n                            disabled={!filteringEnabled}\n                            getMessage={getMessage}\n                            onChange={handleFilterValueChange}\n                          />\n                        )}\n                      </FilterCell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isFilterTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => <FilterRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders a filter row. */\nexport const TableFilterRow: React.ComponentType<TableFilterRowProps> & {\n  /** The filter row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableFilterRowBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, TemplatePlaceholder, TemplateConnector, Plugin, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  getRowChange,\n  tableRowsWithEditing,\n  isEditTableRow,\n  isAddedTableRow,\n  isEditTableCell,\n  TABLE_EDIT_TYPE,\n  TABLE_ADDED_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableEditRowProps, TableCellProps, TableRowProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nclass TableEditRowBase extends React.PureComponent<TableEditRowProps> {\n  static ADDED_ROW_TYPE = TABLE_ADDED_TYPE;\n  static EDIT_ROW_TYPE = TABLE_EDIT_TYPE;\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n  };\n\n  render() {\n    const {\n      cellComponent: EditCell,\n      rowComponent: EditRow,\n      rowHeight,\n    } = this.props;\n\n    const tableBodyRowsComputed = (\n      { tableBodyRows, editingRowIds, addedRows }: Getters,\n    ) => tableRowsWithEditing(tableBodyRows, editingRowIds, addedRows, rowHeight);\n\n    return (\n      <Plugin\n        name=\"TableEditRow\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isEditTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                getCellValue,\n                createRowChange,\n                rowChanges,\n                isColumnEditingEnabled,\n              }, {\n                changeAddedRow,\n                changeRow,\n              }) => {\n                const { rowId, row } = params.tableRow;\n                const { column } = params.tableColumn;\n                const { name: columnName } = column!;\n\n                const isNew = isAddedTableRow(params.tableRow);\n                const changedRow = isNew\n                  ? row\n                  : { ...row, ...getRowChange(rowChanges, rowId!) };\n\n                const value = getCellValue(changedRow, columnName);\n                const onValueChange = (newValue: any) => {\n                  const changeArgs = {\n                    rowId,\n                    change: createRowChange(changedRow, newValue, columnName),\n                  };\n                  if (isNew) {\n                    changeAddedRow(changeArgs);\n                  } else {\n                    changeRow(changeArgs);\n                  }\n                };\n                const editingEnabled = isColumnEditingEnabled(columnName);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueEditor\"\n                    params={{\n                      column,\n                      row,\n                      value,\n                      onValueChange,\n                      disabled: !editingEnabled,\n                    }}\n                  >\n                    {content => (\n                      <EditCell\n                        {...params}\n                        row={row}\n                        column={column!}\n                        value={value}\n                        editingEnabled={editingEnabled}\n                        onValueChange={onValueChange}\n                      >\n                        {content}\n                      </EditCell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={(\n            { tableRow }: any,\n          ) => !!(isEditTableRow(tableRow) || isAddedTableRow(tableRow))}\n        >\n          {(params: TableRowProps) => (\n            <EditRow\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders a row being edited. */\nexport const TableEditRow: React.ComponentType<TableEditRowProps> & {\n  /** The added row type's identifier. */\n  ADDED_ROW_TYPE: symbol;\n  /** The edit row type's identifier. */\n  EDIT_ROW_TYPE: symbol;\n} = TableEditRowBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Getter, Template, Plugin, TemplateConnector, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_EDIT_COMMAND_TYPE,\n  tableColumnsWithEditing,\n  isHeadingEditCommandsTableCell,\n  isEditCommandsTableCell,\n  isAddedTableRow,\n  isEditTableRow,\n} from '@devexpress/dx-grid-core';\nimport { TableEditColumnProps, TableCellProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'Table' },\n];\n\nconst defaultMessages = {\n  addCommand: 'New',\n  editCommand: 'Edit',\n  deleteCommand: 'Delete',\n  commitCommand: 'Save',\n  cancelCommand: 'Cancel',\n};\n\nclass TableEditColumnBase extends React.PureComponent<TableEditColumnProps> {\n  static COLUMN_TYPE = TABLE_EDIT_COMMAND_TYPE;\n  static defaultProps = {\n    showAddCommand: false,\n    showEditCommand: false,\n    showDeleteCommand: false,\n    width: 140,\n    messages: {},\n  };\n  static components = {\n    cellComponent: 'Cell',\n    headerCellComponent: 'HeaderCell',\n    commandComponent: 'Command',\n  };\n\n  render() {\n    const {\n      cellComponent: Cell,\n      headerCellComponent: HeaderCell,\n      commandComponent: Command,\n      showAddCommand,\n      showEditCommand,\n      showDeleteCommand,\n      width,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n    const tableColumnsComputed = (\n      { tableColumns }: Getters,\n    ) => tableColumnsWithEditing(tableColumns, width!);\n\n    return (\n      <Plugin\n        name=\"TableEditColumn\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isHeadingEditCommandsTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(getters, actions) => (\n                <HeaderCell {...params}>\n                  {showAddCommand && (\n                    <Command\n                      id=\"add\"\n                      text={getMessage('addCommand')}\n                      onExecute={() => actions.addRow()}\n                    />\n                  )}\n                </HeaderCell>\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isEditCommandsTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(getters, actions) => {\n                const isEdit = isEditTableRow(params.tableRow);\n                const isNew = isAddedTableRow(params.tableRow);\n                const isEditing = isEdit || isNew;\n                const rowIds = [params.tableRow.rowId];\n                return (\n                  <Cell\n                    {...params}\n                    row={params.tableRow.row}\n                  >\n                    {showEditCommand && !isEditing && (\n                      <Command\n                        id=\"edit\"\n                        text={getMessage('editCommand')}\n                        onExecute={() => actions.startEditRows({ rowIds })}\n                      />\n                    )}\n                    {showDeleteCommand && !isEditing && (\n                      <Command\n                        id=\"delete\"\n                        text={getMessage('deleteCommand')}\n                        onExecute={() => {\n                          actions.deleteRows({ rowIds });\n                          actions.commitDeletedRows({ rowIds });\n                        }}\n                      />\n                    )}\n                    {isEditing && (\n                      <Command\n                        id=\"commit\"\n                        text={getMessage('commitCommand')}\n                        onExecute={() => {\n                          if (isNew) {\n                            actions.commitAddedRows({ rowIds });\n                          } else {\n                            actions.stopEditRows({ rowIds });\n                            actions.commitChangedRows({ rowIds });\n                          }\n                        }}\n                      />\n                    )}\n                    {isEditing && (\n                      <Command\n                        id=\"cancel\"\n                        text={getMessage('cancelCommand')}\n                        onExecute={() => {\n                          if (isNew) {\n                            actions.cancelAddedRows({ rowIds });\n                          } else {\n                            actions.stopEditRows({ rowIds });\n                            actions.cancelChangedRows({ rowIds });\n                          }\n                        }}\n                      />\n                    )}\n                  </Cell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that renders a command column. This column contains controls used for row editing,\n * creating, or deleting and committing/canceling changes.\n * */\nexport const TableEditColumn: React.ComponentType<TableEditColumnProps> & {\n  /** The edit column type's identifier. */\n  COLUMN_TYPE: symbol;\n} = TableEditColumnBase;\n","import * as React from 'react';\nimport { memoize, MemoizedComputed } from '@devexpress/dx-core';\nimport {\n  Plugin, Getter, Action, createStateHelper, StateHelper, ActionFn, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableColumnsWithWidths,\n  tableColumnsWithDraftWidths,\n  changeTableColumnWidth,\n  draftTableColumnWidth,\n  cancelTableColumnWidthDraft,\n  ColumnWidthPayload,\n  TableColumnWidthInfo,\n  TABLE_DATA_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableColumnResizingProps, TableColumnResizingState, CellWidthGetter } from '../types';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n];\n\n// tslint:disable-next-line: max-line-length\nclass TableColumnResizingBase extends React.PureComponent<TableColumnResizingProps, TableColumnResizingState> {\n  static defaultProps = {\n    defaultColumnWidths: [],\n    resizingMode: 'widget',\n  };\n  changeTableColumnWidth: ActionFn<ColumnWidthPayload>;\n  draftTableColumnWidth: ActionFn<ColumnWidthPayload>;\n  cancelTableColumnWidthDraft: ActionFn<any>;\n  storeWidthGetters: ActionFn<object>;\n  storeCache: (payload) => void;\n  clearCache: () => void;\n  tableColumnsComputed: MemoizedComputed<TableColumnWidthInfo[], typeof tableColumnsWithWidths>;\n  // tslint:disable-next-line: max-line-length\n  tableColumnsDraftComputed: MemoizedComputed<TableColumnWidthInfo[], typeof tableColumnsWithDraftWidths>;\n\n  widthGetters: { [colName: string]: CellWidthGetter } = {};\n  cachedWidths: { [colName: string]: number } = {};\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columnWidths: props.columnWidths || props.defaultColumnWidths,\n      draftColumnWidths: [],\n    };\n\n    const stateHelper: StateHelper = createStateHelper(\n      this,\n      {\n        columnWidths: () => {\n          const { onColumnWidthsChange } = this.props;\n          return onColumnWidthsChange;\n        },\n      },\n    );\n\n    this.tableColumnsComputed = memoize(\n      columnWidths => (\n        { tableColumns }: Getters,\n      ) => tableColumnsWithWidths(tableColumns, columnWidths, this.props.resizingMode!),\n    );\n    this.tableColumnsDraftComputed = memoize(\n      draftColumnWidths => (\n        { tableColumns }: Getters,\n      ) => tableColumnsWithDraftWidths(\n        tableColumns, draftColumnWidths, this.props.resizingMode!,\n      ),\n    );\n\n    this.changeTableColumnWidth = stateHelper.applyReducer.bind(\n      stateHelper, (prevState, payload) => {\n        const cachedWidths = { ...this.cachedWidths };\n        const { minColumnWidth, maxColumnWidth, columnExtensions, resizingMode } = this.props;\n        return changeTableColumnWidth(\n          prevState,\n          { ...payload, cachedWidths, resizingMode,\n            minColumnWidth, maxColumnWidth, columnExtensions },\n        );\n      },\n    );\n    this.draftTableColumnWidth = stateHelper.applyReducer.bind(\n      stateHelper, (prevState, payload) => {\n        this.storeCache(payload);\n        const cachedWidths = this.cachedWidths;\n        const { minColumnWidth, maxColumnWidth, columnExtensions, resizingMode } = this.props;\n        return draftTableColumnWidth(\n          prevState,\n          { ...payload, cachedWidths, resizingMode,\n            minColumnWidth, maxColumnWidth, columnExtensions },\n        );\n      },\n    );\n    this.cancelTableColumnWidthDraft = stateHelper.applyReducer.bind(\n      stateHelper, cancelTableColumnWidthDraft,\n    );\n\n    this.storeCache = ({ columnName, nextColumnName }) => {\n      if (Object.keys(this.cachedWidths).length === 0) {\n        this.cachedWidths[columnName] = this.widthGetters[columnName]();\n        if (nextColumnName) {\n          this.cachedWidths[nextColumnName] = this.widthGetters[nextColumnName]();\n        }\n      }\n    };\n    this.clearCache = () => {\n      Object.keys(this.cachedWidths)\n      .forEach(columnName => delete this.cachedWidths[columnName]);\n    };\n\n    this.storeWidthGetters = memoize(({ tableColumn, getter, tableColumns }) => {\n      if (tableColumn.type === TABLE_DATA_TYPE) {\n        this.widthGetters[tableColumn.column!.name] = getter;\n      }\n      Object.keys(this.widthGetters)\n      .forEach((columnName) => {\n        const columnIndex = tableColumns\n          .findIndex(({ type, column }) => type === TABLE_DATA_TYPE && column!.name === columnName);\n        if (columnIndex === -1) {\n          delete this.widthGetters[columnName];\n        }\n      });\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      columnWidths = prevState.columnWidths,\n    } = nextProps;\n\n    return {\n      columnWidths,\n    };\n  }\n\n  componentDidUpdate (_, prevState) {\n    const { columnWidths: currentWidths } = this.state;\n    const { columnWidths: prevWidths } = prevState;\n    if (currentWidths !== prevWidths) {\n      this.clearCache();\n    }\n  }\n\n  render() {\n    const { columnWidths, draftColumnWidths } = this.state;\n    const { resizingMode } = this.props;\n    const tableColumnsComputed = this.tableColumnsComputed(columnWidths);\n    const tableColumnsDraftComputed = this.tableColumnsDraftComputed(draftColumnWidths);\n\n    return (\n      <Plugin\n        name=\"TableColumnResizing\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumnResizingEnabled\" value />\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableColumns\" computed={tableColumnsDraftComputed} />\n        <Getter name=\"columnResizingMode\" value={resizingMode} />\n        <Action name=\"changeTableColumnWidth\" action={this.changeTableColumnWidth} />\n        <Action name=\"draftTableColumnWidth\" action={this.draftTableColumnWidth} />\n        <Action name=\"cancelTableColumnWidthDraft\" action={this.cancelTableColumnWidthDraft} />\n        <Action name=\"storeWidthGetters\" action={this.storeWidthGetters} />\n      </Plugin>\n    );\n  }\n}\n\n/* tslint:disable: max-line-length */\n/** A plugin that manages table column widths. */\nexport const TableColumnResizing: React.ComponentType<TableColumnResizingProps> = TableColumnResizingBase;\n/* tslint:enable: max-line-length */\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template, TemplatePlaceholder, Plugin,\n  TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { pageCount } from '@devexpress/dx-grid-core';\nimport { PagingPanelProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nconst defaultMessages = {\n  showAll: 'All',\n  info: ({ from, to, count }) => `${from}${from < to ? `-${to}` : ''} of ${count}`,\n};\n\nclass PagingPanelBase extends React.PureComponent<PagingPanelProps> {\n  static defaultProps = {\n    pageSizes: [],\n    messages: {},\n  };\n  static components = {\n    containerComponent: 'Container',\n  };\n\n  render() {\n    const {\n      containerComponent: Pager,\n      pageSizes,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"PagingPanel\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"footer\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {({ currentPage, pageSize, totalCount }, { setCurrentPage, setPageSize }) => (\n              <Pager\n                currentPage={currentPage}\n                pageSize={pageSize}\n                totalCount={totalCount}\n                totalPages={pageCount(totalCount, pageSize)}\n                pageSizes={pageSizes!}\n                getMessage={getMessage}\n                onCurrentPageChange={setCurrentPage}\n                onPageSizeChange={setPageSize}\n              />\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the paging panel used for navigation through data pages. */\nexport const PagingPanel: React.ComponentType<PagingPanelProps> = PagingPanelBase;\n","import * as React from 'react';\nimport { DragSource } from '@devexpress/dx-react-core';\nimport { GroupingPanel as GP } from '../../types';\n\nconst defaultProps = {\n  draggingEnabled: false,\n  onDragStart: () => {},\n  onDragEnd: () => {},\n};\ntype GPItemLayoutProps = GP.GroupingItemLayoutProps & typeof defaultProps;\n\n// tslint:disable-next-line: max-line-length\nexport class ItemLayout extends React.PureComponent<GPItemLayoutProps, GP.GroupingItemLayoutState> {\n  static defaultProps = defaultProps;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dragging: false,\n    };\n  }\n\n  render() {\n    const {\n      item,\n      itemComponent: Item,\n      draggingEnabled,\n      onDragStart,\n      onDragEnd,\n    } = this.props;\n    const { dragging } = this.state;\n\n    const itemElement = <Item item={{ ...item, draft: dragging || item.draft }} />;\n\n    return (draggingEnabled ? (\n      <DragSource\n        payload={[{ type: 'column', columnName: item.column.name }]}\n        onStart={() => {\n          this.setState({ dragging: true });\n          onDragStart();\n        }}\n        onEnd={() => {\n          this.setState({ dragging: false });\n          onDragEnd();\n        }}\n      >\n        {itemElement}\n      </DragSource>\n    ) : (\n      itemElement\n    ));\n  }\n}\n","import * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { DropTarget } from '@devexpress/dx-react-core';\nimport { getGroupCellTargetIndex } from '@devexpress/dx-grid-core';\nimport { ItemLayout } from './group-panel-layout/item-layout';\nimport { GroupingPanel as GP } from '../types';\n\nconst defaultProps = {\n  onGroup: () => {},\n  draggingEnabled: false,\n  isColumnGroupingEnabled: () => false,\n  onGroupDraft: () => {},\n  onGroupDraftCancel: () => {},\n};\ntype GPLayoutProps = GP.LayoutProps & typeof defaultProps;\n\n// tslint:disable-next-line: max-line-length\nclass GroupPanelLayoutBase extends React.PureComponent<GPLayoutProps, GP.GroupingItemLayoutState> {\n  static defaultProps = defaultProps;\n  handleDragEvent: (...args: any) => void;\n  onEnter: (any) => void;\n  onOver: (any) => void;\n  itemRefs: ItemLayout[] = [];\n  draggingColumnName: string | null = null;\n  onLeave: () => void;\n  onDrop: () => void;\n  onDragStart: (columnName: any) => void;\n  onDragEnd: () => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sourceColumnName: null,\n      targetItemIndex: -1,\n    };\n    this.handleDragEvent = (eventHandler, { payload, ...restArgs }) => {\n      const { isColumnGroupingEnabled } = this.props;\n      const { columnName } = payload[0];\n\n      if (isColumnGroupingEnabled(columnName)) {\n        eventHandler({ payload, ...restArgs });\n      }\n    };\n    this.onEnter = ({ payload }) => {\n      this.setState({\n        sourceColumnName: payload[0].columnName,\n      });\n    };\n    this.onOver = ({ clientOffset }) => {\n      const { onGroupDraft, items } = this.props;\n      const { sourceColumnName, targetItemIndex: prevTargetItemIndex } = this.state;\n      // eslint-disable-next-line react/no-find-dom-node\n      const itemGeometries = this.itemRefs\n        .map(ref => (findDOMNode(ref) as HTMLElement).getBoundingClientRect());\n      const sourceItemIndex = items.findIndex(({ column }) => column.name === sourceColumnName);\n      const targetItemIndex = getGroupCellTargetIndex(\n        itemGeometries,\n        sourceItemIndex,\n        clientOffset,\n      );\n\n      if (prevTargetItemIndex === targetItemIndex) return;\n\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex,\n      });\n      this.setState({ targetItemIndex });\n    };\n    this.onLeave = () => {\n      const { onGroupDraft } = this.props;\n      const { sourceColumnName } = this.state;\n      if (!this.draggingColumnName) {\n        this.resetState();\n        return;\n      }\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: -1,\n      });\n      this.setState({\n        targetItemIndex: -1,\n      });\n    };\n    this.onDrop = () => {\n      const { onGroup } = this.props;\n      const { sourceColumnName, targetItemIndex } = this.state;\n      this.resetState();\n      onGroup({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex,\n      });\n    };\n    this.onDragStart = (columnName) => {\n      this.draggingColumnName = columnName;\n    };\n    this.onDragEnd = () => {\n      this.draggingColumnName = null;\n      const { sourceColumnName, targetItemIndex } = this.state;\n      const { onGroup } = this.props;\n      if (sourceColumnName && targetItemIndex === -1) {\n        onGroup({\n          columnName: sourceColumnName,\n        });\n      }\n      this.resetState();\n    };\n  }\n\n  resetState() {\n    const { onGroupDraftCancel } = this.props;\n    onGroupDraftCancel();\n    this.setState({\n      sourceColumnName: null,\n      targetItemIndex: -1,\n    });\n  }\n\n  render() {\n    const {\n      items,\n      emptyMessageComponent: EmptyMessage,\n      containerComponent: Container,\n      itemComponent: Item,\n      draggingEnabled,\n      isColumnGroupingEnabled,\n    } = this.props;\n\n    this.itemRefs = [];\n\n    const groupPanel = (items.length ? (\n      <Container>\n        {items.map((item) => {\n          const { name: columnName } = item.column;\n          return (\n            <ItemLayout\n              key={columnName}\n              ref={element => element && this.itemRefs.push(element)}\n              item={item}\n              itemComponent={Item}\n              draggingEnabled={draggingEnabled && isColumnGroupingEnabled(columnName)}\n              onDragStart={() => this.onDragStart(columnName)}\n              onDragEnd={this.onDragEnd}\n            />\n          );\n        })}\n      </Container>\n    ) : (\n      <EmptyMessage />\n    ));\n\n    return draggingEnabled\n      ? (\n        <DropTarget\n          onEnter={args => this.handleDragEvent(this.onEnter, args)}\n          onOver={args => this.handleDragEvent(this.onOver, args)}\n          onLeave={args => this.handleDragEvent(this.onLeave, args)}\n          onDrop={args => this.handleDragEvent(this.onDrop, args)}\n        >\n          {groupPanel}\n        </DropTarget>\n      )\n      : groupPanel;\n  }\n}\n\n/** @internal */\nexport const GroupPanelLayout: React.ComponentType<GP.LayoutProps> = GroupPanelLayoutBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template, TemplatePlaceholder, Plugin, TemplateConnector, withComponents,\n  Getters, Actions,\n} from '@devexpress/dx-react-core';\nimport {\n  groupingPanelItems,\n  getColumnSortingDirection,\n} from '@devexpress/dx-grid-core';\nimport { GroupPanelLayout as Layout } from '../components/group-panel-layout';\nimport { GroupingPanelProps } from '../types';\n\nconst defaultMessages = {\n  groupByColumn: 'Drag a column header here to group by that column',\n};\n\nconst defaultProps = {\n  showSortingControls: false,\n  showGroupingControls: false,\n  messages: {},\n};\n\nclass GroupingPanelRaw extends React.PureComponent<GroupingPanelProps & typeof defaultProps> {\n  static defaultProps = defaultProps;\n  static components = {\n    layoutComponent: 'Layout',\n    containerComponent: 'Container',\n    itemComponent: 'Item',\n    emptyMessageComponent: 'EmptyMessage',\n  };\n\n  render() {\n    const {\n      layoutComponent: LayoutComponent,\n      containerComponent: Container,\n      itemComponent: Item,\n      emptyMessageComponent: EmptyMessage,\n      showSortingControls,\n      showGroupingControls,\n      messages,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    const EmptyMessagePlaceholder = () => (\n      <EmptyMessage\n        getMessage={getMessage}\n      />\n    );\n\n    const ItemPlaceholder = ({ item }) => {\n      const { name: columnName } = item.column;\n\n      return (\n        <TemplateConnector>\n          {(\n            { sorting, isColumnSortingEnabled, isColumnGroupingEnabled },\n            { changeColumnGrouping, changeColumnSorting },\n          ) => {\n            const sortingEnabled = isColumnSortingEnabled && isColumnSortingEnabled(columnName);\n            const groupingEnabled = isColumnGroupingEnabled && isColumnGroupingEnabled(columnName);\n\n            return (\n              <Item\n                item={item}\n                sortingEnabled={sortingEnabled}\n                groupingEnabled={groupingEnabled}\n                showSortingControls={showSortingControls}\n                sortingDirection={showSortingControls\n                  ? getColumnSortingDirection(sorting, columnName)! : undefined}\n                showGroupingControls={showGroupingControls}\n                onGroup={() => changeColumnGrouping({ columnName })}\n                onSort={(\n                  { direction, keepOther },\n                ) => changeColumnSorting({ columnName, direction, keepOther })}\n              />\n            );\n          }}\n        </TemplateConnector>\n      );\n    };\n\n    return (\n      <Plugin\n        name=\"GroupingPanel\"\n        dependencies={[\n          { name: 'GroupingState' },\n          { name: 'Toolbar' },\n          { name: 'SortingState', optional: !showSortingControls },\n        ]}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplateConnector>\n            {({\n              columns, grouping, draftGrouping, draggingEnabled, isColumnGroupingEnabled,\n            }: Getters, {\n              changeColumnGrouping, draftColumnGrouping, cancelColumnGroupingDraft,\n            }: Actions) => (\n              <LayoutComponent\n                items={groupingPanelItems(columns, grouping, draftGrouping)}\n                isColumnGroupingEnabled={isColumnGroupingEnabled}\n                draggingEnabled={draggingEnabled}\n                onGroup={changeColumnGrouping}\n                onGroupDraft={draftColumnGrouping}\n                onGroupDraftCancel={cancelColumnGroupingDraft}\n                itemComponent={ItemPlaceholder}\n                emptyMessageComponent={EmptyMessagePlaceholder}\n                containerComponent={Container}\n              />\n            )}\n          </TemplateConnector>\n          <TemplatePlaceholder />\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that renders the Grouping Panel in the Grid's header. This panel displays grouped\n * columns and allows a user to modify grouping options.Optionally, the plugin allows an end-user\n * to change grouped columns' sorting order and render sorting indicators.\n * */\nexport const GroupingPanel: React.ComponentType<GroupingPanelProps> = withComponents(\n  { Layout },\n)(GroupingPanelRaw);\n","import * as React from 'react';\nimport { Plugin, Template, Getter, Getters } from '@devexpress/dx-react-core';\nimport { getAvailableFilterOperationsGetter } from '@devexpress/dx-grid-core';\nimport {\n  DataTypeProvider as DataTypeProviderNS, DataTypeProviderProps,\n} from '../types';\n\nclass DataTypeProviderBase extends React.PureComponent<DataTypeProviderProps> {\n  render() {\n    const {\n      for: columnNames,\n      formatterComponent: Formatter,\n      editorComponent: Editor,\n      availableFilterOperations,\n    } = this.props;\n\n    const getAvailableFilterOperationsComputed = (\n      { getAvailableFilterOperations }: Getters,\n    ) => getAvailableFilterOperationsGetter(\n      getAvailableFilterOperations,\n      availableFilterOperations!,\n      columnNames,\n    );\n\n    return (\n      <Plugin name=\"DataTypeProvider\" key={columnNames.join('_')}>\n        <Getter\n          name=\"getAvailableFilterOperations\"\n          computed={getAvailableFilterOperationsComputed}\n        />\n        {Formatter\n          ? (\n            <Template\n              name=\"valueFormatter\"\n              predicate={({ column }: any) => columnNames.includes(column.name)}\n            >\n              {(params: DataTypeProviderNS.ValueFormatterProps) => <Formatter {...params} />}\n            </Template>\n          )\n          : null\n        }\n        {Editor\n          ? (\n            <Template\n              name=\"valueEditor\"\n              predicate={({ column }: any) => columnNames.includes(column.name)}\n            >\n              {(params: DataTypeProviderNS.ValueEditorProps) => <Editor {...params} />}\n            </Template>\n          )\n          : null\n        }\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that allows you to customize formatting options and editors depending on the data type. */\nexport const DataTypeProvider: React.ComponentType<DataTypeProviderProps> = DataTypeProviderBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Action,\n  Getter,\n  Plugin,\n  Template,\n  TemplateConnector,\n  TemplatePlaceholder,\n  createStateHelper,\n  ActionFn,\n} from '@devexpress/dx-react-core';\nimport {\n  toggleColumn,\n  tableDataColumnsExist,\n  getColumnExtensionValueGetter,\n} from '@devexpress/dx-grid-core';\nimport { VisibleTableColumns } from './internal/visible-table-columns';\nimport { TableColumnVisibilityProps, TableColumnVisibilityState } from '../types';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n];\n\nconst defaultMessages = {\n  noColumns: 'Nothing to show',\n};\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'togglingEnabled', defaultValue);\n\n// tslint:disable-next-line: max-line-length\nclass TableColumnVisibilityBase extends React.PureComponent<TableColumnVisibilityProps, TableColumnVisibilityState> {\n  static defaultProps = {\n    defaultHiddenColumnNames: [],\n    messages: {},\n    columnTogglingEnabled: true,\n  };\n  static components = {\n    emptyMessageComponent: 'EmptyMessage',\n  };\n  toggleColumnVisibility: ActionFn<string[]>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hiddenColumnNames: props.hiddenColumnNames || props.defaultHiddenColumnNames,\n    };\n    const stateHelper = createStateHelper(\n      this,\n      {\n        hiddenColumnNames: () => {\n          const { onHiddenColumnNamesChange } = this.props;\n          return onHiddenColumnNamesChange;\n        },\n      },\n    );\n\n    this.toggleColumnVisibility = stateHelper.applyFieldReducer.bind(\n      stateHelper, 'hiddenColumnNames', toggleColumn,\n    );\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      hiddenColumnNames = prevState.hiddenColumnNames,\n    } = nextProps;\n\n    return {\n      hiddenColumnNames,\n    };\n  }\n\n  render() {\n    const {\n      emptyMessageComponent: EmptyMessage,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n    const { hiddenColumnNames } = this.state;\n    const { columnExtensions, columnTogglingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"TableColumnVisibility\"\n        dependencies={pluginDependencies}\n      >\n        <VisibleTableColumns hiddenColumnNames={hiddenColumnNames} />\n\n        <Getter\n          name=\"isColumnTogglingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnTogglingEnabled)}\n        />\n        <Action\n          name=\"toggleColumnVisibility\"\n          action={this.toggleColumnVisibility}\n        />\n\n        <Template name=\"table\">\n          {params => (\n            <TemplateConnector>\n              {({ tableColumns }) => (tableDataColumnsExist(tableColumns)\n                ? <TemplatePlaceholder />\n                : (\n                  <EmptyMessage\n                    getMessage={getMessage}\n                    {...params}\n                  />\n                )\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableColumnVisibilityBase.components = {\n  emptyMessageComponent: 'EmptyMessage',\n};\n\n/* tslint:disable: max-line-length */\n/** A plugin that manages Grid columns' visibility. */\nexport const TableColumnVisibility: React.ComponentType<TableColumnVisibilityProps> = TableColumnVisibilityBase;\n/* tslint:enable: max-line-length */\n","import * as React from 'react';\n\nimport {\n  Template,\n  Plugin,\n  TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { ToolbarProps } from '../types';\n\nclass ToolbarBase extends React.PureComponent<ToolbarProps> {\n  static components = {\n    rootComponent: 'Root',\n    flexibleSpaceComponent: 'FlexibleSpace',\n  };\n\n  render() {\n    const {\n      rootComponent: Root,\n      flexibleSpaceComponent: FlexibleSpaceComponent,\n    } = this.props;\n    return (\n      <Plugin\n        name=\"Toolbar\"\n      >\n        <Template name=\"header\">\n          <Root>\n            <TemplatePlaceholder name=\"toolbarContent\" />\n          </Root>\n          <TemplatePlaceholder />\n        </Template>\n        <Template name=\"toolbarContent\">\n          <FlexibleSpaceComponent />\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the Grid toolbar. */\nexport const Toolbar: React.ComponentType<ToolbarProps> = ToolbarBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport { toggleRowExpanded, ToggleRowPayload } from '@devexpress/dx-grid-core';\nimport { TreeDataStateProps, TreeDataStateState } from '../types';\n\nclass TreeDataStateBase extends React.PureComponent<TreeDataStateProps, TreeDataStateState> {\n  static defaultProps = {\n    defaultExpandedRowIds: [],\n  };\n  toggleRowExpanded: ActionFn<ToggleRowPayload>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        expandedRowIds: () => {\n          const { onExpandedRowIdsChange } = this.props;\n          return onExpandedRowIdsChange;\n        },\n      },\n    );\n\n    this.toggleRowExpanded = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'expandedRowIds', toggleRowExpanded);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      expandedRowIds = prevState.expandedRowIds,\n    } = nextProps;\n\n    return {\n      expandedRowIds,\n    };\n  }\n\n  render() {\n    const { expandedRowIds } = this.state;\n\n    return (\n      <Plugin\n        name=\"TreeDataState\"\n      >\n        <Getter name=\"expandedRowIds\" value={expandedRowIds} />\n        {' '}\n        {/* collision =( */}\n        <Action name=\"toggleRowExpanded\" action={this.toggleRowExpanded} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the expanded state for tree rows. */\nexport const TreeDataState: React.ComponentType<TreeDataStateProps> = TreeDataStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  customTreeRowLevelKeyGetter,\n  customTreeRowIdGetter,\n  customTreeRowsWithMeta,\n  expandedTreeRows,\n  collapsedTreeRowsGetter,\n  isTreeRowLeafGetter,\n  getTreeRowLevelGetter,\n  unwrappedCustomTreeRows,\n} from '@devexpress/dx-grid-core';\nimport { CustomTreeDataProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'TreeDataState' },\n];\n\nconst expandedTreeRowsComputed = (\n  { rows, getRowId, expandedRowIds }: Getters,\n) => expandedTreeRows(rows, getRowId, expandedRowIds);\nconst getRowIdComputed = (\n  { getRowId, rows }: Getters,\n) => customTreeRowIdGetter(getRowId, rows);\nconst getRowLevelKeyComputed = (\n  { getRowLevelKey, rows }: Getters,\n) => customTreeRowLevelKeyGetter(getRowLevelKey, rows);\nconst isTreeRowLeafComputed = ({ rows }: Getters) => isTreeRowLeafGetter(rows);\nconst getTreeRowLevelComputed = ({ rows }: Getters) => getTreeRowLevelGetter(rows);\nconst collapsedTreeRowsGetterComputed = (\n  { rows, getCollapsedRows }: Getters,\n) => collapsedTreeRowsGetter(getCollapsedRows, rows);\nconst unwrappedTreeRowsComputed = ({ rows }: Getters) => unwrappedCustomTreeRows(rows);\n\nclass CustomTreeDataBase extends React.PureComponent<CustomTreeDataProps> {\n  render() {\n    const {\n      getChildRows,\n    } = this.props;\n    const treeRowsComputed = ({ rows }: Getters) => customTreeRowsWithMeta(rows, getChildRows);\n\n    return (\n      <Plugin\n        name=\"CustomTreeData\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={treeRowsComputed} />\n        <Getter name=\"getRowId\" computed={getRowIdComputed} />\n        <Getter name=\"getRowLevelKey\" computed={getRowLevelKeyComputed} />\n        <Getter name=\"isTreeRowLeaf\" computed={isTreeRowLeafComputed} />\n        <Getter name=\"getTreeRowLevel\" computed={getTreeRowLevelComputed} />\n        <Getter name=\"rows\" computed={expandedTreeRowsComputed} />\n        <Getter name=\"getCollapsedRows\" computed={collapsedTreeRowsGetterComputed} />\n        <Getter name=\"rows\" computed={unwrappedTreeRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that converts custom formatted tree data to a supported format and performs\n * local row expanding/collapsing.\n * */\nexport const CustomTreeData: React.ComponentType<CustomTreeDataProps> = CustomTreeDataBase;\n","import * as React from 'react';\nimport {\n  Template, Getter, Plugin, TemplateConnector, TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { isTreeTableCell } from '@devexpress/dx-grid-core';\nimport { TableTreeColumnProps, TableCellProps } from '../types';\n\nclass TableTreeColumnBase extends React.PureComponent<TableTreeColumnProps> {\n  static defaultProps = {\n    showSelectionControls: false,\n    showSelectAll: false,\n  };\n  static components = {\n    cellComponent: 'Cell',\n    contentComponent: 'Content',\n    indentComponent: 'Indent',\n    expandButtonComponent: 'ExpandButton',\n    checkboxComponent: 'Checkbox',\n  };\n\n  render() {\n    const {\n      for: forColumnName,\n      showSelectionControls,\n      showSelectAll,\n      indentComponent: Indent,\n      expandButtonComponent: ExpandButton,\n      checkboxComponent: Checkbox,\n      contentComponent: Content,\n      cellComponent: Cell,\n    } = this.props;\n    return (\n      <Plugin\n        name=\"TableTreeColumn\"\n        dependencies={[\n          { name: 'DataTypeProvider', optional: true },\n          { name: 'TreeDataState' },\n          { name: 'SelectionState', optional: !showSelectionControls },\n          { name: 'IntegratedSelection', optional: !showSelectAll },\n          { name: 'Table' },\n          { name: 'TableHeaderRow', optional: true },\n        ]}\n        key={forColumnName}\n      >\n        <Getter name=\"tableTreeColumnName\" value={forColumnName} />\n        <Template\n          name=\"tableHeaderCellBefore\"\n          predicate={({ column }: any) => column.name === forColumnName}\n        >\n          <ExpandButton\n            visible={false}\n            expanded={false}\n            onToggle={() => {}}\n          />\n          {showSelectionControls && showSelectAll && (\n            <TemplateConnector>\n              {({ selectAllAvailable, allSelected, someSelected }, { toggleSelectAll }) => (\n                <Checkbox\n                  disabled={!selectAllAvailable}\n                  checked={allSelected}\n                  indeterminate={someSelected}\n                  onChange={toggleSelectAll}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isTreeTableCell(tableRow, tableColumn, forColumnName)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                getCollapsedRows, expandedRowIds, selection, isTreeRowLeaf, getTreeRowLevel,\n                getCellValue,\n              }, {\n                toggleRowExpanded, toggleSelection,\n              }) => {\n                const { row, rowId } = params.tableRow;\n                const columnName = params.tableColumn.column!.name;\n                const value = getCellValue(row, columnName);\n                const collapsedRows = getCollapsedRows(row);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueFormatter\"\n                    params={{\n                      value,\n                      row,\n                      column: params.tableColumn.column,\n                    }}\n                  >\n                    {content => (\n                      <Cell\n                        {...params}\n                        row={row}\n                        column={params.tableColumn.column!}\n                        value={value}\n                      >\n                        <Indent\n                          level={getTreeRowLevel(row)}\n                        />\n                        <ExpandButton\n                          visible={collapsedRows ? !!collapsedRows.length : !isTreeRowLeaf(row)}\n                          expanded={expandedRowIds.indexOf(rowId) > -1}\n                          onToggle={() => toggleRowExpanded({ rowId })}\n                        />\n                        {showSelectionControls && (\n                          <Checkbox\n                            disabled={false}\n                            checked={selection.indexOf(rowId) > -1}\n                            indeterminate={false}\n                            onChange={() => toggleSelection({ rowIds: [rowId] })}\n                          />\n                        )}\n                        <Content>\n                          {content || value}\n                        </Content>\n                      </Cell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders a table column with a toggle button and sorting indicators. */\nexport const TableTreeColumn: React.ComponentType<TableTreeColumnProps> = TableTreeColumnBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn, Getters,\n} from '@devexpress/dx-react-core';\nimport { changeSearchValue, searchFilterExpression } from '@devexpress/dx-grid-core';\nimport { SearchStateProps, SearchStateState } from '../types';\n\nclass SearchStateBase extends React.PureComponent<SearchStateProps, SearchStateState> {\n  static defaultProps = {\n    defaultValue: '',\n  };\n  changeValue: ActionFn<string>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: props.value || props.defaultValue,\n    };\n    const stateHelper = createStateHelper(this, {\n      value: () => {\n        const { onValueChange } = this.props;\n        return onValueChange;\n      },\n    });\n\n    this.changeValue = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'value', changeSearchValue);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      value = prevState.value,\n    } = nextProps;\n\n    return {\n      value,\n    };\n  }\n\n  render() {\n    const { value } = this.state;\n    const filterExpressionComputed = (\n      { filterExpression, columns }: Getters,\n    ) => searchFilterExpression(value, columns, filterExpression);\n\n    return (\n      <Plugin\n        name=\"SearchState\"\n      >\n        <Getter name=\"filterExpression\" computed={filterExpressionComputed} />\n        <Getter name=\"searchValue\" value={value} />\n        <Action name=\"changeSearchValue\" action={this.changeValue} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the search state. */\nexport const SearchState: React.ComponentType<SearchStateProps> = SearchStateBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template,\n  TemplatePlaceholder,\n  Plugin,\n  TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { SearchPanelProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'Toolbar' },\n  { name: 'SearchState' },\n];\n\nconst defaultMessages = {\n  searchPlaceholder: 'Search...',\n};\n\nclass SearchPanelBase extends React.PureComponent<SearchPanelProps> {\n  static defaultProps = {\n    messages: {},\n  };\n  static components = {\n    inputComponent: 'Input',\n  };\n\n  render() {\n    const { inputComponent: Input, messages } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"SearchPanel\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {({ searchValue }, { changeSearchValue }) => (\n              <Input\n                value={searchValue}\n                onValueChange={changeSearchValue}\n                getMessage={getMessage}\n              />\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the Search Panel. */\nexport const SearchPanel: React.ComponentType<SearchPanelProps> = SearchPanelBase;\n","import * as React from 'react';\nimport {\n  Getter,\n  Template,\n  Plugin,\n  TemplatePlaceholder,\n  TemplateConnector,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  isFixedTableRow,\n  tableColumnsWithFixed,\n  tableHeaderRowsWithFixed,\n  tableHeaderColumnChainsWithFixed,\n  calculateFixedColumnProps,\n  isRowHighlighted,\n} from '@devexpress/dx-grid-core';\nimport {\n  TableCellProps, TableRowProps, TableFixedColumnsProps, TableFixedColumnsState,\n} from '../types';\n\nconst tableHeaderRowsComputed = (\n  { tableHeaderRows }: Getters,\n) => tableHeaderRowsWithFixed(tableHeaderRows);\nconst tableHeaderColumnChainsComputed = (\n  { tableColumns, tableHeaderRows, tableHeaderColumnChains }: Getters,\n) => tableHeaderColumnChainsWithFixed(tableHeaderColumnChains, tableHeaderRows, tableColumns);\n\nconst CellPlaceholder = props => <TemplatePlaceholder params={props} />;\n\nconst pluginDependencies = [\n  { name: 'Table' },\n  { name: 'TableBandHeader', optional: true },\n  { name: 'TableColumnReordering', optional: true },\n  { name: 'TableEditColumn', optional: true },\n  { name: 'TableEditRow', optional: true },\n  { name: 'TableFilterRow', optional: true },\n  { name: 'TableGroupRow', optional: true },\n  { name: 'TableHeaderRow', optional: true },\n  { name: 'TableRowDetail', optional: true },\n  { name: 'TableSelection', optional: true },\n  { name: 'TableSummaryRow', optional: true },\n  { name: 'TableTreeColumn', optional: true },\n];\n\n// tslint:disable-next-line: max-line-length\nclass TableFixedColumnsBase extends React.PureComponent<TableFixedColumnsProps, TableFixedColumnsState> {\n  static components = {\n    cellComponent: 'Cell',\n    listenerRowComponent: 'ListenerRow',\n    listenerCellComponent: 'ListenerCell',\n  };\n  static defaultProps = {\n    leftColumns: [],\n    rightColumns: [],\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tableColumnDimensions: {},\n    };\n  }\n\n  handleListenerSizeChange(key, width) {\n    const { tableColumnDimensions } = this.state;\n    if (tableColumnDimensions[key] !== width) {\n      this.setState(state => ({\n        tableColumnDimensions: {\n          ...state.tableColumnDimensions,\n          [key]: width,\n        },\n      }));\n    }\n  }\n\n  render() {\n    const {\n      cellComponent: Cell,\n      listenerRowComponent: ListenerRow,\n      listenerCellComponent: ListenerCell,\n    } = this.props;\n    const leftColumns = this.props.leftColumns!;\n    const rightColumns = this.props.rightColumns!;\n\n    const tableColumnsComputed = ({ tableColumns }: Getters) => tableColumnsWithFixed(\n      tableColumns,\n      leftColumns,\n      rightColumns,\n    );\n\n    return (\n      <Plugin\n        name=\"TableFixedColumns\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableHeaderColumnChains\" computed={tableHeaderColumnChainsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableColumn }: any) => !!tableColumn.fixed}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ tableColumns, tableHeaderColumnChains, selection, highlightSelectedRow }) => {\n                const selected = isRowHighlighted(highlightSelectedRow, selection, params.tableRow);\n                const { tableColumnDimensions } = this.state;\n                const fixedColumnProps = calculateFixedColumnProps(\n                  params,\n                  { leftColumns, rightColumns },\n                  tableColumns,\n                  tableColumnDimensions,\n                  tableHeaderColumnChains,\n                );\n\n                return (\n                  <Cell\n                    {...params}\n                    {...fixedColumnProps}\n                    component={CellPlaceholder}\n                    selected={selected}\n                  />\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isFixedTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <ListenerRow {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => !!isFixedTableRow(tableRow)}\n        >\n          {(params: TableCellProps) => (\n            <ListenerCell\n              {...params}\n              listen={!!params.tableColumn.fixed}\n              onSizeChange={({\n                width,\n              }) => this.handleListenerSizeChange(params.tableColumn.key, width)}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that enables you to fix columns to the left and right sides of the grid. */\nexport const TableFixedColumns: React.ComponentType<TableFixedColumnsProps> = TableFixedColumnsBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport { prepareGroupSummaryItems } from '@devexpress/dx-grid-core';\nimport { SummaryStateProps } from '../types';\n\nconst groupSummaryItemsComputed = (\n  { groupSummaryItems }: Getters,\n) => prepareGroupSummaryItems(groupSummaryItems);\n\nclass SummaryStateBase extends React.PureComponent<SummaryStateProps> {\n  render() {\n    const { totalItems, groupItems, treeItems } = this.props;\n\n    return (\n      <Plugin\n        name=\"SummaryState\"\n      >\n        <Getter name=\"totalSummaryItems\" value={totalItems} />\n        <Getter name=\"groupSummaryItems\" value={groupItems} />\n        <Getter name=\"groupSummaryItems\" computed={groupSummaryItemsComputed} />\n        <Getter name=\"treeSummaryItems\" value={treeItems} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that provides items for total, group, and tree summaries. */\nexport const SummaryState: React.ComponentType<SummaryStateProps> = SummaryStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  defaultSummaryCalculator,\n  totalSummaryValues,\n  groupSummaryValues,\n  treeSummaryValues,\n  SummaryCalculator,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedSummaryProps, SummaryType } from '../types';\n\nconst pluginDependencies = [\n  { name: 'SummaryState' },\n  { name: 'IntegratedGrouping', optional: true },\n];\n\nclass IntegratedSummaryBase extends React.PureComponent<IntegratedSummaryProps> {\n  static defaultCalculator: SummaryCalculator = defaultSummaryCalculator;\n\n  render() {\n    const { calculator } = this.props;\n\n    const totalSummaryValuesComputed = ({\n      rows,\n      totalSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n    }: Getters) => totalSummaryValues(\n      rows,\n      totalSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n      calculator,\n    );\n\n    const groupSummaryValuesComputed = ({\n      rows,\n      groupSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n    }: Getters) => groupSummaryValues(\n      rows,\n      groupSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n      calculator,\n    );\n\n    const treeSummaryValuesComputed = ({\n      rows,\n      treeSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getRowId,\n    }: Getters) => treeSummaryValues(\n      rows,\n      treeSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getRowId,\n      calculator,\n    );\n\n    return (\n      <Plugin\n        name=\"IntegratedSummary\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalSummaryValues\" computed={totalSummaryValuesComputed} />\n        <Getter name=\"groupSummaryValues\" computed={groupSummaryValuesComputed} />\n        <Getter name=\"treeSummaryValues\" computed={treeSummaryValuesComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that performs a built-in data summary calculation. */\nexport const IntegratedSummary: React.ComponentType<IntegratedSummaryProps> & {\n  /** The built-in summary calculator. */\n  defaultCalculator: (type: SummaryType, rows: Array<any>, getValue: (row: any) => any) => any;\n} = IntegratedSummaryBase;\n","import * as React from 'react';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport { CustomSummaryProps } from '../types/summary/custom-summary.types';\n\nconst pluginDependencies = [\n  { name: 'SummaryState' },\n];\n\nclass CustomSummaryBase extends React.PureComponent<CustomSummaryProps> {\n  render() {\n    const { totalValues, groupValues, treeValues } = this.props;\n\n    return (\n      <Plugin\n        name=\"CustomSummary\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalSummaryValues\" value={totalValues} />\n        <Getter name=\"groupSummaryValues\" value={groupValues} />\n        <Getter name=\"treeSummaryValues\" value={treeValues} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that allows you to calculate a custom summary. */\nexport const CustomSummary: React.ComponentType<CustomSummaryProps> = CustomSummaryBase;\n","import * as React from 'react';\nimport {\n  Getter,\n  Template,\n  Plugin,\n  TemplateConnector,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithSummaries,\n  tableRowsWithTotalSummaries,\n  isTotalSummaryTableCell,\n  isGroupSummaryTableCell,\n  isTreeSummaryTableCell,\n  isTotalSummaryTableRow,\n  isGroupSummaryTableRow,\n  isTreeSummaryTableRow,\n  getColumnSummaries,\n  TABLE_TREE_SUMMARY_TYPE,\n  TABLE_GROUP_SUMMARY_TYPE,\n  TABLE_TOTAL_SUMMARY_TYPE,\n  isFooterSummary,\n} from '@devexpress/dx-grid-core';\nimport { TableCellProps, TableRowProps, TableSummaryRowProps } from '../types';\nimport { TableSummaryContent } from '../components/summary/table-summary-content';\n\nconst dependencies = [\n  { name: 'DataTypeProvider', optional: true },\n  { name: 'SummaryState' },\n  { name: 'CustomSummary', optional: true },\n  { name: 'IntegratedSummary', optional: true },\n  { name: 'Table' },\n  { name: 'TableTreeColumn', optional: true },\n];\n\nconst tableBodyRowsComputed = ({\n  tableBodyRows,\n  getRowLevelKey,\n  isGroupRow,\n  getRowId,\n  groupSummaryItems,\n  treeSummaryItems,\n}: Getters) => tableRowsWithSummaries(\n  tableBodyRows, groupSummaryItems, treeSummaryItems, getRowLevelKey, isGroupRow, getRowId,\n);\nconst tableFooterRowsComputed = ({\n  tableFooterRows,\n}: Getters) => tableRowsWithTotalSummaries(tableFooterRows);\n\nexport class TableSummaryRowBase extends React.PureComponent<TableSummaryRowProps> {\n  static TREE_ROW_TYPE = TABLE_TREE_SUMMARY_TYPE;\n  static GROUP_ROW_TYPE = TABLE_GROUP_SUMMARY_TYPE;\n  static TOTAL_ROW_TYPE = TABLE_TOTAL_SUMMARY_TYPE;\n  static defaultProps = {\n    formatlessSummaryTypes: [],\n    messages: {},\n  };\n  static components = {\n    totalRowComponent: 'TotalRow',\n    groupRowComponent: 'GroupRow',\n    treeRowComponent: 'TreeRow',\n    totalCellComponent: 'TotalCell',\n    groupCellComponent: 'GroupCell',\n    treeCellComponent: 'TreeCell',\n    treeColumnCellComponent: 'TableTreeCell',\n    treeColumnContentComponent: 'TableTreeContent',\n    treeColumnIndentComponent: 'TableTreeIndent',\n    itemComponent: 'Item',\n  };\n\n  renderContent(column, columnSummaries) {\n    const {\n      formatlessSummaryTypes,\n      itemComponent: Item,\n      messages,\n    } = this.props;\n\n    return (\n      <TableSummaryContent\n        column={column}\n        columnSummaries={columnSummaries}\n        formatlessSummaryTypes={formatlessSummaryTypes}\n        itemComponent={Item}\n        messages={messages!}\n      />\n    );\n  }\n\n  render() {\n    const {\n      totalRowComponent: TotalRow,\n      groupRowComponent: GroupRow,\n      treeRowComponent: TreeRow,\n      totalCellComponent: TotalCell,\n      groupCellComponent: GroupCell,\n      treeCellComponent: TreeCell,\n      treeColumnCellComponent: TreeColumnCell,\n      treeColumnContentComponent: TreeColumnContent,\n      treeColumnIndentComponent: TreeColumnIndent,\n    } = this.props;\n\n    return (\n      <Plugin\n        name=\"TableSummaryRow\"\n        dependencies={dependencies}\n      >\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"tableFooterRows\" computed={tableFooterRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isTotalSummaryTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ totalSummaryItems, totalSummaryValues }) => {\n                const columnSummaries = getColumnSummaries(\n                  totalSummaryItems,\n                  params.tableColumn.column!.name,\n                  totalSummaryValues,\n                );\n                return (\n                  <TotalCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                  >\n                    {this.renderContent(params.tableColumn.column, columnSummaries)}\n                  </TotalCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isGroupSummaryTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ groupSummaryItems, groupSummaryValues }) => {\n                const columnSummaries = getColumnSummaries(\n                  groupSummaryItems,\n                  params.tableColumn.column!.name,\n                  groupSummaryValues[params.tableRow.row.compoundKey],\n                  summaryItem => isFooterSummary(summaryItem),\n                );\n                return (\n                  <GroupCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                  >\n                    {this.renderContent(params.tableColumn.column, columnSummaries)}\n                  </GroupCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isTreeSummaryTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                treeSummaryItems,\n                treeSummaryValues,\n                tableTreeColumnName,\n                getRowId,\n                getTreeRowLevel,\n              }) => {\n                const columnSummaries = getColumnSummaries(\n                  treeSummaryItems,\n                  params.tableColumn.column!.name,\n                  treeSummaryValues[getRowId(params.tableRow.row)],\n                );\n                if (tableTreeColumnName === params.tableColumn.column!.name) {\n                  return (\n                    <TreeColumnCell\n                      {...params}\n                      column={params.tableColumn.column!}\n                    >\n                      <TreeColumnIndent\n                        level={getTreeRowLevel(params.tableRow.row)}\n                      />\n                      <TreeColumnContent>\n                        {this.renderContent(params.tableColumn.column, columnSummaries)}\n                      </TreeColumnContent>\n                    </TreeColumnCell>\n                  );\n                }\n                return (\n                  <TreeCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                  >\n                    {this.renderContent(params.tableColumn.column, columnSummaries)}\n                  </TreeCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isTotalSummaryTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <TotalRow\n              {...params}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isGroupSummaryTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <GroupRow\n              {...params}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isTreeSummaryTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <TreeRow\n              {...params}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders table rows that display a total, group, and tree summary. */\nexport const TableSummaryRow: React.ComponentType<TableSummaryRowProps> & {\n  /** The tree summary row type's indentifier. */\n  TREE_ROW_TYPE: symbol;\n  /** The group summary row type's indentifier. */\n  GROUP_ROW_TYPE: symbol;\n  /** The total row type's indentifier. */\n  TOTAL_ROW_TYPE: symbol;\n} = TableSummaryRowBase;\n","import * as React from 'react';\nimport { Getter, Action, Plugin, Getters, Actions } from '@devexpress/dx-react-core';\nimport {\n  virtualRowsWithCache, trimRowsToInterval, emptyVirtualRows, plainRows, loadedRowsStart,\n  VirtualRows, Interval, getAvailableRowCount, needFetchMorePages, getReferenceIndex,\n  shouldSendRequest, getRequestMeta,\n} from '@devexpress/dx-grid-core';\nimport { VirtualTableStateProps, VirtualTableStateState } from '../../types';\n\nconst virtualRowsComputed = (\n  { skip, rows, virtualRowsCache }: Getters,\n) => virtualRowsWithCache(skip, rows, virtualRowsCache);\n\nconst rowsComputed = (\n  { virtualRows, availableRowCount }: Getters,\n) => plainRows(virtualRows, availableRowCount);\n\nconst loadedRowsStartComputed = ({ virtualRows }: Getters) => loadedRowsStart(virtualRows);\n\n// tslint:disable-next-line: max-line-length\nclass VirtualTableStateBase extends React.PureComponent<VirtualTableStateProps, VirtualTableStateState> {\n  static defaultProps = {\n    pageSize: 100,\n  };\n  requestTimer: number = 0;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      virtualRowsCache: emptyVirtualRows,\n      requestedStartIndex: -1,\n      availableRowCount: props.totalRowCount || 0,\n    };\n  }\n\n  setViewport = (\n    viewport,\n    { virtualRows }: Getters,\n    { requestNextPage }: Actions,\n  ) => {\n    const { pageSize } = this.props;\n    const referenceIndex = getReferenceIndex(viewport);\n\n    if (needFetchMorePages(virtualRows, referenceIndex, pageSize!)) {\n      requestNextPage({ referenceIndex });\n    }\n  }\n\n  requestNextPageAction = (\n    { referenceIndex, forceReload },\n    { virtualRows }: Getters,\n  ) => {\n    const { pageSize, totalRowCount, infiniteScrolling } = this.props;\n    const { requestedStartIndex } = this.state;\n    const actualVirtualRows = forceReload ? emptyVirtualRows : virtualRows;\n    const { requestedRange, actualBounds } = getRequestMeta(\n      referenceIndex, virtualRows, pageSize!, totalRowCount, forceReload, infiniteScrolling,\n    );\n\n    if (forceReload || shouldSendRequest(requestedRange, requestedStartIndex)) {\n      this.requestNextPage(requestedRange, actualVirtualRows, actualBounds);\n    }\n  }\n\n  requestNextPage(\n    requestedRange: Interval, virtualRows: VirtualRows, actualBounds: Interval,\n  ) {\n    const { getRows, infiniteScrolling, totalRowCount } = this.props;\n    const { availableRowCount: stateAvailableCount } = this.state;\n\n    if (this.requestTimer !== 0) {\n      clearTimeout(this.requestTimer);\n    }\n    this.requestTimer = window.setTimeout(() => {\n      const { start: requestedStartIndex, end } = requestedRange;\n      const loadCount = end - requestedStartIndex;\n      const virtualRowsCache = trimRowsToInterval(virtualRows, actualBounds);\n      const availableRowCount = getAvailableRowCount(\n        infiniteScrolling,\n        actualBounds.end,\n        stateAvailableCount,\n        totalRowCount,\n      );\n\n      getRows(requestedStartIndex, loadCount);\n\n      this.setState({\n        virtualRowsCache,\n        availableRowCount,\n        requestedStartIndex,\n      });\n    }, 50);\n  }\n\n  requestFirstPage() {\n    const { getRows, pageSize } = this.props;\n\n    if (this.requestTimer !== 0) {\n      clearTimeout(this.requestTimer);\n    }\n    this.requestTimer = window.setTimeout(() => {\n      getRows(0, 2 * pageSize!);\n\n      this.setState({\n        virtualRowsCache: emptyVirtualRows,\n        requestedStartIndex: 0,\n      });\n    }, 50);\n  }\n\n  clearRowsCacheAction = (\n    _: any,\n    __: Getters,\n    { requestNextPage }: Actions,\n  ) => {\n    this.setState({\n      virtualRowsCache: emptyVirtualRows,\n    });\n    requestNextPage({ forceReload: true });\n  }\n\n  changeColumnFilterAction = () => this.requestFirstPage();\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      availableRowCount = prevState.availableRowCount,\n      totalRowCount,\n      pageSize,\n      infiniteScrolling,\n    } = nextProps;\n\n    return {\n      availableRowCount: getAvailableRowCount(\n        infiniteScrolling,\n        pageSize * 2,\n        availableRowCount,\n        totalRowCount,\n      ),\n    };\n  }\n\n  componentDidMount() {\n    const { getRows, pageSize, infiniteScrolling, totalRowCount } = this.props;\n    getRows(0, 2 * pageSize!);\n\n    const newRowCount = infiniteScrolling ? 2 * pageSize! : totalRowCount;\n    this.setState({\n      availableRowCount: newRowCount,\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.requestTimer !== 0) {\n      window.clearTimeout(this.requestTimer);\n    }\n  }\n\n  render() {\n    const { virtualRowsCache, availableRowCount } = this.state;\n    const { skip, pageSize, loading, infiniteScrolling } = this.props;\n\n    return (\n      <Plugin\n        name=\"VirtualTableState\"\n      >\n        <Getter name=\"isDataRemote\" value />\n        <Getter name=\"isDataLoading\" value={loading} />\n        <Getter name=\"isScrollingInfinite\" value={infiniteScrolling} />\n        <Getter name=\"skip\" value={skip} />\n        <Getter name=\"virtualRowsCache\" value={virtualRowsCache} />\n        <Getter name=\"pageSize\" value={pageSize} />\n        <Getter name=\"availableRowCount\" value={availableRowCount} />\n\n        <Getter name=\"virtualRows\" computed={virtualRowsComputed} />\n        <Getter name=\"rows\" computed={rowsComputed} />\n        <Getter name=\"loadedRowsStart\" computed={loadedRowsStartComputed} />\n\n        <Action name=\"requestNextPage\" action={this.requestNextPageAction} />\n        <Action name=\"setViewport\" action={this.setViewport} />\n        <Action name=\"clearRowCache\" action={this.clearRowsCacheAction} />\n        <Action name=\"changeColumnSorting\" action={this.clearRowsCacheAction} />\n        <Action name=\"changeColumnFilter\" action={this.changeColumnFilterAction} />\n      </Plugin>\n    );\n  }\n}\n\nexport const VirtualTableState: React.ComponentType<VirtualTableStateProps> = VirtualTableStateBase;\n","import * as React from 'react';\nimport {\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n  Plugin,\n  Getter,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  getRowChange,\n  TABLE_DATA_TYPE,\n  rowsWithEditingCells,\n  columnsWithEditingCells,\n} from '@devexpress/dx-grid-core';\nimport { TableInlineCellEditingProps, TableCellProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nconst rowsWithEditingCellsComputed = (\n  { tableBodyRows, editingCells }: Getters,\n) => rowsWithEditingCells(tableBodyRows, editingCells);\nconst columnsWithEditingCellsComputed = (\n  { tableColumns, editingCells }: Getters,\n) => columnsWithEditingCells(tableColumns, editingCells);\n\n/* tslint:disable-next-line max-line-length*/\nconst INLINE_CELL_EDITING_ERROR = 'The startEditAction property of the InlineCellEditing plugin is given an invalid value.';\n\n// tslint:disable-next-line: max-line-length\nconst TableInlineCellEditingBase: React.SFC<TableInlineCellEditingProps> & {components: {cellComponent: string}} = (props) => {\n  const { cellComponent: EditCell, startEditAction, selectTextOnEditStart } = props;\n\n  return (\n    <Plugin name=\"TableInlineCellEditing\" dependencies={pluginDependencies}>\n      <Getter name=\"tableBodyRows\" computed={rowsWithEditingCellsComputed} />\n      <Getter name=\"tableColumns\" computed={columnsWithEditingCellsComputed} />\n      <Template\n        name=\"tableCell\"\n        predicate={({ tableRow, tableColumn }: any) =>\n          tableRow.type === TABLE_DATA_TYPE &&\n          tableColumn.type === TABLE_DATA_TYPE\n        }\n      >\n        {(params: TableCellProps) => (\n          <TemplateConnector>\n            {({}, { startEditCells }) => {\n              const { tableRow : { rowId }, tableColumn: { column } } = params;\n              const { name: columnName } = column!;\n\n              if (startEditAction !== 'click' && startEditAction !== 'doubleClick') {\n                throw new Error(INLINE_CELL_EDITING_ERROR);\n              }\n\n              const startEditCellCallback = () =>\n                startEditCells({\n                  editingCells: [{ rowId, columnName }],\n                });\n              const eventName = startEditAction === 'click' ? 'onClick' : 'onDoubleClick';\n              const newParams = { ...params, [eventName]: startEditCellCallback };\n\n              return <TemplatePlaceholder params={newParams} />;\n            }}\n          </TemplateConnector>\n        )}\n      </Template>\n      <Template\n        name=\"tableCell\"\n        predicate={({ tableRow, tableColumn }: any) =>\n          tableRow.hasEditCell && tableColumn.hasEditCell\n        }\n      >\n        {(params: TableCellProps) => (\n          <TemplateConnector>\n            {(\n              { getCellValue, createRowChange, rowChanges, isColumnEditingEnabled },\n              { changeRow, stopEditCells, commitChangedRows, cancelChangedRows },\n            ) => {\n              const { tableRow : { rowId, row }, tableColumn: { column } } = params;\n              const { name: columnName } = column!;\n\n              const changedRow = {\n                ...row,\n                ...getRowChange(rowChanges, rowId!),\n              };\n\n              const value = getCellValue(changedRow, columnName);\n              const onValueChange = (newValue: any) => {\n                const changeArgs = {\n                  rowId,\n                  change: createRowChange(changedRow, newValue, columnName),\n                };\n                changeRow(changeArgs);\n              };\n              const onKeyDown = ({ key }) => {\n                if (key === 'Enter') {\n                  commitChangedRows({ rowIds: [rowId] });\n                  stopEditCells({ editingCells: [{ rowId, columnName }] });\n                } else if (key === 'Escape') {\n                  cancelChangedRows({ rowIds: [rowId] });\n                  stopEditCells({ editingCells: [{ rowId, columnName }] });\n                }\n              };\n              const onBlur = () => {\n                commitChangedRows({ rowIds: [rowId] });\n                stopEditCells({ editingCells: [{ rowId, columnName }] });\n              };\n              const onFocus = selectTextOnEditStart ? e => e.target.select() : () => {};\n              const editingEnabled = isColumnEditingEnabled(columnName);\n\n              return (\n                <TemplatePlaceholder\n                  name=\"valueEditor\"\n                  params={{\n                    column,\n                    row,\n                    value,\n                    onValueChange,\n                    disabled: !editingEnabled,\n                  }}\n                >\n                  {content => (\n                    <EditCell\n                      {...params}\n                      row={row}\n                      column={column!}\n                      value={value}\n                      editingEnabled={editingEnabled}\n                      onValueChange={onValueChange}\n                      autoFocus\n                      onKeyDown={onKeyDown}\n                      onBlur={onBlur}\n                      onFocus={onFocus}\n                    >\n                      {content}\n                    </EditCell>\n                  )}\n                </TemplatePlaceholder>\n              );\n            }}\n          </TemplateConnector>\n        )}\n      </Template>\n    </Plugin>\n  );\n};\n\nTableInlineCellEditingBase.components = {\n  cellComponent: 'Cell',\n};\n\nTableInlineCellEditingBase.defaultProps = {\n  startEditAction: 'click',\n  selectTextOnEditStart: false,\n};\n\n// tslint:disable-next-line: max-line-length\nexport const TableInlineCellEditing: React.ComponentType<TableInlineCellEditingProps> = TableInlineCellEditingBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template, TemplatePlaceholder, Plugin, TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { ExportPanelProps, ExportPanelState } from '../types';\n\nconst defaultMessages = {\n  showExportMenu: 'Export',\n  exportAll: 'Export all data',\n  exportSelected: 'Export selected rows',\n};\n\nclass ExportPanelBase extends React.PureComponent<ExportPanelProps, ExportPanelState> {\n  static components = {\n    toggleButtonComponent: 'ToggleButton',\n    menuComponent: 'Menu',\n    menuItemComponent: 'MenuItem',\n  };\n  button!: React.ReactInstance;\n  state = { visible: false };\n\n  setButtonRef = button => this.button = button;\n\n  handleToggle = () => {\n    const { visible } = this.state;\n    this.setState({ visible: !visible });\n  }\n\n  handleHide = () => this.setState({ visible: false });\n\n  render() {\n    const {\n      toggleButtonComponent: ToggleButton,\n      menuComponent: Menu,\n      menuItemComponent: MenuItem,\n      messages,\n      startExport,\n    } = this.props;\n    const {\n      visible,\n    } = this.state;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"ExportPanel\"\n        dependencies={[\n          { name: 'SelectionState', optional: true },\n          { name: 'Toolbar' },\n        ]}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {({ selection }) => (\n              <>\n                <ToggleButton\n                  buttonRef={this.setButtonRef}\n                  onToggle={this.handleToggle}\n                  getMessage={getMessage}\n                />\n                <Menu\n                  visible={visible}\n                  onHide={this.handleHide}\n                  target={this.button}\n                >\n                  <MenuItem\n                    key=\"exportAll\"\n                    text={getMessage('exportAll')}\n                    onClick={() => {\n                      this.handleHide();\n                      startExport();\n                    }}\n                  />\n                  {selection?.length ? (\n                    <MenuItem\n                      key=\"exportSelected\"\n                      text={getMessage('exportSelected')}\n                      onClick={() => {\n                        this.handleHide();\n                        startExport({ selectedOnly: true });\n                      }}\n                    />\n                  ) : null}\n                </Menu>\n              </>\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nexport const ExportPanel: React.ComponentType<any> = ExportPanelBase;\n","/* globals requestAnimationFrame cancelAnimationFrame */\n\nimport * as React from 'react';\nimport {\n  getAnimations,\n  filterActiveAnimations,\n  evalAnimations,\n  TABLE_FLEX_TYPE,\n  ColumnAnimationMap,\n} from '@devexpress/dx-grid-core';\nimport { shallowEqual } from '@devexpress/dx-core';\nimport { TableLayoutCoreProps, TableLayoutCoreState } from '../types';\n\nclass TableLayoutBase extends React.PureComponent<TableLayoutCoreProps, TableLayoutCoreState> {\n  animations: ColumnAnimationMap;\n  savedScrollWidth: { [key: number]: number };\n  savedOffsetWidth = -1;\n  tableRef: React.RefObject<HTMLTableElement>;\n  raf = -1;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      animationState: new Map(),\n    };\n\n    this.animations = new Map();\n    this.savedScrollWidth = {};\n    this.tableRef = React.createRef();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { columns } = this.props;\n    const { columns: prevColumns } = prevProps;\n    const { animationState } = this.state;\n\n    const activeAnimationExists = !shallowEqual(columns, prevColumns)\n      || !!animationState.size || !!this.animations.size;\n\n    // NOTE: animation should be recomputed only when columns are changed or\n    // an active animation is in progress. Otherwise it will be recalculated on\n    // each scroll event.\n    if (activeAnimationExists) {\n      this.processAnimation(prevColumns);\n    }\n  }\n\n  processAnimation(prevColumns) {\n    const { columns } = this.props;\n    const tableWidth = this.getTableWidth(prevColumns, columns);\n\n    this.animations = getAnimations(prevColumns, columns, tableWidth, this.animations);\n\n    cancelAnimationFrame(this.raf);\n    this.raf = requestAnimationFrame(this.processAnimationFrame.bind(this));\n  }\n\n  getTableWidth(prevColumns, columns) {\n    const { offsetWidth, scrollWidth } = this.tableRef.current!;\n    const { animationState } = this.state;\n\n    const widthChanged = this.savedOffsetWidth !== offsetWidth\n      || !this.savedScrollWidth[columns.length];\n    const columnCountChanged = columns.length !== prevColumns.length;\n\n    if (columnCountChanged || (widthChanged && !animationState.size)) {\n      this.savedScrollWidth = {};\n      this.savedScrollWidth[columns.length] = scrollWidth;\n      this.savedOffsetWidth = offsetWidth;\n    }\n\n    return this.savedScrollWidth[columns.length];\n  }\n\n  getColumns() {\n    const { columns } = this.props;\n    const { animationState } = this.state;\n\n    let result = columns;\n\n    const isFixedWidth = columns\n      .filter(column => column.width === undefined || column.width === 'auto')\n      .length === 0;\n    if (isFixedWidth) {\n      // presumably a flex column added here instead of in a getter in the Table plugin\n      // to make sure that all manipulations on taleColumns have already done earlier\n      result = [...result, { key: TABLE_FLEX_TYPE.toString(), type: TABLE_FLEX_TYPE }];\n    }\n\n    if (animationState.size) {\n      result = result\n        .map(column => (animationState.has(column.key)\n          ? { ...column, animationState: animationState.get(column.key) }\n          : column));\n    }\n\n    return result;\n  }\n\n  processAnimationFrame() {\n    const { animationState: animationComponentState } = this.state;\n    this.animations = filterActiveAnimations(this.animations);\n\n    if (!this.animations.size) {\n      if (animationComponentState.size) {\n        this.setState({ animationState: new Map() });\n      }\n      return;\n    }\n\n    const animationState = evalAnimations(this.animations);\n    this.setState({ animationState });\n  }\n\n  render() {\n    const {\n      layoutComponent: Layout,\n      minColumnWidth,\n      ...restProps\n    } = this.props;\n    const columns = this.getColumns();\n    const minWidth = columns\n      .map(column => column.width || (column.type === TABLE_FLEX_TYPE ? 0 : minColumnWidth))\n      .reduce((acc, width) => (acc as number) + (width as number), 0);\n\n    return (\n      <Layout\n        {...restProps}\n        tableRef={this.tableRef}\n        columns={columns}\n        minWidth={minWidth as number}\n        minColumnWidth={minColumnWidth}\n      />\n    );\n  }\n}\n\n/** @internal */\nexport const TableLayout: React.ComponentType<TableLayoutCoreProps> = TableLayoutBase;\n","import * as React from 'react';\nimport { TableColumn } from '@devexpress/dx-grid-core';\n\n/** @internal */\nexport class ColumnGroup extends React.PureComponent<{ columns: TableColumn[] }> {\n  render() {\n    const { columns } = this.props;\n\n    return (\n      <colgroup>\n        {columns.map(({ key, width }) => {\n          const styleWidth = typeof width === 'number' ? `${width}px` : width;\n          return (\n            <col\n              key={key}\n              style={width !== undefined\n                ? { width: styleWidth }\n                : undefined}\n            />\n          );\n        })}\n      </colgroup>\n    );\n  }\n}\n","export const getRowStyle = ({ row }) => (row.height !== undefined\n  ? ({ height: `${row.height}px` })\n  : undefined);\n","import * as React from 'react';\nimport { VirtualRowLayoutProps } from '../../types';\nimport { getRowStyle } from '../../utils/helpers';\n\nexport class VirtualRowLayout extends React.Component<VirtualRowLayoutProps> {\n  shouldComponentUpdate(nextProps) {\n    const { cells: prevCells, row: prevRow } = this.props;\n    const { cells: nextCells, row: nextRow } = nextProps;\n\n    if (prevRow !== nextRow || prevCells.length !== nextCells.length) {\n      return true;\n    }\n\n    const propsAreNotEqual = nextCells.some((nextCell, i) => {\n      const prevCell = prevCells[i];\n      return prevCell.column !== nextCell.column || prevCell.colSpan !== nextCell.colSpan;\n    });\n\n    return propsAreNotEqual;\n  }\n\n  render() {\n    const { row, cells, rowComponent: Row, cellComponent: Cell } = this.props;\n    return (\n      <Row\n        tableRow={row}\n        style={getRowStyle({ row })}\n      >\n        {cells.map(({ column, colSpan }) => {\n          return (\n            <Cell\n              key={column.key}\n              tableRow={row}\n              tableColumn={column}\n              colSpan={colSpan}\n            />\n          );\n        })}\n      </Row>\n    );\n  }\n}\n","import * as React from 'react';\nimport { RefHolder } from '@devexpress/dx-react-core';\nimport { ColumnGroup } from './column-group';\nimport { VirtualTableLayoutBlockProps } from '../../types';\nimport { VirtualRowLayout } from './virtual-row-layout';\n\n// tslint:disable-next-line: max-line-length\nexport class VirtualTableLayoutBlock extends React.PureComponent<VirtualTableLayoutBlockProps, any> {\n  static defaultProps = {\n    blockRefsHandler: () => {},\n    rowRefsHandler: () => {},\n    tableRef: React.createRef(),\n  };\n\n  render() {\n    const {\n      name,\n      tableRef,\n      collapsedGrid,\n      minWidth,\n      blockRefsHandler,\n      rowRefsHandler,\n      tableComponent: Table,\n      bodyComponent: Body,\n      cellComponent,\n      rowComponent,\n      marginBottom,\n    } = this.props;\n\n    return (\n      <RefHolder\n        ref={ref => blockRefsHandler(name, ref)}\n      >\n        <Table\n          tableRef={tableRef}\n          style={{\n            minWidth: `${minWidth}px`,\n            ...marginBottom ? { marginBottom: `${marginBottom}px` } : null,\n          }}\n        >\n          <ColumnGroup\n            columns={collapsedGrid.columns}\n          />\n          <Body>\n            {collapsedGrid.rows.map((visibleRow) => {\n              const { row, cells = [] } = visibleRow;\n\n              return (\n                <RefHolder\n                  key={row.key}\n                  ref={ref => rowRefsHandler(row, ref)}\n                >\n                  <VirtualRowLayout\n                    row={row}\n                    cells={cells}\n                    rowComponent={rowComponent}\n                    cellComponent={cellComponent}\n                  />\n                </RefHolder>\n              );\n            })}\n          </Body>\n        </Table>\n      </RefHolder>\n    );\n  }\n\n}\n","import * as React from 'react';\nimport { MemoizedFunction, memoize } from '@devexpress/dx-core';\nimport {\n  TableColumn, GetColumnWidthFn, getCollapsedGrids,\n  getColumnWidthGetter, TABLE_STUB_TYPE, getViewport, GridViewport,\n} from '@devexpress/dx-grid-core';\nimport { VirtualTableLayoutState, VirtualTableLayoutProps } from '../../types';\nimport { findDOMNode } from 'react-dom';\nimport { VirtualTableLayoutBlock } from './virtual-table-layout-block';\nimport { Sizer } from '@devexpress/dx-react-core';\n\nconst AUTO_HEIGHT = 'auto';\n\nconst defaultProps = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: () => null,\n  headTableComponent: () => null,\n  footerComponent: () => null,\n  footerTableComponent: () => null,\n};\ntype PropsType = VirtualTableLayoutProps & typeof defaultProps;\n\n/** @internal */\n// tslint:disable-next-line: max-line-length\nexport class VirtualTableLayout extends React.PureComponent<PropsType, VirtualTableLayoutState> {\n  static defaultProps = defaultProps;\n  getColumnWidthGetter: MemoizedFunction<[TableColumn[], number, number], GetColumnWidthFn>;\n  rowRefs = new Map();\n  blockRefs = new Map();\n  viewportTop = 0;\n  containerHeight = 600;\n  containerWidth = 800;\n  viewportLeft = 0;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      rowHeights: new Map<any, number>(),\n      height: 0,\n      headerHeight: 0,\n      bodyHeight: 0,\n      footerHeight: 0,\n      visibleRowBoundaries: {},\n    };\n\n    const headerHeight = props.headerRows\n      .reduce((acc, row) => acc + this.getRowHeight(row), 0);\n    const footerHeight = props.footerRows\n      .reduce((acc, row) => acc + this.getRowHeight(row), 0);\n\n    this.state = {\n      headerHeight,\n      footerHeight,\n      ...this.state,\n    };\n\n    this.getColumnWidthGetter = memoize(\n      (tableColumns, tableWidth, minColumnWidth) => (\n        getColumnWidthGetter(tableColumns, tableWidth, minColumnWidth)\n      ),\n    );\n  }\n\n  componentDidMount() {\n    this.storeRowHeights();\n    this.storeBlockHeights();\n  }\n\n  componentDidUpdate(prevProps) {\n    this.storeRowHeights();\n    this.storeBlockHeights();\n\n    const { bodyRows, columns } = this.props;\n\n    // NOTE: the boundaries depend not only on scroll position and container dimensions\n    // but on body rows too. This boundaries update is especially important when\n    // lazy loading is used because by the time that all involved events are handled\n    // no rows are loaded yet.\n    const bodyRowsChanged = prevProps.bodyRows !== bodyRows;\n    // Also it's the only place where we can respond to the column count change\n    const columnCountChanged = prevProps.columns.length !== columns.length;\n\n    if (bodyRowsChanged || columnCountChanged) {\n      this.updateViewport();\n    }\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { rowHeights: prevRowHeight } = prevState;\n    const rowHeights = [...nextProps.headerRows, ...nextProps.bodyRows, ...nextProps.footerRows]\n      .reduce(\n        (acc, row) => {\n          const rowHeight = prevRowHeight.get(row.key);\n          if (rowHeight !== undefined) {\n            acc.set(row.key, rowHeight);\n          }\n          return acc;\n        },\n        new Map(),\n      );\n    return { rowHeights };\n  }\n\n  getRowHeight = (row) => {\n    const { rowHeights } = this.state;\n    const { estimatedRowHeight } = this.props;\n    if (row) {\n      const storedHeight = rowHeights.get(row.key);\n      if (storedHeight !== undefined) return storedHeight;\n      if (row.height) return row.height;\n    }\n    return estimatedRowHeight;\n  }\n\n  registerRowRef = (row, ref) => {\n    if (ref === null) {\n      this.rowRefs.delete(row);\n    } else {\n      this.rowRefs.set(row, ref);\n    }\n  }\n\n  registerBlockRef = (name, ref) => {\n    if (ref === null) {\n      this.blockRefs.delete(name);\n    } else {\n      this.blockRefs.set(name, ref);\n    }\n  }\n\n  storeRowHeights() {\n    const rowsWithChangedHeights = Array.from(this.rowRefs.entries())\n      .map(([row, ref]) => [row, findDOMNode(ref)])\n      .filter(([, node]) => !!node)\n      .map(([row, node]) => [row, node.getBoundingClientRect().height])\n      .filter(([row]) => row.type !== TABLE_STUB_TYPE)\n      .filter(([row, height]) => height !== this.getRowHeight(row));\n\n    if (rowsWithChangedHeights.length) {\n      const { rowHeights } = this.state;\n      rowsWithChangedHeights\n        .forEach(([row, height]) => rowHeights.set(row.key, height));\n\n      this.setState({\n        rowHeights,\n      });\n    }\n  }\n\n  storeBlockHeights() {\n    const getBlockHeight = blockName => (this.blockRefs.get(blockName)\n      ? (findDOMNode(this.blockRefs.get(blockName)) as HTMLElement).getBoundingClientRect().height\n      : 0\n    );\n    const headerHeight = getBlockHeight('header');\n    const bodyHeight = getBlockHeight('body');\n    const footerHeight = getBlockHeight('footer');\n\n    const {\n      headerHeight: prevHeaderHeight,\n      bodyHeight: prevBodyHeight,\n      footerHeight: prevFooterHeight,\n    } = this.state;\n\n    if (prevHeaderHeight !== headerHeight\n      || prevBodyHeight !== bodyHeight\n      || prevFooterHeight !== footerHeight) {\n      this.setState({\n        headerHeight,\n        bodyHeight,\n        footerHeight,\n      });\n    }\n  }\n\n  onScroll = (e) => {\n    const node = e.target;\n\n    if (this.shouldSkipScrollEvent(e)) {\n      return;\n    }\n\n    const { scrollTop: viewportTop, scrollLeft: viewportLeft } = node;\n\n    this.viewportTop = viewportTop;\n    this.viewportLeft = viewportLeft;\n\n    this.updateViewport();\n  }\n\n  handleContainerSizeChange = ({ width, height }) => {\n    this.containerHeight = height;\n    this.containerWidth = width;\n\n    this.updateViewport();\n  }\n\n  shouldSkipScrollEvent(e) {\n    const node = e.target;\n\n    // NOTE: prevent nested scroll to update viewport\n    if (node !== e.currentTarget) {\n      return true;\n    }\n    // NOTE: normalize position:\n    // in Firefox and Chrome (zoom > 100%) when scrolled to the bottom\n    // in Edge when scrolled to the right edge\n    const correction = 1;\n    const nodeHorizontalOffset = parseInt(node.scrollLeft + node.clientWidth, 10) - correction;\n    const nodeVerticalOffset = parseInt(node.scrollTop + node.clientHeight, 10) - correction;\n    // NOTE: prevent iOS to flicker in bounces and correct rendering on high dpi screens\n    if (node.scrollTop < 0\n      || node.scrollLeft < 0\n      || nodeHorizontalOffset > Math.max(node.scrollWidth, node.clientWidth)\n      || nodeVerticalOffset > Math.max(node.scrollHeight, node.clientHeight)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  updateViewport() {\n    const { viewport, setViewport } = this.props;\n    const newViewport = this.calculateViewport();\n\n    if (viewport !== newViewport) {\n      setViewport(newViewport);\n    }\n  }\n\n  calculateViewport() {\n    const { state, viewportTop, viewportLeft, containerHeight, containerWidth } = this;\n    const {\n      loadedRowsStart,\n      bodyRows,\n      headerRows,\n      footerRows,\n      estimatedRowHeight,\n      columns,\n      minColumnWidth,\n      isDataRemote,\n      viewport,\n    } = this.props;\n    const getColumnWidth = this.getColumnWidthGetter(columns, containerWidth, minColumnWidth!);\n\n    return getViewport(\n      { ...state, viewportTop, viewportLeft, containerHeight, containerWidth },\n      { loadedRowsStart, columns, bodyRows, headerRows, footerRows, isDataRemote, viewport },\n      estimatedRowHeight, this.getRowHeight, getColumnWidth,\n    );\n  }\n\n  getCollapsedGrids(viewport: GridViewport) {\n    const { containerWidth, viewportLeft } = this;\n    const {\n      headerRows, bodyRows, footerRows,\n      columns, loadedRowsStart, totalRowCount,\n      getCellColSpan, minColumnWidth,\n    } = this.props;\n    const getColumnWidth = this.getColumnWidthGetter(columns, containerWidth, minColumnWidth!);\n\n    return getCollapsedGrids({\n      headerRows,\n      bodyRows,\n      footerRows,\n      columns,\n      loadedRowsStart,\n      totalRowCount,\n      getCellColSpan,\n      viewportLeft,\n      containerWidth,\n      viewport,\n      getRowHeight: this.getRowHeight,\n      getColumnWidth,\n    });\n  }\n\n  render() {\n    const {\n      containerComponent: Container,\n      headTableComponent: HeadTable,\n      footerTableComponent: FootTable,\n      tableComponent: Table,\n      headComponent: Head,\n      bodyComponent: Body,\n      footerComponent: Footer,\n      tableRef,\n      height,\n      headerRows,\n      footerRows,\n      minColumnWidth,\n      minWidth,\n      cellComponent,\n      rowComponent,\n      viewport,\n      scrollTop,\n    } = this.props;\n    const {\n      headerHeight,\n      bodyHeight,\n      footerHeight,\n    } = this.state;\n    const { containerHeight } = this;\n\n    const collapsedGrids = this.getCollapsedGrids(viewport);\n    const commonProps = {\n      cellComponent,\n      rowComponent,\n      minColumnWidth,\n      minWidth,\n      blockRefsHandler: this.registerBlockRef,\n      rowRefsHandler: this.registerRowRef,\n    };\n    const sizerHeight = height === AUTO_HEIGHT ? null : height;\n\n    return (\n      <Sizer\n        onSizeChange={this.handleContainerSizeChange}\n        containerComponent={Container}\n        style={{ height: sizerHeight }}\n        onScroll={this.onScroll}\n        scrollTop={scrollTop}\n      >\n        {\n          (!!headerRows.length) && (\n            <VirtualTableLayoutBlock\n              {...commonProps}\n              name=\"header\"\n              collapsedGrid={collapsedGrids.headerGrid}\n              tableComponent={HeadTable}\n              bodyComponent={Head}\n            />\n          )\n        }\n        <VirtualTableLayoutBlock\n          {...commonProps}\n          name=\"body\"\n          collapsedGrid={collapsedGrids.bodyGrid}\n          tableComponent={Table}\n          bodyComponent={Body}\n          tableRef={tableRef}\n          marginBottom={Math.max(0, containerHeight - headerHeight - bodyHeight - footerHeight)}\n        />\n        {\n          (!!footerRows.length) && (\n            <VirtualTableLayoutBlock\n              {...commonProps}\n              name=\"footer\"\n              collapsedGrid={collapsedGrids.footerGrid}\n              tableComponent={FootTable}\n              bodyComponent={Footer}\n            />\n          )\n        }\n      </Sizer>\n    );\n  }\n}\n","import * as React from 'react';\nimport { RowLayoutProps } from '../../types';\nimport { getRowStyle } from '../../utils/helpers';\n\nconst getColumnStyle = ({ column }) => column.animationState;\n\n/** @internal */\nexport const RowLayout: React.SFC<RowLayoutProps> = React.memo((props) => {\n  const {\n    row,\n    columns,\n    rowComponent: Row,\n    cellComponent: Cell,\n    getCellColSpan,\n  } = props;\n\n  const getColSpan = React.useCallback(\n    (tableRow, tableColumn) => getCellColSpan!({ tableRow, tableColumn, tableColumns: columns }),\n    [columns, getCellColSpan],\n  );\n\n  return (\n    <Row\n      tableRow={row}\n      style={getRowStyle({ row })}\n    >\n      {\n        columns\n          .map(column => (\n            <Cell\n              key={column.key}\n              tableRow={row}\n              tableColumn={column}\n              style={getColumnStyle({ column })}\n              colSpan={getColSpan(row, column)}\n            />\n          ))\n      }\n    </Row>\n  );\n});\n","import * as React from 'react';\nimport { RowLayout } from './row-layout';\nimport { RowsBlockLayoutProps } from '../../types';\n\n/** @internal */\nexport class RowsBlockLayout extends React.PureComponent<RowsBlockLayoutProps> {\n  render() {\n    const {\n      rows,\n      columns,\n      blockComponent: Block,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n    } = this.props;\n\n    return (\n      <Block>\n        {\n          rows\n            .map(row => (\n              <RowLayout\n                key={row.key}\n                row={row}\n                columns={columns}\n                rowComponent={rowComponent}\n                cellComponent={cellComponent}\n                getCellColSpan={getCellColSpan}\n              />\n            ))\n        }\n      </Block>\n    );\n  }\n}\n","import * as React from 'react';\nimport { ColumnGroup } from './column-group';\nimport { RowsBlockLayout } from './rows-block-layout';\nimport { TableLayoutProps } from '../../types';\n\nconst defaultProps = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: () => null,\n  footerComponent: () => null,\n};\n\n/** @internal */\nexport class StaticTableLayout extends React.PureComponent<TableLayoutProps & typeof defaultProps> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      headerRows,\n      bodyRows,\n      footerRows,\n      columns,\n      minWidth,\n      containerComponent: Container,\n      tableComponent: Table,\n      headComponent,\n      bodyComponent,\n      footerComponent,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n      tableRef,\n    } = this.props;\n\n    const commonProps = {\n      columns,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n    };\n\n    return (\n      <Container>\n        <Table\n          tableRef={tableRef}\n          style={{ minWidth: `${minWidth}px` }}\n        >\n          <ColumnGroup columns={columns} />\n          {!!headerRows.length && (\n            <RowsBlockLayout\n              rows={headerRows}\n              blockComponent={headComponent}\n              {...commonProps}\n            />\n          )}\n          <RowsBlockLayout\n            rows={bodyRows}\n            blockComponent={bodyComponent}\n            {...commonProps}\n          />\n          {!!footerRows.length && (\n            <RowsBlockLayout\n              rows={footerRows}\n              blockComponent={footerComponent}\n              {...commonProps}\n            />\n          )}\n        </Table>\n      </Container>\n    );\n  }\n}\n","import * as React from 'react';\nimport {\n  connectProps, Plugin, Template, Action,\n  PluginComponents,\n  TemplateConnector,\n  TemplatePlaceholder,\n  Getter,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  isStubTableCell, checkColumnWidths, getScrollTop,\n  TOP_POSITION, BOTTOM_POSITION, getTopRowId,\n} from '@devexpress/dx-grid-core';\nimport {\n  VirtualTableProps, VirtualTableLayoutProps,\n  Table as TableNS,\n  TableLayoutProps,\n  VirtualTablePluginState,\n} from '../../types';\n\n/** @internal */\nexport const emptyViewport = {\n  columns: [[0, 0]],\n  rows: [0, 0],\n  headerRows: [0, 0],\n  footerRows: [0, 0],\n  top: 0,\n  left: 0,\n  width: 800,\n  height: 600,\n};\n\nconst tableColumnsComputed = (\n  { tableColumns }: Getters,\n) => {\n  return checkColumnWidths(tableColumns);\n};\n\n/** @internal */\nexport const makeVirtualTable: (...args: any) => any = (Table, {\n  VirtualLayout,\n  FixedHeader,\n  FixedFooter,\n  SkeletonCell,\n  defaultEstimatedRowHeight,\n  defaultHeight,\n}) => {\n  class VirtualTable extends React.PureComponent<VirtualTableProps, VirtualTablePluginState> {\n    static defaultProps = {\n      estimatedRowHeight: defaultEstimatedRowHeight,\n      height: defaultHeight,\n      headTableComponent: FixedHeader,\n      footerTableComponent: FixedFooter,\n      skeletonCellComponent: SkeletonCell,\n      onTopRowChange: () => {},\n    };\n    static FixedHeader: React.ComponentType;\n    static FixedFooter: React.ComponentType;\n    static SkeletonCell: React.ComponentType;\n    static TOP_POSITION = TOP_POSITION;\n    static BOTTOM_POSITION = BOTTOM_POSITION;\n\n    layoutRenderComponent: React.ComponentType<VirtualTableLayoutProps> & { update(): void; };\n    scrollToRow: (prop: number | string | symbol) => void;\n\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        viewport: emptyViewport,\n        nextRowId: undefined,\n      };\n\n      this.layoutRenderComponent = connectProps(VirtualLayout, () => {\n        const {\n          headTableComponent,\n          footerTableComponent,\n        } = this.props;\n\n        return {\n          headTableComponent,\n          footerTableComponent,\n        };\n      });\n      this.scrollToRow = nextRowId => this.setState({ nextRowId });\n    }\n\n    setViewport = (viewport) => {\n      this.setState({ viewport });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n      const { nextRowId: prevId } = prevState;\n      const { nextRowId: currentId } = this.state;\n      const areIdsEqual = currentId !== undefined && currentId === prevId;\n\n      this.layoutRenderComponent.update();\n      if (areIdsEqual) {\n        this.setState({ nextRowId: undefined });\n      }\n    }\n\n    render() {\n      const {\n        height,\n        estimatedRowHeight,\n        skeletonCellComponent: SkeletonStubCell,\n        children,\n        ...restProps\n      } = this.props;\n      const {\n        viewport: stateViewport,\n        nextRowId: nextId,\n      } = this.state;\n\n      return (\n        <Plugin name=\"VirtualTable\">\n          <Table layoutComponent={this.layoutRenderComponent} {...restProps} />\n\n          {/* prevents breaking change */}\n          <Action name=\"setViewport\" action={this.setViewport} />\n          <Action name=\"scrollToRow\" action={this.scrollToRow} />\n          <Getter name=\"viewport\" value={stateViewport} />\n          <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n\n          <Template name=\"tableLayout\">\n            {(params: TableLayoutProps) => (\n              <TemplateConnector>\n                {(\n                  { availableRowCount, loadedRowsStart, tableBodyRows, isDataRemote, viewport },\n                  { setViewport },\n                ) => {\n\n                  const { onTopRowChange } = this.props;\n                  const rowId = getTopRowId(viewport, tableBodyRows, isDataRemote);\n\n                  onTopRowChange(rowId);\n\n                  const totalRowCount = availableRowCount || tableBodyRows.length;\n                  const scrollTop = getScrollTop(\n                    tableBodyRows,\n                    totalRowCount,\n                    nextId,\n                    estimatedRowHeight,\n                    isDataRemote,\n                  );\n\n                  return (\n                    <TemplatePlaceholder\n                      params={{\n                        ...params,\n                        totalRowCount,\n                        loadedRowsStart,\n                        isDataRemote,\n                        height,\n                        estimatedRowHeight,\n                        setViewport,\n                        viewport,\n                        scrollTop,\n                      }}\n                    />\n                  );\n                }}\n              </TemplateConnector>\n            )}\n          </Template>\n\n          <Template\n            name=\"tableCell\"\n            predicate={({ tableRow }: any) => !!isStubTableCell(tableRow)}\n          >\n            {(params: TableNS.CellProps) => (\n              <TemplateConnector>\n                {({ isDataRemote }) => (\n                  isDataRemote ? <SkeletonStubCell {...params} /> : <TemplatePlaceholder />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        </Plugin>\n      );\n    }\n  }\n\n  Object.values(Table.components as PluginComponents).forEach((name) => {\n    VirtualTable[name] = Table[name];\n  });\n\n  VirtualTable.FixedHeader = FixedHeader;\n  VirtualTable.FixedFooter = FixedFooter;\n  VirtualTable.SkeletonCell = SkeletonCell;\n\n  return VirtualTable;\n};\n","import { RowCache } from '../types';\n\nclass Node {\n  start: number;\n  rows: ReadonlyArray<any>;\n  prev: Node | null = null;\n  next: Node | null = null;\n\n  constructor(start: number, rows: ReadonlyArray<any>) {\n    this.start = start;\n    this.rows = rows;\n  }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nclass LRUCache {\n  pageSize: number;\n  capacity: number;\n  head!: Node;\n  tail!: Node;\n  pages = new Map<number, Node>();\n\n  constructor(pageSize: number, capacity = Number.POSITIVE_INFINITY) {\n    this.pageSize = pageSize;\n    this.capacity = capacity;\n    this.initList();\n  }\n\n  initList() {\n    this.head = new Node(-1, []);\n    this.tail = new Node(-1, []);\n    this.head.next = this.tail;\n    this.tail.prev = this.head;\n  }\n\n  addPage(pageStart: number, rows: ReadonlyArray<any>) {\n    if (this.pages.has(pageStart)) {\n      this.removePage(pageStart);\n    }\n\n    const node = new Node(pageStart, rows);\n    const last = this.tail.prev!;\n    last.next = node;\n    node.next = this.tail;\n    node.prev = last;\n    this.tail.prev = node;\n    this.pages.set(pageStart, node);\n\n    if (this.pages.size > this.capacity) {\n      this.removePage(this.head.next!.start);\n    }\n  }\n\n  removePage(start: number) {\n    const node = this.pages.get(start)!;\n    node.prev!.next = node.next;\n    node.next!.prev = node.prev;\n\n    this.pages.delete(start);\n  }\n\n  getPage(pageStart: number) {\n    if (!this.pages.has(pageStart)) {\n      return null;\n    }\n\n    const { rows } = this.pages.get(pageStart)!;\n    this.removePage(pageStart);\n    this.addPage(pageStart, rows);\n\n    return rows;\n  }\n\n  clear() {\n    this.pages.clear();\n    this.initList();\n  }\n}\n\nexport const createRowCache = (pageSize = 100, capacity = Number.POSITIVE_INFINITY): RowCache => {\n  const cache = new LRUCache(pageSize, capacity / pageSize);\n\n  return {\n    getRows: (skip: number, take: number) => {\n      let result: any[] = [];\n      const pageCount = Math.ceil(take / pageSize);\n      for (let i = 0; i < pageCount; i += 1) {\n        const pageStart = skip + i * pageSize;\n        const chunk = cache.getPage(pageStart);\n\n        if (chunk !== null) {\n          result = result.concat(chunk);\n        }\n\n        // yield if last page is incomplete\n        if (chunk === null || (i !== pageCount - 1 && chunk.length !== pageSize)) {\n          return result;\n        }\n      }\n      return result;\n    },\n    setRows: (skip: number, rows: ReadonlyArray<any>) => {\n      const pageCount = Math.ceil(rows.length / pageSize);\n      for (let i = 0; i < pageCount; i += 1) {\n        const pageStart = i * pageSize;\n        const rowsChunk = rows.slice(pageStart, pageStart + pageSize);\n\n        // put incomplete page only if it is last one\n        if (rowsChunk.length === pageSize || i === pageCount - 1) {\n          cache.addPage(pageStart + skip, rowsChunk);\n        }\n      }\n    },\n    invalidate: () => cache.clear(),\n  };\n};\n","import * as React from 'react';\nimport { TableGroupRow } from '../../types';\n\nexport const InlineSummaryItem: React.SFC<TableGroupRow.InlineSummaryItemProps> = React.memo(({\n  summary: { messageKey, columnTitle, component: SummaryComponent },\n  getMessage,\n}) => (\n  <React.Fragment>\n    {getMessage(messageKey, { columnTitle })}\n    <SummaryComponent />\n  </React.Fragment>\n));\n"]},"metadata":{},"sourceType":"module"}