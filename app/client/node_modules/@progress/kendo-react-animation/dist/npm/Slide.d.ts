import * as React from 'react';
import * as PropTypes from 'prop-types';
import { AnimationInterface } from './AnimationInterface';
/**
 * Specifies the direction of the Slide Animation ([see example]({% slug direction_animation %}#toc-slide)).
 *
 * The supported directions are:
 * * (Default) `down`&mdash;On showing, slides the content from top to bottom, and vice-versa.
 * * `up`&mdash;On showing, slides the content from bottom to top, and vice-versa.
 * * `left`&mdash;On showing, slides the content from right to left, and vice-versa.
 * * `right`&mdash;On showing, slides the content from left to right, and vice-versa.
 */
export declare type SlideDirection = 'up' | 'down' | 'left' | 'right';
/**
 * Represent the props of the [KendoReact Slide Animation component]({% slug animationtypes_animation %}#toc-slide).
 *
 * @example
 * ```html-preview
 * <style>
 * .content {
 *  width: 100px;
 *  padding: 10px;
 *  color: #787878;
 *  background-color: #fcf7f8;
 *  font-size: 13px;
 *  font-family: Helvetica, Arial, sans-serif;
 *  letter-spacing: 1px;
 *  text-align: center;
 *  border: 1px solid rgba(0,0,0,.05);
 * }
 * </style>
 * ```
 * ```jsx
 * class App extends React.Component {
 *     constructor(props) {
 *         super(props);
 *
 *         this.state = { show: false, direction: "down" };
 *     }
 *
 *     onClick = () => {
 *         this.setState({
 *             show: !this.state.show
 *         });
 *     }
 *     onChange = (e) => {
 *         this.setState({
 *             direction: e.target.value
 *         })
 *     }
 *
 *     render() {
 *         const { show, direction } = this.state;
 *
 *         const children = show ? (<div className="content">CONTENT</div>) : null;
 *
 *         return (
 *             <div className="row">
 *                 <div className="col-md-6">
 *                     <dl>
 *                         <dt>
 *                             Slide: {direction}
 *                         </dt>
 *                         <dd>
 *                             <button className="k-button" onClick={this.onClick}>Animate</button>
 *                         </dd>
 *                     </dl>
 *
 *                     <Slide direction={direction}>
 *                         {children}
 *                     </Slide>
 *                 </div>
 *                 <div className="col-md-6">
 *                     <dl>
 *                         <dt>
 *                             Direction:
 *                         </dt>
 *                         <dd>
 *                             <div className="example-config">
 *                                 <label>
 *                                     <input type="radio" name="direction" value="up" defaultChecked={this.state.direction === 'up'} onClick={this.onChange}/>
 *                                     &nbsp;Up
 *                                 </label>
 *                                 <br />
 *                                 <label>
 *                                     <input type="radio" name="direction" value="down" defaultChecked={this.state.direction === 'down'} onClick={this.onChange}/>
 *                                     &nbsp;Down
 *                                 </label>
 *                                 <br />
 *                                 <label>
 *                                     <input type="radio" name="direction" value="left" defaultChecked={this.state.direction === 'left'} onClick={this.onChange}/>
 *                                     &nbsp;Left
 *                                 </label>
 *                                 <br />
 *                                 <label>
 *                                     <input type="radio" name="direction" value="right" defaultChecked={this.state.direction === 'right'} onClick={this.onChange}/>
 *                                     &nbsp;Right
 *                                 </label>
 *                             </div>
 *                         </dd>
 *                     </dl>
 *                 </div>
 *             </div>
 *         );
 *     }
 * }
 *
 * ReactDOM.render(
 *     <App />,
 *     document.querySelector('my-app')
 * );
 * ```
 */
export interface SlideProps extends AnimationInterface {
    /**
     * After the element reaches its exit state, it is no longer available in the DOM. If a DOM operation is required, access it trough the `childFactory` function.
     */
    childFactory?: any;
    /**
     * Specifies the CSS class names which are set to the Animation.
     */
    className?: string;
    /**
     * Specifies the direction of the Slide Animation. Defaults to `down`.
     */
    direction?: SlideDirection;
    /**
     * Specifies the node type of the parent Animation. Defaults to `div`.
     */
    component?: string;
    /**
     * Specifies the id of the Animation.
     */
    id?: string;
    /**
     * Specifies the style of the parent Animation.
     */
    style?: any;
}
export declare class Slide extends React.Component<SlideProps, {}> {
    /**
     * @hidden
     */
    static propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        childFactory: PropTypes.Requireable<any>;
        className: PropTypes.Requireable<string>;
        direction: PropTypes.Requireable<string>;
        component: PropTypes.Requireable<string>;
        id: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<any>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        appear: boolean;
        enter: boolean;
        exit: boolean;
        transitionEnterDuration: number;
        transitionExitDuration: number;
        direction: string;
    };
    /**
     * @hidden
     */
    render(): JSX.Element;
}
