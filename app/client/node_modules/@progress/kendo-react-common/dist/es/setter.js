import { fieldList } from './fieldList';
var setterCache = {};
setterCache.undefined = function (obj) { return obj; };
var defaultValue = function (nextField, options) {
    return options && options.arrays && !isNaN(Number(nextField)) ? [] : {};
};
/**
 * Can be used for setting value to object using field path. For example `users[index].name`.
 * @example
 * ```jsx-no-run
 * const values = {users:[{lastName: 'Doe'}]};
 * const firstUserFirstName = setter('user[0].firstName');
 *
 * firstUserFirstName(values, 'John');
 *
 * console.log(values)
 *
 * // result: {users:[{firstName: 'John', lastName: 'Doe'}]}
 * ```
 */
export function setter(field) {
    if (setterCache[field]) {
        return setterCache[field];
    }
    var fields = fieldList(field);
    setterCache[field] = function (obj, value, options) {
        var root = obj;
        var depth = fields.length - 1;
        for (var idx = 0; idx < depth && root; idx++) {
            root = root[fields[idx]] = root[fields[idx]] || defaultValue(fields[idx + 1], options);
        }
        root[fields[depth]] = value;
    };
    return setterCache[field];
}
//# sourceMappingURL=setter.js.map