import * as React from 'react';
import * as PropTypes from 'prop-types';
/**
 * @hidden
 */
export interface BaseDraggableEvent<T extends React.Component> {
    target: T;
}
/**
 * @hidden
 */
export interface DraggablePressEvent extends BaseDraggableEvent<Draggable> {
    event: any;
    element: HTMLElement;
}
/**
 * @hidden
 */
export interface DraggableDragEvent extends BaseDraggableEvent<Draggable> {
    event: any;
    element: HTMLElement;
}
/**
 * @hidden
 */
export interface DraggableReleaseEvent extends BaseDraggableEvent<Draggable> {
    event: any;
}
/**
 * @hidden
 */
export interface DraggableProps {
    onPress?: (event: DraggablePressEvent) => void;
    onDrag?: (event: DraggableDragEvent) => void;
    onRelease?: (event: DraggableReleaseEvent) => void;
}
/**
 * @hidden
 */
export declare class Draggable extends React.Component<DraggableProps, {}> {
    static propTypes: {
        children: PropTypes.Validator<PropTypes.ReactElementLike>;
    };
    /**
     * @hidden
     */
    element: HTMLElement | null;
    private draggable;
    componentDidMount(): void;
    componentWillUnmount(): void;
    assingRef: (element: any) => void;
    render(): React.FunctionComponentElement<{
        ref: (element: any) => void;
    }>;
}
