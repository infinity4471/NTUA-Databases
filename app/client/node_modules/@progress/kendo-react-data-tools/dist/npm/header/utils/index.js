"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ColumnProps_1 = require("../ColumnProps");
function nextColumn(columns, current) {
    var currentDepth = columns[current].depth;
    var next = null;
    for (var index = current + 1; index < columns.length; index++) {
        if (columns[index].depth === currentDepth) {
            next = columns[index];
            break;
        }
    }
    return next;
}
/**
 * @hidden
 */
function mapColumns(columns) {
    var columnsMap = [[]];
    var maxDepth = 0;
    for (var q = columns.length - 1; q >= 0; q--) {
        maxDepth = Math.max(maxDepth, columns[q].depth);
        columns[q].colSpan = columns[q].colSpan || 1;
        if (columns[q].parentIndex !== -1) {
            columns[columns[q].parentIndex].colSpan =
                (columns[columns[q].parentIndex].colSpan || 0) + columns[q].colSpan;
        }
    }
    var rowSpan = 1;
    columns.forEach(function (column, i) {
        columnsMap[column.depth] = columnsMap[column.depth] || [];
        var needKFirst = false;
        if (columnsMap[column.depth].length === 0) {
            if (rowSpan <= 1) {
                rowSpan = 1 + (column.children.length > 0 ? 0 : maxDepth - column.depth);
            }
            else {
                rowSpan--;
                needKFirst = true;
            }
        }
        column.rowSpan = 1 + (column.children.length > 0 ? 0 : maxDepth - column.depth);
        column.kFirst = needKFirst;
        column.index = columnsMap[column.depth].length;
        columnsMap[column.depth].push(i);
    });
    var stickyLeftWidth = new Array(columnsMap.length).fill(0);
    var width = 0;
    columns.forEach(function (column) {
        if (column.locked) {
            column.left = stickyLeftWidth[column.depth];
            width = column.width ? parseFloat(column.width.toString()) : 0;
            if (column.children.length === 0) {
                for (var i = column.depth; i < stickyLeftWidth.length; i++) {
                    stickyLeftWidth[i] += width;
                }
            }
            else {
                stickyLeftWidth[column.depth] += width;
            }
        }
    });
    var stickyRightWidth = new Array(columnsMap.length).fill(0);
    for (var i = columns.length - 1; i >= 0; i--) {
        var column = columns[i];
        if (column.locked) {
            column.right = stickyRightWidth[column.depth];
            width = column.width ? parseFloat(column.width.toString()) : 0;
            if (column.children.length === 0) {
                for (var j = column.depth; j < stickyRightWidth.length; j++) {
                    stickyRightWidth[j] += width;
                }
            }
            else {
                stickyRightWidth[column.depth] += width;
            }
            var next = nextColumn(columns, i);
            column.rightBorder = !(next && next.locked);
        }
    }
    return columnsMap;
}
exports.mapColumns = mapColumns;
/**
 * @hidden
 */
function readColumns(elements, depth) {
    if (depth === void 0) { depth = 0; }
    var columns = [];
    if (!elements || !elements.length) {
        return [];
    }
    elements.forEach(function (columnProps) {
        var children = readColumns(columnProps.children || [], depth + 1);
        columns.push(Object.assign({}, { depth: depth }, ColumnProps_1.ColumnDefaultProps, columnProps, {
            declarationIndex: columns.length,
            children: children,
            rowSpan: 0,
            colSpan: 0
        }));
    });
    var comparator = function (a, b) {
        return a.orderIndex === b.orderIndex ?
            a.declarationIndex - b.declarationIndex :
            ((a.orderIndex || 0) - (b.orderIndex || 0));
    };
    columns.sort(comparator);
    if (depth === 0) {
        var ret_1 = [];
        var flat_1 = function (cols, pIndex) {
            return cols.forEach(function (c) {
                c.parentIndex = pIndex;
                flat_1(c.children, ret_1.push(c) - 1);
            });
        };
        flat_1(columns, -1);
        return ret_1;
    }
    return columns;
}
exports.readColumns = readColumns;
/**
 * @hidden
 */
function isRtl(element) {
    return Boolean(element && getComputedStyle(element).direction === 'rtl');
}
exports.isRtl = isRtl;
/**
 * @hidden
 */
function getIndex(event, parent) {
    if (!parent || !event || !event.originalEvent) {
        return -1;
    }
    var target = document ? document.elementFromPoint(event.clientX, event.originalEvent.clientY) : null;
    while (target && target.parentElement !== parent) {
        target = target.parentElement;
    }
    var children = parent.children;
    for (var i = 0; i < children.length; i++) {
        if (children[i] === target) {
            return i;
        }
    }
    return -1;
}
exports.getIndex = getIndex;
//# sourceMappingURL=index.js.map