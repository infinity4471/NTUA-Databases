import * as React from 'react';
import * as PropTypes from 'prop-types';
import { CompositeFilterDescriptor } from '@progress/kendo-data-query';
import { BaseEvent } from '@progress/kendo-react-common';
import { FieldSettings } from './FieldSettings';
/**
 * The FilterChangeEvent object.
 */
export interface FilterChangeEvent extends BaseEvent<Filter> {
    /**
     * The changed composite filter descriptor.
     */
    filter: CompositeFilterDescriptor;
}
/**
 * The props of the Filter component.
 */
export interface FilterProps {
    /**
     * Sets additional classes to the Filter.
     */
    className?: string;
    /**
     * The styles that are applied to the Filter.
     */
    style?: React.CSSProperties;
    /**
     * The fields settings of the Filter.
     */
    fields: Array<FieldSettings>;
    /**
     * The composite filter descriptor value.
     */
    value: CompositeFilterDescriptor;
    /**
     * The Filter onChange event.
     */
    onChange: (event: FilterChangeEvent) => void;
    /**
     * The initial composite filter descriptor which will be used when a new group is created.
     */
    defaultGroupFilter?: CompositeFilterDescriptor;
}
/**
 * Represents the [KendoReact Filter component]({% slug overview_filter %}).
 */
export declare class Filter extends React.Component<FilterProps> {
    /**
     * @hidden
     */
    static propTypes: {
        className: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        fields: (props: FilterProps, propName: string) => Error;
        value: PropTypes.Validator<object>;
        onChange: PropTypes.Validator<(...args: any[]) => any>;
    };
    /**
     * @hidden
     */
    render(): JSX.Element;
    private onFilterChange;
    private onGroupRemove;
}
