"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var kendo_data_query_1 = require("@progress/kendo-data-query");
var kendo_react_buttons_1 = require("@progress/kendo-react-buttons");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var Expression_1 = require("./Expression");
var operators_1 = require("./operators");
var messages_1 = require("../messages");
/**
 * @hidden
 */
var Group = /** @class */ (function (_super) {
    __extends(Group, _super);
    function Group() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onGroupRemove = function () {
            _this.props.onRemove.call(undefined, {
                filter: _this.props.filter
            });
        };
        _this.onAddExpression = function () {
            var prevFilter = _this.props.filter;
            var firstField = _this.props.fields[0];
            var newExpression = { field: firstField.name, operator: firstField.operators[0].operator };
            newExpression.value = operators_1.stringOperator(newExpression.operator) ? '' : null;
            _this.props.onChange.call(undefined, {
                nextFilter: __assign({}, prevFilter, { filters: prevFilter.filters.concat([newExpression]) }),
                prevFilter: prevFilter
            });
        };
        _this.onAddGroup = function () {
            var prevFilter = _this.props.filter;
            _this.props.onChange.call(undefined, {
                nextFilter: __assign({}, prevFilter, { filters: prevFilter.filters.concat([__assign({}, _this.props.defaultGroupFilter)]) }),
                prevFilter: prevFilter
            });
        };
        _this.onLogicAnd = function () { return _this.changeLogic('and'); };
        _this.onLogicOr = function () { return _this.changeLogic('or'); };
        _this.changeLogic = function (logic) {
            var prevFilter = _this.props.filter;
            if (prevFilter.logic !== logic) {
                _this.props.onChange.call(undefined, {
                    nextFilter: __assign({}, prevFilter, { logic: logic }),
                    prevFilter: prevFilter
                });
            }
        };
        _this.replaceFilter = function (prevFilter, nextFilter) {
            var filter = _this.props.filter;
            var filters = filter.filters.map(function (f) { return f === prevFilter ? nextFilter : f; });
            return __assign({}, filter, { filters: filters });
        };
        _this.onChange = function (event) {
            var nextFilter = _this.replaceFilter(event.prevFilter, event.nextFilter);
            var changeEvent = {
                nextFilter: nextFilter,
                prevFilter: _this.props.filter,
                syntheticEvent: event.syntheticEvent,
                nativeEvent: event.nativeEvent,
                target: _this
            };
            _this.props.onChange.call(undefined, changeEvent);
        };
        _this.onRemove = function (event) {
            var prevFilter = _this.props.filter;
            var filters = prevFilter.filters.filter(function (f) { return f !== event.filter; });
            var changeEvent = {
                nextFilter: __assign({}, prevFilter, { filters: filters }),
                prevFilter: prevFilter,
                syntheticEvent: event.syntheticEvent,
                nativeEvent: event.nativeEvent,
                target: _this
            };
            _this.props.onChange.call(undefined, changeEvent);
        };
        return _this;
    }
    Group.prototype.render = function () {
        var _this = this;
        var _a = this.props, fields = _a.fields, filter = _a.filter;
        var locService = kendo_react_intl_1.provideLocalizationService(this);
        return (React.createElement(React.Fragment, null,
            React.createElement("div", { className: "k-filter-toolbar" },
                React.createElement(kendo_react_buttons_1.Toolbar, { keyboardNavigation: false },
                    React.createElement(kendo_react_buttons_1.ToolbarItem, null,
                        React.createElement(kendo_react_buttons_1.ButtonGroup, null,
                            React.createElement(kendo_react_buttons_1.Button, { togglable: true, onClick: this.onLogicAnd, selected: filter.logic === 'and' }, locService.toLanguageString(messages_1.filterAndLogic, messages_1.messages[messages_1.filterAndLogic])),
                            React.createElement(kendo_react_buttons_1.Button, { togglable: true, onClick: this.onLogicOr, selected: filter.logic === 'or' }, locService.toLanguageString(messages_1.filterOrLogic, messages_1.messages[messages_1.filterOrLogic])))),
                    React.createElement(kendo_react_buttons_1.ToolbarItem, null,
                        React.createElement(kendo_react_buttons_1.Button, { title: locService.toLanguageString(messages_1.filterAddExpression, messages_1.messages[messages_1.filterAddExpression]), icon: "filter-add-expression", onClick: this.onAddExpression })),
                    React.createElement(kendo_react_buttons_1.ToolbarItem, null,
                        React.createElement(kendo_react_buttons_1.Button, { title: locService.toLanguageString(messages_1.filterAddGroup, messages_1.messages[messages_1.filterAddGroup]), icon: "filter-add-group", onClick: this.onAddGroup })),
                    React.createElement(kendo_react_buttons_1.ToolbarItem, null,
                        React.createElement(kendo_react_buttons_1.Button, { title: locService.toLanguageString(messages_1.filterClose, messages_1.messages[messages_1.filterClose]), icon: "close", look: "flat", onClick: this.onGroupRemove })))),
            filter.filters.length > 0 && (React.createElement("ul", { className: "k-filter-lines" }, filter.filters.map(function (f, idx) {
                return React.createElement("li", { key: idx, className: "k-filter-item" }, kendo_data_query_1.isCompositeFilterDescriptor(f) ?
                    React.createElement(Group, { filter: f, fields: fields, onChange: _this.onChange, onRemove: _this.onRemove, defaultGroupFilter: _this.props.defaultGroupFilter })
                    :
                        React.createElement(Expression_1.Expression, { filter: f, fields: fields, onChange: _this.onChange, onRemove: _this.onRemove }));
            })))));
    };
    Group.propTypes = {
        filter: PropTypes.object.isRequired,
        fields: PropTypes.array.isRequired,
        onChange: PropTypes.func.isRequired,
        onRemove: PropTypes.func.isRequired,
        defaultGroupFilter: PropTypes.object.isRequired
    };
    return Group;
}(React.Component));
exports.Group = Group;
kendo_react_intl_1.registerForLocalization(Group);
//# sourceMappingURL=Group.js.map