import * as React from 'react';
import * as PropTypes from 'prop-types';
import { CompositeFilterDescriptor } from '@progress/kendo-data-query';
import { BaseEvent } from '@progress/kendo-react-common';
import { FieldSettings } from './FieldSettings';
/**
 * @hidden
 */
export interface GroupChangeEvent extends BaseEvent<Group> {
    prevFilter: CompositeFilterDescriptor;
    nextFilter: CompositeFilterDescriptor;
}
/**
 * @hidden
 */
export interface GroupRemoveEvent extends BaseEvent<Group> {
    filter: CompositeFilterDescriptor;
}
/**
 * @hidden
 */
export interface GroupProps {
    filter: CompositeFilterDescriptor;
    fields: Array<FieldSettings>;
    onChange: (event: GroupChangeEvent) => void;
    onRemove: (event: GroupRemoveEvent) => void;
    defaultGroupFilter: CompositeFilterDescriptor;
}
/**
 * @hidden
 */
export declare class Group extends React.Component<GroupProps> {
    static propTypes: {
        filter: PropTypes.Validator<object>;
        fields: PropTypes.Validator<any[]>;
        onChange: PropTypes.Validator<(...args: any[]) => any>;
        onRemove: PropTypes.Validator<(...args: any[]) => any>;
        defaultGroupFilter: PropTypes.Validator<object>;
    };
    render(): JSX.Element;
    private onGroupRemove;
    private onAddExpression;
    private onAddGroup;
    private onLogicAnd;
    private onLogicOr;
    private changeLogic;
    private replaceFilter;
    private onChange;
    private onRemove;
}
