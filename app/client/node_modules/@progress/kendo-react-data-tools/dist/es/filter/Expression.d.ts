import * as React from 'react';
import * as PropTypes from 'prop-types';
import { FilterDescriptor } from '@progress/kendo-data-query';
import { BaseEvent } from '@progress/kendo-react-common';
import { FieldSettings } from './FieldSettings';
/**
 * @hidden
 */
export interface ExpressionChangeEvent extends BaseEvent<Expression> {
    prevFilter: FilterDescriptor;
    nextFilter: FilterDescriptor;
}
/**
 * @hidden
 */
export interface ExpressionRemoveEvent extends BaseEvent<Expression> {
    filter: FilterDescriptor;
}
/**
 * @hidden
 */
export interface ExpressionProps {
    filter: FilterDescriptor;
    fields: Array<FieldSettings>;
    onChange: (event: ExpressionChangeEvent) => void;
    onRemove: (event: ExpressionRemoveEvent) => void;
}
/**
 * @hidden
 */
export declare class Expression extends React.Component<ExpressionProps> {
    static propTypes: {
        filter: PropTypes.Validator<object>;
        fields: PropTypes.Validator<any[]>;
        onChange: PropTypes.Validator<(...args: any[]) => any>;
        onRemove: PropTypes.Validator<(...args: any[]) => any>;
    };
    render(): JSX.Element;
    private onFieldChange;
    private onOperatorChange;
    private onInputChange;
    private triggerOnFilterChange;
    private onFilterRemove;
}
