var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { Popup } from '@progress/kendo-react-popup';
import { useLocalization } from '@progress/kendo-react-intl';
import { isCompositeFilterDescriptor } from '@progress/kendo-data-query';
import { ColumnMenuItem } from './ColumnMenuItem';
import { ColumnMenuTextFilter, ColumnMenuNumericFilter, ColumnMenuDateFilter, ColumnMenuBooleanFilter } from './ColumnMenuFilters';
import { ColumnMenuFilterLogic } from './ColumnMenuFilterLogic';
import { ColumnMenuFilterForm } from './ColumnMenuFilterForm';
import { messages, columnMenuFilterTitle, columnMenuSortAscending, columnMenuSortDescending } from '../messages';
var ColumnMenu = function (props) {
    var emptySort = React.useRef([]);
    var field = props.field, filter = props.filter, _a = props.sort, sort = _a === void 0 ? emptySort.current : _a, onSortChange = props.onSortChange, onFilterChange = props.onFilterChange, initialFilter = props.initialFilter, sortAsc = props.sortAsc, sortDesc = props.sortDesc, _b = props.filterContent, filterContent = _b === void 0 ? [] : _b;
    var _c = React.useState(false), show = _c[0], setShow = _c[1];
    var _d = React.useState(false), filterExpand = _d[0], setFilterExpand = _d[1];
    var _e = React.useState(initialFilter(field)), currentFilter = _e[0], setCurrentFilter = _e[1];
    var anchor = React.useRef(null);
    var popup = React.useRef(null);
    var blurTimeout = React.useRef(null);
    var menuFilter = React.useCallback(function () {
        return (filter || []).find(function (f) { return f.filters.every(function (inF) { return !isCompositeFilterDescriptor(inF) && inF.field === field; }); });
    }, [filter, field]);
    var closeMenu = React.useCallback(function () {
        setShow(false);
        setFilterExpand(false);
    }, []);
    var onBlur = React.useCallback(function () {
        clearTimeout(blurTimeout.current);
        blurTimeout.current = setTimeout(function () { closeMenu(); });
    }, []);
    var onFocus = React.useCallback(function () { return clearTimeout(blurTimeout.current); }, []);
    var onColumnMenuButtonClick = React.useCallback(function () {
        setShow(!show);
        setFilterExpand(false);
        setCurrentFilter(show ?
            currentFilter :
            (menuFilter() || initialFilter(field)));
    }, [filter, field, show, currentFilter, initialFilter]);
    React.useEffect(function () {
        if (show && popup.current) {
            popup.current.focus();
        }
    }, [show]);
    var filterItemClick = React.useCallback(function () { return setFilterExpand(!filterExpand); }, [filterExpand]);
    var changeSort = React.useCallback(function (event, dir) {
        var newSort = sort.slice();
        var currentSortIndex = newSort.findIndex(function (d) { return d.field === field; });
        var newSortDescriptor = { field: field, dir: dir };
        if (currentSortIndex >= 0) {
            if (newSort[currentSortIndex].dir !== newSortDescriptor.dir) {
                newSort.splice(currentSortIndex, 1, newSortDescriptor);
            }
            else {
                newSort.splice(currentSortIndex, 1);
            }
        }
        else {
            newSort.push(newSortDescriptor);
        }
        closeMenu();
        if (onSortChange) {
            onSortChange.call(undefined, event, newSort, field);
        }
    }, [sort, field, onSortChange]);
    var filterChange = React.useCallback(function (_event, nextFilter, prevFilter) {
        var stateFilter = __assign({}, currentFilter, { filters: currentFilter.filters.slice() });
        var index = stateFilter.filters.indexOf(prevFilter);
        stateFilter.filters.splice(index, 1, nextFilter);
        setCurrentFilter(stateFilter);
    }, [currentFilter]);
    var onSubmit = React.useCallback(function (event) {
        event.preventDefault();
        var newFilter = (filter || []).slice();
        var prev = menuFilter();
        var index = prev ? newFilter.indexOf(prev) : -1;
        if (index >= 0) {
            newFilter.splice(index, 1, currentFilter);
        }
        else {
            newFilter.push(currentFilter);
        }
        closeMenu();
        if (onFilterChange) {
            onFilterChange.call(undefined, event, newFilter, field);
        }
    }, [filter, currentFilter, field, onFilterChange]);
    var onReset = React.useCallback(function (event) {
        var newFilter = (filter || []).slice();
        var prev = menuFilter();
        var index = prev ? newFilter.indexOf(prev) : -1;
        if (index >= 0) {
            newFilter.splice(index, 1);
        }
        setCurrentFilter(initialFilter(field));
        closeMenu();
        if (onFilterChange) {
            onFilterChange.call(undefined, event, newFilter, field);
        }
    }, [filter, field, onFilterChange, initialFilter]);
    var sortAscChange = React.useCallback(function (e) { return changeSort(e, 'asc'); }, [sort]);
    var sortDescChange = React.useCallback(function (e) { return changeSort(e, 'desc'); }, [sort]);
    var onLogicChange = React.useCallback(function (event) { return setCurrentFilter(__assign({}, currentFilter, { logic: event.value.logic })); }, [currentFilter]);
    var currentSort = sort.find(function (d) { return d.field === field; }) || { dir: '' };
    var firstFilter = currentFilter.filters[0];
    var secondFilter = currentFilter.filters[1];
    var FirstFilterComponent = filterContent[0], FilterLogicComponent = filterContent[1], SecondFilterComponent = filterContent[2];
    var localization = useLocalization();
    return (React.createElement(React.Fragment, null,
        React.createElement("span", { ref: anchor, onClick: onColumnMenuButtonClick, className: 'k-grid-column-menu k-grid-filter' + (Boolean(menuFilter()) ? ' k-state-active' : '') },
            React.createElement("span", { className: "k-icon k-i-more-vertical" })),
        React.createElement(Popup, { anchor: anchor.current || undefined, show: show },
            React.createElement("div", { className: "k-grid-columnmenu-popup", ref: popup, tabIndex: 0, onBlur: onBlur, onFocus: onFocus, style: { outline: 'none' } },
                (sortAsc || sortDesc) &&
                    (React.createElement("div", { className: "k-columnmenu-item-wrapper" },
                        sortAsc &&
                            (React.createElement(ColumnMenuItem, { title: localization.toLanguageString(columnMenuSortAscending, messages[columnMenuSortAscending]), iconClass: "k-i-sort-asc-sm", selected: currentSort.dir === 'asc', onClick: sortAscChange })),
                        sortDesc &&
                            (React.createElement(ColumnMenuItem, { title: localization.toLanguageString(columnMenuSortDescending, messages[columnMenuSortDescending]), iconClass: "k-i-sort-desc-sm", selected: currentSort.dir === 'desc', onClick: sortDescChange })))),
                filterContent.length > 0 &&
                    (React.createElement("div", { className: "k-columnmenu-item-wrapper" },
                        React.createElement(ColumnMenuItem, { iconClass: "k-i-filter", title: localization.toLanguageString(columnMenuFilterTitle, messages[columnMenuFilterTitle]), onClick: filterItemClick }),
                        React.createElement(ColumnMenuFilterForm, { show: filterExpand, onSubmit: onSubmit, onReset: onReset },
                            FirstFilterComponent &&
                                React.createElement(FirstFilterComponent, { filter: firstFilter, onFilterChange: filterChange }),
                            FilterLogicComponent &&
                                React.createElement(FilterLogicComponent, { value: currentFilter.logic, onChange: onLogicChange }),
                            SecondFilterComponent &&
                                React.createElement(SecondFilterComponent, { filter: secondFilter, onFilterChange: filterChange }))))))));
};
/**
 * The `ColumnMenuTextColumn` component. Use it for `string` type columns.
 */
export var ColumnMenuTextColumn = function (props) {
    var initialFilter = React.useCallback(function (field) {
        return ({ logic: 'and', filters: [{ operator: 'contains', field: field, value: '' }, { operator: 'contains', field: field, value: '' }] });
    }, []);
    return (React.createElement(ColumnMenu, __assign({ sortAsc: true, sortDesc: true, filterContent: [
            ColumnMenuTextFilter,
            ColumnMenuFilterLogic,
            ColumnMenuTextFilter
        ], initialFilter: initialFilter }, props)));
};
/**
 * The `ColumnMenuNumericColumn` component. Use it for `number` type columns.
 */
export var ColumnMenuNumericColumn = function (props) {
    var initialFilter = React.useCallback(function (field) {
        return ({ logic: 'or', filters: [{ operator: 'eq', field: field, value: null }, { operator: 'eq', field: field, value: null }] });
    }, []);
    return (React.createElement(ColumnMenu, __assign({ sortAsc: true, sortDesc: true, filterContent: [
            ColumnMenuNumericFilter,
            ColumnMenuFilterLogic,
            ColumnMenuNumericFilter
        ], initialFilter: initialFilter }, props)));
};
/**
 * The `ColumnMenuDateColumn` component. Use it for `Date` type columns.
 */
export var ColumnMenuDateColumn = function (props) {
    var initialFilter = React.useCallback(function (field) {
        return ({ logic: 'or', filters: [{ operator: 'eq', field: field, value: null }, { operator: 'eq', field: field, value: null }] });
    }, []);
    return (React.createElement(ColumnMenu, __assign({ sortAsc: true, sortDesc: true, filterContent: [
            ColumnMenuDateFilter,
            ColumnMenuFilterLogic,
            ColumnMenuDateFilter
        ], initialFilter: initialFilter }, props)));
};
/**
 * The `ColumnMenuBooleanColumn` component. Use it for `boolean` type columns.
 */
export var ColumnMenuBooleanColumn = function (props) {
    var initialFilter = React.useCallback(function (field) {
        return ({ logic: 'and', filters: [{ operator: 'eq', field: field, value: false }] });
    }, []);
    return (React.createElement(ColumnMenu, __assign({ sortAsc: true, sortDesc: true, filterContent: [
            ColumnMenuBooleanFilter
        ], initialFilter: initialFilter }, props)));
};
//# sourceMappingURL=ColumnMenu.js.map