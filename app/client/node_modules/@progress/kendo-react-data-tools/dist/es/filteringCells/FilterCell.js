var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
/**
 * @hidden
 */
export var createFilterCell = function (settings) {
    var Cell = /** @class */ (function (_super) {
        __extends(FilterCell, _super);
        function FilterCell() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.filterChange = function (event) {
                if (_this.props.onFilterChange) {
                    _this.props.onFilterChange(event);
                }
            };
            _this.inputChange = function (e) {
                var value = e.target.value;
                var _a = _this.props, _b = _a.filter, filter = _b === void 0 ? [] : _b, _c = _a.field, field = _c === void 0 ? '' : _c;
                var existing = _this.findCellFilter();
                var filterResult = existing ?
                    filter.map(function (f) { return f.field === field ? __assign({}, existing, { value: value }) : f; }) : filter.concat([__assign({}, settings.emptyFilter, { value: value, field: field })]);
                _this.filterChange({
                    filter: filterResult,
                    field: field,
                    syntheticEvent: e.syntheticEvent
                });
            };
            _this.operatorChange = function (e) {
                var operator = e.target.value.operator;
                var _a = _this.props, _b = _a.filter, filter = _b === void 0 ? [] : _b, _c = _a.field, field = _c === void 0 ? '' : _c;
                var existing = _this.findCellFilter();
                var filterResult = existing ?
                    filter.map(function (f) { return f.field === field ? __assign({}, existing, { operator: operator }) : f; }) : filter.concat([__assign({}, settings.emptyFilter, { field: field, operator: operator })]);
                _this.filterChange({
                    filter: filterResult,
                    field: field,
                    syntheticEvent: e.syntheticEvent
                });
            };
            _this.clearButtonClick = function (e) {
                var _a = _this.props, _b = _a.filter, filter = _b === void 0 ? [] : _b, _c = _a.field, field = _c === void 0 ? '' : _c;
                _this.filterChange({
                    filter: filter.filter(function (f) { return f.field !== field; }),
                    field: field,
                    syntheticEvent: e
                });
            };
            _this.findCellFilter = function () {
                var _a = _this.props, _b = _a.filter, filter = _b === void 0 ? [] : _b, field = _a.field;
                return filter.find(function (f) { return f.field === field; });
            };
            return _this;
        }
        FilterCell.prototype.render = function () {
            var _a = this.props, _b = _a.clearButtonTitle, clearButtonTitle = _b === void 0 ? '' : _b, _c = _a.operators, operators = _c === void 0 ? [] : _c;
            var filter = this.findCellFilter() || __assign({}, settings.emptyFilter, { operator: '' });
            var operator = filter.operator, value = filter.value;
            var operatorComponentProps = {
                value: operators.find(function (item) { return item.operator === operator; }) || null,
                onChange: this.operatorChange,
                className: 'k-dropdown-operator',
                iconClassName: 'k-i-filter k-icon',
                data: operators,
                textField: 'text',
                popupSettings: { width: '' },
                components: this.props.components
            };
            return (React.createElement("div", { className: "k-filtercell" },
                React.createElement("div", { className: "k-filtercell-wrapper" },
                    settings.inputComponent({ value: value, onChange: this.inputChange, components: this.props.components }),
                    React.createElement("div", { className: "k-filtercell-operator" },
                        settings.operatorComponent(operatorComponentProps, this.props),
                        React.createElement("button", { className: 
                            /* button is always visible if there is either value or operator */
                            (!(value === null || value === '') || operator) ?
                                'k-button k-button-icon k-clear-button-visible' :
                                'k-button k-button-icon', title: clearButtonTitle, type: "button", onClick: this.clearButtonClick },
                            React.createElement("span", { className: "k-icon k-i-filter-clear" }))))));
        };
        return FilterCell;
    }(React.Component));
    return Cell;
};
//# sourceMappingURL=FilterCell.js.map