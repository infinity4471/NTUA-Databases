var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { PagerNumericButtons } from './PagerNumericButtons';
import { PagerInput } from './PagerInput';
import { PagerPageSizes } from './PagerPageSizes';
import { messages, pagerFirstPage, pagerLastPage, pagerNextPage, pagerPreviousPage, pagerInfo } from '../messages';
import { registerForIntl, registerForLocalization, provideLocalizationService, provideIntlService } from '@progress/kendo-react-intl';
var Pager = /** @class */ (function (_super) {
    __extends(Pager, _super);
    function Pager() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.changePage = function (page, event) {
            if (_this.props.onPageChange && page > 0 && page <= _this.totalPages) {
                _this.props.onPageChange({
                    target: _this,
                    skip: (page - 1) * _this.props.take,
                    take: _this.props.take,
                    syntheticEvent: event,
                    nativeEvent: event.nativeEvent
                });
            }
        };
        return _this;
    }
    /**
     * @hidden
     */
    Pager.prototype.render = function () {
        var _a = this.props, skip = _a.skip, take = _a.take, total = _a.total, pageSizes = _a.pageSizes, className = _a.className, messagesMap = _a.messagesMap;
        var localizationService = provideLocalizationService(this);
        var intlService = provideIntlService(this);
        var currentPage = Math.floor(skip / take) + 1;
        var changer = this.props.type === 'numeric' ?
            (React.createElement(PagerNumericButtons, { buttonCount: this.props.buttonCount || 0, totalPages: this.totalPages, currentPage: currentPage, pageChange: this.changePage })) : (React.createElement(PagerInput, { currentPage: currentPage, totalPages: this.totalPages, pageChange: this.changePage, messagesMap: messagesMap }));
        var firstPageMessage = messagesMap ? messagesMap(pagerFirstPage) :
            ({ messageKey: pagerFirstPage, defaultMessage: messages[pagerFirstPage] });
        var previousPageMessage = messagesMap ? messagesMap(pagerPreviousPage) :
            ({ messageKey: pagerPreviousPage, defaultMessage: messages[pagerPreviousPage] });
        var nextPageMessage = messagesMap ? messagesMap(pagerNextPage) :
            ({ messageKey: pagerNextPage, defaultMessage: messages[pagerNextPage] });
        var lastPageMessage = messagesMap ? messagesMap(pagerLastPage) :
            ({ messageKey: pagerLastPage, defaultMessage: messages[pagerLastPage] });
        var infoMessage = messagesMap ? messagesMap(pagerInfo) :
            ({ messageKey: pagerInfo, defaultMessage: messages[pagerInfo] });
        var first, prev, next, last;
        if (this.props.previousNext) {
            first = this.renderButton(1, 'k-link k-pager-nav k-pager-first' + (currentPage === 1 ? ' k-state-disabled' : ''), localizationService.toLanguageString(firstPageMessage.messageKey, firstPageMessage.defaultMessage), 'k-icon k-i-arrow-end-left');
            prev = this.renderButton(currentPage - 1, 'k-link k-pager-nav' + (currentPage === 1 ? ' k-state-disabled' : ''), localizationService.toLanguageString(previousPageMessage.messageKey, previousPageMessage.defaultMessage), 'k-icon k-i-arrow-60-left');
            next = this.renderButton(currentPage + 1, 'k-link k-pager-nav' + (currentPage >= this.totalPages ? ' k-state-disabled' : ''), localizationService.toLanguageString(nextPageMessage.messageKey, nextPageMessage.defaultMessage), 'k-icon k-i-arrow-60-right');
            last = this.renderButton(this.totalPages, 'k-link k-pager-nav k-pager-last' + (currentPage >= this.totalPages ? ' k-state-disabled' : ''), localizationService.toLanguageString(lastPageMessage.messageKey, lastPageMessage.defaultMessage), 'k-icon k-i-arrow-end-right');
        }
        var pagerPageSizes = pageSizes && (React.createElement(PagerPageSizes, { pageChange: this.props.onPageChange, pageSize: take, pageSizes: pageSizes, messagesMap: messagesMap }));
        var info = this.props.info && (React.createElement("div", { className: "k-pager-info k-label" }, intlService
            .format(localizationService.toLanguageString(infoMessage.messageKey, infoMessage.defaultMessage), [
            Math.min(skip + 1, total),
            Math.min(skip + take, total),
            total
        ])));
        return (React.createElement("div", { className: 'k-pager-wrap k-floatwrap k-widget' + (className ? " " + className : ''), style: this.props.style },
            first,
            prev,
            changer,
            next,
            last,
            pagerPageSizes,
            info));
    };
    Pager.prototype.renderButton = function (page, className, title, icon) {
        var _this = this;
        return (React.createElement("a", { onClick: function (e) {
                e.preventDefault();
                _this.changePage(page, e);
            }, href: "#", className: className, title: title },
            React.createElement("span", { className: icon, "aria-label": title })));
    };
    Object.defineProperty(Pager.prototype, "totalPages", {
        get: function () {
            return Math.ceil((this.props.total || 0) / this.props.take);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    Pager.propTypes = {
        className: PropTypes.string,
        style: PropTypes.object,
        total: PropTypes.number.isRequired,
        skip: PropTypes.number.isRequired,
        take: PropTypes.number.isRequired,
        buttonCount: PropTypes.number,
        info: PropTypes.bool,
        type: PropTypes.oneOf(['numeric', 'input']),
        pageSizes: PropTypes.arrayOf(PropTypes.number),
        previousNext: PropTypes.bool,
        onPageChange: PropTypes.func,
        messagesMap: PropTypes.func
    };
    /**
     * @hidden
     */
    Pager.defaultProps = {
        buttonCount: 10,
        info: true,
        type: 'numeric'
    };
    return Pager;
}(React.Component));
export { Pager };
registerForIntl(Pager);
registerForLocalization(Pager);
//# sourceMappingURL=Pager.js.map