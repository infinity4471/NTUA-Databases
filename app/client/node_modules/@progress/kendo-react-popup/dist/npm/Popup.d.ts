import * as React from 'react';
import * as PropTypes from 'prop-types';
import { PopupProps } from './models/PopupProps';
/**
 * @hidden
 */
export interface PropsWithChildren extends PopupProps {
    children?: React.ReactNode;
}
export default class Popup extends React.Component<PopupProps, {}> {
    /**
     * @hidden
     */
    static propTypes: {
        anchor: (props: PopupProps) => Error;
        appendTo: (props: PopupProps) => Error;
        className: PropTypes.Requireable<string>;
        id: PropTypes.Requireable<string>;
        popupClass: PropTypes.Requireable<string>;
        collision: PropTypes.Requireable<PropTypes.InferProps<{
            horizontal: PropTypes.Requireable<string>;
            vertical: PropTypes.Requireable<string>;
        }>>;
        anchorAlign: PropTypes.Requireable<PropTypes.InferProps<{
            horizontal: PropTypes.Requireable<string>;
            vertical: PropTypes.Requireable<string>;
        }>>;
        popupAlign: PropTypes.Requireable<PropTypes.InferProps<{
            horizontal: PropTypes.Requireable<string>;
            vertical: PropTypes.Requireable<string>;
        }>>;
        offset: PropTypes.Requireable<PropTypes.InferProps<{
            left: PropTypes.Requireable<number>;
            top: PropTypes.Requireable<number>;
        }>>;
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        show: PropTypes.Requireable<boolean>;
        animate: PropTypes.Requireable<boolean | PropTypes.InferProps<{
            openDuration: PropTypes.Requireable<number>;
            closeDuration: PropTypes.Requireable<number>;
        }>>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        collision: {
            horizontal: string;
            vertical: string;
        };
        anchorAlign: {
            horizontal: string;
            vertical: string;
        };
        popupAlign: {
            horizontal: string;
            vertical: string;
        };
        offset: {
            left: number;
            top: number;
        };
        animate: boolean;
        show: boolean;
    };
    private _alignService;
    private _positionService;
    private _domService;
    private _flipped;
    private _offset;
    private _scrollableParents;
    private _exitingAnimation;
    private _prevShow?;
    constructor(props: PopupProps);
    /**
     * @hidden
     */
    componentDidUpdate(): void;
    /**
     * @hidden
     */
    componentWillUnmount(): void;
    /**
     * @hidden
     */
    render(): React.ReactPortal;
    private onOpened;
    private onClosing;
    private onClosed;
    private readonly transitionDuration;
    private calculatePosition;
    private position;
    private attachRepositionHandlers;
    private detachRepositionHandlers;
    private reposition;
}
