import { ButtonLook } from './buttonLook';
/**
 * Inherits the native HTML Button. Represents the properties which can be set to a Button.
 */
export interface ButtonInterface {
    /**
     * Changes the visual appearance by using alternative styling options ([more information and examples]({% slug appearance_button %})).
     *
     * The available values are:
     * * `bare`
     * * `flat`
     * * `outline`
     */
    look?: ButtonLook;
    /**
     * Adds visual weight to the Button and makes it primary ([see example]({% slug primary_button %})).
     */
    primary?: boolean;
    /**
     * Specifies if the Button is disabled ([see example]({% slug disabled_button %})). Defaults to `false`.
     */
    disabled?: boolean;
    /**
     * Sets the selected state of the Button. Can be used for controlled state.
     */
    selected?: boolean;
    /**
     * Provides visual styling that indicates if the Button is selected ([see example]({% slug toggleable_button %})). Defaults to `false`.
     */
    togglable?: boolean;
    /**
     * Defines the name for an existing icon in a Kendo UI theme ([see example]({% slug icons_button %})). The icon is rendered inside the Button by a `span.k-icon` element.
     */
    icon?: string;
    /**
     * Defines a CSS class&mdash;or multiple classes separated by spaces&mdash;which are applied to a `span` element inside the Button ([see example]({% slug icons_button %})). Allows the usage of custom icons.
     */
    iconClass?: string;
    /**
     * Defines a URL which is used as an `img` element inside the Button ([see example]({% slug icons_button %})). The URL can be relative or absolute. If relative, it is evaluated with relation to the URL of the web page.
     */
    imageUrl?: string;
    /**
     * Defines the alternative text of the image rendered inside the Button component.
     */
    imageAlt?: string;
}
