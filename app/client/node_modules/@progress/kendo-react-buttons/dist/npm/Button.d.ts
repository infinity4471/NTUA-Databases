import * as React from 'react';
import * as PropTypes from 'prop-types';
import { ButtonInterface } from './ButtonInterface';
/**
 * Represents the props of the [KendoReact Button component]({% slug overview_button %}).
 * Extends the [native button props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement).
 */
export interface ButtonProps extends ButtonInterface, React.ButtonHTMLAttributes<HTMLButtonElement> {
    /**
     * @hidden
     */
    children?: React.ReactNode;
}
/**
 * @hidden
 */
export interface ButtonState {
    active: boolean;
}
export default class Button extends React.Component<ButtonProps, ButtonState> {
    /**
     * @hidden
     */
    static propTypes: {
        children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        look: PropTypes.Requireable<string>;
        primary: PropTypes.Requireable<boolean>;
        selected: PropTypes.Requireable<boolean>;
        togglable: PropTypes.Requireable<boolean>;
        icon: PropTypes.Requireable<string>;
        iconClass: PropTypes.Requireable<string>;
        imageUrl: PropTypes.Requireable<string>;
        imageAlt: PropTypes.Requireable<string>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        look: string;
        primary: boolean;
        togglable: boolean;
    };
    /**
     * @hidden
     */
    readonly state: ButtonState;
    private _activeTemp?;
    private _element;
    /**
     * Gets the DOM element of the Button component.
     */
    readonly element: HTMLButtonElement | null;
    /**
     * Returns `true` when the component is togglable and selected ([see example]({% slug toggleable_button %})).
     * Otherwise, returns `false`.
     */
    readonly selected: boolean;
    constructor(props: ButtonProps);
    /**
     * @hidden
     */
    static getDerivedStateFromProps(props: ButtonProps, state: ButtonState): {
        active: boolean;
    };
    /**
     * @hidden
     */
    render(): JSX.Element;
    private toggleIfApplicable;
    private handleClick;
}
