import * as React from 'react';
import * as PropTypes from 'prop-types';
import { SplitButtonProps } from './models/ListButtonProps';
/**
 * @hidden
 */
export interface SplitButtonState {
    focusedIndex?: number;
    focused?: boolean;
    opened?: boolean;
}
/**
 * Represents the [KendoReact SplitButton component]({% slug overview_splitbutton %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *    render() {
 *        return (
 *            <SplitButton text="Act">
 *                <SplitButtonItem text="Item1" />
 *                <SplitButtonItem text="Item2" />
 *                <SplitButtonItem text="Item3" />
 *            </SplitButton>
 *        );
 *    }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export default class SplitButton extends React.Component<SplitButtonProps, SplitButtonState> {
    /**
     * @hidden
     */
    static propTypes: {
        accessKey: PropTypes.Requireable<string>;
        onButtonClick: PropTypes.Requireable<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onItemClick: PropTypes.Requireable<(...args: any[]) => any>;
        onOpen: PropTypes.Requireable<(...args: any[]) => any>;
        onClose: PropTypes.Requireable<(...args: any[]) => any>;
        text: PropTypes.Requireable<string>;
        items: PropTypes.Requireable<any[]>;
        textField: PropTypes.Requireable<string>;
        tabIndex: PropTypes.Requireable<number>;
        disabled: PropTypes.Requireable<boolean>;
        icon: PropTypes.Requireable<string>;
        iconClass: PropTypes.Requireable<string>;
        imageUrl: PropTypes.Requireable<string>;
        popupSettings: PropTypes.Requireable<object>;
        itemRender: PropTypes.Requireable<any>;
        look: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        buttonClass: PropTypes.Requireable<string>;
        dir: PropTypes.Requireable<string>;
    };
    /**
     * @hidden
     */
    readonly state: {
        focused: boolean;
        focusedIndex: number;
        opened: boolean;
    };
    private wrapper;
    private mainButton;
    private guid;
    private buttonsData;
    /**
     * @hidden
     */
    render(): JSX.Element;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * The DOM element of main button.
     */
    readonly element: HTMLButtonElement | null;
    private onKeyDown;
    private onFocus;
    private onItemClick;
    private onBlur;
    private dispatchClickEvent;
    private renderPopup;
    private renderChildItems;
    private onSplitPartClick;
    private onDownSplitPart;
    private onItemDown;
    private dispatchPopupEvent;
    private isItemDisabled;
    private isRtl;
}
