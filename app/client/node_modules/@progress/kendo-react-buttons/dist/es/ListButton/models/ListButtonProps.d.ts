/// <reference types="react" />
import { ButtonsPopupSettings } from './PopupSettings';
import { SplitButtonClickEvent, SplitButtonItemClickEvent, SplitButtonFocusEvent, SplitButtonBlurEvent, SplitButtonOpenEvent, SplitButtonCloseEvent, DropDownButtonItemClickEvent, DropDownButtonFocusEvent, DropDownButtonBlurEvent, DropDownButtonOpenEvent, DropDownButtonCloseEvent } from './events';
import { ButtonLook } from '../../main';
export interface DropDownButtonProps {
    /**
     * Specifies the `accessKey` of the main button.
     */
    accessKey?: string;
    /**
     * Specifies the text of the main button ([see example]({% slug overview_dropdownbutton %}#toc-basic-usage)).
     */
    text?: React.ReactNode;
    /**
     * Specifies the list items ([see example]({% slug binding_dropdownbutton %}#toc-array-of-objects)).
     */
    items?: any[];
    /**
     * Configures the field that will be used for the text of the `items`. `textField` has to be used together with the `items` prop ([see example]({% slug binding_dropdownbutton %}#toc-array-of-objects)).
     */
    textField?: string;
    /**
     * Specifies the `tabIndex` of the main button.
     */
    tabIndex?: number;
    /**
     * Determines whether the component is disabled ([see example]({% slug disabled_dropdownbutton %})).
     */
    disabled?: boolean;
    /**
     * Defines an icon that will be rendered next to the main button text ([see example]({% slug icons_dropdownbutton %})).
     */
    icon?: string;
    /**
     * Defines an icon with a custom CSS class that will be rendered next to the main button text ([see example]({% slug icons_dropdownbutton %})).
     */
    iconClass?: string;
    /**
     * Defines the location of an image that will be displayed next to the main button text ([see example]({% slug icons_dropdownbutton %})).
     */
    imageUrl?: string;
    /**
     * Configures the popup
     * ([see example]({% slug customization_dropdownbutton %}#toc-popup)).
     */
    popupSettings?: ButtonsPopupSettings;
    /**
     * A React functional or class component which is used for rendering items ([see example]({% slug customization_dropdownbutton %}#toc-item-render)). The default rendering includes an icon, an image, and text.
     */
    itemRender?: any;
    /**
     * Changes the visual appearance by using alternative styling options ([see example]({% slug overview_dropdownbutton %}#toc-basic-usage)).
     */
    look?: ButtonLook;
    /**
     * Sets the `className` of the DropDownButton component.
     */
    className?: string;
    /**
     * Sets the `className` of the main button.
     */
    buttonClass?: string;
    /**
     * Sets the direction of the component.
     */
    dir?: string;
    /**
     * Adds visual weight to the button and makes it primary ([see example]({% slug overview_dropdownbutton %}#toc-basic-usage)).
     */
    primary?: boolean;
    /**
     * Fires when the component is focused ([see example]({% slug overview_dropdownbutton %}#toc-events)).
     */
    onFocus?: (event: DropDownButtonFocusEvent) => void;
    /**
     * Fires when the component is blurred ([see example]({% slug overview_dropdownbutton %}#toc-events)).
     */
    onBlur?: (event: DropDownButtonBlurEvent) => void;
    /**
     * Fires when an item is clicked ([see example]({% slug overview_dropdownbutton %}#toc-events)).
     */
    onItemClick?: (event: DropDownButtonItemClickEvent) => void;
    /**
     * Fires when the popup which contains the items is opened ([see example]({% slug overview_dropdownbutton %}#toc-events)).
     */
    onOpen?: (event: DropDownButtonOpenEvent) => void;
    /**
     * Fires when the popup which contains the items is closed ([see example]({% slug overview_dropdownbutton %}#toc-events)).
     */
    onClose?: (event: DropDownButtonCloseEvent) => void;
}
export interface SplitButtonProps {
    /**
     * Specifies the `accessKey` of the main button.
     */
    accessKey?: string;
    /**
     * Specifies the text of the main button ([see example]({% slug overview_splitbutton %}#toc-basic-usage)).
     */
    text?: string;
    /**
     * Specifies the list items ([see example]({% slug binding_splitbutton %}#toc-array-of-objects)).
     */
    items?: any[];
    /**
     * Configures the field that will be used for the text of the `items`. `textField` has to be used together with the `items` prop ([see example]({% slug binding_splitbutton %}#toc-array-of-objects)).
     */
    textField?: string;
    /**
     * Specifies the `tabIndex` of the main button.
     */
    tabIndex?: number;
    /**
     * Determines whether the component is disabled ([see example]({% slug disabled_splitbutton %})).
     */
    disabled?: boolean;
    /**
     * Defines an icon that will be rendered next to the main button text ([see example]({% slug icons_splitbutton %})).
     */
    icon?: string;
    /**
     * Defines an icon with a custom CSS class that will be rendered next to the main button text ([see example]({% slug icons_splitbutton %})).
     */
    iconClass?: string;
    /**
     * Defines the location of an image that will be displayed next to the main button text ([see example]({% slug icons_splitbutton %})).
     */
    imageUrl?: string;
    /**
     * Configures the popup ([see example]({% slug customization_splitbutton %}#toc-popup)).
     */
    popupSettings?: ButtonsPopupSettings;
    /**
     * A React functional or class component for rendering items ([see example]({% slug customization_splitbutton %}#toc-item-render)). The default rendering includes an icon, an image, and text.
     */
    itemRender?: any;
    /**
     * Changes the visual appearance by using alternative styling options ([see example]({% slug overview_splitbutton %}#toc-basic-usage)).
     */
    look?: ButtonLook;
    /**
     * Sets the `className` of the SplitButton component.
     */
    className?: string;
    /**
     * Sets the `className` of the main button.
     */
    buttonClass?: string;
    /**
     * Sets the direction of the component.
     */
    dir?: string;
    /**
     * Fires when the main button is clicked ([see example]({% slug overview_splitbutton %}#toc-events)).
     */
    onButtonClick?: (event: SplitButtonClickEvent) => void;
    /**
     * Fires when the component is focused ([see example]({% slug overview_splitbutton %}#toc-events)).
     */
    onFocus?: (event: SplitButtonFocusEvent) => void;
    /**
     * Fires when the component is blurred ([see example]({% slug overview_splitbutton %}#toc-events)).
     */
    onBlur?: (event: SplitButtonBlurEvent) => void;
    /**
     * Fires when an item is clicked ([see example]({% slug overview_splitbutton %}#toc-events)).
     */
    onItemClick?: (event: SplitButtonItemClickEvent) => void;
    /**
     * Fires when the popup which contains the items is opened ([see example]({% slug overview_splitbutton %}#toc-events)).
     */
    onOpen?: (event: SplitButtonOpenEvent) => void;
    /**
     * Fires when the popup which contains the items is closed ([see example]({% slug overview_splitbutton %}#toc-events)).
     */
    onClose?: (event: SplitButtonCloseEvent) => void;
}
