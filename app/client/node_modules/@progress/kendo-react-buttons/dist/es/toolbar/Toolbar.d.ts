import * as React from 'react';
import * as PropTypes from 'prop-types';
/**
 * Represents the `resize` event of the Toolbar.
 */
export interface ToolbarResizeEvent {
    /**
     * An event target.
     */
    target: Toolbar;
    /**
     * The `offsetWidth` event of the Toolbar.
     */
    offsetWidth: number;
    /**
     * The `offsetHeight` event of the Toolbar.
     */
    offsetHeight: number;
    /**
     * A native DOM event.
     */
    nativeEvent: any;
}
/**
 * Represents the props of the [KendoReact Toolbar component]({% slug overview_toolbar %}).
 */
export interface ToolbarProps {
    /**
     * Sets additional classes to the Toolbar.
     */
    className?: string;
    /**
     * Represents the `dir` HTML attribute.
     */
    dir?: string;
    /**
     * The styles that are applied to the Toolbar.
     */
    style?: React.CSSProperties;
    /**
     * Specifies the `tabIndex` of the Toolbar.
     */
    tabIndex?: number;
    /**
     * The `resize` event of the Toolbar.
     */
    onResize?: (event: ToolbarResizeEvent) => void;
    /**
     * @hidden
     */
    keyboardNavigation?: boolean;
}
/**
 * Represents the [KendoReact Toolbar component]({% slug overview_toolbar %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *    render() {
 *       return (
 *          <Toolbar>
 *              <ToolbarItem>
 *                  <ButtonGroup>
 *                      <Button togglable={true} icon="bold" />
 *                      <Button togglable={true} icon="italic" />
 *                      <Button togglable={true} icon="underline" />
 *                  </ButtonGroup>
 *              </ToolbarItem>
 *              <ToolbarItem>
 *                  <ButtonGroup>
 *                      <Button icon="hyperlink">Insert Link</Button>
 *                      <Button icon="image">Insert Image</Button>
 *                      <Button icon="table">Insert Table</Button>
 *                  </ButtonGroup>
 *              </ToolbarItem>
 *          </Toolbar>
 *       );
 *    }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export default class Toolbar extends React.Component<ToolbarProps> {
    /**
     * @hidden
     */
    static propTypes: {
        tabIndex: PropTypes.Requireable<number>;
        dir: PropTypes.Requireable<string>;
        keyboardNavigation: PropTypes.Requireable<boolean>;
        style: PropTypes.Requireable<object>;
        className: PropTypes.Requireable<string>;
        onResize: PropTypes.Requireable<(...args: any[]) => any>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        tabIndex: number;
    };
    private _element;
    private buttons;
    private focusedIndex;
    private counter;
    private offsetHeight;
    private offsetWidth;
    /**
     * Returns the HTML element of the Toolbar component.
     */
    readonly element: HTMLDivElement | null;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentDidUpdate(): void;
    /**
     * @hidden
     */
    componentWillUnmount(): void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    private mapToolbarChild;
    private mapItemChildren;
    private mapButton;
    private buttonRef;
    private onKeyDown;
    private focusButton;
    private onWindowResize;
}
