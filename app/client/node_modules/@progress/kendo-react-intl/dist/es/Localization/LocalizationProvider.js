var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { LocalizationService } from './LocalizationService';
import { GlobalizationContext } from '../globalization/GlobalizationContext';
// tslint:disable:max-line-length
/**
 * A React component which provides a localization service. Expects a language string as a property of the component.
 */
var LocalizationProvider = /** @class */ (function (_super) {
    __extends(LocalizationProvider, _super);
    function LocalizationProvider() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Returns a localization service. The method is suitable for overriding when you implement custom localization behavior.
     */
    LocalizationProvider.prototype.getLocalizationService = function () {
        return new LocalizationService(this.props.language);
    };
    /**
     * @hidden
     */
    LocalizationProvider.prototype.render = function () {
        var _this = this;
        return (React.createElement(GlobalizationContext.Consumer, null, function (glob) { return (React.createElement(GlobalizationContext.Provider, { value: __assign({}, glob, { localization: _this.getLocalizationService() }) }, _this.props.children)); }));
    };
    /**
     * @hidden
     */
    LocalizationProvider.propTypes = {
        language: PropTypes.string
    };
    return LocalizationProvider;
}(React.Component));
export { LocalizationProvider };
// tslint:enable:max-line-length
//# sourceMappingURL=LocalizationProvider.js.map