"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var messages_1 = require("./messages");
/**
 * Represents the KendoReact FloatingLabel component.
 * @example
 * ```jsx
 * const sizes = ["X-Small", "Small", "Medium", "Large", "X-Large", "2X-Large"];
 * const App = () => {
 *     const [ddlState, setDdlState] = React.useState();
 *     const editorId = 'ddl-sizes';
 *     return (
 *         <FloatingLabel label={'Shirt Size:'} editorId={editorId} editorValue={ddlState}>
 *             <DropDownList
 *                 id={editorId}
 *                 value={ddlState}
 *                 data={sizes}
 *                 onChange={(e) => setDdlState(e.target.value)}
 *             />
 *         </FloatingLabel>
 *     );
 * };
 *
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
var FloatingLabel = /** @class */ (function (_super) {
    __extends(FloatingLabel, _super);
    function FloatingLabel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * @hidden
         */
        _this.state = {
            focused: false
        };
        /**
         * @hidden
         */
        _this.handleFocus = function (_) {
            _this.setState({ focused: true });
        };
        /**
         * @hidden
         */
        _this.handleBlur = function (_) {
            _this.setState({ focused: false });
        };
        return _this;
    }
    /**
     * @hidden
     */
    FloatingLabel.prototype.render = function () {
        var _a = this.props, label = _a.label, editorId = _a.editorId, className = _a.className, editorValue = _a.editorValue, editorPlaceholder = _a.editorPlaceholder, editorValid = _a.editorValid, editorDisabled = _a.editorDisabled, style = _a.style, id = _a.id, optional = _a.optional;
        var localizationService = kendo_react_intl_1.provideLocalizationService(this);
        var localizedOptional = optional ? localizationService
            .toLanguageString(messages_1.labelsOptional, messages_1.messages[messages_1.labelsOptional]) : '';
        var optionalElement = localizedOptional && (React.createElement("span", { className: 'k-label-optional' }, localizedOptional));
        var spanClassNames = kendo_react_common_1.classNames({
            'k-textbox-container': true,
            'k-state-focused': this.state.focused,
            'k-state-empty': !(editorValue || editorPlaceholder),
            'k-text-disabled': editorDisabled,
            'k-rtl': this.props.dir === 'rtl'
        }, className);
        var labelClassNames = kendo_react_common_1.classNames({
            'k-label': true,
            'k-text-error': editorValid === false,
            'k-text-disabled': editorDisabled
        });
        return (React.createElement("span", { className: spanClassNames, onFocus: this.handleFocus, onBlur: this.handleBlur, style: style, dir: this.props.dir },
            this.props.children,
            label
                ? editorId
                    ? React.createElement("label", { id: id, htmlFor: editorId, className: labelClassNames },
                        label,
                        optionalElement)
                    : React.createElement("span", { id: id, className: labelClassNames },
                        label,
                        optionalElement)
                : null));
    };
    /**
     * @hidden
     */
    FloatingLabel.propTypes = {
        label: PropTypes.string,
        editorId: PropTypes.string,
        editorValue: PropTypes.string,
        editorPlaceholder: PropTypes.string,
        editorValid: PropTypes.bool,
        editorDisabled: PropTypes.bool,
        id: PropTypes.string,
        style: PropTypes.object,
        className: PropTypes.string,
        optional: PropTypes.bool
    };
    return FloatingLabel;
}(React.Component));
exports.FloatingLabel = FloatingLabel;
kendo_react_intl_1.registerForLocalization(FloatingLabel);
//# sourceMappingURL=FloatingLabel.js.map