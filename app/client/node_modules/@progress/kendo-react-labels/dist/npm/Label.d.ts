import * as React from 'react';
import * as PropTypes from 'prop-types';
/**
 * Represents the props of the KendoReact Label component.
 */
export interface LabelProps {
    /**
     * Represents the id of the label element.
     * The value should be set to the editor `ariaLabelledBy` property.
     * Can be used when the editor is not containing native form element.
     */
    id?: string;
    /**
     * The id of the editor.
     * Represent the [`htmlFor`](https://reactjs.org/docs/dom-elements.html#htmlfor) property, which will be set to the `label` element.
     */
    editorId?: string;
    /**
     * An optional React ref to the editor.
     * Used to redirect the click event to the editor when it does not contain native form element.
     * To be able to work, the editor should have `focus` method or `actionElement` prop on it's ref.
     */
    editorRef?: any;
    /**
     * The text that will be rendered inside the label element.
     * Can be omitted for editors without label to keep form layout.
     */
    children?: any;
    /**
     * Specifies the validity of the editor. Used to define the editor is invalid.
     */
    editorValid?: boolean;
    /**
     * Specifies if the editor is disabled.
     */
    editorDisabled?: boolean;
    /**
     * If enabled marks the label as optional.
     */
    optional?: boolean;
    /**
     * The styles that are applied to the Label.
     */
    style?: React.CSSProperties;
    /**
     * Sets a class of the Label DOM element.
     */
    className?: string;
}
/**
 * Represents the KendoReact Label component.
 * @example
 * ```jsx
 * const sizes = ["X-Small", "Small", "Medium", "Large", "X-Large", "2X-Large"];
 * const App = () => {
 *     const ddlRef = React.useRef(null);
 *     const labelId = 'ddl-sizes-label';
 *     const editorId = 'ddl-sizes';
 *
 *     return (
 *         <div>
 *             <Label id={labelId} editorId={editorId} editorRef={ddlRef}>
 *                 Shirt Size:
 *             </Label>
 *             <DropDownList
 *                 ref={ddlRef}
 *                 id={editorId}
 *                 ariaLabelledBy={labelId}
 *                 data={sizes}
 *             />
 *             <br />
 *         </div>
 *     );
 * };
 *
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare const Label: {
    (props: LabelProps): JSX.Element;
    propTypes: {
        id: PropTypes.Requireable<string>;
        editorId: PropTypes.Requireable<string>;
        editorRef: PropTypes.Requireable<((...args: any[]) => any) | PropTypes.InferProps<{
            current: PropTypes.Requireable<any>;
        }>>;
        editorValid: PropTypes.Requireable<boolean>;
        editorDisabled: PropTypes.Requireable<boolean>;
        style: PropTypes.Requireable<object>;
        className: PropTypes.Requireable<string>;
        optional: PropTypes.Requireable<boolean>;
    };
    displayName: string;
};
