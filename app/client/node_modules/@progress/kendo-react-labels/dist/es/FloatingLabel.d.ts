import * as React from 'react';
import * as PropTypes from 'prop-types';
/**
 * Represents the props of the KendoReact FloatingLabel component.
 */
export interface FloatingLabelProps {
    /**
     * Represent the [`htmlFor`](https://reactjs.org/docs/dom-elements.html#htmlfor) property, which will be set to the `label` element.
     */
    editorId?: string;
    /**
     * Specifies the value of the editor. Used to define if the editor is empty.
     */
    editorValue?: string;
    /**
     * Specifies the placeholder of the editor. Used to define if the editor is empty.
     */
    editorPlaceholder?: string;
    /**
     * Specifies if the validity of the editor. Used to define the editor is invalid.
     */
    editorValid?: boolean;
    /**
     * Specifies if the editor is disabled.
     */
    editorDisabled?: boolean;
    /**
     * Adds a floating label that describes the editor.
     */
    label?: string;
    /**
     * The styles that are applied to the FloatingLabel.
     */
    style?: React.CSSProperties;
    /**
     * Sets a class of the FloatingLabel DOM element.
     */
    className?: string;
    /**
     * Specifies the direction of the label.
     */
    dir?: string;
    /**
     * Represents the id of the label element.
     * The value should be also set to the editor's `ariaLabelledBy` property.
     * Can be used when the editor is not containing native form element.
     */
    id?: string;
    /**
     * If enabled, marks the label as optional.
     */
    optional?: boolean;
}
/**
 * @hidden
 */
export interface FloatingLabelState {
    focused?: boolean;
}
/**
 * Represents the KendoReact FloatingLabel component.
 * @example
 * ```jsx
 * const sizes = ["X-Small", "Small", "Medium", "Large", "X-Large", "2X-Large"];
 * const App = () => {
 *     const [ddlState, setDdlState] = React.useState();
 *     const editorId = 'ddl-sizes';
 *     return (
 *         <FloatingLabel label={'Shirt Size:'} editorId={editorId} editorValue={ddlState}>
 *             <DropDownList
 *                 id={editorId}
 *                 value={ddlState}
 *                 data={sizes}
 *                 onChange={(e) => setDdlState(e.target.value)}
 *             />
 *         </FloatingLabel>
 *     );
 * };
 *
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare class FloatingLabel extends React.Component<FloatingLabelProps, FloatingLabelState> {
    /**
     * @hidden
     */
    static propTypes: {
        label: PropTypes.Requireable<string>;
        editorId: PropTypes.Requireable<string>;
        editorValue: PropTypes.Requireable<string>;
        editorPlaceholder: PropTypes.Requireable<string>;
        editorValid: PropTypes.Requireable<boolean>;
        editorDisabled: PropTypes.Requireable<boolean>;
        id: PropTypes.Requireable<string>;
        style: PropTypes.Requireable<object>;
        className: PropTypes.Requireable<string>;
        optional: PropTypes.Requireable<boolean>;
    };
    /**
     * @hidden
     */
    readonly state: FloatingLabelState;
    /**
     * @hidden
     */
    handleFocus: (_: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
    /**
     * @hidden
     */
    handleBlur: (_: React.SyntheticEvent<HTMLSpanElement, Event>) => void;
    /**
     * @hidden
     */
    render(): JSX.Element;
}
