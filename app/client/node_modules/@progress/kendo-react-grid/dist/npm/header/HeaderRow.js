"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var GridSortSettings_1 = require("../interfaces/GridSortSettings");
var ColumnResizer_1 = require("../drag/ColumnResizer");
var ColumnDraggable_1 = require("../drag/ColumnDraggable");
var GridHeaderCell_1 = require("./GridHeaderCell");
var ColumnMenu_1 = require("../columnMenu/ColumnMenu");
/**
 * @hidden
 */
var sortSeqMap = {
    true: { 'asc': 'desc', 'desc': '', '': 'asc' },
    false: { 'asc': 'desc', 'desc': 'asc', '': 'asc' }
};
/**
 * @hidden
 */
var ariaSortMap = {
    'none': 'none',
    'asc': 'ascending',
    'desc': 'descending'
};
/**
 * @hidden
 */
var HeaderRow = /** @class */ (function (_super) {
    __extends(HeaderRow, _super);
    function HeaderRow(props) {
        var _this = _super.call(this, props) || this;
        _this.cells = function (rowIndexes, dataStartColumn) {
            if (dataStartColumn === void 0) { dataStartColumn = 0; }
            return rowIndexes.map(function (columnIndex, index) {
                var column = _this.props.columns[columnIndex];
                var sortable = _this.props.sortable && column.sortable;
                var sortIndex = _this.props.sort ? _this.props.sort.findIndex(function (s) { return s.field === column.field; }) : -1;
                var sortDir = sortIndex >= 0 ? ((_this.props.sort)[sortIndex].dir || 'none') : 'none';
                var headerCellProps = {
                    field: column.field,
                    onClick: sortable && (function (e) { return _this.cellClick(e, column); }) || undefined,
                    selectionChange: _this.props.selectionChange,
                    title: column.title,
                    selectionValue: column.headerSelectionValue,
                    render: _this.props.cellRender,
                    children: _this.sortIcon(sortIndex),
                    key: 1
                };
                var className = (column.kFirst ? 'k-first ' : '')
                    + _this.cellClass(column.field, column.headerClassName, column.locked);
                var columnMenu = (column.columnMenu === null) ? null : (column.columnMenu || _this.props.columnMenu);
                var style = (column.locked !== undefined) ? {
                    left: column.left,
                    right: column.right,
                    borderRightWidth: column.rightBorder ? '1px' : ''
                } : {};
                var ariaAttrs = columnIndex >= dataStartColumn ? {
                    'aria-sort': ariaSortMap[sortDir],
                    'role': 'columnheader',
                    'aria-colindex': columnIndex - dataStartColumn + 1,
                    'aria-selected': false
                } : {
                    'role': 'presentation'
                };
                return (React.createElement("th", __assign({ key: index, colSpan: column.colSpan, rowSpan: column.rowSpan, className: className, style: style }, ariaAttrs), [
                    column.children.length === 0 && columnMenu &&
                        React.createElement(ColumnMenu_1.ColumnMenu, { key: 0, column: {
                                field: column.field,
                                filter: column.filter
                            }, sortable: sortable && _this.props.sortable, sort: _this.props.sort, onSortChange: _this.props.sortChange, filter: _this.props.filter, filterable: _this.props.filterable && column.filterable, filterOperators: _this.props.filterOperators, onFilterChange: _this.props.filterChange, render: columnMenu }),
                    column.headerCell &&
                        React.createElement(column.headerCell, __assign({}, headerCellProps)) ||
                        React.createElement(GridHeaderCell_1.GridHeaderCell, __assign({}, headerCellProps)),
                    _this.props.columnResize && _this.props.columnResize.resizable && column.resizable &&
                        React.createElement(ColumnResizer_1.ColumnResizer, { key: 2, resize: function (e, element, end) {
                                return _this.props.columnResize &&
                                    _this.props.columnResize.dragHandler(e, column, element, end);
                            } })
                ]));
            });
        };
        _this.cellClick = _this.cellClick.bind(_this);
        return _this;
    }
    HeaderRow.prototype.cellClick = function (e, column) {
        e.preventDefault();
        if (!this.props.sortChange) {
            return;
        }
        var _a = GridSortSettings_1.normalize(this.props.sortable || false, column.sortable || false), allowUnsort = _a.allowUnsort, mode = _a.mode;
        var oldDescriptor = (this.props.sort || []).filter(function (d) { return d.field === column.field; })[0];
        var dir = sortSeqMap[allowUnsort][oldDescriptor && oldDescriptor.dir || ''];
        var newDescriptor = (mode === 'single') ?
            [] : (this.props.sort || []).filter(function (d) { return d.field !== column.field; });
        if (dir !== '' && column.field) {
            newDescriptor.push({ field: column.field, dir: dir });
        }
        this.props.sortChange(newDescriptor, e);
    };
    HeaderRow.prototype.cellClass = function (field, headerClassName, locked) {
        var customClass = headerClassName ? ' ' + headerClassName : '';
        var result = "k-header " + (locked ? 'k-grid-header-sticky' : '') + customClass;
        if (this.props.sort &&
            this.props.sort.filter(function (descriptor) { return descriptor.field === field; }).length > 0) {
            result += ' k-sorted';
        }
        return result;
    };
    HeaderRow.prototype.sortIcon = function (sortIndex) {
        if (!this.props.sort) {
            return null;
        }
        return sortIndex >= 0 && [
            React.createElement("span", { key: 1, className: 'k-icon k-i-sort-' + this.props.sort[sortIndex].dir + '-sm' }),
            this.props.sort.length > 1 && React.createElement("span", { key: 2, className: "k-sort-order" }, sortIndex + 1)
        ];
    };
    HeaderRow.prototype.render = function () {
        var _this = this;
        return this.props.columnsMap.map(function (rowIndexes, i) {
            return _this.props.pressHandler && (React.createElement(ColumnDraggable_1.ColumnDraggable, { key: i, pressHandler: _this.props.pressHandler, dragHandler: _this.props.dragHandler, releaseHandler: _this.props.releaseHandler }, _this.cells(rowIndexes, _this.props.columns.findIndex(function (c) { return c.declarationIndex !== -1; })))) || React.createElement("tr", { role: "row" }, _this.cells(rowIndexes));
        });
    };
    return HeaderRow;
}(React.Component));
exports.HeaderRow = HeaderRow;
//# sourceMappingURL=HeaderRow.js.map