"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
/**
 * @hidden
 */
var GridGroupCell = /** @class */ (function (_super) {
    __extends(GridGroupCell, _super);
    function GridGroupCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @hidden
     */
    GridGroupCell.prototype.render = function () {
        var defaultRendering = null;
        var _a = this.props, columnIndex = _a.columnIndex, level = _a.level, columnsCount = _a.columnsCount, rowType = _a.rowType, dataItem = _a.dataItem, field = _a.field, onChange = _a.onChange, expanded = _a.expanded, render = _a.render;
        var definedField = field || '';
        if (columnIndex === undefined || level === undefined || columnIndex < level ||
            columnsCount === undefined || rowType !== 'groupHeader' || dataItem[definedField] === undefined) {
            defaultRendering = (React.createElement("td", { style: this.props.style, key: 'g' + columnIndex, className: "k-group-cell", role: "presentation" }));
        }
        else if (columnIndex <= level) {
            defaultRendering = (React.createElement("td", { style: this.props.style, key: 'g-colspan', colSpan: columnsCount - columnIndex, role: "gridcell", "aria-selected": false, "aria-expanded": expanded, "aria-colindex": 1 },
                React.createElement("p", { className: "k-reset" },
                    React.createElement("a", { onClick: function (e) {
                            e.preventDefault();
                            if (onChange) {
                                onChange({
                                    dataItem: dataItem,
                                    syntheticEvent: e,
                                    field: undefined,
                                    value: !expanded
                                });
                            }
                        }, href: "#", tabIndex: -1, className: expanded ? 'k-i-collapse k-icon' : 'k-i-expand k-icon' }),
                    ((dataItem[definedField] instanceof Date) && dataItem[definedField].toString) ?
                        dataItem[definedField].toString() :
                        dataItem[definedField])));
        }
        return render ?
            render.call(undefined, defaultRendering, this.props) :
            defaultRendering;
    };
    return GridGroupCell;
}(React.Component));
exports.GridGroupCell = GridGroupCell;
//# sourceMappingURL=GridGroupCell.js.map