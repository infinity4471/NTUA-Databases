"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
/**
 * Represents the GridToolbar component.
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *     constructor(props) {
 *         super(props);
 *         this.state = {
 *             data: [{'Column1':'A1', 'Column2':'A2'},
 *                   {'Column1':'B1', 'Column2':'B2'},
 *                   {'Column1':'C1', 'Column2':'C2'}]
 *         };
 *         this.customClick = this.customClick.bind(this);
 *     }
 *
 *     customClick() {
 *         alert("Custom handler in custom toolbar");
 *     }
 *     render() {
 *         return (
 *             <Grid data={this.state.data}>
 *                 <GridToolbar>
 *                     <button
 *                         title="Click"
 *                         className="k-button k-primary"
 *                         onClick={this.customClick}
 *                     >Click
 *                     </button>
 *                 </GridToolbar>
 *             </Grid>
 *         );
 *     }
 * }
 * ReactDOM.render(
 *     <App />,
 *     document.querySelector('my-app')
 * );
 * ```
 */
var GridToolbar = /** @class */ (function (_super) {
    __extends(GridToolbar, _super);
    function GridToolbar() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @hidden
     */
    GridToolbar.prototype.render = function () {
        return (React.createElement("div", { className: "k-header k-grid-toolbar" }, this.props.children));
    };
    /**
     * @hidden
     */
    GridToolbar.displayName = 'KendoReactGridToolbar';
    return GridToolbar;
}(React.Component));
exports.GridToolbar = GridToolbar;
//# sourceMappingURL=GridToolbar.js.map