var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { getNestedValue } from '../utils';
import { classNames } from '@progress/kendo-react-common';
/**
 * The component for each of the items in the `data` property which the Grid renders.
 */
var GridRow = /** @class */ (function (_super) {
    __extends(GridRow, _super);
    function GridRow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @hidden
     */
    GridRow.prototype.render = function () {
        var className = classNames({
            'k-grouping-row': this.props.rowType === 'groupHeader',
            'k-group-footer': this.props.rowType === 'groupFooter',
            'k-master-row': this.props.rowType !== 'groupHeader' &&
                this.props.rowType !== 'groupFooter',
            'k-alt': this.props.rowType !== 'groupHeader' &&
                this.props.rowType !== 'groupFooter' &&
                this.props.isAltRow,
            'k-state-selected': this.props.rowType !== 'groupHeader' &&
                this.props.rowType !== 'groupFooter' &&
                this.props.selectedField !== undefined &&
                getNestedValue(this.props.selectedField, this.props.dataItem),
            'k-grid-edit-row': this.props.isInEdit
        });
        var defaultRendering = (React.createElement("tr", { onClick: this.props.onClick, onDoubleClick: this.props.onDoubleClick, className: className, style: {
                height: this.props.rowHeight ? this.props.rowHeight + 'px' : '',
                visibility: this.props.isHidden ? 'hidden' : ''
            }, role: "row" }, this.props.children));
        return this.props.render ?
            this.props.render.call(undefined, defaultRendering, this.props) :
            defaultRendering;
    };
    return GridRow;
}(React.Component));
export { GridRow };
//# sourceMappingURL=GridRow.js.map