import * as React from 'react';
import * as PropTypes from 'prop-types';
import { FormComponent, FormComponentProps, FormComponentValidity } from '@progress/kendo-react-common';
/**
 * Represents the props of the [KendoReact Input component]({% slug overview_textbox %}).
 * Extends the [native input props](https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement).
 */
export interface InputProps extends React.InputHTMLAttributes<HTMLInputElement>, FormComponentProps {
    /**
     * Renders a floating label for the Input component.
     */
    label?: string;
    value?: string | string[] | number;
    defaultValue?: string | string[];
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    onChange?: React.ChangeEventHandler<HTMLInputElement>;
    onFocus?: React.FocusEventHandler<HTMLInputElement>;
    onBlur?: React.FocusEventHandler<HTMLInputElement>;
}
/**
 * @hidden
 */
export interface InputState {
    value?: string | string[] | number;
}
export declare class Input extends React.Component<InputProps, InputState> implements FormComponent {
    /**
     * @hidden
     */
    static propTypes: {
        label: PropTypes.Requireable<string>;
        validationMessage: PropTypes.Requireable<string>;
        required: PropTypes.Requireable<boolean>;
        validate: PropTypes.Requireable<boolean>;
        id: PropTypes.Requireable<string>;
        ariaLabelledBy: PropTypes.Requireable<string>;
        ariaDescribedBy: PropTypes.Requireable<string>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        defaultValue: string;
        required: boolean;
        validityStyles: boolean;
    };
    private _input;
    private _inputId;
    private valueDuringOnChange?;
    constructor(props: InputProps);
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * Gets the native input element of the Input component.
     */
    readonly element: HTMLInputElement | null;
    /**
     * Gets the value of the Input.
     */
    readonly value: string | string[] | number | undefined;
    /**
     * Gets the `name` property of the Input.
     */
    readonly name: string | undefined;
    /**
     * Represents the validity state into which the Input is set.
     */
    readonly validity: FormComponentValidity;
    /**
     * @hidden
     */
    protected readonly validityStyles: boolean;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentDidUpdate(): void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    protected isInvalid: (state: Object) => boolean;
    /**
     * @hidden
     */
    protected setValidity: () => void;
    private handleChange;
    /**
     * @hidden
     */
    private handleAutoFill;
}
