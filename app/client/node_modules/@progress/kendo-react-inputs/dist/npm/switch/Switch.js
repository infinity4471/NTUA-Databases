"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var messages_1 = require("./../messages");
var SWITCH_CONTAINER = 'k-switch-container';
var SWITCH_HANDLE = 'k-switch-handle';
var SWITCH_LABEL_ON = 'k-switch-label-on';
var SWITCH_LABEL_OFF = 'k-switch-label-off';
/**
 * Represents the [KendoReact Switch component]({% slug overview_switch%}).
 */
var Switch = /** @class */ (function (_super) {
    __extends(Switch, _super);
    /**
     * @hidden
     */
    function Switch(props) {
        var _this = _super.call(this, props) || this;
        /**
         * @hidden
         */
        _this.setValidity = function () {
            if (_this._input && _this._input.setCustomValidity) {
                _this._input.setCustomValidity(_this.validity.valid
                    ? ''
                    : _this.props.validationMessage ||
                        _this.defaultValidationMessage.toLanguageString(messages_1.switchValidation, messages_1.messages[messages_1.switchValidation]));
            }
        };
        _this.limit = function (offset, drag, wrapper) {
            var wrapperWidth = wrapper.offsetWidth;
            var margin = drag.offsetWidth;
            if (offset < 0) {
                return 0;
            }
            else if (offset > wrapperWidth - margin) {
                return wrapperWidth - margin;
            }
            return offset;
        };
        _this.toggle = function (value, event) {
            _this.setState({ checked: value });
            _this.valueDuringOnChange = value;
            kendo_react_common_1.dispatchEvent(_this.props.onChange, event, _this, { value: value });
            _this.valueDuringOnChange = undefined;
        };
        _this._id = kendo_react_common_1.guid();
        _this.defaultValidationMessage = kendo_react_intl_1.provideLocalizationService(_this);
        /**
         * @hidden
         */
        _this.focus = function () {
            if (_this._element) {
                _this._element.focus();
            }
        };
        _this.dummyInput = function (value) {
            /* Dummy component to support forms */
            return (React.createElement("input", { type: "checkbox", checked: _this.props.checked, ref: function (el) { _this._input = el; }, tabIndex: -1, "aria-hidden": true, value: value, style: { opacity: 0, width: 1, border: 0, zIndex: -1, position: 'absolute', left: '50%' }, onChange: kendo_react_common_1.noop }));
        };
        _this.handleClick = function (event) {
            _this.toggle(!_this.value, event);
        };
        _this.handleKeyDown = function (event) {
            if (_this.props.disabled) {
                return;
            }
            var keyCode = event.keyCode;
            if (keyCode === kendo_react_common_1.Keys.space || keyCode === kendo_react_common_1.Keys.enter) {
                _this.toggle(!_this.value, event);
            }
        };
        _this.handleWrapperFocus = function (event) {
            if (_this.props.disabled) {
                return;
            }
            _this.setState({ focused: true });
            var onFocus = _this.props.onFocus;
            if (onFocus) {
                onFocus.call(undefined, event);
            }
        };
        _this.handleWrapperBlur = function (event) {
            if (_this.props.disabled) {
                return;
            }
            _this.setState({ focused: false });
            var onBlur = _this.props.onBlur;
            if (onBlur) {
                onBlur.call(undefined, event);
            }
        };
        _this.state = {
            checked: props.defaultChecked || Switch.defaultProps.defaultChecked,
            focused: false
        };
        return _this;
    }
    Object.defineProperty(Switch.prototype, "value", {
        /**
         * Gets the value of the Switch.
         */
        get: function () {
            return this.valueDuringOnChange !== undefined
                ? this.valueDuringOnChange
                : this.props.checked !== undefined
                    ? this.props.checked
                    : this.state.checked;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Switch.prototype, "element", {
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Switch.prototype, "actionElement", {
        /**
         * @hidden
         */
        get: function () {
            return this._wrapper;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Switch.prototype, "name", {
        /**
         * Gets the `name` property of the Switch.
         */
        get: function () {
            return this.props.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Switch.prototype, "validity", {
        /**
         * Represents the validity state into which the Switch is set.
         */
        get: function () {
            var customError = this.props.validationMessage !== undefined;
            var isValid = this.props.valid !== undefined ?
                this.props.valid :
                !this.props.required ?
                    true :
                    this.value ? true : false;
            var valid = this.props.valid !== undefined ? this.props.valid : isValid;
            return {
                customError: customError,
                valid: valid,
                valueMissing: this.value === null
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Switch.prototype, "validityStyles", {
        /**
         * @hidden
         */
        get: function () {
            return this.props.validityStyles !== undefined
                ? this.props.validityStyles
                : Switch.defaultProps.validityStyles;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Switch.prototype, "required", {
        /**
         * @hidden
         */
        get: function () {
            return this.props.required !== undefined
                ? this.props.required
                : Switch.defaultProps.required;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    Switch.prototype.componentDidMount = function () {
        this.setValidity();
        // Due to dynamic dir calculation
        this.forceUpdate();
    };
    /**
     * @hidden
     */
    Switch.prototype.componentDidUpdate = function () {
        this.setValidity();
    };
    /**
     * @hidden
     */
    Switch.prototype.render = function () {
        var _this = this;
        var focused = this.state.focused;
        var _a = this.props, dir = _a.dir, disabled = _a.disabled, id = _a.id, offLabel = _a.offLabel, onLabel = _a.onLabel, tabIndex = _a.tabIndex;
        this.dir = dir || (this._wrapper && getComputedStyle(this._wrapper).direction) || undefined;
        var isValid = !this.validityStyles || this.validity.valid;
        var switchClassName = kendo_react_common_1.classNames({
            'k-widget': true,
            'k-switch': true,
            'k-switch-on': this.value,
            'k-switch-off': !this.value,
            'k-state-focused': focused,
            'k-state-disabled': disabled,
            'k-state-invalid': !isValid
        }, this.props.className);
        var ariaAttributes = {
            'aria-checked': this.value,
            'aria-disabled': disabled || undefined
        };
        return (React.createElement("span", { ref: function (span) { _this._wrapper = span; }, className: switchClassName, dir: this.dir, onKeyDown: this.handleKeyDown, onClick: this.handleClick, onBlur: this.handleWrapperBlur, onFocus: this.handleWrapperFocus },
            React.createElement("span", __assign({ className: SWITCH_CONTAINER, id: id || this._id, role: 'switch' }, ariaAttributes, { "aria-labelledby": this.props.ariaLabelledBy, "aria-describedby": this.props.ariaDescribedBy, ref: function (span) { _this._element = span; }, tabIndex: kendo_react_common_1.getTabIndex(tabIndex, disabled, undefined), accessKey: this.props.accessKey }),
                this.dummyInput(this.value),
                React.createElement("span", { className: SWITCH_LABEL_ON }, onLabel),
                React.createElement("span", { className: SWITCH_LABEL_OFF }, offLabel),
                React.createElement("span", { className: SWITCH_HANDLE }))));
    };
    /**
     * @hidden
     */
    Switch.propTypes = {
        accessKey: PropTypes.string,
        checked: PropTypes.bool,
        className: PropTypes.string,
        disabled: PropTypes.bool,
        defaultChecked: PropTypes.bool,
        dir: PropTypes.string,
        id: PropTypes.string,
        ariaLabelledBy: PropTypes.string,
        ariaDescribedBy: PropTypes.string,
        offLabel: PropTypes.string,
        required: PropTypes.bool,
        tabIndex: PropTypes.number,
        valid: PropTypes.bool,
        validate: PropTypes.bool,
        validationMessage: PropTypes.string,
        onBlur: PropTypes.any,
        onChange: PropTypes.any,
        onFocus: PropTypes.any,
        onLabel: PropTypes.string
    };
    /**
     * @hidden
     */
    Switch.defaultProps = {
        disabled: false,
        defaultChecked: false,
        offLabel: 'OFF',
        onBlur: kendo_react_common_1.noop,
        onFocus: kendo_react_common_1.noop,
        onLabel: 'ON',
        required: false,
        validityStyles: true
    };
    return Switch;
}(React.Component));
exports.Switch = Switch;
//# sourceMappingURL=Switch.js.map