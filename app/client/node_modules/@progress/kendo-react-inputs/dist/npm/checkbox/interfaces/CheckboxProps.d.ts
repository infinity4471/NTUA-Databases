import { ToggleBaseProps } from '../../interfaces/ToggleBaseProps';
import { FormComponentProps } from '@progress/kendo-react-common';
import { CheckboxChangeEvent } from './CheckboxChangeEvent';
import { CheckboxFocusEvent } from './CheckboxFocusEvent';
/**
 * Represents the props of the [KendoReact Checkbox component]({% slug overview_checkbox %}).
 */
export interface CheckboxProps extends ToggleBaseProps, FormComponentProps {
    /**
     * Sets the checked state of the Checkbox.
     * Set to null to enable the indeterminate state of the Checkbox ([see example]({% slug overview_checkbox %})).
     */
    checked?: boolean | null;
    /**
     * If the type is different than boolean and the `checked` property is provided it's passed to the underlying `input` element.
     * If set to boolean and the `checked` property is omitted sets the checked state of the Checkbox.
     * Set null to enable the indeterminate state of the Checkbox ([see example]({% slug overview_checkbox %})).
     */
    value?: string | number | string[] | boolean | null;
    /**
     * Sets the `className` of the wrapping element of the Checkbox.
     */
    className?: string;
    children?: any;
    /**
     * Sets the default value of checked attribute when used in uncontrolled mode ([see example]({% slug default_state %})).
     */
    defaultChecked?: boolean;
    /**
     * The default value of the Checkbox.
     */
    defaultValue?: any;
    /**
     * Represents the `dir` HTML attribute. This is used to switch from LTR to RTL.
     */
    dir?: string;
    /**
     * Sets the disabled state of the Checkbox
     * ([see example]({% slug disabled_checkbox %})).
     */
    disabled?: boolean;
    /**
     * Sets the `id` of the Checkbox.
     */
    id?: string;
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * Sets the label of the Checkbox component ([see example]({% slug labels_checkbox %})).
     */
    label?: string;
    /**
     * Sets the label position of the Checkbox component ([see example]({% slug labels_checkbox %})).
     */
    labelPlacement?: 'before' | 'after';
    /**
     * The event handler that will be fired when the user edits the value.
     */
    onChange?: (event: CheckboxChangeEvent) => void;
    /**
     * The event handler that will be fired when Checkbox is focused.
     */
    onFocus?: (event: CheckboxFocusEvent) => void;
    /**
     * Sets the `tabIndex` property of the Checkbox.
     * Defaults to `0`.
     */
    tabIndex?: number;
}
