import * as React from 'react';
import { FormComponentProps, DraggableDragEvent } from '@progress/kendo-react-common';
import { Direction } from '../interfaces/Direction';
/**
 * The range object representing the value of the RangeSlider.
 */
export declare type Range = {
    /**
     * The start of the range.
     */
    start: number;
    /**
     * The end of the range.
     */
    end: number;
};
/**
 * Represents the properties of [RangeSlider](% slug api_inputs_rangeslider %) component.
 */
export interface RangeSliderProps extends FormComponentProps {
    /**
     * Sets the `id` property of the top div element of the RangeSlider.
     */
    id?: string;
    /**
     * Sets additional CSS styles to the RangeSlider.
     */
    style?: React.CSSProperties;
    /**
     * Sets additional classes to the RangeSlider.
     */
    className?: string;
    /**
     * The flexible values of type Range - `start and `end`.
     */
    value?: Range;
    /**
     * The default set values of type Range - `start` and `end`.
     */
    defaultValue?: Range;
    /**
     * Triggered after value change - gets outside access to the element, new values and the event type.
     */
    onChange?: (event: RangeSliderChangeEvent) => void;
    /**
     * Determines the children nodes.
     */
    children?: React.ReactNode;
    /**
     * The step by which the value is increment/decrement.
     */
    step?: number;
    /**
     * The minimum possible value of the RangeSlider.
     */
    min: number;
    /**
     * The maximum possible value of the RangeSlider.
     */
    max: number;
    /**
     * The RangeSlider orientation if true - vertical, else - horizontal.
     */
    vertical?: boolean;
    /**
     * Determines the disabled mode of the RangeSlider, if true - disabled.
     */
    disabled?: boolean;
    /**
     * The RangeSlider direction `ltr` or `rtl`.
     */
    dir?: Direction;
    /**
     * Sets the `tabIndex` attribute to the `start` drag handle.
     */
    startTabIndex?: number;
    /**
     * Sets the `tabIndex` attribute to the `end` drag handle.
     */
    endTabIndex?: number;
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
}
/**
 * Represents the target(element and props) of the RangeSliderChangeEvent.
 */
export interface RangeSliderHandle {
    /**
     * The current element or `null` if there is no one.
     */
    element: HTMLDivElement | null;
    /**
     * The props values of the RangeSlider.
     */
    props: RangeSliderProps;
    /**
     * The focus event callback.
     */
    focus: () => void;
}
/**
 * Represent the return type of RangeSliderChangeEvent.
 */
export interface RangeSliderChangeEvent {
    /**
     * The value from type Range - `start` and `end`.
     */
    value: Range;
    /**
     * The target of the RangeSliderChangeEvent from RangeSliderHandle.
     */
    target: RangeSliderHandle;
    /**
     * The event of the RangeSliderChangeEvent.
     */
    syntheticEvent: React.SyntheticEvent<any> | DraggableDragEvent;
}
/**
 * Represents the RangeSlider component.
 */
export declare const RangeSlider: React.ForwardRefExoticComponent<RangeSliderProps & React.RefAttributes<RangeSliderHandle>>;
