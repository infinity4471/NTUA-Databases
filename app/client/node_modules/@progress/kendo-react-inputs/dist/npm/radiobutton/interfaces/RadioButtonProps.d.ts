/// <reference types="react" />
import { RadioButtonChangeEvent } from './RadioButtonChangeEvent';
import { RadioButtonFocusEvent } from './RadioButtonFocusEvent';
/**
 * Represents the props of the [KendoReact RadioButton component]({% slug overview_radiobutton %}).
 */
export interface RadioButtonProps {
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    children?: any;
    /**
     * Specifies if the Radio button is checked.
     */
    checked?: boolean;
    /**
     * Specifies a list of CSS classes that will be added to the Radio button.
     */
    className?: string;
    /**
     * Specifies if the Radio button is disabled.
     */
    disabled?: boolean;
    /**
     * Specifies the current index of the Radio button.
     */
    index?: number;
    /**
     * Sets the `id` of the Radio button.
     */
    id?: string;
    /**
     * Sets the label of the Radio button ([see example]({% slug labels_radiobutton %})).
     */
    label?: string;
    /**
     * Sets the label position of the Radio button ([see example]({% slug labels_radiobutton %})).
     * Accepts two options: `before` or `after`. Defaults to `after`.
     */
    labelPlacement?: string;
    /**
     * Sets the `name` property of the Radio button.
     */
    name?: string;
    /**
     * Sets additional CSS styles to the Radio button.
     */
    style?: React.CSSProperties;
    /**
     * Sets the `tabIndex` property of the Radio button.
     * Defaults to `0`.
     */
    tabIndex?: number;
    /**
     * Overrides the validity state of the component.
     * If `valid` is set, the `required` property will be ignored.
     *
     * This property is part of the [FormComponentProps]({% slug api_common_formcomponentprops %}) interface.
     */
    valid?: boolean;
    /**
     * Sets the value to be submitted.
     */
    value?: any;
    /**
     * The event handler that will be fired when the changes the selected value.
     */
    onChange?: (event: RadioButtonChangeEvent) => void;
    /**
     * The event handler that will be fired when Radio button is focused.
     */
    onFocus?: (event: RadioButtonFocusEvent) => void;
}
