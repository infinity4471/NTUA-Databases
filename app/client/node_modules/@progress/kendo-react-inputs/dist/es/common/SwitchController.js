import SwitchModel from './SwitchModel';
/**
 * @hidden
 */
var DEFAULT_THRESHOLD = 5;
/**
 * @hidden
 */
var noop = function () { };
/**
 * @hidden
 */
var SwitchController = /** @class */ (function () {
    function SwitchController(updateView, onChange) {
        if (updateView === void 0) { updateView = noop; }
        if (onChange === void 0) { onChange = noop; }
        var _this = this;
        this.overrideChecked = function (checked) {
            _this._checked = checked;
        };
        this.change = function (checked, event) {
            _this._checked = checked;
            _this.updateView(_this.updateModel(checked ? _this.constrain : 0));
            _this.onChange(checked, event);
        };
        this.addAnimation = function (model) {
            if (model.transition === true) {
                model.transition = 'all 200ms ease-out';
            }
            else {
                model.transition = 'none';
            }
            return model;
        };
        this.onPress = function (event) {
            var pageX = event.pageX;
            _this.lastPressX = _this.originalPressX = pageX;
        };
        this.onRelease = function (event) {
            var pageX = event.pageX;
            var delta = Math.abs(_this.originalPressX - pageX);
            var snapPoint = _this.constrain / 2;
            var checked = delta < DEFAULT_THRESHOLD ? !_this._checked : _this.handlePosition > snapPoint;
            _this.change(checked, event);
        };
        this.onDrag = function (event) {
            var pageX = event.pageX;
            var _a = _this.coords, left = _a.left, right = _a.right;
            var overElement = pageX > left && pageX < right;
            if (overElement) {
                var delta = _this.reverse ? _this.lastPressX - pageX : pageX - _this.lastPressX;
                var position = _this.limit(_this.handlePosition + delta);
                _this.lastPressX = pageX;
                _this.handlePosition = position;
                _this.updateView(_this.updateModel(_this.handlePosition));
            }
            if (pageX > right) {
                _this.updateView(_this.updateModel(_this.reverse ? 0 : _this.constrain));
            }
            if (pageX < left) {
                _this.updateView(_this.updateModel(_this.reverse ? 0 : _this.constrain));
            }
        };
        this.limit = function (value) {
            if (value > _this.constrain) {
                return _this.constrain;
            }
            if (value < 0) {
                return 0;
            }
            return value;
        };
        this.handlePosition = 0;
        this.wrapperOffset = 0;
        this.handleOffset = 0;
        this.handleMargin = 4;
        this.updateView = updateView;
        this.onChange = onChange;
    }
    SwitchController.prototype.updateState = function (_a) {
        var wrapperOffset = _a.wrapperOffset, handleOffset = _a.handleOffset, checked = _a.checked, _b = _a.animate, animate = _b === void 0 ? true : _b, coords = _a.coords, handleMargin = _a.handleMargin, reverse = _a.reverse;
        this.wrapperOffset = wrapperOffset;
        this.handleOffset = handleOffset;
        this.coords = coords;
        this.handleMargin = handleMargin;
        this._checked = checked;
        this.reverse = reverse;
        this.updateView(this.updateModel(checked ? this.constrain : 0, animate));
    };
    Object.defineProperty(SwitchController.prototype, "isChecked", {
        get: function () {
            return this._checked;
        },
        enumerable: true,
        configurable: true
    });
    SwitchController.prototype.updateModel = function (position, animate) {
        if (animate === void 0) { animate = true; }
        var pos = this.reverse ? this.wrapperOffset / 2 - position : position;
        return new SwitchModel(pos, animate);
    };
    Object.defineProperty(SwitchController.prototype, "constrain", {
        get: function () {
            return this.wrapperOffset - this.handleOffset - this.handleMargin;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwitchController.prototype, "checked", {
        get: function () {
            return this._checked;
        },
        enumerable: true,
        configurable: true
    });
    return SwitchController;
}());
export default SwitchController;
//# sourceMappingURL=SwitchController.js.map