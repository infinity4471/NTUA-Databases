var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { Draggable, guid, classNames, focusFirstFocusableChild, getTabIndex } from '@progress/kendo-react-common';
import { Slider } from './../main';
import { fitIntoBounds, isPresent } from './utils/misc';
import { getColorFromHue, parseColor, getHSV, getColorFromHSV, getRGBA, getColorFromRGBA } from './utils/color-parser';
import { cacheHsva, removeCachedColor, getCachedHsva, getCachedRgba, getCachedHex, cacheRgba, cacheHex } from './utils/color-cache';
import ColorInput from './ColorInput';
var FORMAT = 'rgba';
var DEFAULT_SELECTED_COLOR = 'rgba(255, 255, 255, 1)';
/**
 * Represents the [KendoReact ColorGradient component]({% slug overview_colorgradient %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *     render() {
 *         return <ColorGradient />;
 *     }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
var ColorGradient = /** @class */ (function (_super) {
    __extends(ColorGradient, _super);
    function ColorGradient(props) {
        var _this = _super.call(this, props) || this;
        /**
         * @hidden
         */
        _this.onHexChange = function (hex, value, event) {
            if (_this.isUncontrolled) {
                var hsva = getHSV(value);
                _this.setState({ hsva: hsva, backgroundColor: getColorFromHue(hsva.h), rgba: getRGBA(value), hex: hex });
            }
            else {
                cacheHex(_this.state.guid, value, hex);
            }
            _this.dispatchChangeEvent(value, event, event.nativeEvent);
        };
        /**
         * @hidden
         */
        _this.onRgbaChange = function (rgba, event) {
            var value = getColorFromRGBA(rgba);
            if (_this.isUncontrolled) {
                var hsva = getHSV(value);
                var hex = parseColor(value, 'hex');
                _this.setState({ hsva: hsva, backgroundColor: getColorFromHue(hsva.h), rgba: rgba, hex: hex });
            }
            else {
                cacheRgba(_this.state.guid, value, rgba);
            }
            _this.dispatchChangeEvent(value, event.syntheticEvent, event.nativeEvent);
        };
        /**
         * @hidden
         */
        _this.onAlphaSliderChange = function (event) {
            _this.handleHsvaChange(Object.assign({}, _this.state.hsva, { a: event.value / 100 }), event.syntheticEvent, event.nativeEvent);
        };
        /**
         * @hidden
         */
        _this.onHueSliderChange = function (event) {
            _this.handleHsvaChange(Object.assign({}, _this.state.hsva, { h: event.value }), event.syntheticEvent, event.nativeEvent);
        };
        /**
         * @hidden
         */
        _this.onDrag = function (e) {
            _this.gradientWrapper.classList.add('k-dragging');
            _this.changePosition(e.event);
        };
        /**
         * @hidden
         */
        _this.onRelease = function () {
            _this.gradientWrapper.classList.remove('k-dragging');
        };
        /**
         * @hidden
         */
        _this.onGradientWrapperClick = function (event) {
            _this.changePosition(event);
        };
        /**
         * @hidden
         */
        _this.changePosition = function (event) {
            var gradientRectMetrics = _this.getGradientRectMetrics();
            var deltaX = event.clientX - gradientRectMetrics.left;
            var deltaY = event.clientY - gradientRectMetrics.top;
            var left = fitIntoBounds(deltaX, 0, gradientRectMetrics.width);
            var top = fitIntoBounds(deltaY, 0, gradientRectMetrics.height);
            var hsva = Object.assign({}, _this.state.hsva, { s: left / gradientRectMetrics.width, v: 1 - top / gradientRectMetrics.height });
            _this.handleHsvaChange(hsva, event, event.nativeEvent);
        };
        /**
         * @hidden
         */
        _this.focus = function () {
            focusFirstFocusableChild(_this.wrapper);
        };
        var value = props.value || props.defaultValue || parseColor(DEFAULT_SELECTED_COLOR, FORMAT);
        _this.state = Object.assign({}, ColorGradient.getStateFromValue(value), { isFirstRender: true, guid: guid() });
        return _this;
    }
    /**
     * @hidden
     */
    ColorGradient.getDerivedStateFromProps = function (props, state) {
        if (props.value && !state.isFirstRender) {
            // The component is in controlled mode.
            return ColorGradient.getStateFromValue(props.value, state.guid);
        }
        return null;
    };
    /**
     * @hidden
     */
    ColorGradient.prototype.componentDidMount = function () {
        this.setAlphaSliderBackground(this.state.backgroundColor);
        if (this.state.isFirstRender) {
            this.setState({ isFirstRender: false });
        }
    };
    /**
     * @hidden
     */
    ColorGradient.prototype.componentWillUnmount = function () {
        removeCachedColor(this.state.guid);
    };
    /**
     * @hidden
     */
    ColorGradient.prototype.componentDidUpdate = function (_, prevState) {
        if (prevState.backgroundColor !== this.state.backgroundColor) {
            this.setAlphaSliderBackground(this.state.backgroundColor);
        }
    };
    /**
     * @hidden
     */
    ColorGradient.prototype.renderRectangleDragHandle = function () {
        var style = {};
        if (!this.state.isFirstRender) {
            var gradientRectMetrics = this.getGradientRectMetrics();
            var top_1 = (1 - this.state.hsva.v) * gradientRectMetrics.height;
            var left = this.state.hsva.s * gradientRectMetrics.width;
            style.top = top_1 + "px";
            style.left = left + "px";
        }
        return React.createElement("div", { className: "k-draghandle", style: style });
    };
    /**
     * @hidden
     */
    ColorGradient.prototype.handleHsvaChange = function (hsva, syntheticEvent, nativeEvent) {
        var value = getColorFromHSV(hsva);
        if (this.isUncontrolled) {
            var hex = parseColor(value, 'hex');
            this.setState({ hsva: hsva, backgroundColor: getColorFromHue(hsva.h), rgba: getRGBA(value), hex: hex });
        }
        else {
            cacheHsva(this.state.guid, value, hsva);
        }
        this.dispatchChangeEvent(value, syntheticEvent, nativeEvent);
    };
    /**
     * @hidden
     */
    ColorGradient.prototype.dispatchChangeEvent = function (value, syntheticEvent, nativeEvent) {
        if (this.props.onChange) {
            this.props.onChange.call(undefined, { syntheticEvent: syntheticEvent, nativeEvent: nativeEvent, target: this, value: value });
        }
    };
    /**
     * @hidden
     */
    ColorGradient.getStateFromValue = function (value, componentGuid) {
        if (!isPresent(parseColor(value, 'hex'))) {
            // Validate/sanitize the input.
            value = DEFAULT_SELECTED_COLOR;
        }
        var hsva = getCachedHsva(componentGuid, value) || getHSV(value);
        var rgba = getCachedRgba(componentGuid, value) || getRGBA(value);
        var hex = getCachedHex(componentGuid, value) || parseColor(value, 'hex');
        return { hsva: hsva, backgroundColor: getColorFromHue(hsva.h), rgba: rgba, hex: hex };
    };
    /**
     * @hidden
     */
    ColorGradient.prototype.setAlphaSliderBackground = function (backgroundColor) {
        if (this.props.opacity && this.alphaSlider && this.alphaSlider.sliderTrack) {
            this.alphaSlider.sliderTrack.style.background = "linear-gradient(to top, transparent, " + backgroundColor + ")";
        }
    };
    Object.defineProperty(ColorGradient.prototype, "isUncontrolled", {
        /**
         * @hidden
         */
        get: function () {
            return this.props.value === undefined;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    ColorGradient.prototype.getGradientRectMetrics = function () {
        return this.gradientWrapper.getBoundingClientRect();
    };
    /**
     * @hidden
     */
    ColorGradient.prototype.render = function () {
        var _this = this;
        var className = classNames('k-widget k-flatcolorpicker', { 'k-state-disabled': this.props.disabled });
        return (React.createElement("div", { id: this.props.id, className: className, "aria-disabled": this.props.disabled ? 'true' : undefined, style: this.props.style, ref: function (el) { return _this.wrapper = el; }, tabIndex: getTabIndex(this.props.tabIndex, this.props.disabled), "aria-labelledby": this.props.ariaLabelledBy, "aria-describedby": this.props.ariaDescribedBy },
            React.createElement("div", { className: "k-hbox k-hsv-wrap" },
                React.createElement("div", { className: "k-hsv-rectangle", style: { background: this.state.backgroundColor } },
                    React.createElement(Draggable, { onDrag: this.onDrag, onRelease: this.onRelease, ref: function (el) { return _this.gradientWrapper = el ? el.element : undefined; } },
                        React.createElement("div", { className: "k-hsv-gradient", style: { touchAction: 'none' }, onClick: this.onGradientWrapperClick }, this.renderRectangleDragHandle()))),
                React.createElement("div", { className: "k-hbox k-sliders-wrap" },
                    React.createElement(Slider, { value: this.state.hsva.h, buttons: false, vertical: true, min: 0, max: 360, step: 5, onChange: this.onHueSliderChange, className: "k-hue-slider", disabled: this.props.disabled }),
                    this.props.opacity && React.createElement(Slider, { value: isPresent(this.state.hsva.a) ? this.state.hsva.a * 100 : 100, buttons: false, vertical: true, min: 0, max: 100, step: 1, onChange: this.onAlphaSliderChange, className: "k-alpha-slider", disabled: this.props.disabled, ref: function (el) { return _this.alphaSlider = el; } }))),
            React.createElement(ColorInput, { rgba: this.state.rgba, onRgbaChange: this.onRgbaChange, hex: this.state.hex, onHexChange: this.onHexChange, opacity: this.props.opacity, disabled: this.props.disabled })));
    };
    /**
     * @hidden
     */
    ColorGradient.propTypes = {
        defaultValue: PropTypes.string,
        value: PropTypes.string,
        onChange: PropTypes.func,
        opacity: PropTypes.bool,
        disabled: PropTypes.bool,
        style: PropTypes.any,
        id: PropTypes.string,
        ariaLabelledBy: PropTypes.string,
        ariaDescribedBy: PropTypes.string
    };
    /**
     * @hidden
     */
    ColorGradient.defaultProps = {
        opacity: true
    };
    return ColorGradient;
}(React.Component));
export { ColorGradient };
//# sourceMappingURL=ColorGradient.js.map