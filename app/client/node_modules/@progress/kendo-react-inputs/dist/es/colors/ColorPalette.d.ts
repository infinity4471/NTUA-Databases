import * as React from 'react';
import * as PropTypes from 'prop-types';
import { ColorPaletteProps } from './interfaces/ColorPaletteProps';
/**
 * @hidden
 */
export declare const DEFAULT_TILE_SIZE = 24;
/**
 * @hidden
 */
export declare const DEFAULT_COLUMNS_COUNT = 10;
/**
 * @hidden
 */
export declare const DEFAULT_PRESET = "office";
/**
 * @hidden
 */
export interface ColorPaletteState {
    selectedColor?: string;
    focusedColor?: string;
    isFirstRender: boolean;
}
/**
 * Represents the [KendoReact ColorPalette component]({% slug overview_colorpalette %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *     render() {
 *         return <ColorPalette palette='basic' />;
 *     }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export declare class ColorPalette extends React.Component<ColorPaletteProps, ColorPaletteState> {
    /**
     * @hidden
     */
    static propTypes: {
        palette: PropTypes.Requireable<string | string[]>;
        columns: PropTypes.Requireable<number>;
        tileSize: PropTypes.Requireable<any>;
        defaultValue: PropTypes.Requireable<string>;
        value: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        tabIndex: PropTypes.Requireable<number>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        id: PropTypes.Requireable<string>;
        ariaLabelledBy: PropTypes.Requireable<string>;
        ariaDescribedBy: PropTypes.Requireable<string>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        palette: string;
        tileSize: number;
    };
    /**
     * @hidden
     */
    wrapper: HTMLDivElement | null;
    private paletteService;
    private guid;
    constructor(props: ColorPaletteProps);
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * @hidden
     */
    render(): "" | JSX.Element;
    /**
     * @hidden
     */
    static getDerivedStateFromProps(props: ColorPaletteProps, state: ColorPaletteState): {
        selectedColor: string;
        isFirstRender?: undefined;
    } | {
        isFirstRender: boolean;
        selectedColor?: undefined;
    };
    private onKeyDown;
    private onColorClick;
    private onFocus;
    private onBlur;
    private handleCellNavigation;
    private handleEnter;
    private dispatchChangeEvent;
    private readonly focusedColorCooridanates;
    private readonly isUncontrolled;
    private getPaletteInfo;
    private renderRows;
    private renderColumns;
    private createCellId;
}
