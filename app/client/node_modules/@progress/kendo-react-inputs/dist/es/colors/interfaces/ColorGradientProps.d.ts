/// <reference types="react" />
import { ColorGradientChangeEvent } from './ColorGradientChangeEvent';
/**
 * Represents the props of the [KendoReact ColorGradient component]({% slug overview_colorgradient %}).
 */
export interface ColorGradientProps {
    /**
     * The default value of the ColorGradient.
     */
    defaultValue?: string;
    /**
     * The value of the ColorGradient.
     */
    value?: string;
    /**
     * Determines the event handler that will be fired when the user edits the value.
     */
    onChange?: (event: ColorGradientChangeEvent) => void;
    /**
     * Determines whether the alpha slider and the alpha input will be displayed. Defaults to `true`.
     */
    opacity?: boolean;
    /**
     * Determines whether the ColorGradient is disabled
     * ([more information and example]({% slug disabled_colorgradient %})).
     *
     * @example
     * ```jsx
     * class App extends React.Component {
     *    render() {
     *       return (
     *           <ColorGradient disabled={true} />
     *       );
     *    }
     * }
     * ReactDOM.render(<App />, document.querySelector('my-app'));
     * ```
     */
    disabled?: boolean;
    /**
     * The styles that are applied to the ColorGradient.
     */
    style?: React.CSSProperties;
    /**
     * Sets the `tabIndex` property of the ColorGradient.
     */
    tabIndex?: number;
    /**
     * Specifies the id of the component.
     */
    id?: string;
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
}
