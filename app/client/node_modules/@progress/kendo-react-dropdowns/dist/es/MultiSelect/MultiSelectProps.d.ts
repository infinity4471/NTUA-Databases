/// <reference types="react" />
import MultiSelect from './MultiSelect';
import { FormComponentProps } from '@progress/kendo-react-common';
import { FilterChangeEvent, ChangeEvent, OpenEvent, CloseEvent, FocusEvent, BlurEvent, PageChangeEvent } from './../common/events';
import { VirtualizationSettings, DropDownsPopupSettings } from '../common/settings';
import { ListItemProps } from '../common/ListItem';
import { TagData } from './TagList';
/**
 * Represents the object of the `filterChange` MultiSelect event.
 */
export interface MultiSelectFilterChangeEvent extends FilterChangeEvent<MultiSelect> {
}
/**
 * Represents the object of the `change` MultiSelect event.
 */
export interface MultiSelectChangeEvent extends ChangeEvent<MultiSelect> {
}
/**
 * Represents the object of the `open` MultiSelect event.
 */
export interface MultiSelectOpenEvent extends OpenEvent<MultiSelect> {
}
/**
 * Represents the object of the `close` MultiSelect event.
 */
export interface MultiSelectCloseEvent extends CloseEvent<MultiSelect> {
}
/**
 * Represents the object of the `focus` MultiSelect event.
 */
export interface MultiSelectFocusEvent extends FocusEvent<MultiSelect> {
}
/**
 * Represents the object of the `blur` MultiSelect event.
 */
export interface MultiSelectBlurEvent extends BlurEvent<MultiSelect> {
}
/**
 * Represents the object of the `pageChange` MultiSelect event.
 */
export interface MultiSelectPageChangeEvent extends PageChangeEvent<MultiSelect> {
}
/**
 * Represents the props of the [KendoReact MultiSelect component]({% slug overview_multiselect %}).
 */
export interface MultiSelectProps extends FormComponentProps {
    /**
     * Specifies whether the MultiSelect allows user-defined values that are not present in the dataset ([see example]({% slug custom_values_multiselect %})). Defaults to `false`.
     */
    allowCustom?: boolean;
    /**
     * Sets the data of the MultiSelect ([see example]({% slug binding_multiselect %})).
     */
    data?: any[];
    /**
     * Sets the opened and closed state of the MultiSelect.
     */
    opened?: boolean;
    /**
     * Determines whether to close the options list of the MultiSelect after the item selection is finished.
     *
     * @example
     * ```jsx
     * class App extends React.Component {
     *    render() {
     *       return (
     *              <MultiSelect
     *                  data={[ "Albania", "Andorra", "Austria", "Belarus" ]}
     *                  autoClose={false}
     *              />
     *       );
     *    }
     * }
     * ReactDOM.render(<App />, document.querySelector('my-app'));
     * ```
     *
     * @default true
     */
    autoClose?: boolean;
    /**
     * The styles that are applied to the MultiSelect.
     */
    style?: React.CSSProperties;
    /**
     * Sets the value of the MultiSelect ([see example]({% slug binding_multiselect %})). It can either be of the primitive (string, numbers) or of the complex (objects) type.
     */
    value?: Array<any>;
    /**
     * The hint that is displayed when the MultiSelect is empty.
     */
    placeholder?: string;
    /**
     * Sets the tags of the MultiSelect ([see example]({% slug customtags_multiselect %})).
     */
    tags?: Array<TagData>;
    /**
     * Sets the key for comparing the data items of the MultiSelect ([see example]({% slug binding_multiselect %}#toc-datasets-of-objects)). If `dataItemKey` is not set, the MultiSelect compares the items by reference.
     */
    dataItemKey?: string;
    /**
     * Sets the default value of the MultiSelect. Similar to the native `select` HTML element.
     */
    defaultValue?: Array<any>;
    /**
     * Sets additional classes to the MultiSelect.
     */
    className?: string;
    /**
     * Sets the disabled state of the MultiSelect.
     */
    disabled?: boolean;
    /**
     * Represents the `dir` HTML attribute.
     */
    dir?: string;
    /**
     * Enables the filtering functionality of the MultiSelect ([more information and examples]({% slug filtering_multiselect %})).
     */
    filterable?: boolean;
    /**
     * Specifies the id of the component.
     */
    id?: string;
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * If set, the MultiSelect will use it to get the focused item index.
     *
     * Default functionality returns the first item which starts with the input text.
     *
     * @example
     * ```jsx-no-run
     * const focusedItemIndex = (data, inputText, textField) => {
     *     let text = inputText.toLowerCase();
     *     return data.findIndex(item =>
     *         String(textField ? item[textField] : item).toLowerCase().includes(text));
     * };
     *
     * <MultiSelect focusedItemIndex={focusedItemIndex} />
     * ```
     */
    focusedItemIndex?: (data: any, inputText: string, textField?: string) => number;
    /**
     * Sets the value of filtering input. Useful for making the filtering input a [controlled component](https://reactjs.org/docs/forms.html#controlled-components).
     */
    filter?: string;
    /**
     * Sets the loading state of the MultiSelect ([see example]({% slug filtering_multiselect %}#toc-basic-configuration)).
     */
    loading?: boolean;
    /**
     * Specifies the `tabIndex` of the MultiSelect.
     */
    tabIndex?: number;
    /**
     * Specifies the `accessKey` of the MultiSelect.
     */
    accessKey?: string;
    /**
     * Sets the data item field that represents the item text ([see example]({% slug binding_multiselect %}#toc-datasets-of-objects)). If the data contains only primitive values, do not define it.
     */
    textField?: string;
    /**
     * Renders a floating label for the MultiSelect.
     */
    label?: string;
    /**
     * Configures the popup of the MultiSelect.
     */
    popupSettings?: DropDownsPopupSettings;
    /**
     * Configures the virtual scrolling of the MultiSelect ([see example]({% slug virtualization_multiselect %})).
     */
    virtual?: VirtualizationSettings;
    /**
     * Fires each time the popup of the MultiSelect is about to open.
     */
    onOpen?: (event: MultiSelectOpenEvent) => void;
    /**
     * Fires each time the popup of the MultiSelect is about to close.
     */
    onClose?: (event: MultiSelectCloseEvent) => void;
    /**
     * Fires each time the user focuses the MultiSelect.
     */
    onFocus?: (event: MultiSelectFocusEvent) => void;
    /**
     * Fires each time the MultiSelect gets blurred.
     */
    onBlur?: (event: MultiSelectBlurEvent) => void;
    /**
     * Fires each time the value of the MultiSelect is about to change ([see examples]({% slug binding_multiselect %})).
     */
    onChange?: (event: MultiSelectChangeEvent) => void;
    /**
     * Fires each time the user types in the filter input ([see example]({% slug filtering_multiselect %}#toc-basic-configuration)). You can filter the source based on the passed filtration value.
     */
    onFilterChange?: (event: MultiSelectFilterChangeEvent) => void;
    /**
     * Fires when both the virtual scrolling of the MultiSelect is enabled and when the component requires data for another page ([see example]({% slug virtualization_multiselect %})).
     */
    onPageChange?: (event: MultiSelectPageChangeEvent) => void;
    /**
     * Fires when a MultiSelect item is about to be rendered ([see example]({% slug customrendering_multiselect %}#toc-items)). Used to override the default appearance of the list items.
     */
    itemRender?: (li: React.ReactElement<HTMLLIElement>, itemProps: ListItemProps) => React.ReactNode;
    /**
     * Deprecated, use tagRender instead.
     */
    valueRender?: (element: React.ReactElement<HTMLSpanElement>, value: any) => React.ReactNode;
    /**
     * Fires when the element which indicates no data in the popup is about to be rendered ([see example]({% slug customrendering_multiselect %}#toc-no-data)). Used to override the default appearance of the element.
     */
    listNoDataRender?: (element: React.ReactElement<HTMLDivElement>) => React.ReactNode;
    /**
     * Fires when a tag element is about to be rendered ([see example]({% slug customrendering_multiselect %}#toc-tags)). Used to override the default appearance of the element.
     */
    tagRender?: (tagData: TagData, li: React.ReactElement<HTMLLIElement>) => React.ReactElement<HTMLLIElement> | null;
    /**
     * Sets the header component of the MultiSelect ([see example]({% slug customrendering_multiselect %}#toc-headers-and-footers)).
     */
    header?: React.ReactNode;
    /**
     * Sets the footer component of the MultiSelect ([see example]({% slug customrendering_multiselect %}#toc-headers-and-footers)).
     */
    footer?: React.ReactNode;
}
