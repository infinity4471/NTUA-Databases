import * as React from 'react';
import * as PropTypes from 'prop-types';
import VirtualScroll from './VirtualScroll';
import { Navigation } from './Navigation';
import { ListItemProps } from './ListItem';
import { InternalState, DropDownStateBase, Page, DropDownsPopupSettings, VirtualizationSettings } from './settings';
/**
 * @hidden
 */
export interface DropDownComponentProps {
    data?: any[];
    opened?: boolean;
    value?: any;
    disabled?: boolean;
    tabIndex?: number;
    dir?: string;
    defaultItem?: any;
    filterable?: boolean;
    filter?: string | null;
    textField?: string;
    dataItemKey?: string;
    popupSettings?: DropDownsPopupSettings;
    style?: React.CSSProperties;
    virtual?: VirtualizationSettings;
    onOpen?: (event: any) => void;
    onClose?: (event: any) => void;
    onFocus?: (event: any) => void;
    onBlur?: (event: any) => void;
    onChange?: (event: any) => void;
    onFilterChange?: (event: any) => void;
    onPageChange?: (event: any) => void;
    itemRender?: (li: React.ReactElement<HTMLLIElement>, itemProps: ListItemProps) => React.ReactNode;
    listNoDataRender?: (element: React.ReactElement<HTMLDivElement>) => React.ReactNode;
    header?: React.ReactNode;
    footer?: React.ReactNode;
}
/**
 * @hidden
 */
export interface DropDownComponent {
    props: DropDownComponentProps;
    setState: Function;
    forceUpdate: Function;
    state: DropDownStateBase;
    element: HTMLSpanElement | null;
    handleItemSelect: Function;
    value: any;
}
/**
 * @hidden
 */
export default class DropDownBase {
    static basicPropTypes: {
        opened: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        dir: PropTypes.Requireable<string>;
        tabIndex: PropTypes.Requireable<number>;
        accessKey: PropTypes.Requireable<string>;
        data: PropTypes.Requireable<any[]>;
        textField: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        label: PropTypes.Requireable<string>;
        loading: PropTypes.Requireable<boolean>;
        popupSettings: PropTypes.Requireable<PropTypes.InferProps<{
            animate: PropTypes.Requireable<boolean | PropTypes.InferProps<{
                openDuration: PropTypes.Requireable<number>;
                closeDuration: PropTypes.Requireable<number>;
            }>>;
            width: PropTypes.Requireable<string | number>;
            height: PropTypes.Requireable<string | number>;
        }>>;
        onOpen: PropTypes.Requireable<(...args: any[]) => any>;
        onClose: PropTypes.Requireable<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        itemRender: PropTypes.Requireable<(...args: any[]) => any>;
        listNoDataRender: PropTypes.Requireable<(...args: any[]) => any>;
        focusedItemIndex: PropTypes.Requireable<(...args: any[]) => any>;
        header: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        footer: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    };
    static propTypes: {
        value: PropTypes.Requireable<any>;
        defaultValue: PropTypes.Requireable<any>;
        filterable: PropTypes.Requireable<boolean>;
        filter: PropTypes.Requireable<string>;
        virtual: PropTypes.Requireable<PropTypes.InferProps<{
            pageSize: PropTypes.Validator<number>;
            skip: PropTypes.Validator<number>;
            total: PropTypes.Validator<number>;
        }>>;
        onFilterChange: PropTypes.Requireable<(...args: any[]) => any>;
        onPageChange: PropTypes.Requireable<(...args: any[]) => any>;
        opened: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        dir: PropTypes.Requireable<string>;
        tabIndex: PropTypes.Requireable<number>;
        accessKey: PropTypes.Requireable<string>;
        data: PropTypes.Requireable<any[]>;
        textField: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        label: PropTypes.Requireable<string>;
        loading: PropTypes.Requireable<boolean>;
        popupSettings: PropTypes.Requireable<PropTypes.InferProps<{
            animate: PropTypes.Requireable<boolean | PropTypes.InferProps<{
                openDuration: PropTypes.Requireable<number>;
                closeDuration: PropTypes.Requireable<number>;
            }>>;
            width: PropTypes.Requireable<string | number>;
            height: PropTypes.Requireable<string | number>;
        }>>;
        onOpen: PropTypes.Requireable<(...args: any[]) => any>;
        onClose: PropTypes.Requireable<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        itemRender: PropTypes.Requireable<(...args: any[]) => any>;
        listNoDataRender: PropTypes.Requireable<(...args: any[]) => any>;
        focusedItemIndex: PropTypes.Requireable<(...args: any[]) => any>;
        header: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        footer: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    };
    static defaultProps: {
        popupSettings: {
            animate: boolean;
            height: string;
        };
        required: boolean;
        validityStyles: boolean;
    };
    popupWidth?: string;
    wrapper: HTMLSpanElement | null;
    list: HTMLUListElement;
    dirCalculated?: string;
    readonly vs: VirtualScroll;
    readonly navigation: Navigation;
    readonly listBoxId: string;
    readonly guid: string;
    readonly component: DropDownComponent;
    constructor(component: DropDownComponent);
    didMount(): void;
    calculateDir(): void;
    calculatePopupWidth(): void;
    scrollToItem(itemIndex: number, vsEnabled?: boolean): void;
    handleItemClick: (index: number, event: React.KeyboardEvent<HTMLInputElement> | React.MouseEvent<HTMLLIElement, MouseEvent>) => void;
    handleFocus: React.FocusEventHandler<HTMLSpanElement>;
    filterChanged: (text: string, state: InternalState) => void;
    initState(): InternalState;
    applyState(state: InternalState): void;
    togglePopup: (state: InternalState) => void;
    pageChange: (page: Page, syntheticEvent: React.SyntheticEvent<any, Event>) => void;
    triggerOnPageChange(state: InternalState, skip: number, take: number): void;
    triggerPageChangeCornerItems(item: any, state: InternalState): void;
    scrollToVirtualItem: (virtual: VirtualizationSettings, selectedItemIndex: number) => void;
    renderScrollWrapper: (children: React.ReactNode) => {};
    renderScrollElement: () => JSX.Element;
    getPopupSettings(): DropDownsPopupSettings;
}
