/// <reference types="react" />
import { PopupAnimation } from '@progress/kendo-react-popup';
/**
 * Represents the `skip` and `take` configurations which are wrapped in the `page` object.
 */
export interface Page {
    /**
     * The number of records to skip.
     */
    skip: number;
    /**
     * The number of records to take.
     */
    take: number;
}
/**
 * The virtualization settings.
 */
export interface VirtualizationSettings {
    /**
     * The number of the requested records.
     */
    pageSize: number;
    /**
     * The number of records to skip.
     */
    skip: number;
    /**
     * The number of all records.
     */
    total: number;
}
/**
 * The settings of the popup container.
 */
export interface DropDownsPopupSettings {
    /**
     * Controls the popup animation. By default, the open and close animations are enabled.
     */
    animate?: boolean | PopupAnimation;
    /**
     * Specifies a list of CSS classes that will be added to the Popup element.
     */
    className?: string | Array<string>;
    /**
     * Sets the width of the popup container. By default, the width of the host element is used.
     */
    width?: string | number;
    /**
     * Sets the height of the popup container. By default, the height is 200px.
     */
    height?: string | number;
    /**
     * Defines the container to which the Popup will be appended.
     * Defaults to [`body`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body).
     */
    appendTo?: HTMLElement;
}
import { FilterDescriptor } from './filterDescriptor';
/**
 * @hidden
 */
export interface EventData {
    type: string;
    filter?: FilterDescriptor;
    page?: Page;
    suggestion?: Suggestion;
}
/**
 * Represents the `Suggestion` object of the AutoComplete.
 */
export interface Suggestion {
    /**
     * Represents the typed text of the user.
     */
    readonly userInput: string;
    /**
     * Represents the suggested text without the user input.
     */
    readonly value: string;
}
/**
 * @hidden
 */
export interface InternalState {
    data: DropDownStateBase;
    events: Array<EventData>;
    syntheticEvent: React.MouseEvent<HTMLElement> | React.FocusEvent<HTMLElement> | React.ChangeEvent<HTMLInputElement> | React.FormEvent<HTMLInputElement> | React.KeyboardEvent<HTMLElement> | undefined;
}
/**
 * @hidden
 */
export interface DropDownStateBase {
    /**
     * Input element text of the Component.
     */
    text?: string;
    value?: any;
    focused?: boolean;
    opened?: boolean;
}
/**
 * @hidden
 */
export declare enum ActiveDescendant {
    PopupList = 0,
    TagsList = 1
}
