/// <reference types="react" />
import DropDownList from './DropDownList';
import { FilterChangeEvent, ChangeEvent, OpenEvent, CloseEvent, FocusEvent, BlurEvent, PageChangeEvent } from './../common/events';
import { VirtualizationSettings, DropDownsPopupSettings } from '../common/settings';
import { ListItemProps } from '../common/ListItem';
import { FormComponentProps } from '@progress/kendo-react-common';
/**
 * Represents the object of the `filterChange` DropDownList event.
 */
export interface DropDownListFilterChangeEvent extends FilterChangeEvent<DropDownList> {
}
/**
 * Represents the object of the `change` DropDownList event.
 */
export interface DropDownListChangeEvent extends ChangeEvent<DropDownList> {
}
/**
 * Represents the object of the `open` DropDownList event.
 */
export interface DropDownListOpenEvent extends OpenEvent<DropDownList> {
}
/**
 * Represents the object of the `close` DropDownList event.
 */
export interface DropDownListCloseEvent extends CloseEvent<DropDownList> {
}
/**
 * Represents the object of the `focus` DropDownList event.
 */
export interface DropDownListFocusEvent extends FocusEvent<DropDownList> {
}
/**
 * Represents the object of the `blur` DropDownList event.
 */
export interface DropDownListBlurEvent extends BlurEvent<DropDownList> {
}
/**
 * Represents the object of the `pageChange` DropDownList event.
 */
export interface DropDownListPageChangeEvent extends PageChangeEvent<DropDownList> {
}
/**
 * Represents the props of the [KendoReact DropDownList component]({% slug overview_dropdownlist %}).
 */
export interface DropDownListProps extends FormComponentProps {
    /**
     * Sets the data of the DropDownList ([see example]({% slug binding_dropdownlist %})).
     */
    data?: any[];
    /**
     * Sets the text of the default empty item. The type of the defined value has to match the data type.
     */
    defaultItem?: any;
    /**
     * Sets the delay before an item search is performed. When filtration is disabled, use this option.
     */
    delay?: number;
    /**
     * Enables a case-insensitive search. When filtering is disabled, use this option.
     */
    ignoreCase?: boolean;
    /**
     * Sets the opened and closed state of the DropDownList.
     */
    opened?: boolean;
    /**
     * The styles that are applied to the DropDownList.
     */
    style?: React.CSSProperties;
    /**
     * Sets the value of the DropDownList ([see example]({% slug binding_dropdownlist %})). It can either be of the primitive (string, numbers) or of the complex (objects) type.
     */
    value?: any;
    /**
     * Sets the default value of the DropDownList ([see example]({% slug defaultitem_dropdownlist %})). Similar to the native `select` HTML element.
     */
    defaultValue?: any;
    /**
     * Sets additional classes to the DropDownList.
     */
    className?: string;
    /**
     * Sets CSS classes to the expand `icon` DOM element.
     */
    iconClassName?: string;
    /**
     * Sets the disabled state of the DropDownList.
     */
    disabled?: boolean;
    /**
     * Represents the `dir` HTML attribute.
     */
    dir?: string;
    /**
     * Enables the filtering functionality of the DropDownList ([more information and examples]({% slug filtering_dropdownlist %})).
     */
    filterable?: boolean;
    /**
     * Sets the value of filtering input. Useful for making the filtering input a [controlled component](https://reactjs.org/docs/forms.html#controlled-components).
     */
    filter?: string;
    /**
     * Sets the loading state of the DropDownList.
     */
    loading?: boolean;
    /**
     * Specifies the `tabIndex` of the DropDownList.
     */
    tabIndex?: number;
    /**
     * Specifies the `accessKey` of the DropDownList.
     */
    accessKey?: string;
    /**
     * Sets the data item field that represents the item text ([see example]({% slug defaultitem_dropdownlist %})). If the data contains only primitive values, do not define it.
     */
    textField?: string;
    /**
     * Sets the key for comparing the data items of the DropDownList. If `dataItemKey` is not set, the DropDownList compares the items by reference ([see example]({% slug binding_dropdownlist %}#toc-datasets-of-objects)).
     */
    dataItemKey?: string;
    /**
     * Represents a callback function, which returns the value for submitting. The returned value will be rendered in an `option` of a hidden [`select`](https://reactjs.org/docs/forms.html#the-select-tag) element.
     *
     * @example
     * ```jsx-no-run
     * class App extends React.Component {
     *    render() {
     *       return (
     *          <form>
     *              <DropDownList
     *                  data={[ { text: "Austria", id: 1 } , { text: "Belarus", id: 2 } ]}
     *                  valueMap={value => value && value.id}
     *              />
     *              <button type="submit">Submit</button>
     *          </form>
     *       );
     *    }
     * }
     * ReactDOM.render(<App />, document.querySelector('my-app'));
     * ```
     */
    valueMap?: (value: any) => any;
    /**
     * Renders a floating label for the DropDownList.
     */
    label?: string;
    /**
     * Specifies the id of the component.
     */
    id?: string;
    /**
     * Identifies the element(s) which will describe the component, similar to [HTML aria-describedby attribute](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute).
     * For example these elements could contain error or hint message.
     */
    ariaDescribedBy?: string;
    /**
     * Identifies the element(s) which will label the component.
     */
    ariaLabelledBy?: string;
    /**
     * Configures the popup of the DropDownList.
     */
    popupSettings?: DropDownsPopupSettings;
    /**
     * Configures the virtual scrolling of the DropDownList ([see example]({% slug virtualization_dropdownlist %})).
     */
    virtual?: VirtualizationSettings;
    /**
     * If set, the DropDownList will use it to get the focused item index.
     *
     * Default functionality returns the first item which starts with the input text.
     *
     * @example
     * ```jsx-no-run
     * const focusedItemIndex = (data, inputText, textField) => {
     *     let text = inputText.toLowerCase();
     *     return data.findIndex(item =>
     *         String(textField ? item[textField] : item).toLowerCase().includes(text));
     * };
     *
     * <DropDownList focusedItemIndex={focusedItemIndex} />
     * ```
     */
    focusedItemIndex?: (data: any, inputText: string, textField?: string) => number;
    /**
     * Fires each time the popup of the DropDownList is about to open.
     */
    onOpen?: (event: DropDownListOpenEvent) => void;
    /**
     * Fires each time the popup of the DropDownList is about to close.
     */
    onClose?: (event: DropDownListCloseEvent) => void;
    /**
     * Fires each time the user focuses the DropDownList.
     */
    onFocus?: (event: DropDownListFocusEvent) => void;
    /**
     * Fires each time the DropDownList gets blurred.
     */
    onBlur?: (event: DropDownListBlurEvent) => void;
    /**
     * Fires each time the value of the DropDownList is about to change ([see examples]({% slug binding_dropdownlist %})).
     */
    onChange?: (event: DropDownListChangeEvent) => void;
    /**
     * Fires each time the user types in the filter input. You can filter the source based on the passed filtration value.
     */
    onFilterChange?: (event: DropDownListFilterChangeEvent) => void;
    /**
     * Fires when both the virtual scrolling of the DropDownList is enabled and the component requires data for another page ([see example]({% slug virtualization_dropdownlist %})).
     */
    onPageChange?: (event: DropDownListPageChangeEvent) => void;
    /**
     * Fires when a DropDownList item is about to be rendered ([see example]({% slug customrendering_dropdownlist %}#toc-items)). Used to override the default appearance of the list items.
     */
    itemRender?: (li: React.ReactElement<HTMLLIElement>, itemProps: ListItemProps) => React.ReactNode;
    /**
     * Fires when the element which renders the value is about to be rendered ([see example]({% slug customrendering_dropdownlist %}#toc-values)). Used to override the default appearance of the element.
     */
    valueRender?: (element: React.ReactElement<HTMLSpanElement>, value: any) => React.ReactNode;
    /**
     * Fires when the element which indicates no data in the popup is about to be rendered ([see example]({% slug customrendering_dropdownlist %}#toc-no-data)). Used to override the default appearance of the element.
     */
    listNoDataRender?: (element: React.ReactElement<HTMLDivElement>) => React.ReactNode;
    /**
     * Sets the header component of the DropDownList ([see example]({% slug customrendering_dropdownlist %}#toc-headers-and-footers)).
     */
    header?: React.ReactNode;
    /**
     * Sets the footer component of the DropDownList ([see example]({% slug customrendering_dropdownlist %}#toc-headers-and-footers)).
     */
    footer?: React.ReactNode;
    /**
     * Specifies the `name` property of the `select` DOM element.
     */
    name?: string;
}
