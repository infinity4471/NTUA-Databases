"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var DropDownBase_1 = require("../common/DropDownBase");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_react_labels_1 = require("@progress/kendo-react-labels");
var utils_1 = require("../common/utils");
var SearchBar_1 = require("../common/SearchBar");
var ListContainer_1 = require("../common/ListContainer");
var List_1 = require("../common/List");
var VALIDATION_MESSAGE = 'Please enter a valid value!';
/**
 * Represents the [KendoReact ComboBox component]({% slug overview_combobox %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *    combobox = null;
 *    render() {
 *       return (
 *          <div>
 *              <ComboBox
 *                  data={[ "Albania", "Andorra", "Austria", "Belarus" ]}
 *                  ref={component => this.combobox = component}
 *              />
 *              <button onClick={() => alert(this.combobox.value)}>alert value</button>
 *          </div>
 *       );
 *    }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
var ComboBox = /** @class */ (function (_super) {
    __extends(ComboBox, _super);
    function ComboBox() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * @hidden
         */
        _this.state = {};
        _this.base = new DropDownBase_1.default(_this);
        _this._inputId = kendo_react_common_1.guid();
        _this._suggested = '';
        /**
         * @hidden
         */
        _this.focus = function () {
            if (_this._input) {
                _this._input.focus();
            }
        };
        /**
         * @hidden
         */
        _this.handleItemSelect = function (index, state) {
            var _a = _this.props, _b = _a.data, data = _b === void 0 ? [] : _b, virtual = _a.virtual, dataItemKey = _a.dataItemKey;
            var skip = virtual ? virtual.skip : 0;
            var item = data[index - skip];
            var newSelected = !utils_1.areSame(item, _this.value, dataItemKey);
            _this.triggerOnChange(item, state);
            if (_this.state.text !== undefined) {
                state.data.text = undefined;
            }
            if (newSelected) {
                _this.base.triggerPageChangeCornerItems(item, state);
            }
        };
        _this.toggleBtnClick = function (event) {
            var state = _this.base.initState();
            state.syntheticEvent = event;
            _this.base.togglePopup(state);
            _this.applyState(state);
        };
        _this.handleItemClick = function (index, event) {
            _this.base.handleItemClick(index, event);
            _this._valueDuringOnChange = undefined;
        };
        _this.handleBlur = function (event) {
            if (_this.state.focused) {
                var state = _this.base.initState();
                state.data.focused = false;
                state.events.push({ type: 'onBlur' });
                state.syntheticEvent = event;
                _this.applyValueOnRejectSuggestions(event.currentTarget.value, state);
            }
        };
        _this.onInputKeyDown = function (event) {
            var keyCode = event.keyCode;
            var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;
            var state = _this.base.initState();
            state.syntheticEvent = event;
            if (!event.altKey && (keyCode === kendo_react_common_1.Keys.up || keyCode === kendo_react_common_1.Keys.down)) {
                event.preventDefault();
                _this.onNavigate(state, keyCode);
                _this.applyState(state);
                return;
            }
            var togglePopup = function () {
                event.preventDefault();
                _this.base.togglePopup(state);
                _this.applyState(state);
            };
            if (opened) {
                if (event.altKey && keyCode === kendo_react_common_1.Keys.up) {
                    togglePopup();
                }
                else if (keyCode === kendo_react_common_1.Keys.enter) {
                    event.preventDefault();
                    _this.applyValueOnEnter(event.currentTarget.value, state);
                }
                else if (keyCode === kendo_react_common_1.Keys.esc) {
                    _this.applyValueOnRejectSuggestions(event.currentTarget.value, state);
                }
            }
            else if (event.altKey && keyCode === kendo_react_common_1.Keys.down) {
                togglePopup();
            }
        };
        _this.inputOnChange = function (event) {
            var state = _this.base.initState();
            state.syntheticEvent = event;
            var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;
            var input = event.currentTarget;
            var value = input.value;
            if (_this.props.suggest) {
                var selectionAtEnd = input.selectionEnd === value.length;
                var prevText = _this.props.filter !== undefined ? _this.props.filter : _this.state.text;
                if (!utils_1.isPresent(prevText)) {
                    prevText = utils_1.getItemValue(_this.value, _this.props.textField) || '';
                }
                var deletedSuggestion = prevText && prevText === value;
                var deleting = prevText && prevText.length > value.length;
                if (deletedSuggestion || deleting || !selectionAtEnd) {
                    _this._suggested = '';
                }
                else {
                    _this.suggestValue(value);
                }
            }
            if (_this.props.filter === undefined) {
                state.data.text = value;
            }
            if (_this.state.focusedItem !== undefined) {
                state.data.focusedItem = undefined;
            }
            if (!opened) {
                _this.base.togglePopup(state);
            }
            _this.base.filterChanged(value, state);
            _this.applyState(state);
        };
        _this.clearButtonClick = function (event) {
            var state = _this.base.initState();
            state.syntheticEvent = event;
            event.stopPropagation();
            _this._suggested = '';
            _this.base.filterChanged('', state);
            if (_this.props.filter === undefined && _this.state.text !== undefined) {
                state.data.text = undefined;
            }
            _this.triggerOnChange(null, state);
            var opened = _this.props.opened !== undefined ? _this.props.opened : _this.state.opened;
            if (opened) {
                _this.base.togglePopup(state);
            }
            _this.applyState(state);
        };
        _this.setValidity = function () {
            if (_this._input && _this._input.setCustomValidity) {
                _this._input.setCustomValidity(_this.validity.valid
                    ? ''
                    : _this.props.validationMessage || VALIDATION_MESSAGE);
            }
        };
        return _this;
    }
    Object.defineProperty(ComboBox.prototype, "element", {
        /**
         * @hidden
         */
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComboBox.prototype, "value", {
        /**
         * The value of the ComboBox.
         */
        get: function () {
            if (this._valueDuringOnChange !== undefined) {
                return this._valueDuringOnChange;
            }
            else if (this.props.value !== undefined) {
                return this.props.value;
            }
            else if (this.state.value !== undefined) {
                return this.state.value;
            }
            else if (this.props.defaultValue !== undefined) {
                return this.props.defaultValue;
            }
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComboBox.prototype, "index", {
        /**
         * The index of the selected item.
         */
        get: function () {
            var _a = this.props, _b = _a.data, data = _b === void 0 ? [] : _b, dataItemKey = _a.dataItemKey;
            var value = this.value;
            // TO DO: deprecate it!
            return data.findIndex(function (i) { return utils_1.areSame(i, value, dataItemKey); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComboBox.prototype, "name", {
        /**
         * Gets the `name` property of the ComboBox.
         */
        get: function () {
            return this.props.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComboBox.prototype, "validity", {
        /**
         * Represents the validity state into which the component is set.
         */
        get: function () {
            // remove the undefined check when this is fixed:
            // https://github.com/telerik/kendo-react-private/issues/252
            var customError = this.props.validationMessage !== undefined;
            var isValid = (!this.required
                || (this.value !== null && this.value !== '' && this.value !== undefined));
            var valid = this.props.valid !== undefined ? this.props.valid : isValid;
            return {
                customError: customError,
                valid: valid,
                valueMissing: this.value === null
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComboBox.prototype, "validityStyles", {
        get: function () {
            return this.props.validityStyles !== undefined
                ? this.props.validityStyles
                : ComboBox.defaultProps.validityStyles;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ComboBox.prototype, "required", {
        /**
         * @hidden
         */
        get: function () {
            return this.props.required !== undefined
                ? this.props.required
                : ComboBox.defaultProps.required;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    ComboBox.prototype.componentDidUpdate = function (prevProps, prevState) {
        var _a = this.props, _b = _a.data, data = _b === void 0 ? [] : _b, dataItemKey = _a.dataItemKey, virtual = _a.virtual;
        var prevTotal = prevProps.virtual ? prevProps.virtual.total : 0;
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var prevOpened = prevProps.opened !== undefined ? prevProps.opened : prevState.opened;
        var opening = !prevOpened && opened;
        var selectedItem = this.value;
        this._valueOnDidUpdate = selectedItem;
        if (virtual && virtual.total !== prevTotal) {
            this.base.vs.calcScrollElementHeight();
            this.base.vs.reset();
        }
        else {
            var prevSelectedItem = prevProps.value !== undefined ? prevProps.value : prevState.value;
            var selectedItemIndex = data.findIndex(function (i) { return utils_1.areSame(i, selectedItem, dataItemKey); });
            var selectedItemChanged = !utils_1.areSame(prevSelectedItem, selectedItem, dataItemKey);
            if (opening && virtual) {
                this.base.scrollToVirtualItem(virtual, selectedItemIndex);
            }
            else if (opening && !virtual) {
                this.base.scrollToItem(selectedItemIndex);
            }
            else if (opened && prevOpened && selectedItem && selectedItemChanged) {
                this.base.scrollToItem(selectedItemIndex);
            }
        }
        if (opening && this._input) {
            this._input.focus();
        }
        this.setValidity();
    };
    /**
     * @hidden
     */
    ComboBox.prototype.componentDidMount = function () {
        this.base.didMount();
        this.setValidity();
    };
    /**
     * @hidden
     */
    ComboBox.prototype.render = function () {
        var _this = this;
        var _a = this.props, dir = _a.dir, disabled = _a.disabled, _b = _a.clearButton, clearButton = _b === void 0 ? ComboBox.defaultProps.clearButton : _b, label = _a.label, textField = _a.textField, className = _a.className, style = _a.style, loading = _a.loading, iconClassName = _a.iconClassName, virtual = _a.virtual;
        var focused = this.state.focused;
        var isValid = !this.validityStyles || this.validity.valid;
        var text = this.props.filter !== undefined ? this.props.filter : this.state.text;
        var selectedItemText = utils_1.getItemValue(this.value, textField);
        var inputText = utils_1.isPresent(text) ? text : selectedItemText;
        var renderClearButton = clearButton && (!!(inputText) || utils_1.isPresent(this.value));
        var base = this.base;
        var vs = base.vs;
        var id = this.props.id || this._inputId;
        vs.enabled = virtual !== undefined;
        if (virtual !== undefined) {
            vs.skip = virtual.skip;
            vs.total = virtual.total;
            vs.pageSize = virtual.pageSize;
        }
        var combobox = (React.createElement("span", { className: kendo_react_common_1.classNames('k-widget k-combobox k-header', {
                'k-combobox-clearable': clearButton,
                'k-state-invalid': !isValid
            }, className), ref: function (element) { return _this._element = element; }, style: !label
                ? style
                : __assign({}, style, { width: undefined }), dir: dir },
            React.createElement("span", { ref: function (wrapper) { return base.wrapper = wrapper; }, className: kendo_react_common_1.classNames('k-dropdown-wrap', {
                    'k-state-default': !disabled,
                    'k-state-disabled': disabled,
                    'k-state-focused': focused && !disabled
                }) },
                this.renderSearchBar(renderClearButton, inputText || '', id),
                React.createElement("span", { className: "k-select", onClick: this.toggleBtnClick, onMouseDown: function (e) { return e.preventDefault(); } },
                    React.createElement("span", { className: kendo_react_common_1.classNames('k-icon', iconClassName, {
                            'k-i-arrow-s': !loading && !iconClassName,
                            'k-i-loading': loading && !iconClassName
                        }) }))),
            this.renderListContainer()));
        return label
            ? (React.createElement(kendo_react_labels_1.FloatingLabel, { label: label, editorId: id, editorValue: inputText, editorValid: isValid, editorDisabled: disabled, style: { width: style ? style.width : undefined }, children: combobox }))
            : combobox;
    };
    /**
     * @hidden
     */
    ComboBox.prototype.onNavigate = function (state, keyCode) {
        var _a = this.props, _b = _a.data, data = _b === void 0 ? [] : _b, _c = _a.virtual, virtual = _c === void 0 ? { skip: 0 } : _c;
        var text = this.props.filter ? this.props.filter : this.state.text;
        var focusedIndex = this.getFocusedIndex();
        var vs = this.base.vs;
        var value = this.value;
        this._suggested = '';
        if (focusedIndex !== -1 && !utils_1.isPresent(value)) {
            this.handleItemSelect(focusedIndex, state);
        }
        else if (text === '') {
            this.handleItemSelect(0, state);
        }
        else {
            var currentIndex = virtual.skip + focusedIndex;
            var newIndex = this.base.navigation.navigate({
                keyCode: keyCode,
                current: currentIndex,
                max: (vs.enabled ? vs.total : data.length) - 1,
                min: 0
            });
            if (newIndex !== undefined) {
                this.handleItemSelect(newIndex, state);
            }
        }
    };
    ComboBox.prototype.applyValueOnEnter = function (value, state) {
        var _a;
        var _b = this.props, _c = _b.data, data = _c === void 0 ? [] : _c, textField = _b.textField, allowCustom = _b.allowCustom;
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var currentValueText = utils_1.getItemValue(this.value, textField);
        var valueIndex = currentValueText === value ?
            this.index : utils_1.getItemIndexByText(data, value, textField);
        var itemSelected = valueIndex !== -1;
        var newSelected = undefined;
        this._suggested = '';
        if (itemSelected) { // typed text match item from list
            newSelected = data[valueIndex];
        }
        else {
            if (allowCustom) { // any custom text not in list
                newSelected = textField !== undefined ? (_a = {}, _a[textField] = value, _a) : value;
            }
            else {
                return this.selectFocusedItem(value, state);
            }
        }
        this.triggerOnChange(newSelected, state);
        if (opened) {
            this.base.togglePopup(state);
        }
        if (this.props.filter === undefined && this.state.text !== undefined) {
            state.data.text = undefined;
        }
        this.applyState(state);
    };
    ComboBox.prototype.applyValueOnRejectSuggestions = function (text, state) {
        var _a;
        var _b = this.props, _c = _b.data, data = _c === void 0 ? [] : _c, textField = _b.textField, allowCustom = _b.allowCustom;
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var valueItemText = utils_1.getItemValue(this.value, textField);
        this._suggested = '';
        if (text === valueItemText || (text === '' && !utils_1.isPresent(valueItemText))) {
            if (opened) {
                this.base.togglePopup(state);
            }
            return this.applyState(state);
        }
        var valueIndex = utils_1.getItemIndexByText(data, text, textField, true);
        var itemSelected = valueIndex !== -1;
        var newSelected = null;
        if (itemSelected) {
            newSelected = data[valueIndex];
        }
        else if (allowCustom) {
            newSelected = text ? (textField ? (_a = {}, _a[textField] = text, _a) : text) : null;
        }
        this.triggerOnChange(newSelected, state);
        if (this.state.text !== undefined) {
            state.data.text = undefined;
            this.base.filterChanged('', state);
        }
        if (opened) {
            this.base.togglePopup(state);
        }
        this.applyState(state);
    };
    ComboBox.prototype.selectFocusedItem = function (text, state) {
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var _a = this.props, _b = _a.data, data = _b === void 0 ? [] : _b, textField = _a.textField, _c = _a.virtual, virtual = _c === void 0 ? { skip: 0 } : _c, _d = _a.focusedItemIndex, focusedItemIndex = _d === void 0 ? utils_1.itemIndexStartsWith : _d;
        var skip = virtual.skip;
        var focusedIndex = (text === '' && skip === 0) ? 0 :
            focusedItemIndex(data, text, textField);
        if (focusedIndex !== -1) {
            this.handleItemSelect(focusedIndex + skip, state);
        }
        else {
            this.triggerOnChange(null, state);
            if (this.state.text !== undefined) {
                state.data.text = undefined;
            }
        }
        if (opened) {
            this.base.togglePopup(state);
        }
        return this.applyState(state);
    };
    ComboBox.prototype.renderListContainer = function () {
        var base = this.base;
        var _a = this.props, dir = _a.dir, header = _a.header, footer = _a.footer;
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var popupSettings = base.getPopupSettings();
        var popupWidth = popupSettings.width !== undefined ? popupSettings.width : base.popupWidth;
        return (React.createElement(ListContainer_1.default, { onMouseDown: function (e) { return e.preventDefault(); }, width: popupWidth, popupSettings: {
                animate: popupSettings.animate,
                anchor: this.element || undefined,
                show: opened,
                className: kendo_react_common_1.classNames('k-list-container k-reset', popupSettings.className),
                appendTo: popupSettings.appendTo
            }, dir: dir !== undefined ? dir : this.base.dirCalculated },
            header,
            base.renderScrollWrapper([
                this.renderList(),
                base.renderScrollElement()
            ]),
            footer));
    };
    ComboBox.prototype.renderList = function () {
        var _this = this;
        var base = this.base;
        var _a = this.props, textField = _a.textField, dataItemKey = _a.dataItemKey, listNoDataRender = _a.listNoDataRender, itemRender = _a.itemRender, _b = _a.data, data = _b === void 0 ? [] : _b, _c = _a.virtual, virtual = _c === void 0 ? { skip: 0 } : _c;
        var popupSettings = base.getPopupSettings();
        var vs = base.vs;
        var skip = virtual.skip;
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var translate = "translateY(" + vs.translate + "px)";
        var focusedIndex = opened ? this.getFocusedIndex() : undefined;
        var text = this.props.filter !== undefined ? this.props.filter : this.state.text;
        var selectedItemText = utils_1.getItemValue(this.value, textField);
        var value = utils_1.isPresent(text) && text !== selectedItemText ? null : this.value;
        return (React.createElement(List_1.default, { id: base.listBoxId, show: opened, data: data, focusedIndex: focusedIndex, value: value, textField: textField, valueField: dataItemKey, optionsGuid: base.guid, listRef: function (list) { return vs.list = _this.base.list = list; }, wrapperStyle: !vs.enabled ?
                { maxHeight: popupSettings.height } : { float: 'left', width: '100%' }, wrapperCssClass: !vs.enabled ? 'k-list-scroller' : undefined, listStyle: vs.enabled ?
                { transform: translate } : undefined, key: "listkey", skip: skip, onClick: this.handleItemClick, itemRender: itemRender, noDataRender: listNoDataRender }));
    };
    ComboBox.prototype.renderSearchBar = function (clearButton, text, id) {
        var _this = this;
        var _a = this.props, placeholder = _a.placeholder, tabIndex = _a.tabIndex, disabled = _a.disabled, _b = _a.data, data = _b === void 0 ? [] : _b, dataItemKey = _a.dataItemKey, _c = _a.virtual, virtual = _c === void 0 ? { skip: 0 } : _c;
        var opened = this.props.opened !== undefined ? this.props.opened : this.state.opened;
        var value = this.value;
        var selectedIndex = Math.max(0, data.findIndex(function (i) { return utils_1.areSame(i, value, dataItemKey); }));
        if (this._suggested && !utils_1.areSame(this._valueOnDidUpdate, value, dataItemKey)) {
            this._suggested = '';
        }
        return (React.createElement(SearchBar_1.default, { id: id, placeholder: placeholder, tabIndex: tabIndex || undefined, accessKey: this.props.accessKey, value: text + this._suggested, suggestedText: this._suggested, ref: function (el) { return _this._input = el && el.input; }, onKeyDown: this.onInputKeyDown, onChange: this.inputOnChange, onFocus: this.base.handleFocus, onBlur: this.handleBlur, disabled: disabled, expanded: opened, owns: this.base.listBoxId, activedescendant: this.base.guid + '-' + (selectedIndex + virtual.skip), clearButton: clearButton, clearButtonClick: this.clearButtonClick, ariaLabelledBy: this.props.ariaLabelledBy, ariaDescribedBy: this.props.ariaDescribedBy }));
    };
    ComboBox.prototype.triggerOnChange = function (item, state) {
        var value = this.value;
        if ((!utils_1.isPresent(value) && !utils_1.isPresent(item)) || utils_1.areSame(value, item, this.props.dataItemKey)) {
            return;
        }
        if (this.props.value === undefined) {
            state.data.value = item;
        }
        this._valueDuringOnChange = item;
        state.events.push({ type: 'onChange' });
    };
    ComboBox.prototype.getFocusedIndex = function () {
        var value = this.value;
        var _a = this.props, _b = _a.data, data = _b === void 0 ? [] : _b, textField = _a.textField, dataItemKey = _a.dataItemKey, _c = _a.virtual, virtual = _c === void 0 ? { skip: 0 } : _c, _d = _a.focusedItemIndex, focusedItemIndex = _d === void 0 ? utils_1.itemIndexStartsWith : _d;
        var text = this.props.filter ? this.props.filter : this.state.text;
        if (utils_1.isPresent(value) && text === undefined) {
            return data.findIndex(function (i) { return utils_1.areSame(i, value, dataItemKey); });
        }
        else if (text) {
            return focusedItemIndex(data, text, textField);
        }
        else {
            return virtual.skip === 0 ? 0 : -1;
        }
    };
    ComboBox.prototype.suggestValue = function (value) {
        var _a = this.props, data = _a.data, textField = _a.textField;
        this._suggested = utils_1.suggestValue(value, data, textField);
    };
    ComboBox.prototype.applyState = function (state) {
        this.base.applyState(state);
        this._valueDuringOnChange = undefined;
    };
    /**
     * @hidden
     */
    ComboBox.propTypes = __assign({}, DropDownBase_1.default.propTypes, { dataItemKey: PropTypes.string, suggest: PropTypes.bool, placeholder: PropTypes.string, allowCustom: PropTypes.bool, clearButton: PropTypes.bool, iconClassName: PropTypes.string, validationMessage: PropTypes.string, required: PropTypes.bool, id: PropTypes.string, ariaLabelledBy: PropTypes.string, ariaDescribedBy: PropTypes.string });
    /**
     * @hidden
     */
    ComboBox.defaultProps = __assign({}, DropDownBase_1.default.defaultProps, { allowCustom: false, clearButton: true, required: false });
    return ComboBox;
}(React.Component));
exports.default = ComboBox;
//# sourceMappingURL=ComboBox.js.map