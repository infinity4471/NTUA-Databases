import * as React from 'react';
import * as PropTypes from 'prop-types';
import { ComboBoxProps } from './ComboBoxProps';
import { DropDownStateBase, InternalState } from './../common/settings';
import DropDownBase from '../common/DropDownBase';
import { FormComponent, FormComponentValidity } from '@progress/kendo-react-common';
/**
 * @hidden
 */
export interface ComboBoxState extends DropDownStateBase {
    suggestedText?: string;
    focusedItem?: any;
}
/**
 * @hidden
 */
export interface ComboInternalState extends InternalState {
    data: ComboBoxState;
}
/**
 * Represents the [KendoReact ComboBox component]({% slug overview_combobox %}).
 *
 * @example
 * ```jsx
 * class App extends React.Component {
 *    combobox = null;
 *    render() {
 *       return (
 *          <div>
 *              <ComboBox
 *                  data={[ "Albania", "Andorra", "Austria", "Belarus" ]}
 *                  ref={component => this.combobox = component}
 *              />
 *              <button onClick={() => alert(this.combobox.value)}>alert value</button>
 *          </div>
 *       );
 *    }
 * }
 * ReactDOM.render(<App />, document.querySelector('my-app'));
 * ```
 */
export default class ComboBox extends React.Component<ComboBoxProps, ComboBoxState> implements FormComponent {
    /**
     * @hidden
     */
    static propTypes: {
        dataItemKey: PropTypes.Requireable<string>;
        suggest: PropTypes.Requireable<boolean>;
        placeholder: PropTypes.Requireable<string>;
        allowCustom: PropTypes.Requireable<boolean>;
        clearButton: PropTypes.Requireable<boolean>;
        iconClassName: PropTypes.Requireable<string>;
        validationMessage: PropTypes.Requireable<string>;
        required: PropTypes.Requireable<boolean>;
        id: PropTypes.Requireable<string>;
        ariaLabelledBy: PropTypes.Requireable<string>;
        ariaDescribedBy: PropTypes.Requireable<string>;
        value: PropTypes.Requireable<any>;
        defaultValue: PropTypes.Requireable<any>;
        filterable: PropTypes.Requireable<boolean>;
        filter: PropTypes.Requireable<string>;
        virtual: PropTypes.Requireable<PropTypes.InferProps<{
            pageSize: PropTypes.Validator<number>;
            skip: PropTypes.Validator<number>;
            total: PropTypes.Validator<number>;
        }>>;
        onFilterChange: PropTypes.Requireable<(...args: any[]) => any>;
        onPageChange: PropTypes.Requireable<(...args: any[]) => any>;
        opened: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        dir: PropTypes.Requireable<string>;
        tabIndex: PropTypes.Requireable<number>;
        accessKey: PropTypes.Requireable<string>;
        data: PropTypes.Requireable<any[]>;
        textField: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        label: PropTypes.Requireable<string>;
        loading: PropTypes.Requireable<boolean>;
        popupSettings: PropTypes.Requireable<PropTypes.InferProps<{
            animate: PropTypes.Requireable<boolean | PropTypes.InferProps<{
                openDuration: PropTypes.Requireable<number>;
                closeDuration: PropTypes.Requireable<number>;
            }>>;
            width: PropTypes.Requireable<string | number>;
            height: PropTypes.Requireable<string | number>;
        }>>;
        onOpen: PropTypes.Requireable<(...args: any[]) => any>;
        onClose: PropTypes.Requireable<(...args: any[]) => any>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        itemRender: PropTypes.Requireable<(...args: any[]) => any>;
        listNoDataRender: PropTypes.Requireable<(...args: any[]) => any>;
        focusedItemIndex: PropTypes.Requireable<(...args: any[]) => any>;
        header: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        footer: PropTypes.Requireable<PropTypes.ReactNodeLike>; /**
         * @hidden
         */
    };
    /**
     * @hidden
     */
    static defaultProps: {
        allowCustom: boolean;
        clearButton: boolean;
        required: boolean;
        popupSettings: {
            animate: boolean;
            height: string;
        };
        validityStyles: boolean;
    };
    /**
     * @hidden
     */
    readonly state: ComboBoxState;
    protected readonly base: DropDownBase;
    private _element;
    private _inputId;
    private _valueDuringOnChange;
    private _valueOnDidUpdate;
    private _suggested;
    private _input;
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * @hidden
     */
    readonly element: HTMLSpanElement | null;
    /**
     * The value of the ComboBox.
     */
    readonly value: any;
    /**
     * The index of the selected item.
     */
    readonly index: number;
    /**
     * Gets the `name` property of the ComboBox.
     */
    readonly name: string | undefined;
    /**
     * Represents the validity state into which the component is set.
     */
    readonly validity: FormComponentValidity;
    protected readonly validityStyles: boolean;
    /**
     * @hidden
     */
    protected readonly required: boolean;
    /**
     * @hidden
     */
    componentDidUpdate(prevProps: ComboBoxProps, prevState: ComboBoxState): void;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    /**
     * @hidden
     */
    handleItemSelect: (index: number, state: ComboInternalState) => void;
    /**
     * @hidden
     */
    onNavigate(state: InternalState, keyCode: number): void;
    private toggleBtnClick;
    private applyValueOnEnter;
    private applyValueOnRejectSuggestions;
    private selectFocusedItem;
    private renderListContainer;
    private renderList;
    private renderSearchBar;
    private handleItemClick;
    private handleBlur;
    private onInputKeyDown;
    private inputOnChange;
    private clearButtonClick;
    private triggerOnChange;
    private getFocusedIndex;
    private suggestValue;
    private applyState;
    private setValidity;
}
