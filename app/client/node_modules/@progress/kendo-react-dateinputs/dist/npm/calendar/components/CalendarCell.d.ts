import * as React from 'react';
import { CellContext, CalendarViewEnum } from '../models';
/**
 * The props which will be received by the custom cell of the [Calendar]({% slug api_dateinputs_calendarprops %}#toc-cell) and the [MultiViewCalendar]({% slug api_dateinputs_multiviewcalendarprops %}#toc-cell).
 */
export interface CalendarCellProps extends CellContext {
    className?: string;
    style?: React.CSSProperties;
    isDisabled?: boolean;
    view?: CalendarViewEnum;
    onClick?: (value: Date, event?: React.MouseEvent<any>) => void;
    onMouseEnter?: (value: Date, event?: React.MouseEvent<any>) => void;
    onMouseLeave?: (value: Date, event?: React.MouseEvent<any>) => void;
    [aria: string]: any;
}
/**
 * The `CalendarCell` component is internally used for rendering the items in the current view. Also be used as a custom `cell` of the [Calendar]({% slug api_dateinputs_calendarprops %}#toc-cell) and the [MultiViewCalendar]({% slug api_dateinputs_multiviewcalendarprops %}#toc-cell).
 *
 * * [Customizing the cells inside the Calendar view]({% slug custom_rendering_calendar %}#toc-cells-inside-the-view)
 * * [Customizing the cells inside the MultiViewCalendar view]({% slug custom_rendering_multiviewcalendar %}#toc-cells-inside-the-view)
 */
export declare class CalendarCell extends React.Component<CalendarCellProps> {
    /**
     * @hidden
     */
    shouldComponentUpdate(nextProps: CalendarCellProps): boolean;
    /**
     * @return
     * Returns a `<td />` element with a `<span className="k-link" />` inside to apply the styles. The text inside is the [`formattedValue`]({% slug api_dateinputs_calendarcellprops %}#toc-formattedvalue) of the `cell`.
     */
    render(): JSX.Element;
    private handleClick;
    private handleMouseEnter;
    private handleMouseLeave;
}
