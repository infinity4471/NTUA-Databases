import * as React from 'react';
import * as PropTypes from 'prop-types';
import { IntlService } from '@progress/kendo-react-intl';
import { DateInputSettings, DateInputFormatPlaceholder } from './models';
import { FormComponent, FormComponentProps, FormComponentValidity } from '@progress/kendo-react-common';
/**
 * The arguments for the `change` event of the DateInput. The generic argument sets the target type of the event. Defaults to `DateInput`.
 */
export interface DateInputChangeEvent<T = DateInput> {
    nativeEvent?: any;
    syntheticEvent: React.SyntheticEvent<any>;
    value: Date | null;
    target: T;
}
/**
 * Represents the props of the [KendoReact DateInput component]({% slug overview_dateinput %}). The generic argument is passed to the `onChange` property and is used as a target in the [`DateInputChangeEvent`]({% slug api_dateinputs_dateinputchangeevent %}) interface.
 */
export interface DateInputProps<T = DateInput> extends FormComponentProps, DateInputSettings {
    /** @hidden */
    _ref?: (instance: {
        element: HTMLInputElement | null;
    }) => void;
    /**
     * Sets a class of the DateInput DOM element.
     */
    className?: string;
    /**
     * Specifies the value of the DateInput.
     */
    value?: Date | null;
    /**
     * Specifies the default value of the DateInput. If `value` is not set, this value will correspond to the initial value.
     */
    defaultValue?: Date | null;
    /**
     * Determines the event handler that will be fired when the user edits the value ([see example]({% slug dateranges_dateinput %}).
     */
    onChange?: (event: DateInputChangeEvent<T>) => void;
}
export declare class DateInput extends React.Component<DateInputProps, {}> implements FormComponent {
    /**
     * @hidden
     */
    static propTypes: {
        value: PropTypes.Requireable<Date>;
        format: PropTypes.Requireable<string | PropTypes.InferProps<{
            skeleton: PropTypes.Requireable<string>;
            pattern: PropTypes.Requireable<string>;
            date: PropTypes.Requireable<string>;
            time: PropTypes.Requireable<string>;
            datetime: PropTypes.Requireable<string>;
            era: PropTypes.Requireable<string>;
            year: PropTypes.Requireable<string>;
            month: PropTypes.Requireable<string>;
            day: PropTypes.Requireable<string>;
            weekday: PropTypes.Requireable<string>;
            hour: PropTypes.Requireable<string>;
            hour12: PropTypes.Requireable<boolean>;
            minute: PropTypes.Requireable<string>;
            second: PropTypes.Requireable<string>;
            timeZoneName: PropTypes.Requireable<string>;
        }>>;
        formatPlaceholder: PropTypes.Requireable<string | PropTypes.InferProps<{
            year: PropTypes.Requireable<string>;
            month: PropTypes.Requireable<string>;
            day: PropTypes.Requireable<string>;
            hour: PropTypes.Requireable<string>;
            minute: PropTypes.Requireable<string>;
            second: PropTypes.Requireable<string>;
        }>>;
        width: PropTypes.Requireable<string | number>;
        tabIndex: PropTypes.Requireable<number>;
        title: PropTypes.Requireable<string>;
        steps: PropTypes.Requireable<PropTypes.InferProps<{
            year: PropTypes.Requireable<number>;
            month: PropTypes.Requireable<number>;
            day: PropTypes.Requireable<number>;
            hour: PropTypes.Requireable<number>;
            minute: PropTypes.Requireable<number>;
            second: PropTypes.Requireable<number>;
        }>>;
        min: PropTypes.Requireable<Date>;
        max: PropTypes.Requireable<Date>;
        disabled: PropTypes.Requireable<boolean>;
        spinners: PropTypes.Requireable<boolean>;
        name: PropTypes.Requireable<string>;
        dir: PropTypes.Requireable<string>;
        label: PropTypes.Requireable<string>;
        id: PropTypes.Requireable<string>;
        ariaLabelledBy: PropTypes.Requireable<string>;
        ariaDescribedBy: PropTypes.Requireable<string>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        validationMessage: PropTypes.Requireable<string>;
        required: PropTypes.Requireable<boolean>;
        validate: PropTypes.Requireable<boolean>;
        valid: PropTypes.Requireable<boolean>;
    };
    /**
     * @hidden
     */
    static defaultProps: {
        format: string;
        formatPlaceholder: DateInputFormatPlaceholder;
        spinners: boolean;
        disabled: boolean;
        max: Date;
        min: Date;
        minTime: Date;
        maxTime: Date;
        required: boolean;
        validityStyles: boolean;
        validationMessage: string;
    };
    private kendoDate;
    private currentFormat;
    private valueDuringOnChange;
    private _element;
    private _wrapper;
    private _inputId;
    private _lastSelectedSymbol;
    /**
     * @hidden
     */
    componentDidMount(): void;
    /**
     * @hidden
     */
    componentDidUpdate(): void;
    /**
     * @hidden
     */
    render(): any;
    /**
     * Gets the value of the DateInput.
     */
    readonly value: Date | null;
    /**
     * Gets the `name` property of the DateInput.
     */
    readonly name: string | undefined;
    protected readonly min: Date;
    protected readonly max: Date;
    /**
     * Represents the validity state into which the DateInput is set.
     */
    readonly validity: FormComponentValidity;
    /**
     * Gets the element of the DateInput.
     *
     * @return - An `HTMLInputElement`.
     *
     * @example
     * ```jsx
     * class App extends React.Component {
     *     constructor(props) {
     *         super(props);
     *     }
     *     element = null;
     *     render() {
     *         return (
     *             <div>
     *                 <DateInput
     *                     ref={(dateInput) =>
     *                         this.element = dateInput ? dateInput.element : null}
     *                 />
     *                 <button onClick={() => console.log(this.element)}>console.log the element</button>
     *             </div>
     *         );
     *     }
     * }
     *
     * ReactDOM.render(
     *     <App />,
     *     document.getElementsByTagName('my-app')[0]
     * );
     * ```
     */
    readonly element: HTMLInputElement | null;
    /**
     * @hidden
     */
    focus: () => void;
    /**
     * @hidden
     */
    protected readonly validityStyles: boolean;
    /**
     * @hidden
     */
    protected readonly required: boolean;
    /**
     * @hidden
     */
    protected readonly wrapper: HTMLSpanElement | null;
    /**
     * @hidden
     */
    intl(): IntlService;
    /**
     * @hidden
     */
    protected setValidity: () => void;
    private spinnersMouseDown;
    private elementChange;
    private elementClick;
    private wheel;
    private increasePart;
    private decreasePart;
    private elementKeyDown;
    private elementOnFocus;
    private elementOnBlur;
    private readonly selection;
    private setSelection;
    private triggerChange;
    private selectionBySymbol;
    private selectionByIndex;
    private switchDateSegment;
    private modifyDateSegmentValue;
}
