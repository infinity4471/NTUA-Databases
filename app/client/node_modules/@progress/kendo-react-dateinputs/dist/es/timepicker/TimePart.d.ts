import * as React from 'react';
import * as PropTypes from 'prop-types';
import { DateFormatPart, IntlService, DateFormatOptions } from '@progress/kendo-react-intl';
import { TimePickerIncrementalSteps } from './models/IncrementalSteps';
/**
 * @hidden
 */
export declare enum Direction {
    Left = 0,
    Right = 1
}
/**
 * @hidden
 */
export interface TimePartChangeEvent {
    nativeEvent: any;
    syntheticEvent: React.SyntheticEvent<any>;
    value: Date;
    target: TimePart;
}
/**
 * @hidden
 */
export interface TimePartProps {
    disabled?: boolean;
    format?: string | DateFormatOptions;
    max?: Date;
    min?: Date;
    nowButton?: boolean;
    onChange?: any;
    steps?: TimePickerIncrementalSteps;
    smoothScroll?: boolean;
    tabIndex?: number;
    value?: Date | null;
    boundRange?: boolean;
    onNowClick?: any;
    className?: string;
    onMount?: (value: Date) => void;
}
/**
 * @hidden
 */
export interface TimePartState {
    activeListIndex: number;
}
/**
 * @hidden
 */
export declare class TimePart extends React.Component<TimePartProps, TimePartState> {
    static propTypes: {
        cancelButton: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        format: PropTypes.Requireable<string | PropTypes.InferProps<{
            skeleton: PropTypes.Requireable<string>;
            pattern: PropTypes.Requireable<string>;
            date: PropTypes.Requireable<string>;
            time: PropTypes.Requireable<string>;
            datetime: PropTypes.Requireable<string>;
            era: PropTypes.Requireable<string>;
            year: PropTypes.Requireable<string>;
            month: PropTypes.Requireable<string>;
            day: PropTypes.Requireable<string>;
            weekday: PropTypes.Requireable<string>;
            hour: PropTypes.Requireable<string>;
            hour12: PropTypes.Requireable<boolean>;
            minute: PropTypes.Requireable<string>;
            second: PropTypes.Requireable<string>;
            timeZoneName: PropTypes.Requireable<string>;
        }>>;
        max: PropTypes.Requireable<Date>;
        min: PropTypes.Requireable<Date>;
        nowButton: PropTypes.Requireable<boolean>;
        steps: PropTypes.Requireable<PropTypes.InferProps<{
            hour: PropTypes.Requireable<number>;
            minute: PropTypes.Requireable<number>;
            second: PropTypes.Requireable<number>;
        }>>;
        smoothScroll: PropTypes.Requireable<boolean>;
        tabIndex: PropTypes.Requireable<number>;
        value: PropTypes.Requireable<Date>;
    };
    static defaultProps: {
        value: any;
        disabled: boolean;
        nowButton: boolean;
        cancelButton: boolean;
        format: string;
        min: Date;
        max: Date;
        steps: {};
        boundRange: boolean;
    };
    readonly state: TimePartState;
    private _element;
    private _nowButton;
    private dateFormatParts;
    private timeLists;
    private snapTime;
    private nextTickId;
    constructor(props: TimePartProps);
    /**
     * @hidden
     */
    readonly element: HTMLSpanElement | null;
    readonly value: Date;
    protected readonly intl: IntlService;
    private readonly min;
    private readonly max;
    private readonly steps;
    protected readonly boundRange: boolean;
    /**
     * @hidden
     */
    componentWillUnmount(): void;
    componentDidMount(): void;
    /**
     * @hidden
     */
    render(): JSX.Element;
    focus: (args?: any) => void;
    protected timeFormatReducer: (acc: string, current: DateFormatPart) => string;
    protected timeFormatFilter: (part: DateFormatPart, index: number, all: DateFormatPart[]) => boolean;
    protected nextTick(f: () => any): void;
    protected hasActiveButton(): boolean;
    protected focusList: (dir: Direction) => void;
    protected listReducer: (state: any, list: any, idx: any, all: any) => any;
    protected showNowButton: () => boolean;
    protected hasSteps(): boolean;
    private handleKeyDown;
    private handleListBlur;
    private handleListFocus;
    private handleChange;
}
