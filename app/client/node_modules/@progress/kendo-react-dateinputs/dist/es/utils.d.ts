import { SelectionRange } from './calendar/models/SelectionRange';
import { CalendarViewEnum } from './calendar/models/CalendarViewEnum';
/**
 * @hidden
 */
export declare const isEqualRange: (initial: SelectionRange, updated: SelectionRange) => boolean;
/**
 * @hidden
 */
export declare const viewInRange: (candidate: CalendarViewEnum, min?: CalendarViewEnum, max?: CalendarViewEnum) => CalendarViewEnum;
/**
 * @hidden
 */
export declare const MIDNIGHT_DATE: Date;
/**
 * @hidden
 */
export declare const MIN_DATE: Date;
/**
 * @hidden
 */
export declare const MAX_DATE: Date;
/**
 * @hidden
 */
export declare const MIN_TIME: Date;
/**
 * @hidden
 */
export declare const MAX_TIME: Date;
/**
 * @hidden
 */
export declare const isValidRange: (min: Date, max: Date) => boolean;
/**
 * @hidden
 */
export declare const setTime: (origin: Date, candidate: Date) => Date;
/**
 * @hidden
 */
export declare const getToday: () => Date;
/**
 * @hidden
 */
export declare const isInRange: (candidate: Date, min: Date, max: Date) => boolean;
/**
 * @hidden
 */
export declare const isInDateRange: (candidate: Date, min: Date, max: Date) => boolean;
/**
 * @hidden
 */
export declare const isInSelectionRange: (value: Date, selectionRange?: SelectionRange) => boolean;
/**
 * @hidden
 */
export declare const range: (start: number, end: number, step?: number) => number[];
/**
 * @hidden
 */
export declare const shiftWeekNames: (names: string[], offset: number) => string[];
/**
 * @hidden
 */
export declare const dateInRange: (candidate: Date, min: Date, max: Date) => Date;
/**
 * @hidden
 */
export declare const domContainerFactory: (type: string) => (children: string | HTMLElement[], classes?: string, styles?: any) => HTMLElement;
